openapi: "3.0.0"
info:
  version: 1.0.0
  title: Nhost Auth
  description: Service to Authenticate
  termsOfService: http://swagger.io/terms/
  contact:
    name: Nhost's Support
    email: support@nhost.io
    url: https://nhost.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /healthz:
    head:
      description: Health check
      tags:
        - health
      responses:
        '200':
          description: >-
            Service is healthy

    get:
      description: Health check
      tags:
        - health
      responses:
        '200':
          description: >-
            Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /.well-known/jwks.json:
    get:
      description: Get public keys for JWT verification in JWK Set format
      tags:
        - keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSet'
          description: >-
            The public keys in JWK Set format

  /pat:
    post:
      description: Create a Personal Access Token (PAT)
      tags:
        - pat
      security:
        - BearerAuthElevated: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePATRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePATResponse'
          description: >-
            Successfully created a Personal Access Token

  /token:
    post:
      description: Refresh the JWT access token
      tags:
        - token
        - access-token
        - jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: >-
            Successfully refreshed the JWT access token

  /signin/email-password:
    post:
      description: Sign in with email and password
      tags:
        - signin
        - email-and-password

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInEmailPasswordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInEmailPasswordResponse'
          description: >-
            Successfully signed in. Null session means TOTP challenge is needed

  /signin/passwordless/email:
    post:
      description: >-
        Sign in with magic link sent to user's email. If the user doesn't exist, it will be created.
        The options object is optional and can be used to configure the user's when signing up a
        new user. It is ignored if the user already exists.
      tags:
        - signin
        - signup
        - passwordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPasswordlessEmailRequest'
        required: true
      responses:
        '200':
          description: >-
            Email link sent to user's email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /signin/otp/email:
    post:
      description: >-
        Sign in with a one time password sent to user's email. If the user doesn't exist, it will
        be created. The options object is optional and can be used to configure the user's when
        signing up a new user. It is ignored if the user already exists.
      tags:
        - signin
        - signup
        - otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInOTPEmailRequest'
        required: true
      responses:
        '200':
          description: >-
            OTP sent to user's email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /signin/otp/email/verify:
    post:
      description: >-
        Verify OTP and return a session if validation is successful
      tags:
        - signin
        - signup
        - otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInOTPEmailVerifyRequest'
        required: true
      responses:
        '200':
          description: >-
            Magic link sent to user's email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInOTPEmailVerifyResponse'

  /signin/pat:
    post:
      description: >-
        Sign in with Personal Access Token (PAT)
      tags:
        - signin
        - pat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInPATRequest'
        required: true
      responses:
        '200':
          description: >-
            Successfully signed in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'

  /signin/idtoken:
    post:
      description: Sign in with in an id token
      tags:
        - signin
        - idtoken
        - apple
        - google
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInIdTokenRequest'
        required: true
      responses:
        '200':
          description: >-
            Successfully signed in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'

  /signup/email-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpEmailPasswordRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Successfully registered. Null session means email verification is
            pending
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            Signup mechanism is disabled
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: >-
            User with given email already exists

      description: Signup with email and password
      tags:
        - signup
        - email-and-password

  /signup/webauthn:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpWebauthnRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpWebauthnResponse'
          description: >-
            Challenge sent

      description: Signup with webauthn
      tags:
        - signup
        - webauthn

  /signup/webauthn/verify:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpWebauthnVerifyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionPayload'
          description: >-
            Sign up successful

      description: Verify webauthn signup
      tags:
        - signup
        - webauthn
        - verify

  /link/idtoken:
    post:
      description: Link a user account with the provider's account using an id token
      tags:
        - link
        - idtoken
      security:
        - BearerAuthElevated: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkIdTokenRequest'
        required: true
      responses:
        '200':
          description: >-
            Identity linked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/deanonymize:
    post:
      description: >-
        Deanonymize an anonymous user in adding missing email or email+password, depending on the chosen authentication method. Will send a confirmation email if the server is configured to do so
      tags:
        - anonymous
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDeanonymizeRequest'
      responses:
        '200':
          description: >-
            User deanonymized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/email/change:
    post:
      description: Change user email
      tags:
        - user
        - email
      security:
        - BearerAuthElevated: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailChangeRequest'
      responses:
        '200':
          description: >-
            Email change requested. An email with a verification link has been sent to the new address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/email/send-verification-email:
    post:
      description: Send email verification email
      tags:
        - user
        - email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailSendVerificationEmailRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'
          description: >-
            Email verification email sent successfully

  /user/password:
    post:
      description: >-
        Change user password. The user must be authenticated or provide a ticket
      tags:
        - user
        - password
      security:
        - BearerAuthElevated: []
        - {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordRequest'
      responses:
        '200':
          description: >-
            Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /user/password/reset:
    post:
      description: >-
        Request a password reset. An email with a verification link will be sent to the user's address
      tags:
        - user
        - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordResetRequest'
      responses:
        '200':
          description: >-
            Password reset requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OKResponse'

  /verify:
    get:
      description: >-
        Verify tickets created by email verification, email passwordless authentication (magic link),
        or password reset
      tags:
        - verify
      parameters:
        - $ref: '#/components/parameters/TicketQuery'
        - $ref: '#/components/parameters/TicketTypeQuery'
        - $ref: '#/components/parameters/RedirectToQuery'
      responses:
        302:
          description: Redirect response
          headers:
            Location:
              $ref: '#/components/headers/RedirectLocation'
          content: {}

  /version:
    get:
      description: Get version
      tags:
        - version
      responses:
        '200':
          description: >-
            Version of the service
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  version:
                    type: string
                    example: 0.0.0-dev
                required:
                  - version

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    BearerAuthElevated:
      type: http
      scheme: bearer
      description: >-
        This endpoint may require elevated permissions, depending on server settings.
        For details see https://docs.nhost.io/guides/auth/elevated-permissions

  schemas:
    JWKSet:
      type: object
      additionalProperties: false
      properties:
        keys:
          type: array
          items:
            $ref: "#/components/schemas/JWK"
      required:
        - keys

    JWK:
      type: object
      additionalProperties: false
      properties:
        alg:
          type: string
        e:
          type: string
        kid:
          type: string
        kty:
          type: string
        n:
          type: string
        use:
          type: string
      required:
        - alg
        - e
        - kid
        - kty
        - n
        - use

    RefreshTokenRequest:
      type: object
      additionalProperties: false
      properties:
        refreshToken:
          description: Refresh Token
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - refreshToken

    CreatePATRequest:
      type: object
      additionalProperties: false
      properties:
        expiresAt:
          description: Expiration date of the PAT
          format: date-time
          type: string

        metadata:
          type: object
          additionalProperties: true
          example:
            name: my-pat
            used-by: my-app-cli
          properties: {}
      required:
        - expiresAt

    CreatePATResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          description: ID of the PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        personalAccessToken:
          description: PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - id
        - personalAccessToken

    ErrorResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          description: HTTP status error code
          type: integer
        message:
          description: Human friendly error message
          type: string
        error:
          description: Error code that identifies the application error
          type: string
          enum:
            - default-role-must-be-in-allowed-roles
            - disabled-endpoint
            - disabled-user
            - email-already-in-use
            - email-already-verified
            - forbidden-anonymous
            - internal-server-error
            - invalid-email-password
            - invalid-request
            - locale-not-allowed
            - password-too-short
            - password-in-hibp-database
            - redirectTo-not-allowed
            - role-not-allowed
            - signup-disabled
            - unverified-user
            - user-not-anonymous
            - invalid-pat
            - invalid-refresh-token
            - invalid-ticket
      required:
        - status
        - message
        - error

    SignInEmailPasswordResponse:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: "#/components/schemas/Session"
        mfa:
          $ref: "#/components/schemas/MFAChallengePayload"

    MFAChallengePayload:
      type: object
      additionalProperties: false
      properties:
        ticket:
          type: string
      required:
        - ticket

    SessionPayload:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: "#/components/schemas/Session"

    Session:
      type: object
      additionalProperties: false
      properties:
        accessToken:
          type: string
        accessTokenExpiresIn:
          type: integer
          format: int64
        refreshTokenId:
          description: Refresh token id
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        refreshToken:
          description: Refresh token during authentication or when refreshing the JWT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - accessTokenExpiresIn
        - refreshToken
        - refreshTokenId

    SignInPATRequest:
      type: object
      additionalProperties: false
      properties:
        personalAccessToken:
          description: PAT
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
      required:
        - personalAccessToken

    User:
      type: object
      additionalProperties: false
      properties:
        avatarUrl:
          type: string
        createdAt:
          format: date-time
          type: string
        defaultRole:
          example: user
          type: string
        displayName:
          example: John Smith
          type: string
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        emailVerified:
          type: boolean
        id:
          description: Id of the user
          example: 2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24
          pattern: \b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b
          type: string
        isAnonymous:
          type: boolean
        locale:
          description: A two-characters locale
          example: en
          maxLength: 2
          minLength: 2
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            firstName: John
            lastName: Smith
          properties: {}
        phoneNumber:
          type: string
        phoneNumberVerified:
          type: boolean
        roles:
          example:
            - me
            - user
          type: array
          items:
            type: string
      required:
        - avatarUrl
        - createdAt
        - defaultRole
        - displayName
        - emailVerified
        - id
        - isAnonymous
        - locale
        - metadata
        - phoneNumber
        - phoneNumberVerified
        - roles

    UserDeanonymizeRequest:
      type: object
      additionalProperties: false
      properties:
        signInMethod:
          description: Which sign-in method to use
          type: string
          enum:
            - email-password
            - passwordless
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
        connection:
          deprecated: true
          description: Deprecated, will be ignored
          type: string
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - signInMethod
        - email

    UserEmailChangeRequest:
      type: object
      additionalProperties: false
      properties:
        newEmail:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/OptionsRedirectTo"
      required:
        - newEmail

    UserEmailSendVerificationEmailRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/OptionsRedirectTo"
      required:
        - email

    UserPasswordResetRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/OptionsRedirectTo"
      required:
        - email

    UserPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        newPassword:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
        ticket:
          type: string
          pattern: ^passwordReset\:.*$
          description: Ticket to reset the password, required if the user is not authenticated
      required:
        - newPassword

    OKResponse:
      type: string
      additionalProperties: false
      enum:
        - OK

    OptionsRedirectTo:
      type: object
      additionalProperties: false
      properties:
        redirectTo:
          type: string
          format: uri
          example: https://my-app.com/catch-redirection

    SignInEmailPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
      required:
        - email
        - password

    SignInPasswordlessEmailRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - email

    SignInOTPEmailRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - email

    SignInOTPEmailVerifyRequest:
      type: object
      additionalProperties: false
      properties:
        otp:
          type: string
          description: One time password
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
      required:
        - otp
        - email

    SignInOTPEmailVerifyResponse:
      type: object
      additionalProperties: false
      properties:
        session:
          $ref: "#/components/schemas/Session"

    SignUpEmailPasswordRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        password:
          description: A password of minimum 3 characters
          example: Str0ngPassw#ord-94|%
          minLength: 3
          maxLength: 50
          type: string
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - email
        - password

    SignUpOptions:
      type: object
      additionalProperties: false
      properties:
        allowedRoles:
          example:
            - me
            - user
          type: array
          items:
            type: string
        defaultRole:
          example: user
          type: string
        displayName:
          example: John Smith
          type: string
          # This is a very permissive regex that allows most characters
          # but forbids characters like `&`, '/' and ':' that could be used for XSS
          pattern: ^[\p{L}\p{N}\p{S} ,.'-]+$
          maxLength: 32
        locale:
          description: A two-characters locale
          example: en
          maxLength: 2
          minLength: 2
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            firstName: John
            lastName: Smith
          properties: {}
        redirectTo:
          type: string
          format: uri
          example: https://my-app.com/catch-redirection

    SignUpWebauthnRequest:
      type: object
      additionalProperties: false
      properties:
        email:
          description: A valid email
          example: john.smith@nhost.io
          format: email
          type: string
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - email

    SignUpWebauthnResponse:
      type: object
      x-go-type-import:
        name: protocol
        path: github.com/go-webauthn/webauthn/protocol
      x-go-type: protocol.PublicKeyCredentialCreationOptions

    SignUpWebauthnVerifyRequest:
      type: object
      additionalProperties: true
      properties:
        credential:
          type: object
          additionalProperties: true
          x-go-type-import:
            name: protocol
            path: github.com/go-webauthn/webauthn/protocol
          x-go-type: protocol.CredentialCreationResponse
        options:
          type: object
          additionalProperties: false
          allOf:
            - $ref: "#/components/schemas/SignUpOptions"
            - type: object
              additionalProperties: false
              properties:
                nickname:
                  type: string

    SignInIdTokenRequest:
      type: object
      additionalProperties: false
      properties:
        provider:
          $ref: "#/components/schemas/Provider"
        idToken:
          type: string
          description: Apple ID token
        nonce:
          type: string
          description: Nonce used during sign in process
        options:
          $ref: "#/components/schemas/SignUpOptions"
      required:
        - provider
        - idToken

    Provider:
      type: string
      additionalProperties: false
      enum:
        - apple
        - google

    LinkIdTokenRequest:
      type: object
      additionalProperties: false
      properties:
        provider:
          $ref: "#/components/schemas/Provider"
        idToken:
          type: string
          description: Apple ID token
        nonce:
          type: string
          description: Nonce used during sign in process
      required:
        - provider
        - idToken

  parameters:
    TicketQuery:
      in: query
      name: ticket
      description: Ticket
      required: true
      schema:
        type: string
        description: Ticket
        example: "verifyEmail:xxxxxxxx"

    TicketTypeQuery:
      in: query
      name: type
      description: Type of the ticket. Deprecated, no longer used
      required: false
      schema:
        type: string
        enum:
          - emailVerify
          - emailConfirmChange
          - signinPasswordless
          - passwordReset
        description: Type of the ticket
        example: email-verification
      deprecated: true

    RedirectToQuery:
      in: query
      name: redirectTo
      description: Target URL for the redirect
      required: true
      schema:
        description: Target URL for the redirect
        type: string
        format: uri
        example: https://my-app.com/catch-redirection

  headers:
    RedirectLocation:
      description: URL to redirect to
      schema:
        type: string
        format: uri
      required: true
