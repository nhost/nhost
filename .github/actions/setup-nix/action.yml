name: 'Setup Nix'
description: 'Install Nix and setup caching for Nhost projects'
inputs:
  NAME:
    description: 'Project name for cache key'
    required: true
  NIX_CACHE_PUB_KEY:
    description: 'Nix cache public key'
    required: true
  GITHUB_TOKEN:
    description: 'GitHub token for Nix access'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        install_url: "https://releases.nixos.org/nix/nix-2.28.4/install"
        install_options: "--no-daemon"
        extra_nix_config: |
          experimental-features = nix-command flakes
          sandbox = false
          access-tokens = github.com=${{ inputs.GITHUB_TOKEN }}
          substituters = https://cache.nixos.org/?priority=40 s3://nhost-nix-cache?region=eu-central-1&priority=50
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= ${{ inputs.NIX_CACHE_PUB_KEY }}
          keep-env-derivations = true
          keep-outputs = true

    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        primary-key: nix-${{ inputs.NAME }}-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        restore-prefixes-first-match: nix-${{ inputs.NAME }}-${{ runner.os }}-${{ runner.arch }}}-
        gc-max-store-size-linux: 2G
        purge: true
        purge-prefixes: nix-${{ inputs.NAME }}-
        purge-created: 0
        purge-last-accessed: 0
        purge-primary-key: never

    # - name: "Verify if nixops is pre-built"
    #   id: verify-nixops-build
    #   run: |
    #     export drvPath=$(make build-nixops-dry-run)
    #     echo "Derivation path: $drvPath"
    #     nix path-info --store s3://nhost-nix-cache\?region=eu-central-1 $drvPath \
    #       || (echo "Wait until nixops is already built and cached and run again" && exit 1)
    #   if: ${{ inputs.NAME != 'nixops' }}

