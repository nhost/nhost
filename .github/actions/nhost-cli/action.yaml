name: Nhost CLI
description: 'Action to install the Nhost CLI and to run an application'
inputs:
  init:
    description: 'Initialize the application'
    default: 'false'
  start:
    description: "Start the application. If false, the application won't be started"
    default: 'false'
  wait:
    description: 'If starting the application, wait until it is ready'
    default: 'true'
  stop:
    description: 'Stop the application'
    default: 'false'
  path:
    description: 'Path to the application'
    default: '.'
  version:
    description: 'Version of the Nhost CLI'
    default: 'latest'
  dashboard-image:
    description: 'Image of the dashboard'
    default: 'nhost/dashboard:latest'
  config:
    description: 'Values to be injected into nhost/config.yaml'

runs:
  using: 'composite'
  steps:
    - name: Check if Nhost CLI is already installed
      id: check-nhost-cli
      shell: bash
      # TODO check if the version is the same
      run: |
        if [ -z "$(which nhost)" ]
        then
            echo "installed=false" >> $GITHUB_OUTPUT
        else
            echo "installed=true" >> $GITHUB_OUTPUT
        fi
    - name: Install Nhost CLI
      if: ${{ steps.check-nhost-cli.outputs.installed == 'false' }}
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 3
        max_attempts: 10
        command: bash <(curl --silent -L https://raw.githubusercontent.com/nhost/cli/main/get.sh) ${{ inputs.version }}
    - name: Initialize a new project from scratch
      if: ${{ inputs.init == 'true' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        rm -rf ./*
        nhost init
    - name: Set custom configuration
      if: ${{ inputs.config }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: config="${{ inputs.config }}" yq -i '. *= env(config)' nhost/config.yaml
    - name: Start the application
      if: ${{ inputs.start == 'true' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if [ -n "${{ inputs.dashboard-image }}" ]; then
          export NHOST_DASHBOARD_VERSION=${{ inputs.dashboard-image }}
        fi
        if [ -f .secrets.example ]; then
          cp .secrets.example .secrets
        fi
        nhost up
    - name: Log on failure
      if: steps.wait.outcome == 'failure'
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        nhost logs
        exit 1
    - name: Stop the application
      if: ${{ inputs.stop == 'true' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: nhost down
