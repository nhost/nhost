---
on:
  workflow_call:
    inputs:
      NAME:
        type: string
        required: true
      PATH:
        type: string
        required: true
      GIT_REF:
        type: string
        required: false
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      NIX_CACHE_PUB_KEY:
        required: true
      NIX_CACHE_PRIV_KEY:
        required: true
      NHOST_PAT:
        required: false

jobs:
  tests:
    runs-on: blacksmith-2vcpu-ubuntu-2404
    timeout-minutes: 30

    defaults:
      run:
        working-directory: ${{ inputs.PATH }}

    env:
      NHOST_PAT: ${{ secrets.NHOST_PAT }}

    permissions:
      id-token: write
      contents: write
      actions: read

    steps:
    - name: "Check out repository"
      uses: actions/checkout@v5
      with:
        ref: ${{ inputs.GIT_REF }}

    - name: Collect Workflow Telemetry
      uses: catchpoint/workflow-telemetry-action@v2
      with:
        comment_on_pr: false

    - name: Configure aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-nhost-${{ github.event.repository.name }}
        aws-region: eu-central-1

    - uses: cachix/install-nix-action@v31
      with:
        install_url: "https://releases.nixos.org/nix/nix-2.28.4/install"
        install_options: "--no-daemon"
        extra_nix_config: |
          experimental-features = nix-command flakes
          sandbox = false
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          substituters = https://cache.nixos.org/?priority=40 s3://nhost-nix-cache?region=eu-central-1&priority=50
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= ${{ secrets.NIX_CACHE_PUB_KEY }}
          keep-env-derivations = true
          keep-outputs = true

    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        primary-key: nix-${{ inputs.NAME }}-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        restore-prefixes-first-match: nix-${{ inputs.NAME }}-${{ runner.os }}-${{ runner.arch }}}-
        gc-max-store-size-linux: 2G
        purge: true
        purge-prefixes: nix-${{ inputs.NAME }}-
        purge-created: 0
        purge-last-accessed: 0
        purge-primary-key: never

    # - name: "Verify if nixops is pre-built"
    #   id: verify-nixops-build
    #   run: |
    #     export drvPath=$(make build-nixops-dry-run)
    #     echo "Derivation path: $drvPath"
    #     nix path-info --store s3://nhost-nix-cache\?region=eu-central-1 $drvPath \
    #       || (echo "Wait until nixops is already built and cached and run again" && exit 1)
    #   if: ${{ inputs.NAME != 'nixops' }}

    - name: "Verify if we need to build"
      id: verify-build
      run: |
        export drvPath=$(make check-dry-run)
        echo "Derivation path: $drvPath"
        nix path-info --store s3://nhost-nix-cache\?region=eu-central-1 $drvPath \
          && export BUILD_NEEDED=no \
          || export BUILD_NEEDED=yes
        echo BUILD_NEEDED=$BUILD_NEEDED >> $GITHUB_OUTPUT
        echo DERIVATION_PATH=$drvPath >> $GITHUB_OUTPUT

    - name: "Start containters for integration tests"
      run: |
        nix develop .\#${{ inputs.NAME }} -c make dev-env-up
      if: ${{ steps.verify-build.outputs.BUILD_NEEDED == 'yes' }}

    - name: "Run checks"
      run: make check
      if: ${{ steps.verify-build.outputs.BUILD_NEEDED == 'yes' }}

    - name: "Cache build"
      run: |
        nix store sign --key-file <(echo "${{ secrets.NIX_CACHE_PRIV_KEY }}") --all
        find /nix/store -maxdepth 1 -name "*-*" -type d | xargs -n 25 nix copy --to s3://nhost-nix-cache\?region=eu-central-1
      if: always()
