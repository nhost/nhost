---
name: "ci: create release"
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'release(')
    runs-on: blacksmith-2vcpu-ubuntu-2404
    timeout-minutes: 30

    permissions:
      id-token: write
      contents: write
      pull-requests: read
      actions: write

    steps:
    - name: "Check out repository"
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - uses: cachix/install-nix-action@v31
      with:
        install_url: "https://releases.nixos.org/nix/nix-2.28.4/install"
        install_options: "--no-daemon"
        extra_nix_config: |
          experimental-features = nix-command flakes
          sandbox = false
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          substituters = https://cache.nixos.org/?priority=40 s3://nhost-nix-cache?region=eu-central-1&priority=50
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= ${{ secrets.NIX_CACHE_PUB_KEY }}
          keep-env-derivations = true
          keep-outputs = true

    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        primary-key: nix-${{ runner.os }}-${{ runner.arch }}-cliff-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        restore-prefixes-first-match: nix-${{ runner.os }}-${{ runner.arch }}}-cliff-
        gc-max-store-size-linux: 2G
        purge: true
        purge-prefixes: nix-${{ runner.os }}-
        purge-created: 0
        purge-last-accessed: 0
        purge-primary-key: never

    - name: "Extract project and version from PR title"
      id: extract
      run: |
        TITLE="${{ github.event.pull_request.title }}"

        PROJECT=$(echo "${TITLE}" | sed 's/release(\([^)]*\)).*/\1/')
        if [ -z "$PROJECT" ]; then
          echo "Error: Could not extract project name from PR title"
          exit 1
        fi

        VERSION=$(echo "${TITLE}" | sed 's/.*release([^)]*):\W*\(.*\).*/\1/')
        if [ -z "$VERSION" ]; then
          echo "Error: Could not extract version from PR title"
          exit 1
        fi

        echo "project=$PROJECT" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$PROJECT@$VERSION" >> $GITHUB_OUTPUT

    - name: "Get unreleased changelog content"
      id: changelog
      run: |
        cd ${{ steps.extract.outputs.project }}
        CHANGELOG_CONTENT=$(nix develop .#cliff -c make changelog-get-unreleased)
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: "Create GitHub Release"
      run: |
        gh release create "${{ steps.extract.outputs.tag }}" \
          --title "${{ steps.extract.outputs.tag }}" \
          --notes "${{ steps.changelog.outputs.content }}" \
          --target main
      env:
        # We need to use a PAT because GITHUB_TOKEN does not trigger workflows on releases
        GH_TOKEN: ${{ secrets.GH_PAT }}
