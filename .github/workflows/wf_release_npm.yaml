---
on:
  workflow_call:
    inputs:
      NAME:
        type: string
        required: true
      PATH:
        type: string
        required: true
      VERSION:
        type: string
        required: true
    secrets:
      NPM_TOKEN:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      NIX_CACHE_PUB_KEY:
        required: true
      NIX_CACHE_PRIV_KEY:
        required: true
      DISCORD_WEBHOOK:
        required: false

jobs:
  release:
    runs-on: blacksmith-2vcpu-ubuntu-2404
    timeout-minutes: 30

    defaults:
      run:
        working-directory: ${{ inputs.PATH }}

    permissions:
      id-token: write
      contents: write
      actions: read

    steps:
    - name: "Check out repository"
      uses: actions/checkout@v5

    - name: Configure aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-nhost-${{ github.event.repository.name }}
        aws-region: eu-central-1

    - uses: cachix/install-nix-action@v31
      with:
        install_url: "https://releases.nixos.org/nix/nix-2.28.4/install"
        install_options: "--no-daemon"
        extra_nix_config: |
          experimental-features = nix-command flakes
          sandbox = false
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          substituters = https://cache.nixos.org/?priority=40 s3://nhost-nix-cache?region=eu-central-1&priority=50
          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= ${{ secrets.NIX_CACHE_PUB_KEY }}
          keep-env-derivations = true
          keep-outputs = true

    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        primary-key: nix-${{ inputs.NAME }}-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        restore-prefixes-first-match: nix-${{ inputs.NAME }}-${{ runner.os }}-${{ runner.arch }}}-
        gc-max-store-size-linux: 2G
        purge: true
        purge-prefixes: nix-${{ inputs.NAME }}-
        purge-created: 0
        purge-last-accessed: 0
        purge-primary-key: never

    - name: "Build package"
      run: make build

    - name: "Copy build output"
      run: cp -r result/dist .

    - name: "Set package version"
      run: |
        nix develop .#pnpm -c pnpm version ${{ inputs.VERSION }} --no-git-tag-version

    - name: "Determine npm tag"
      id: npm-tag
      run: |
        if [[ "${{ inputs.VERSION }}" =~ (alpha|beta|dev|rc) ]]; then
          echo "tag=beta" >> $GITHUB_OUTPUT
        else
          echo "tag=latest" >> $GITHUB_OUTPUT
        fi

    - name: "Publish to npm"
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        nix develop .#pnpm -c pnpm publish --tag ${{ steps.npm-tag.outputs.tag }} --no-git-checks

    - name: Send Discord notification
      if: always() && secrets.DISCORD_WEBHOOK != ''
      uses: tsickert/discord-webhook@v7.0.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
        embed-title: "Published ${{ inputs.NAME }}@${{ inputs.VERSION }} to npm"
        embed-description: |
          **Status**: ${{ inputs.success && 'success' || 'failure' }}
          **Triggered by**: ${{ github.actor }}

          **Inputs**:
          - Git Ref: ${{ inputs.git_ref }}
        embed-color: ${{ inputs.success && '5763719' || '15548997' }}
