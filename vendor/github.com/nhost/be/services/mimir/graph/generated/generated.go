// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/nhost/be/services/mimir/model"
	"github.com/nhost/be/tools/cuegraph/types"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	HasAppVisibility func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
	HasRole          func(ctx context.Context, obj any, next graphql.Resolver, role []string) (res any, err error)
}

type ComplexityRoot struct {
	ConfigAI struct {
		AutoEmbeddings func(childComplexity int) int
		Openai         func(childComplexity int) int
		Resources      func(childComplexity int) int
		Version        func(childComplexity int) int
		WebhookSecret  func(childComplexity int) int
	}

	ConfigAIAutoEmbeddings struct {
		SynchPeriodMinutes func(childComplexity int) int
	}

	ConfigAIOpenai struct {
		ApiKey       func(childComplexity int) int
		Organization func(childComplexity int) int
	}

	ConfigAIResources struct {
		Compute func(childComplexity int) int
	}

	ConfigAppConfig struct {
		AppID  func(childComplexity int) int
		Config func(childComplexity int) int
	}

	ConfigAppSecrets struct {
		AppID   func(childComplexity int) int
		Secrets func(childComplexity int) int
	}

	ConfigAppSystemConfig struct {
		AppID        func(childComplexity int) int
		SystemConfig func(childComplexity int) int
	}

	ConfigAuth struct {
		ElevatedPrivileges func(childComplexity int) int
		Method             func(childComplexity int) int
		Misc               func(childComplexity int) int
		RateLimit          func(childComplexity int) int
		Redirections       func(childComplexity int) int
		Resources          func(childComplexity int) int
		Session            func(childComplexity int) int
		SignUp             func(childComplexity int) int
		Totp               func(childComplexity int) int
		User               func(childComplexity int) int
		Version            func(childComplexity int) int
	}

	ConfigAuthElevatedPrivileges struct {
		Mode func(childComplexity int) int
	}

	ConfigAuthMethod struct {
		Anonymous         func(childComplexity int) int
		EmailPassword     func(childComplexity int) int
		EmailPasswordless func(childComplexity int) int
		Oauth             func(childComplexity int) int
		Otp               func(childComplexity int) int
		SmsPasswordless   func(childComplexity int) int
		Webauthn          func(childComplexity int) int
	}

	ConfigAuthMethodAnonymous struct {
		Enabled func(childComplexity int) int
	}

	ConfigAuthMethodEmailPassword struct {
		EmailVerificationRequired func(childComplexity int) int
		HibpEnabled               func(childComplexity int) int
		PasswordMinLength         func(childComplexity int) int
	}

	ConfigAuthMethodEmailPasswordless struct {
		Enabled func(childComplexity int) int
	}

	ConfigAuthMethodOauth struct {
		Apple       func(childComplexity int) int
		Azuread     func(childComplexity int) int
		Bitbucket   func(childComplexity int) int
		Discord     func(childComplexity int) int
		Entraid     func(childComplexity int) int
		Facebook    func(childComplexity int) int
		Github      func(childComplexity int) int
		Gitlab      func(childComplexity int) int
		Google      func(childComplexity int) int
		Linkedin    func(childComplexity int) int
		Spotify     func(childComplexity int) int
		Strava      func(childComplexity int) int
		Twitch      func(childComplexity int) int
		Twitter     func(childComplexity int) int
		Windowslive func(childComplexity int) int
		Workos      func(childComplexity int) int
	}

	ConfigAuthMethodOauthApple struct {
		Audience   func(childComplexity int) int
		ClientId   func(childComplexity int) int
		Enabled    func(childComplexity int) int
		KeyId      func(childComplexity int) int
		PrivateKey func(childComplexity int) int
		Scope      func(childComplexity int) int
		TeamId     func(childComplexity int) int
	}

	ConfigAuthMethodOauthAzuread struct {
		ClientId     func(childComplexity int) int
		ClientSecret func(childComplexity int) int
		Enabled      func(childComplexity int) int
		Tenant       func(childComplexity int) int
	}

	ConfigAuthMethodOauthEntraid struct {
		ClientId     func(childComplexity int) int
		ClientSecret func(childComplexity int) int
		Enabled      func(childComplexity int) int
		Tenant       func(childComplexity int) int
	}

	ConfigAuthMethodOauthTwitter struct {
		ConsumerKey    func(childComplexity int) int
		ConsumerSecret func(childComplexity int) int
		Enabled        func(childComplexity int) int
	}

	ConfigAuthMethodOauthWorkos struct {
		ClientId     func(childComplexity int) int
		ClientSecret func(childComplexity int) int
		Connection   func(childComplexity int) int
		Enabled      func(childComplexity int) int
		Organization func(childComplexity int) int
	}

	ConfigAuthMethodOtp struct {
		Email func(childComplexity int) int
	}

	ConfigAuthMethodOtpEmail struct {
		Enabled func(childComplexity int) int
	}

	ConfigAuthMethodSmsPasswordless struct {
		Enabled func(childComplexity int) int
	}

	ConfigAuthMethodWebauthn struct {
		Attestation  func(childComplexity int) int
		Enabled      func(childComplexity int) int
		RelyingParty func(childComplexity int) int
	}

	ConfigAuthMethodWebauthnAttestation struct {
		Timeout func(childComplexity int) int
	}

	ConfigAuthMethodWebauthnRelyingParty struct {
		Id      func(childComplexity int) int
		Name    func(childComplexity int) int
		Origins func(childComplexity int) int
	}

	ConfigAuthMisc struct {
		ConcealErrors func(childComplexity int) int
	}

	ConfigAuthRateLimit struct {
		BruteForce func(childComplexity int) int
		Emails     func(childComplexity int) int
		Global     func(childComplexity int) int
		Signups    func(childComplexity int) int
		Sms        func(childComplexity int) int
	}

	ConfigAuthRedirections struct {
		AllowedUrls func(childComplexity int) int
		ClientUrl   func(childComplexity int) int
	}

	ConfigAuthSession struct {
		AccessToken  func(childComplexity int) int
		RefreshToken func(childComplexity int) int
	}

	ConfigAuthSessionAccessToken struct {
		CustomClaims func(childComplexity int) int
		ExpiresIn    func(childComplexity int) int
	}

	ConfigAuthSessionRefreshToken struct {
		ExpiresIn func(childComplexity int) int
	}

	ConfigAuthSignUp struct {
		DisableNewUsers func(childComplexity int) int
		Enabled         func(childComplexity int) int
		Turnstile       func(childComplexity int) int
	}

	ConfigAuthSignUpTurnstile struct {
		SecretKey func(childComplexity int) int
	}

	ConfigAuthTotp struct {
		Enabled func(childComplexity int) int
		Issuer  func(childComplexity int) int
	}

	ConfigAuthUser struct {
		Email        func(childComplexity int) int
		EmailDomains func(childComplexity int) int
		Gravatar     func(childComplexity int) int
		Locale       func(childComplexity int) int
		Roles        func(childComplexity int) int
	}

	ConfigAuthUserEmail struct {
		Allowed func(childComplexity int) int
		Blocked func(childComplexity int) int
	}

	ConfigAuthUserEmailDomains struct {
		Allowed func(childComplexity int) int
		Blocked func(childComplexity int) int
	}

	ConfigAuthUserGravatar struct {
		Default func(childComplexity int) int
		Enabled func(childComplexity int) int
		Rating  func(childComplexity int) int
	}

	ConfigAuthUserLocale struct {
		Allowed func(childComplexity int) int
		Default func(childComplexity int) int
	}

	ConfigAuthUserRoles struct {
		Allowed func(childComplexity int) int
		Default func(childComplexity int) int
	}

	ConfigAuthsessionaccessTokenCustomClaims struct {
		Default func(childComplexity int) int
		Key     func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	ConfigAutoscaler struct {
		MaxReplicas func(childComplexity int) int
	}

	ConfigClaimMap struct {
		Claim   func(childComplexity int) int
		Default func(childComplexity int) int
		Path    func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	ConfigComputeResources struct {
		Cpu    func(childComplexity int) int
		Memory func(childComplexity int) int
	}

	ConfigConfig struct {
		Ai            func(childComplexity int) int
		Auth          func(childComplexity int) int
		Functions     func(childComplexity int) int
		Global        func(childComplexity int) int
		Graphql       func(childComplexity int) int
		Hasura        func(childComplexity int) int
		Observability func(childComplexity int) int
		Postgres      func(childComplexity int) int
		Provider      func(childComplexity int) int
		Storage       func(childComplexity int) int
	}

	ConfigEnvironmentVariable struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	ConfigFunctions struct {
		Node      func(childComplexity int) int
		RateLimit func(childComplexity int) int
		Resources func(childComplexity int) int
	}

	ConfigFunctionsNode struct {
		Version func(childComplexity int) int
	}

	ConfigFunctionsResources struct {
		Networking func(childComplexity int) int
	}

	ConfigGlobal struct {
		Environment func(childComplexity int) int
	}

	ConfigGlobalEnvironmentVariable struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	ConfigGrafana struct {
		AdminPassword func(childComplexity int) int
		Alerting      func(childComplexity int) int
		Contacts      func(childComplexity int) int
		Smtp          func(childComplexity int) int
	}

	ConfigGrafanaAlerting struct {
		Enabled func(childComplexity int) int
	}

	ConfigGrafanaContacts struct {
		Discord   func(childComplexity int) int
		Emails    func(childComplexity int) int
		Pagerduty func(childComplexity int) int
		Slack     func(childComplexity int) int
		Webhook   func(childComplexity int) int
	}

	ConfigGrafanaSmtp struct {
		Host     func(childComplexity int) int
		Password func(childComplexity int) int
		Port     func(childComplexity int) int
		Sender   func(childComplexity int) int
		User     func(childComplexity int) int
	}

	ConfigGrafanacontactsDiscord struct {
		AvatarUrl func(childComplexity int) int
		Url       func(childComplexity int) int
	}

	ConfigGrafanacontactsPagerduty struct {
		Class          func(childComplexity int) int
		Component      func(childComplexity int) int
		Group          func(childComplexity int) int
		IntegrationKey func(childComplexity int) int
		Severity       func(childComplexity int) int
	}

	ConfigGrafanacontactsSlack struct {
		EndpointURL    func(childComplexity int) int
		IconEmoji      func(childComplexity int) int
		IconURL        func(childComplexity int) int
		MentionChannel func(childComplexity int) int
		MentionGroups  func(childComplexity int) int
		MentionUsers   func(childComplexity int) int
		Recipient      func(childComplexity int) int
		Token          func(childComplexity int) int
		Url            func(childComplexity int) int
		Username       func(childComplexity int) int
	}

	ConfigGrafanacontactsWebhook struct {
		AuthorizationCredentials func(childComplexity int) int
		AuthorizationScheme      func(childComplexity int) int
		HttpMethod               func(childComplexity int) int
		MaxAlerts                func(childComplexity int) int
		Password                 func(childComplexity int) int
		Url                      func(childComplexity int) int
		Username                 func(childComplexity int) int
	}

	ConfigGraphql struct {
		Security func(childComplexity int) int
	}

	ConfigGraphqlSecurity struct {
		ForbidAminSecret func(childComplexity int) int
		MaxDepthQueries  func(childComplexity int) int
	}

	ConfigHasura struct {
		AdminSecret   func(childComplexity int) int
		AuthHook      func(childComplexity int) int
		Events        func(childComplexity int) int
		JwtSecrets    func(childComplexity int) int
		Logs          func(childComplexity int) int
		RateLimit     func(childComplexity int) int
		Resources     func(childComplexity int) int
		Settings      func(childComplexity int) int
		Version       func(childComplexity int) int
		WebhookSecret func(childComplexity int) int
	}

	ConfigHasuraAuthHook struct {
		Mode            func(childComplexity int) int
		SendRequestBody func(childComplexity int) int
		Url             func(childComplexity int) int
	}

	ConfigHasuraEvents struct {
		HttpPoolSize func(childComplexity int) int
	}

	ConfigHasuraLogs struct {
		Level func(childComplexity int) int
	}

	ConfigHasuraSettings struct {
		CorsDomain                            func(childComplexity int) int
		DevMode                               func(childComplexity int) int
		EnableAllowList                       func(childComplexity int) int
		EnableConsole                         func(childComplexity int) int
		EnableRemoteSchemaPermissions         func(childComplexity int) int
		EnabledAPIs                           func(childComplexity int) int
		InferFunctionPermissions              func(childComplexity int) int
		LiveQueriesMultiplexedRefetchInterval func(childComplexity int) int
		StringifyNumericTypes                 func(childComplexity int) int
	}

	ConfigHealthCheck struct {
		InitialDelaySeconds func(childComplexity int) int
		Port                func(childComplexity int) int
		ProbePeriodSeconds  func(childComplexity int) int
	}

	ConfigIngress struct {
		Fqdn func(childComplexity int) int
		Tls  func(childComplexity int) int
	}

	ConfigIngressTls struct {
		ClientCA func(childComplexity int) int
	}

	ConfigInsertConfigResponse struct {
		Config       func(childComplexity int) int
		Secrets      func(childComplexity int) int
		SystemConfig func(childComplexity int) int
	}

	ConfigJWTSecret struct {
		AllowedSkew         func(childComplexity int) int
		Audience            func(childComplexity int) int
		ClaimsFormat        func(childComplexity int) int
		ClaimsMap           func(childComplexity int) int
		ClaimsNamespace     func(childComplexity int) int
		ClaimsNamespacePath func(childComplexity int) int
		Header              func(childComplexity int) int
		Issuer              func(childComplexity int) int
		JwkUrl              func(childComplexity int) int
		Key                 func(childComplexity int) int
		Kid                 func(childComplexity int) int
		SigningKey          func(childComplexity int) int
		Type                func(childComplexity int) int
	}

	ConfigNetworking struct {
		Ingresses func(childComplexity int) int
	}

	ConfigObservability struct {
		Grafana func(childComplexity int) int
	}

	ConfigPostgres struct {
		Pitr      func(childComplexity int) int
		Resources func(childComplexity int) int
		Settings  func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	ConfigPostgresPitr struct {
		Retention func(childComplexity int) int
	}

	ConfigPostgresResources struct {
		Compute            func(childComplexity int) int
		EnablePublicAccess func(childComplexity int) int
		Replicas           func(childComplexity int) int
		Storage            func(childComplexity int) int
	}

	ConfigPostgresResourcesStorage struct {
		Capacity func(childComplexity int) int
	}

	ConfigPostgresSettings struct {
		ArchiveTimeout                func(childComplexity int) int
		CheckpointCompletionTarget    func(childComplexity int) int
		DefaultStatisticsTarget       func(childComplexity int) int
		EffectiveCacheSize            func(childComplexity int) int
		EffectiveIOConcurrency        func(childComplexity int) int
		HugePages                     func(childComplexity int) int
		Jit                           func(childComplexity int) int
		MaintenanceWorkMem            func(childComplexity int) int
		MaxConnections                func(childComplexity int) int
		MaxParallelMaintenanceWorkers func(childComplexity int) int
		MaxParallelWorkers            func(childComplexity int) int
		MaxParallelWorkersPerGather   func(childComplexity int) int
		MaxReplicationSlots           func(childComplexity int) int
		MaxWalSenders                 func(childComplexity int) int
		MaxWalSize                    func(childComplexity int) int
		MaxWorkerProcesses            func(childComplexity int) int
		MinWalSize                    func(childComplexity int) int
		RandomPageCost                func(childComplexity int) int
		SharedBuffers                 func(childComplexity int) int
		TrackIoTiming                 func(childComplexity int) int
		WalBuffers                    func(childComplexity int) int
		WalLevel                      func(childComplexity int) int
		WorkMem                       func(childComplexity int) int
	}

	ConfigProvider struct {
		Sms  func(childComplexity int) int
		Smtp func(childComplexity int) int
	}

	ConfigRateLimit struct {
		Interval func(childComplexity int) int
		Limit    func(childComplexity int) int
	}

	ConfigResources struct {
		Autoscaler func(childComplexity int) int
		Compute    func(childComplexity int) int
		Networking func(childComplexity int) int
		Replicas   func(childComplexity int) int
	}

	ConfigResourcesCompute struct {
		Cpu    func(childComplexity int) int
		Memory func(childComplexity int) int
	}

	ConfigRunServiceConfig struct {
		Command     func(childComplexity int) int
		Environment func(childComplexity int) int
		HealthCheck func(childComplexity int) int
		Image       func(childComplexity int) int
		Name        func(childComplexity int) int
		Ports       func(childComplexity int) int
		Resources   func(childComplexity int) int
	}

	ConfigRunServiceConfigWithID struct {
		Config    func(childComplexity int) int
		ServiceID func(childComplexity int) int
	}

	ConfigRunServiceImage struct {
		Image           func(childComplexity int) int
		PullCredentials func(childComplexity int) int
	}

	ConfigRunServicePort struct {
		Ingresses func(childComplexity int) int
		Port      func(childComplexity int) int
		Publish   func(childComplexity int) int
		RateLimit func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	ConfigRunServiceResources struct {
		Autoscaler func(childComplexity int) int
		Compute    func(childComplexity int) int
		Replicas   func(childComplexity int) int
		Storage    func(childComplexity int) int
	}

	ConfigRunServiceResourcesStorage struct {
		Capacity func(childComplexity int) int
		Name     func(childComplexity int) int
		Path     func(childComplexity int) int
	}

	ConfigSms struct {
		AccountSid         func(childComplexity int) int
		AuthToken          func(childComplexity int) int
		MessagingServiceId func(childComplexity int) int
		Provider           func(childComplexity int) int
	}

	ConfigSmtp struct {
		Host     func(childComplexity int) int
		Method   func(childComplexity int) int
		Password func(childComplexity int) int
		Port     func(childComplexity int) int
		Secure   func(childComplexity int) int
		Sender   func(childComplexity int) int
		User     func(childComplexity int) int
	}

	ConfigStandardOauthProvider struct {
		ClientId     func(childComplexity int) int
		ClientSecret func(childComplexity int) int
		Enabled      func(childComplexity int) int
	}

	ConfigStandardOauthProviderWithScope struct {
		Audience     func(childComplexity int) int
		ClientId     func(childComplexity int) int
		ClientSecret func(childComplexity int) int
		Enabled      func(childComplexity int) int
		Scope        func(childComplexity int) int
	}

	ConfigStorage struct {
		Antivirus func(childComplexity int) int
		RateLimit func(childComplexity int) int
		Resources func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	ConfigStorageAntivirus struct {
		Server func(childComplexity int) int
	}

	ConfigSystemConfig struct {
		Auth                       func(childComplexity int) int
		Graphql                    func(childComplexity int) int
		PersistentVolumesEncrypted func(childComplexity int) int
		Postgres                   func(childComplexity int) int
	}

	ConfigSystemConfigAuth struct {
		Email func(childComplexity int) int
	}

	ConfigSystemConfigAuthEmail struct {
		Templates func(childComplexity int) int
	}

	ConfigSystemConfigAuthEmailTemplates struct {
		S3Key func(childComplexity int) int
	}

	ConfigSystemConfigGraphql struct {
		FeatureAdvancedGraphql func(childComplexity int) int
	}

	ConfigSystemConfigPostgres struct {
		ConnectionString func(childComplexity int) int
		Database         func(childComplexity int) int
		Disk             func(childComplexity int) int
		Enabled          func(childComplexity int) int
		MajorVersion     func(childComplexity int) int
	}

	ConfigSystemConfigPostgresConnectionString struct {
		Auth    func(childComplexity int) int
		Backup  func(childComplexity int) int
		Hasura  func(childComplexity int) int
		Storage func(childComplexity int) int
	}

	ConfigSystemConfigPostgresDisk struct {
		Iops func(childComplexity int) int
		Tput func(childComplexity int) int
	}

	InsertRunServiceConfigResponse struct {
		Config    func(childComplexity int) int
		ServiceID func(childComplexity int) int
	}

	Mutation struct {
		ChangeDatabaseVersion   func(childComplexity int, appID string, version string, force *bool) int
		DeleteConfig            func(childComplexity int, appID string) int
		DeleteRunServiceConfig  func(childComplexity int, appID string, serviceID string) int
		DeleteSecret            func(childComplexity int, appID string, key string) int
		InsertConfig            func(childComplexity int, appID string, config model.ConfigConfigInsertInput, systemConfig model.ConfigSystemConfigInsertInput, secrets []*model.ConfigEnvironmentVariableInsertInput) int
		InsertRunServiceConfig  func(childComplexity int, appID string, config model.ConfigRunServiceConfigInsertInput) int
		InsertSecret            func(childComplexity int, appID string, secret model.ConfigEnvironmentVariableInsertInput) int
		ReplaceConfig           func(childComplexity int, appID string, config model.ConfigConfigInsertInput) int
		ReplaceConfigRawJSON    func(childComplexity int, appID string, rawJSON string) int
		ReplaceRunServiceConfig func(childComplexity int, appID string, serviceID string, config model.ConfigRunServiceConfigInsertInput) int
		UpdateConfig            func(childComplexity int, appID string, config model.ConfigConfigUpdateInput) int
		UpdateRunServiceConfig  func(childComplexity int, appID string, serviceID string, config model.ConfigRunServiceConfigUpdateInput) int
		UpdateSecret            func(childComplexity int, appID string, secret model.ConfigEnvironmentVariableInsertInput) int
		UpdateSystemConfig      func(childComplexity int, appID string, systemConfig model.ConfigSystemConfigUpdateInput) int
	}

	Query struct {
		AppSecrets              func(childComplexity int, appID string) int
		AppsSecrets             func(childComplexity int) int
		Config                  func(childComplexity int, appID string, resolve bool) int
		ConfigRawJSON           func(childComplexity int, appID string, resolve bool) int
		Configs                 func(childComplexity int, resolve bool, where *model.ConfigConfigComparisonExp) int
		RunServiceConfig        func(childComplexity int, appID string, serviceID string, resolve bool) int
		RunServiceConfigRawJSON func(childComplexity int, appID string, serviceID string, resolve bool) int
		RunServiceConfigs       func(childComplexity int, appID string, resolve bool) int
		RunServiceConfigsAll    func(childComplexity int, resolve bool, where *model.ConfigRunServiceConfigComparisonExp) int
		SystemConfig            func(childComplexity int, appID string) int
		SystemConfigs           func(childComplexity int, where *model.ConfigSystemConfigComparisonExp) int
	}
}

type MutationResolver interface {
	UpdateConfig(ctx context.Context, appID string, config model.ConfigConfigUpdateInput) (*model.ConfigConfig, error)
	ReplaceConfig(ctx context.Context, appID string, config model.ConfigConfigInsertInput) (*model.ConfigConfig, error)
	ReplaceConfigRawJSON(ctx context.Context, appID string, rawJSON string) (string, error)
	InsertConfig(ctx context.Context, appID string, config model.ConfigConfigInsertInput, systemConfig model.ConfigSystemConfigInsertInput, secrets []*model.ConfigEnvironmentVariableInsertInput) (*model.ConfigInsertConfigResponse, error)
	DeleteConfig(ctx context.Context, appID string) (*model.ConfigConfig, error)
	ChangeDatabaseVersion(ctx context.Context, appID string, version string, force *bool) (bool, error)
	InsertSecret(ctx context.Context, appID string, secret model.ConfigEnvironmentVariableInsertInput) (*model.ConfigEnvironmentVariable, error)
	UpdateSecret(ctx context.Context, appID string, secret model.ConfigEnvironmentVariableInsertInput) (*model.ConfigEnvironmentVariable, error)
	DeleteSecret(ctx context.Context, appID string, key string) (*model.ConfigEnvironmentVariable, error)
	UpdateSystemConfig(ctx context.Context, appID string, systemConfig model.ConfigSystemConfigUpdateInput) (*model.ConfigSystemConfig, error)
	InsertRunServiceConfig(ctx context.Context, appID string, config model.ConfigRunServiceConfigInsertInput) (*model.InsertRunServiceConfigResponse, error)
	UpdateRunServiceConfig(ctx context.Context, appID string, serviceID string, config model.ConfigRunServiceConfigUpdateInput) (*model.ConfigRunServiceConfig, error)
	ReplaceRunServiceConfig(ctx context.Context, appID string, serviceID string, config model.ConfigRunServiceConfigInsertInput) (*model.ConfigRunServiceConfig, error)
	DeleteRunServiceConfig(ctx context.Context, appID string, serviceID string) (*model.ConfigRunServiceConfig, error)
}
type QueryResolver interface {
	ConfigRawJSON(ctx context.Context, appID string, resolve bool) (string, error)
	Config(ctx context.Context, appID string, resolve bool) (*model.ConfigConfig, error)
	Configs(ctx context.Context, resolve bool, where *model.ConfigConfigComparisonExp) ([]*model.ConfigAppConfig, error)
	AppSecrets(ctx context.Context, appID string) ([]*model.ConfigEnvironmentVariable, error)
	AppsSecrets(ctx context.Context) ([]*model.ConfigAppSecrets, error)
	SystemConfig(ctx context.Context, appID string) (*model.ConfigSystemConfig, error)
	SystemConfigs(ctx context.Context, where *model.ConfigSystemConfigComparisonExp) ([]*model.ConfigAppSystemConfig, error)
	RunServiceConfigRawJSON(ctx context.Context, appID string, serviceID string, resolve bool) (string, error)
	RunServiceConfig(ctx context.Context, appID string, serviceID string, resolve bool) (*model.ConfigRunServiceConfig, error)
	RunServiceConfigs(ctx context.Context, appID string, resolve bool) ([]*model.ConfigRunServiceConfigWithID, error)
	RunServiceConfigsAll(ctx context.Context, resolve bool, where *model.ConfigRunServiceConfigComparisonExp) ([]*model.ConfigRunServiceConfigWithID, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ConfigAI.autoEmbeddings":
		if e.complexity.ConfigAI.AutoEmbeddings == nil {
			break
		}

		return e.complexity.ConfigAI.AutoEmbeddings(childComplexity), true

	case "ConfigAI.openai":
		if e.complexity.ConfigAI.Openai == nil {
			break
		}

		return e.complexity.ConfigAI.Openai(childComplexity), true

	case "ConfigAI.resources":
		if e.complexity.ConfigAI.Resources == nil {
			break
		}

		return e.complexity.ConfigAI.Resources(childComplexity), true

	case "ConfigAI.version":
		if e.complexity.ConfigAI.Version == nil {
			break
		}

		return e.complexity.ConfigAI.Version(childComplexity), true

	case "ConfigAI.webhookSecret":
		if e.complexity.ConfigAI.WebhookSecret == nil {
			break
		}

		return e.complexity.ConfigAI.WebhookSecret(childComplexity), true

	case "ConfigAIAutoEmbeddings.synchPeriodMinutes":
		if e.complexity.ConfigAIAutoEmbeddings.SynchPeriodMinutes == nil {
			break
		}

		return e.complexity.ConfigAIAutoEmbeddings.SynchPeriodMinutes(childComplexity), true

	case "ConfigAIOpenai.apiKey":
		if e.complexity.ConfigAIOpenai.ApiKey == nil {
			break
		}

		return e.complexity.ConfigAIOpenai.ApiKey(childComplexity), true

	case "ConfigAIOpenai.organization":
		if e.complexity.ConfigAIOpenai.Organization == nil {
			break
		}

		return e.complexity.ConfigAIOpenai.Organization(childComplexity), true

	case "ConfigAIResources.compute":
		if e.complexity.ConfigAIResources.Compute == nil {
			break
		}

		return e.complexity.ConfigAIResources.Compute(childComplexity), true

	case "ConfigAppConfig.appID":
		if e.complexity.ConfigAppConfig.AppID == nil {
			break
		}

		return e.complexity.ConfigAppConfig.AppID(childComplexity), true

	case "ConfigAppConfig.config":
		if e.complexity.ConfigAppConfig.Config == nil {
			break
		}

		return e.complexity.ConfigAppConfig.Config(childComplexity), true

	case "ConfigAppSecrets.appID":
		if e.complexity.ConfigAppSecrets.AppID == nil {
			break
		}

		return e.complexity.ConfigAppSecrets.AppID(childComplexity), true

	case "ConfigAppSecrets.secrets":
		if e.complexity.ConfigAppSecrets.Secrets == nil {
			break
		}

		return e.complexity.ConfigAppSecrets.Secrets(childComplexity), true

	case "ConfigAppSystemConfig.appID":
		if e.complexity.ConfigAppSystemConfig.AppID == nil {
			break
		}

		return e.complexity.ConfigAppSystemConfig.AppID(childComplexity), true

	case "ConfigAppSystemConfig.systemConfig":
		if e.complexity.ConfigAppSystemConfig.SystemConfig == nil {
			break
		}

		return e.complexity.ConfigAppSystemConfig.SystemConfig(childComplexity), true

	case "ConfigAuth.elevatedPrivileges":
		if e.complexity.ConfigAuth.ElevatedPrivileges == nil {
			break
		}

		return e.complexity.ConfigAuth.ElevatedPrivileges(childComplexity), true

	case "ConfigAuth.method":
		if e.complexity.ConfigAuth.Method == nil {
			break
		}

		return e.complexity.ConfigAuth.Method(childComplexity), true

	case "ConfigAuth.misc":
		if e.complexity.ConfigAuth.Misc == nil {
			break
		}

		return e.complexity.ConfigAuth.Misc(childComplexity), true

	case "ConfigAuth.rateLimit":
		if e.complexity.ConfigAuth.RateLimit == nil {
			break
		}

		return e.complexity.ConfigAuth.RateLimit(childComplexity), true

	case "ConfigAuth.redirections":
		if e.complexity.ConfigAuth.Redirections == nil {
			break
		}

		return e.complexity.ConfigAuth.Redirections(childComplexity), true

	case "ConfigAuth.resources":
		if e.complexity.ConfigAuth.Resources == nil {
			break
		}

		return e.complexity.ConfigAuth.Resources(childComplexity), true

	case "ConfigAuth.session":
		if e.complexity.ConfigAuth.Session == nil {
			break
		}

		return e.complexity.ConfigAuth.Session(childComplexity), true

	case "ConfigAuth.signUp":
		if e.complexity.ConfigAuth.SignUp == nil {
			break
		}

		return e.complexity.ConfigAuth.SignUp(childComplexity), true

	case "ConfigAuth.totp":
		if e.complexity.ConfigAuth.Totp == nil {
			break
		}

		return e.complexity.ConfigAuth.Totp(childComplexity), true

	case "ConfigAuth.user":
		if e.complexity.ConfigAuth.User == nil {
			break
		}

		return e.complexity.ConfigAuth.User(childComplexity), true

	case "ConfigAuth.version":
		if e.complexity.ConfigAuth.Version == nil {
			break
		}

		return e.complexity.ConfigAuth.Version(childComplexity), true

	case "ConfigAuthElevatedPrivileges.mode":
		if e.complexity.ConfigAuthElevatedPrivileges.Mode == nil {
			break
		}

		return e.complexity.ConfigAuthElevatedPrivileges.Mode(childComplexity), true

	case "ConfigAuthMethod.anonymous":
		if e.complexity.ConfigAuthMethod.Anonymous == nil {
			break
		}

		return e.complexity.ConfigAuthMethod.Anonymous(childComplexity), true

	case "ConfigAuthMethod.emailPassword":
		if e.complexity.ConfigAuthMethod.EmailPassword == nil {
			break
		}

		return e.complexity.ConfigAuthMethod.EmailPassword(childComplexity), true

	case "ConfigAuthMethod.emailPasswordless":
		if e.complexity.ConfigAuthMethod.EmailPasswordless == nil {
			break
		}

		return e.complexity.ConfigAuthMethod.EmailPasswordless(childComplexity), true

	case "ConfigAuthMethod.oauth":
		if e.complexity.ConfigAuthMethod.Oauth == nil {
			break
		}

		return e.complexity.ConfigAuthMethod.Oauth(childComplexity), true

	case "ConfigAuthMethod.otp":
		if e.complexity.ConfigAuthMethod.Otp == nil {
			break
		}

		return e.complexity.ConfigAuthMethod.Otp(childComplexity), true

	case "ConfigAuthMethod.smsPasswordless":
		if e.complexity.ConfigAuthMethod.SmsPasswordless == nil {
			break
		}

		return e.complexity.ConfigAuthMethod.SmsPasswordless(childComplexity), true

	case "ConfigAuthMethod.webauthn":
		if e.complexity.ConfigAuthMethod.Webauthn == nil {
			break
		}

		return e.complexity.ConfigAuthMethod.Webauthn(childComplexity), true

	case "ConfigAuthMethodAnonymous.enabled":
		if e.complexity.ConfigAuthMethodAnonymous.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodAnonymous.Enabled(childComplexity), true

	case "ConfigAuthMethodEmailPassword.emailVerificationRequired":
		if e.complexity.ConfigAuthMethodEmailPassword.EmailVerificationRequired == nil {
			break
		}

		return e.complexity.ConfigAuthMethodEmailPassword.EmailVerificationRequired(childComplexity), true

	case "ConfigAuthMethodEmailPassword.hibpEnabled":
		if e.complexity.ConfigAuthMethodEmailPassword.HibpEnabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodEmailPassword.HibpEnabled(childComplexity), true

	case "ConfigAuthMethodEmailPassword.passwordMinLength":
		if e.complexity.ConfigAuthMethodEmailPassword.PasswordMinLength == nil {
			break
		}

		return e.complexity.ConfigAuthMethodEmailPassword.PasswordMinLength(childComplexity), true

	case "ConfigAuthMethodEmailPasswordless.enabled":
		if e.complexity.ConfigAuthMethodEmailPasswordless.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodEmailPasswordless.Enabled(childComplexity), true

	case "ConfigAuthMethodOauth.apple":
		if e.complexity.ConfigAuthMethodOauth.Apple == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Apple(childComplexity), true

	case "ConfigAuthMethodOauth.azuread":
		if e.complexity.ConfigAuthMethodOauth.Azuread == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Azuread(childComplexity), true

	case "ConfigAuthMethodOauth.bitbucket":
		if e.complexity.ConfigAuthMethodOauth.Bitbucket == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Bitbucket(childComplexity), true

	case "ConfigAuthMethodOauth.discord":
		if e.complexity.ConfigAuthMethodOauth.Discord == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Discord(childComplexity), true

	case "ConfigAuthMethodOauth.entraid":
		if e.complexity.ConfigAuthMethodOauth.Entraid == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Entraid(childComplexity), true

	case "ConfigAuthMethodOauth.facebook":
		if e.complexity.ConfigAuthMethodOauth.Facebook == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Facebook(childComplexity), true

	case "ConfigAuthMethodOauth.github":
		if e.complexity.ConfigAuthMethodOauth.Github == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Github(childComplexity), true

	case "ConfigAuthMethodOauth.gitlab":
		if e.complexity.ConfigAuthMethodOauth.Gitlab == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Gitlab(childComplexity), true

	case "ConfigAuthMethodOauth.google":
		if e.complexity.ConfigAuthMethodOauth.Google == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Google(childComplexity), true

	case "ConfigAuthMethodOauth.linkedin":
		if e.complexity.ConfigAuthMethodOauth.Linkedin == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Linkedin(childComplexity), true

	case "ConfigAuthMethodOauth.spotify":
		if e.complexity.ConfigAuthMethodOauth.Spotify == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Spotify(childComplexity), true

	case "ConfigAuthMethodOauth.strava":
		if e.complexity.ConfigAuthMethodOauth.Strava == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Strava(childComplexity), true

	case "ConfigAuthMethodOauth.twitch":
		if e.complexity.ConfigAuthMethodOauth.Twitch == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Twitch(childComplexity), true

	case "ConfigAuthMethodOauth.twitter":
		if e.complexity.ConfigAuthMethodOauth.Twitter == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Twitter(childComplexity), true

	case "ConfigAuthMethodOauth.windowslive":
		if e.complexity.ConfigAuthMethodOauth.Windowslive == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Windowslive(childComplexity), true

	case "ConfigAuthMethodOauth.workos":
		if e.complexity.ConfigAuthMethodOauth.Workos == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauth.Workos(childComplexity), true

	case "ConfigAuthMethodOauthApple.audience":
		if e.complexity.ConfigAuthMethodOauthApple.Audience == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthApple.Audience(childComplexity), true

	case "ConfigAuthMethodOauthApple.clientId":
		if e.complexity.ConfigAuthMethodOauthApple.ClientId == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthApple.ClientId(childComplexity), true

	case "ConfigAuthMethodOauthApple.enabled":
		if e.complexity.ConfigAuthMethodOauthApple.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthApple.Enabled(childComplexity), true

	case "ConfigAuthMethodOauthApple.keyId":
		if e.complexity.ConfigAuthMethodOauthApple.KeyId == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthApple.KeyId(childComplexity), true

	case "ConfigAuthMethodOauthApple.privateKey":
		if e.complexity.ConfigAuthMethodOauthApple.PrivateKey == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthApple.PrivateKey(childComplexity), true

	case "ConfigAuthMethodOauthApple.scope":
		if e.complexity.ConfigAuthMethodOauthApple.Scope == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthApple.Scope(childComplexity), true

	case "ConfigAuthMethodOauthApple.teamId":
		if e.complexity.ConfigAuthMethodOauthApple.TeamId == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthApple.TeamId(childComplexity), true

	case "ConfigAuthMethodOauthAzuread.clientId":
		if e.complexity.ConfigAuthMethodOauthAzuread.ClientId == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthAzuread.ClientId(childComplexity), true

	case "ConfigAuthMethodOauthAzuread.clientSecret":
		if e.complexity.ConfigAuthMethodOauthAzuread.ClientSecret == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthAzuread.ClientSecret(childComplexity), true

	case "ConfigAuthMethodOauthAzuread.enabled":
		if e.complexity.ConfigAuthMethodOauthAzuread.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthAzuread.Enabled(childComplexity), true

	case "ConfigAuthMethodOauthAzuread.tenant":
		if e.complexity.ConfigAuthMethodOauthAzuread.Tenant == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthAzuread.Tenant(childComplexity), true

	case "ConfigAuthMethodOauthEntraid.clientId":
		if e.complexity.ConfigAuthMethodOauthEntraid.ClientId == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthEntraid.ClientId(childComplexity), true

	case "ConfigAuthMethodOauthEntraid.clientSecret":
		if e.complexity.ConfigAuthMethodOauthEntraid.ClientSecret == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthEntraid.ClientSecret(childComplexity), true

	case "ConfigAuthMethodOauthEntraid.enabled":
		if e.complexity.ConfigAuthMethodOauthEntraid.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthEntraid.Enabled(childComplexity), true

	case "ConfigAuthMethodOauthEntraid.tenant":
		if e.complexity.ConfigAuthMethodOauthEntraid.Tenant == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthEntraid.Tenant(childComplexity), true

	case "ConfigAuthMethodOauthTwitter.consumerKey":
		if e.complexity.ConfigAuthMethodOauthTwitter.ConsumerKey == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthTwitter.ConsumerKey(childComplexity), true

	case "ConfigAuthMethodOauthTwitter.consumerSecret":
		if e.complexity.ConfigAuthMethodOauthTwitter.ConsumerSecret == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthTwitter.ConsumerSecret(childComplexity), true

	case "ConfigAuthMethodOauthTwitter.enabled":
		if e.complexity.ConfigAuthMethodOauthTwitter.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthTwitter.Enabled(childComplexity), true

	case "ConfigAuthMethodOauthWorkos.clientId":
		if e.complexity.ConfigAuthMethodOauthWorkos.ClientId == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthWorkos.ClientId(childComplexity), true

	case "ConfigAuthMethodOauthWorkos.clientSecret":
		if e.complexity.ConfigAuthMethodOauthWorkos.ClientSecret == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthWorkos.ClientSecret(childComplexity), true

	case "ConfigAuthMethodOauthWorkos.connection":
		if e.complexity.ConfigAuthMethodOauthWorkos.Connection == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthWorkos.Connection(childComplexity), true

	case "ConfigAuthMethodOauthWorkos.enabled":
		if e.complexity.ConfigAuthMethodOauthWorkos.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthWorkos.Enabled(childComplexity), true

	case "ConfigAuthMethodOauthWorkos.organization":
		if e.complexity.ConfigAuthMethodOauthWorkos.Organization == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOauthWorkos.Organization(childComplexity), true

	case "ConfigAuthMethodOtp.email":
		if e.complexity.ConfigAuthMethodOtp.Email == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOtp.Email(childComplexity), true

	case "ConfigAuthMethodOtpEmail.enabled":
		if e.complexity.ConfigAuthMethodOtpEmail.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodOtpEmail.Enabled(childComplexity), true

	case "ConfigAuthMethodSmsPasswordless.enabled":
		if e.complexity.ConfigAuthMethodSmsPasswordless.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodSmsPasswordless.Enabled(childComplexity), true

	case "ConfigAuthMethodWebauthn.attestation":
		if e.complexity.ConfigAuthMethodWebauthn.Attestation == nil {
			break
		}

		return e.complexity.ConfigAuthMethodWebauthn.Attestation(childComplexity), true

	case "ConfigAuthMethodWebauthn.enabled":
		if e.complexity.ConfigAuthMethodWebauthn.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthMethodWebauthn.Enabled(childComplexity), true

	case "ConfigAuthMethodWebauthn.relyingParty":
		if e.complexity.ConfigAuthMethodWebauthn.RelyingParty == nil {
			break
		}

		return e.complexity.ConfigAuthMethodWebauthn.RelyingParty(childComplexity), true

	case "ConfigAuthMethodWebauthnAttestation.timeout":
		if e.complexity.ConfigAuthMethodWebauthnAttestation.Timeout == nil {
			break
		}

		return e.complexity.ConfigAuthMethodWebauthnAttestation.Timeout(childComplexity), true

	case "ConfigAuthMethodWebauthnRelyingParty.id":
		if e.complexity.ConfigAuthMethodWebauthnRelyingParty.Id == nil {
			break
		}

		return e.complexity.ConfigAuthMethodWebauthnRelyingParty.Id(childComplexity), true

	case "ConfigAuthMethodWebauthnRelyingParty.name":
		if e.complexity.ConfigAuthMethodWebauthnRelyingParty.Name == nil {
			break
		}

		return e.complexity.ConfigAuthMethodWebauthnRelyingParty.Name(childComplexity), true

	case "ConfigAuthMethodWebauthnRelyingParty.origins":
		if e.complexity.ConfigAuthMethodWebauthnRelyingParty.Origins == nil {
			break
		}

		return e.complexity.ConfigAuthMethodWebauthnRelyingParty.Origins(childComplexity), true

	case "ConfigAuthMisc.concealErrors":
		if e.complexity.ConfigAuthMisc.ConcealErrors == nil {
			break
		}

		return e.complexity.ConfigAuthMisc.ConcealErrors(childComplexity), true

	case "ConfigAuthRateLimit.bruteForce":
		if e.complexity.ConfigAuthRateLimit.BruteForce == nil {
			break
		}

		return e.complexity.ConfigAuthRateLimit.BruteForce(childComplexity), true

	case "ConfigAuthRateLimit.emails":
		if e.complexity.ConfigAuthRateLimit.Emails == nil {
			break
		}

		return e.complexity.ConfigAuthRateLimit.Emails(childComplexity), true

	case "ConfigAuthRateLimit.global":
		if e.complexity.ConfigAuthRateLimit.Global == nil {
			break
		}

		return e.complexity.ConfigAuthRateLimit.Global(childComplexity), true

	case "ConfigAuthRateLimit.signups":
		if e.complexity.ConfigAuthRateLimit.Signups == nil {
			break
		}

		return e.complexity.ConfigAuthRateLimit.Signups(childComplexity), true

	case "ConfigAuthRateLimit.sms":
		if e.complexity.ConfigAuthRateLimit.Sms == nil {
			break
		}

		return e.complexity.ConfigAuthRateLimit.Sms(childComplexity), true

	case "ConfigAuthRedirections.allowedUrls":
		if e.complexity.ConfigAuthRedirections.AllowedUrls == nil {
			break
		}

		return e.complexity.ConfigAuthRedirections.AllowedUrls(childComplexity), true

	case "ConfigAuthRedirections.clientUrl":
		if e.complexity.ConfigAuthRedirections.ClientUrl == nil {
			break
		}

		return e.complexity.ConfigAuthRedirections.ClientUrl(childComplexity), true

	case "ConfigAuthSession.accessToken":
		if e.complexity.ConfigAuthSession.AccessToken == nil {
			break
		}

		return e.complexity.ConfigAuthSession.AccessToken(childComplexity), true

	case "ConfigAuthSession.refreshToken":
		if e.complexity.ConfigAuthSession.RefreshToken == nil {
			break
		}

		return e.complexity.ConfigAuthSession.RefreshToken(childComplexity), true

	case "ConfigAuthSessionAccessToken.customClaims":
		if e.complexity.ConfigAuthSessionAccessToken.CustomClaims == nil {
			break
		}

		return e.complexity.ConfigAuthSessionAccessToken.CustomClaims(childComplexity), true

	case "ConfigAuthSessionAccessToken.expiresIn":
		if e.complexity.ConfigAuthSessionAccessToken.ExpiresIn == nil {
			break
		}

		return e.complexity.ConfigAuthSessionAccessToken.ExpiresIn(childComplexity), true

	case "ConfigAuthSessionRefreshToken.expiresIn":
		if e.complexity.ConfigAuthSessionRefreshToken.ExpiresIn == nil {
			break
		}

		return e.complexity.ConfigAuthSessionRefreshToken.ExpiresIn(childComplexity), true

	case "ConfigAuthSignUp.disableNewUsers":
		if e.complexity.ConfigAuthSignUp.DisableNewUsers == nil {
			break
		}

		return e.complexity.ConfigAuthSignUp.DisableNewUsers(childComplexity), true

	case "ConfigAuthSignUp.enabled":
		if e.complexity.ConfigAuthSignUp.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthSignUp.Enabled(childComplexity), true

	case "ConfigAuthSignUp.turnstile":
		if e.complexity.ConfigAuthSignUp.Turnstile == nil {
			break
		}

		return e.complexity.ConfigAuthSignUp.Turnstile(childComplexity), true

	case "ConfigAuthSignUpTurnstile.secretKey":
		if e.complexity.ConfigAuthSignUpTurnstile.SecretKey == nil {
			break
		}

		return e.complexity.ConfigAuthSignUpTurnstile.SecretKey(childComplexity), true

	case "ConfigAuthTotp.enabled":
		if e.complexity.ConfigAuthTotp.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthTotp.Enabled(childComplexity), true

	case "ConfigAuthTotp.issuer":
		if e.complexity.ConfigAuthTotp.Issuer == nil {
			break
		}

		return e.complexity.ConfigAuthTotp.Issuer(childComplexity), true

	case "ConfigAuthUser.email":
		if e.complexity.ConfigAuthUser.Email == nil {
			break
		}

		return e.complexity.ConfigAuthUser.Email(childComplexity), true

	case "ConfigAuthUser.emailDomains":
		if e.complexity.ConfigAuthUser.EmailDomains == nil {
			break
		}

		return e.complexity.ConfigAuthUser.EmailDomains(childComplexity), true

	case "ConfigAuthUser.gravatar":
		if e.complexity.ConfigAuthUser.Gravatar == nil {
			break
		}

		return e.complexity.ConfigAuthUser.Gravatar(childComplexity), true

	case "ConfigAuthUser.locale":
		if e.complexity.ConfigAuthUser.Locale == nil {
			break
		}

		return e.complexity.ConfigAuthUser.Locale(childComplexity), true

	case "ConfigAuthUser.roles":
		if e.complexity.ConfigAuthUser.Roles == nil {
			break
		}

		return e.complexity.ConfigAuthUser.Roles(childComplexity), true

	case "ConfigAuthUserEmail.allowed":
		if e.complexity.ConfigAuthUserEmail.Allowed == nil {
			break
		}

		return e.complexity.ConfigAuthUserEmail.Allowed(childComplexity), true

	case "ConfigAuthUserEmail.blocked":
		if e.complexity.ConfigAuthUserEmail.Blocked == nil {
			break
		}

		return e.complexity.ConfigAuthUserEmail.Blocked(childComplexity), true

	case "ConfigAuthUserEmailDomains.allowed":
		if e.complexity.ConfigAuthUserEmailDomains.Allowed == nil {
			break
		}

		return e.complexity.ConfigAuthUserEmailDomains.Allowed(childComplexity), true

	case "ConfigAuthUserEmailDomains.blocked":
		if e.complexity.ConfigAuthUserEmailDomains.Blocked == nil {
			break
		}

		return e.complexity.ConfigAuthUserEmailDomains.Blocked(childComplexity), true

	case "ConfigAuthUserGravatar.default":
		if e.complexity.ConfigAuthUserGravatar.Default == nil {
			break
		}

		return e.complexity.ConfigAuthUserGravatar.Default(childComplexity), true

	case "ConfigAuthUserGravatar.enabled":
		if e.complexity.ConfigAuthUserGravatar.Enabled == nil {
			break
		}

		return e.complexity.ConfigAuthUserGravatar.Enabled(childComplexity), true

	case "ConfigAuthUserGravatar.rating":
		if e.complexity.ConfigAuthUserGravatar.Rating == nil {
			break
		}

		return e.complexity.ConfigAuthUserGravatar.Rating(childComplexity), true

	case "ConfigAuthUserLocale.allowed":
		if e.complexity.ConfigAuthUserLocale.Allowed == nil {
			break
		}

		return e.complexity.ConfigAuthUserLocale.Allowed(childComplexity), true

	case "ConfigAuthUserLocale.default":
		if e.complexity.ConfigAuthUserLocale.Default == nil {
			break
		}

		return e.complexity.ConfigAuthUserLocale.Default(childComplexity), true

	case "ConfigAuthUserRoles.allowed":
		if e.complexity.ConfigAuthUserRoles.Allowed == nil {
			break
		}

		return e.complexity.ConfigAuthUserRoles.Allowed(childComplexity), true

	case "ConfigAuthUserRoles.default":
		if e.complexity.ConfigAuthUserRoles.Default == nil {
			break
		}

		return e.complexity.ConfigAuthUserRoles.Default(childComplexity), true

	case "ConfigAuthsessionaccessTokenCustomClaims.default":
		if e.complexity.ConfigAuthsessionaccessTokenCustomClaims.Default == nil {
			break
		}

		return e.complexity.ConfigAuthsessionaccessTokenCustomClaims.Default(childComplexity), true

	case "ConfigAuthsessionaccessTokenCustomClaims.key":
		if e.complexity.ConfigAuthsessionaccessTokenCustomClaims.Key == nil {
			break
		}

		return e.complexity.ConfigAuthsessionaccessTokenCustomClaims.Key(childComplexity), true

	case "ConfigAuthsessionaccessTokenCustomClaims.value":
		if e.complexity.ConfigAuthsessionaccessTokenCustomClaims.Value == nil {
			break
		}

		return e.complexity.ConfigAuthsessionaccessTokenCustomClaims.Value(childComplexity), true

	case "ConfigAutoscaler.maxReplicas":
		if e.complexity.ConfigAutoscaler.MaxReplicas == nil {
			break
		}

		return e.complexity.ConfigAutoscaler.MaxReplicas(childComplexity), true

	case "ConfigClaimMap.claim":
		if e.complexity.ConfigClaimMap.Claim == nil {
			break
		}

		return e.complexity.ConfigClaimMap.Claim(childComplexity), true

	case "ConfigClaimMap.default":
		if e.complexity.ConfigClaimMap.Default == nil {
			break
		}

		return e.complexity.ConfigClaimMap.Default(childComplexity), true

	case "ConfigClaimMap.path":
		if e.complexity.ConfigClaimMap.Path == nil {
			break
		}

		return e.complexity.ConfigClaimMap.Path(childComplexity), true

	case "ConfigClaimMap.value":
		if e.complexity.ConfigClaimMap.Value == nil {
			break
		}

		return e.complexity.ConfigClaimMap.Value(childComplexity), true

	case "ConfigComputeResources.cpu":
		if e.complexity.ConfigComputeResources.Cpu == nil {
			break
		}

		return e.complexity.ConfigComputeResources.Cpu(childComplexity), true

	case "ConfigComputeResources.memory":
		if e.complexity.ConfigComputeResources.Memory == nil {
			break
		}

		return e.complexity.ConfigComputeResources.Memory(childComplexity), true

	case "ConfigConfig.ai":
		if e.complexity.ConfigConfig.Ai == nil {
			break
		}

		return e.complexity.ConfigConfig.Ai(childComplexity), true

	case "ConfigConfig.auth":
		if e.complexity.ConfigConfig.Auth == nil {
			break
		}

		return e.complexity.ConfigConfig.Auth(childComplexity), true

	case "ConfigConfig.functions":
		if e.complexity.ConfigConfig.Functions == nil {
			break
		}

		return e.complexity.ConfigConfig.Functions(childComplexity), true

	case "ConfigConfig.global":
		if e.complexity.ConfigConfig.Global == nil {
			break
		}

		return e.complexity.ConfigConfig.Global(childComplexity), true

	case "ConfigConfig.graphql":
		if e.complexity.ConfigConfig.Graphql == nil {
			break
		}

		return e.complexity.ConfigConfig.Graphql(childComplexity), true

	case "ConfigConfig.hasura":
		if e.complexity.ConfigConfig.Hasura == nil {
			break
		}

		return e.complexity.ConfigConfig.Hasura(childComplexity), true

	case "ConfigConfig.observability":
		if e.complexity.ConfigConfig.Observability == nil {
			break
		}

		return e.complexity.ConfigConfig.Observability(childComplexity), true

	case "ConfigConfig.postgres":
		if e.complexity.ConfigConfig.Postgres == nil {
			break
		}

		return e.complexity.ConfigConfig.Postgres(childComplexity), true

	case "ConfigConfig.provider":
		if e.complexity.ConfigConfig.Provider == nil {
			break
		}

		return e.complexity.ConfigConfig.Provider(childComplexity), true

	case "ConfigConfig.storage":
		if e.complexity.ConfigConfig.Storage == nil {
			break
		}

		return e.complexity.ConfigConfig.Storage(childComplexity), true

	case "ConfigEnvironmentVariable.name":
		if e.complexity.ConfigEnvironmentVariable.Name == nil {
			break
		}

		return e.complexity.ConfigEnvironmentVariable.Name(childComplexity), true

	case "ConfigEnvironmentVariable.value":
		if e.complexity.ConfigEnvironmentVariable.Value == nil {
			break
		}

		return e.complexity.ConfigEnvironmentVariable.Value(childComplexity), true

	case "ConfigFunctions.node":
		if e.complexity.ConfigFunctions.Node == nil {
			break
		}

		return e.complexity.ConfigFunctions.Node(childComplexity), true

	case "ConfigFunctions.rateLimit":
		if e.complexity.ConfigFunctions.RateLimit == nil {
			break
		}

		return e.complexity.ConfigFunctions.RateLimit(childComplexity), true

	case "ConfigFunctions.resources":
		if e.complexity.ConfigFunctions.Resources == nil {
			break
		}

		return e.complexity.ConfigFunctions.Resources(childComplexity), true

	case "ConfigFunctionsNode.version":
		if e.complexity.ConfigFunctionsNode.Version == nil {
			break
		}

		return e.complexity.ConfigFunctionsNode.Version(childComplexity), true

	case "ConfigFunctionsResources.networking":
		if e.complexity.ConfigFunctionsResources.Networking == nil {
			break
		}

		return e.complexity.ConfigFunctionsResources.Networking(childComplexity), true

	case "ConfigGlobal.environment":
		if e.complexity.ConfigGlobal.Environment == nil {
			break
		}

		return e.complexity.ConfigGlobal.Environment(childComplexity), true

	case "ConfigGlobalEnvironmentVariable.name":
		if e.complexity.ConfigGlobalEnvironmentVariable.Name == nil {
			break
		}

		return e.complexity.ConfigGlobalEnvironmentVariable.Name(childComplexity), true

	case "ConfigGlobalEnvironmentVariable.value":
		if e.complexity.ConfigGlobalEnvironmentVariable.Value == nil {
			break
		}

		return e.complexity.ConfigGlobalEnvironmentVariable.Value(childComplexity), true

	case "ConfigGrafana.adminPassword":
		if e.complexity.ConfigGrafana.AdminPassword == nil {
			break
		}

		return e.complexity.ConfigGrafana.AdminPassword(childComplexity), true

	case "ConfigGrafana.alerting":
		if e.complexity.ConfigGrafana.Alerting == nil {
			break
		}

		return e.complexity.ConfigGrafana.Alerting(childComplexity), true

	case "ConfigGrafana.contacts":
		if e.complexity.ConfigGrafana.Contacts == nil {
			break
		}

		return e.complexity.ConfigGrafana.Contacts(childComplexity), true

	case "ConfigGrafana.smtp":
		if e.complexity.ConfigGrafana.Smtp == nil {
			break
		}

		return e.complexity.ConfigGrafana.Smtp(childComplexity), true

	case "ConfigGrafanaAlerting.enabled":
		if e.complexity.ConfigGrafanaAlerting.Enabled == nil {
			break
		}

		return e.complexity.ConfigGrafanaAlerting.Enabled(childComplexity), true

	case "ConfigGrafanaContacts.discord":
		if e.complexity.ConfigGrafanaContacts.Discord == nil {
			break
		}

		return e.complexity.ConfigGrafanaContacts.Discord(childComplexity), true

	case "ConfigGrafanaContacts.emails":
		if e.complexity.ConfigGrafanaContacts.Emails == nil {
			break
		}

		return e.complexity.ConfigGrafanaContacts.Emails(childComplexity), true

	case "ConfigGrafanaContacts.pagerduty":
		if e.complexity.ConfigGrafanaContacts.Pagerduty == nil {
			break
		}

		return e.complexity.ConfigGrafanaContacts.Pagerduty(childComplexity), true

	case "ConfigGrafanaContacts.slack":
		if e.complexity.ConfigGrafanaContacts.Slack == nil {
			break
		}

		return e.complexity.ConfigGrafanaContacts.Slack(childComplexity), true

	case "ConfigGrafanaContacts.webhook":
		if e.complexity.ConfigGrafanaContacts.Webhook == nil {
			break
		}

		return e.complexity.ConfigGrafanaContacts.Webhook(childComplexity), true

	case "ConfigGrafanaSmtp.host":
		if e.complexity.ConfigGrafanaSmtp.Host == nil {
			break
		}

		return e.complexity.ConfigGrafanaSmtp.Host(childComplexity), true

	case "ConfigGrafanaSmtp.password":
		if e.complexity.ConfigGrafanaSmtp.Password == nil {
			break
		}

		return e.complexity.ConfigGrafanaSmtp.Password(childComplexity), true

	case "ConfigGrafanaSmtp.port":
		if e.complexity.ConfigGrafanaSmtp.Port == nil {
			break
		}

		return e.complexity.ConfigGrafanaSmtp.Port(childComplexity), true

	case "ConfigGrafanaSmtp.sender":
		if e.complexity.ConfigGrafanaSmtp.Sender == nil {
			break
		}

		return e.complexity.ConfigGrafanaSmtp.Sender(childComplexity), true

	case "ConfigGrafanaSmtp.user":
		if e.complexity.ConfigGrafanaSmtp.User == nil {
			break
		}

		return e.complexity.ConfigGrafanaSmtp.User(childComplexity), true

	case "ConfigGrafanacontactsDiscord.avatarUrl":
		if e.complexity.ConfigGrafanacontactsDiscord.AvatarUrl == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsDiscord.AvatarUrl(childComplexity), true

	case "ConfigGrafanacontactsDiscord.url":
		if e.complexity.ConfigGrafanacontactsDiscord.Url == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsDiscord.Url(childComplexity), true

	case "ConfigGrafanacontactsPagerduty.class":
		if e.complexity.ConfigGrafanacontactsPagerduty.Class == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsPagerduty.Class(childComplexity), true

	case "ConfigGrafanacontactsPagerduty.component":
		if e.complexity.ConfigGrafanacontactsPagerduty.Component == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsPagerduty.Component(childComplexity), true

	case "ConfigGrafanacontactsPagerduty.group":
		if e.complexity.ConfigGrafanacontactsPagerduty.Group == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsPagerduty.Group(childComplexity), true

	case "ConfigGrafanacontactsPagerduty.integrationKey":
		if e.complexity.ConfigGrafanacontactsPagerduty.IntegrationKey == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsPagerduty.IntegrationKey(childComplexity), true

	case "ConfigGrafanacontactsPagerduty.severity":
		if e.complexity.ConfigGrafanacontactsPagerduty.Severity == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsPagerduty.Severity(childComplexity), true

	case "ConfigGrafanacontactsSlack.endpointURL":
		if e.complexity.ConfigGrafanacontactsSlack.EndpointURL == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.EndpointURL(childComplexity), true

	case "ConfigGrafanacontactsSlack.iconEmoji":
		if e.complexity.ConfigGrafanacontactsSlack.IconEmoji == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.IconEmoji(childComplexity), true

	case "ConfigGrafanacontactsSlack.iconURL":
		if e.complexity.ConfigGrafanacontactsSlack.IconURL == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.IconURL(childComplexity), true

	case "ConfigGrafanacontactsSlack.mentionChannel":
		if e.complexity.ConfigGrafanacontactsSlack.MentionChannel == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.MentionChannel(childComplexity), true

	case "ConfigGrafanacontactsSlack.mentionGroups":
		if e.complexity.ConfigGrafanacontactsSlack.MentionGroups == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.MentionGroups(childComplexity), true

	case "ConfigGrafanacontactsSlack.mentionUsers":
		if e.complexity.ConfigGrafanacontactsSlack.MentionUsers == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.MentionUsers(childComplexity), true

	case "ConfigGrafanacontactsSlack.recipient":
		if e.complexity.ConfigGrafanacontactsSlack.Recipient == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.Recipient(childComplexity), true

	case "ConfigGrafanacontactsSlack.token":
		if e.complexity.ConfigGrafanacontactsSlack.Token == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.Token(childComplexity), true

	case "ConfigGrafanacontactsSlack.url":
		if e.complexity.ConfigGrafanacontactsSlack.Url == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.Url(childComplexity), true

	case "ConfigGrafanacontactsSlack.username":
		if e.complexity.ConfigGrafanacontactsSlack.Username == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsSlack.Username(childComplexity), true

	case "ConfigGrafanacontactsWebhook.authorizationCredentials":
		if e.complexity.ConfigGrafanacontactsWebhook.AuthorizationCredentials == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsWebhook.AuthorizationCredentials(childComplexity), true

	case "ConfigGrafanacontactsWebhook.authorizationScheme":
		if e.complexity.ConfigGrafanacontactsWebhook.AuthorizationScheme == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsWebhook.AuthorizationScheme(childComplexity), true

	case "ConfigGrafanacontactsWebhook.httpMethod":
		if e.complexity.ConfigGrafanacontactsWebhook.HttpMethod == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsWebhook.HttpMethod(childComplexity), true

	case "ConfigGrafanacontactsWebhook.maxAlerts":
		if e.complexity.ConfigGrafanacontactsWebhook.MaxAlerts == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsWebhook.MaxAlerts(childComplexity), true

	case "ConfigGrafanacontactsWebhook.password":
		if e.complexity.ConfigGrafanacontactsWebhook.Password == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsWebhook.Password(childComplexity), true

	case "ConfigGrafanacontactsWebhook.url":
		if e.complexity.ConfigGrafanacontactsWebhook.Url == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsWebhook.Url(childComplexity), true

	case "ConfigGrafanacontactsWebhook.username":
		if e.complexity.ConfigGrafanacontactsWebhook.Username == nil {
			break
		}

		return e.complexity.ConfigGrafanacontactsWebhook.Username(childComplexity), true

	case "ConfigGraphql.security":
		if e.complexity.ConfigGraphql.Security == nil {
			break
		}

		return e.complexity.ConfigGraphql.Security(childComplexity), true

	case "ConfigGraphqlSecurity.forbidAminSecret":
		if e.complexity.ConfigGraphqlSecurity.ForbidAminSecret == nil {
			break
		}

		return e.complexity.ConfigGraphqlSecurity.ForbidAminSecret(childComplexity), true

	case "ConfigGraphqlSecurity.maxDepthQueries":
		if e.complexity.ConfigGraphqlSecurity.MaxDepthQueries == nil {
			break
		}

		return e.complexity.ConfigGraphqlSecurity.MaxDepthQueries(childComplexity), true

	case "ConfigHasura.adminSecret":
		if e.complexity.ConfigHasura.AdminSecret == nil {
			break
		}

		return e.complexity.ConfigHasura.AdminSecret(childComplexity), true

	case "ConfigHasura.authHook":
		if e.complexity.ConfigHasura.AuthHook == nil {
			break
		}

		return e.complexity.ConfigHasura.AuthHook(childComplexity), true

	case "ConfigHasura.events":
		if e.complexity.ConfigHasura.Events == nil {
			break
		}

		return e.complexity.ConfigHasura.Events(childComplexity), true

	case "ConfigHasura.jwtSecrets":
		if e.complexity.ConfigHasura.JwtSecrets == nil {
			break
		}

		return e.complexity.ConfigHasura.JwtSecrets(childComplexity), true

	case "ConfigHasura.logs":
		if e.complexity.ConfigHasura.Logs == nil {
			break
		}

		return e.complexity.ConfigHasura.Logs(childComplexity), true

	case "ConfigHasura.rateLimit":
		if e.complexity.ConfigHasura.RateLimit == nil {
			break
		}

		return e.complexity.ConfigHasura.RateLimit(childComplexity), true

	case "ConfigHasura.resources":
		if e.complexity.ConfigHasura.Resources == nil {
			break
		}

		return e.complexity.ConfigHasura.Resources(childComplexity), true

	case "ConfigHasura.settings":
		if e.complexity.ConfigHasura.Settings == nil {
			break
		}

		return e.complexity.ConfigHasura.Settings(childComplexity), true

	case "ConfigHasura.version":
		if e.complexity.ConfigHasura.Version == nil {
			break
		}

		return e.complexity.ConfigHasura.Version(childComplexity), true

	case "ConfigHasura.webhookSecret":
		if e.complexity.ConfigHasura.WebhookSecret == nil {
			break
		}

		return e.complexity.ConfigHasura.WebhookSecret(childComplexity), true

	case "ConfigHasuraAuthHook.mode":
		if e.complexity.ConfigHasuraAuthHook.Mode == nil {
			break
		}

		return e.complexity.ConfigHasuraAuthHook.Mode(childComplexity), true

	case "ConfigHasuraAuthHook.sendRequestBody":
		if e.complexity.ConfigHasuraAuthHook.SendRequestBody == nil {
			break
		}

		return e.complexity.ConfigHasuraAuthHook.SendRequestBody(childComplexity), true

	case "ConfigHasuraAuthHook.url":
		if e.complexity.ConfigHasuraAuthHook.Url == nil {
			break
		}

		return e.complexity.ConfigHasuraAuthHook.Url(childComplexity), true

	case "ConfigHasuraEvents.httpPoolSize":
		if e.complexity.ConfigHasuraEvents.HttpPoolSize == nil {
			break
		}

		return e.complexity.ConfigHasuraEvents.HttpPoolSize(childComplexity), true

	case "ConfigHasuraLogs.level":
		if e.complexity.ConfigHasuraLogs.Level == nil {
			break
		}

		return e.complexity.ConfigHasuraLogs.Level(childComplexity), true

	case "ConfigHasuraSettings.corsDomain":
		if e.complexity.ConfigHasuraSettings.CorsDomain == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.CorsDomain(childComplexity), true

	case "ConfigHasuraSettings.devMode":
		if e.complexity.ConfigHasuraSettings.DevMode == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.DevMode(childComplexity), true

	case "ConfigHasuraSettings.enableAllowList":
		if e.complexity.ConfigHasuraSettings.EnableAllowList == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.EnableAllowList(childComplexity), true

	case "ConfigHasuraSettings.enableConsole":
		if e.complexity.ConfigHasuraSettings.EnableConsole == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.EnableConsole(childComplexity), true

	case "ConfigHasuraSettings.enableRemoteSchemaPermissions":
		if e.complexity.ConfigHasuraSettings.EnableRemoteSchemaPermissions == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.EnableRemoteSchemaPermissions(childComplexity), true

	case "ConfigHasuraSettings.enabledAPIs":
		if e.complexity.ConfigHasuraSettings.EnabledAPIs == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.EnabledAPIs(childComplexity), true

	case "ConfigHasuraSettings.inferFunctionPermissions":
		if e.complexity.ConfigHasuraSettings.InferFunctionPermissions == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.InferFunctionPermissions(childComplexity), true

	case "ConfigHasuraSettings.liveQueriesMultiplexedRefetchInterval":
		if e.complexity.ConfigHasuraSettings.LiveQueriesMultiplexedRefetchInterval == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.LiveQueriesMultiplexedRefetchInterval(childComplexity), true

	case "ConfigHasuraSettings.stringifyNumericTypes":
		if e.complexity.ConfigHasuraSettings.StringifyNumericTypes == nil {
			break
		}

		return e.complexity.ConfigHasuraSettings.StringifyNumericTypes(childComplexity), true

	case "ConfigHealthCheck.initialDelaySeconds":
		if e.complexity.ConfigHealthCheck.InitialDelaySeconds == nil {
			break
		}

		return e.complexity.ConfigHealthCheck.InitialDelaySeconds(childComplexity), true

	case "ConfigHealthCheck.port":
		if e.complexity.ConfigHealthCheck.Port == nil {
			break
		}

		return e.complexity.ConfigHealthCheck.Port(childComplexity), true

	case "ConfigHealthCheck.probePeriodSeconds":
		if e.complexity.ConfigHealthCheck.ProbePeriodSeconds == nil {
			break
		}

		return e.complexity.ConfigHealthCheck.ProbePeriodSeconds(childComplexity), true

	case "ConfigIngress.fqdn":
		if e.complexity.ConfigIngress.Fqdn == nil {
			break
		}

		return e.complexity.ConfigIngress.Fqdn(childComplexity), true

	case "ConfigIngress.tls":
		if e.complexity.ConfigIngress.Tls == nil {
			break
		}

		return e.complexity.ConfigIngress.Tls(childComplexity), true

	case "ConfigIngressTls.clientCA":
		if e.complexity.ConfigIngressTls.ClientCA == nil {
			break
		}

		return e.complexity.ConfigIngressTls.ClientCA(childComplexity), true

	case "ConfigInsertConfigResponse.config":
		if e.complexity.ConfigInsertConfigResponse.Config == nil {
			break
		}

		return e.complexity.ConfigInsertConfigResponse.Config(childComplexity), true

	case "ConfigInsertConfigResponse.secrets":
		if e.complexity.ConfigInsertConfigResponse.Secrets == nil {
			break
		}

		return e.complexity.ConfigInsertConfigResponse.Secrets(childComplexity), true

	case "ConfigInsertConfigResponse.systemConfig":
		if e.complexity.ConfigInsertConfigResponse.SystemConfig == nil {
			break
		}

		return e.complexity.ConfigInsertConfigResponse.SystemConfig(childComplexity), true

	case "ConfigJWTSecret.allowed_skew":
		if e.complexity.ConfigJWTSecret.AllowedSkew == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.AllowedSkew(childComplexity), true

	case "ConfigJWTSecret.audience":
		if e.complexity.ConfigJWTSecret.Audience == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.Audience(childComplexity), true

	case "ConfigJWTSecret.claims_format":
		if e.complexity.ConfigJWTSecret.ClaimsFormat == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.ClaimsFormat(childComplexity), true

	case "ConfigJWTSecret.claims_map":
		if e.complexity.ConfigJWTSecret.ClaimsMap == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.ClaimsMap(childComplexity), true

	case "ConfigJWTSecret.claims_namespace":
		if e.complexity.ConfigJWTSecret.ClaimsNamespace == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.ClaimsNamespace(childComplexity), true

	case "ConfigJWTSecret.claims_namespace_path":
		if e.complexity.ConfigJWTSecret.ClaimsNamespacePath == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.ClaimsNamespacePath(childComplexity), true

	case "ConfigJWTSecret.header":
		if e.complexity.ConfigJWTSecret.Header == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.Header(childComplexity), true

	case "ConfigJWTSecret.issuer":
		if e.complexity.ConfigJWTSecret.Issuer == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.Issuer(childComplexity), true

	case "ConfigJWTSecret.jwk_url":
		if e.complexity.ConfigJWTSecret.JwkUrl == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.JwkUrl(childComplexity), true

	case "ConfigJWTSecret.key":
		if e.complexity.ConfigJWTSecret.Key == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.Key(childComplexity), true

	case "ConfigJWTSecret.kid":
		if e.complexity.ConfigJWTSecret.Kid == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.Kid(childComplexity), true

	case "ConfigJWTSecret.signingKey":
		if e.complexity.ConfigJWTSecret.SigningKey == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.SigningKey(childComplexity), true

	case "ConfigJWTSecret.type":
		if e.complexity.ConfigJWTSecret.Type == nil {
			break
		}

		return e.complexity.ConfigJWTSecret.Type(childComplexity), true

	case "ConfigNetworking.ingresses":
		if e.complexity.ConfigNetworking.Ingresses == nil {
			break
		}

		return e.complexity.ConfigNetworking.Ingresses(childComplexity), true

	case "ConfigObservability.grafana":
		if e.complexity.ConfigObservability.Grafana == nil {
			break
		}

		return e.complexity.ConfigObservability.Grafana(childComplexity), true

	case "ConfigPostgres.pitr":
		if e.complexity.ConfigPostgres.Pitr == nil {
			break
		}

		return e.complexity.ConfigPostgres.Pitr(childComplexity), true

	case "ConfigPostgres.resources":
		if e.complexity.ConfigPostgres.Resources == nil {
			break
		}

		return e.complexity.ConfigPostgres.Resources(childComplexity), true

	case "ConfigPostgres.settings":
		if e.complexity.ConfigPostgres.Settings == nil {
			break
		}

		return e.complexity.ConfigPostgres.Settings(childComplexity), true

	case "ConfigPostgres.version":
		if e.complexity.ConfigPostgres.Version == nil {
			break
		}

		return e.complexity.ConfigPostgres.Version(childComplexity), true

	case "ConfigPostgresPitr.retention":
		if e.complexity.ConfigPostgresPitr.Retention == nil {
			break
		}

		return e.complexity.ConfigPostgresPitr.Retention(childComplexity), true

	case "ConfigPostgresResources.compute":
		if e.complexity.ConfigPostgresResources.Compute == nil {
			break
		}

		return e.complexity.ConfigPostgresResources.Compute(childComplexity), true

	case "ConfigPostgresResources.enablePublicAccess":
		if e.complexity.ConfigPostgresResources.EnablePublicAccess == nil {
			break
		}

		return e.complexity.ConfigPostgresResources.EnablePublicAccess(childComplexity), true

	case "ConfigPostgresResources.replicas":
		if e.complexity.ConfigPostgresResources.Replicas == nil {
			break
		}

		return e.complexity.ConfigPostgresResources.Replicas(childComplexity), true

	case "ConfigPostgresResources.storage":
		if e.complexity.ConfigPostgresResources.Storage == nil {
			break
		}

		return e.complexity.ConfigPostgresResources.Storage(childComplexity), true

	case "ConfigPostgresResourcesStorage.capacity":
		if e.complexity.ConfigPostgresResourcesStorage.Capacity == nil {
			break
		}

		return e.complexity.ConfigPostgresResourcesStorage.Capacity(childComplexity), true

	case "ConfigPostgresSettings.archiveTimeout":
		if e.complexity.ConfigPostgresSettings.ArchiveTimeout == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.ArchiveTimeout(childComplexity), true

	case "ConfigPostgresSettings.checkpointCompletionTarget":
		if e.complexity.ConfigPostgresSettings.CheckpointCompletionTarget == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.CheckpointCompletionTarget(childComplexity), true

	case "ConfigPostgresSettings.defaultStatisticsTarget":
		if e.complexity.ConfigPostgresSettings.DefaultStatisticsTarget == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.DefaultStatisticsTarget(childComplexity), true

	case "ConfigPostgresSettings.effectiveCacheSize":
		if e.complexity.ConfigPostgresSettings.EffectiveCacheSize == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.EffectiveCacheSize(childComplexity), true

	case "ConfigPostgresSettings.effectiveIOConcurrency":
		if e.complexity.ConfigPostgresSettings.EffectiveIOConcurrency == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.EffectiveIOConcurrency(childComplexity), true

	case "ConfigPostgresSettings.hugePages":
		if e.complexity.ConfigPostgresSettings.HugePages == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.HugePages(childComplexity), true

	case "ConfigPostgresSettings.jit":
		if e.complexity.ConfigPostgresSettings.Jit == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.Jit(childComplexity), true

	case "ConfigPostgresSettings.maintenanceWorkMem":
		if e.complexity.ConfigPostgresSettings.MaintenanceWorkMem == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaintenanceWorkMem(childComplexity), true

	case "ConfigPostgresSettings.maxConnections":
		if e.complexity.ConfigPostgresSettings.MaxConnections == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxConnections(childComplexity), true

	case "ConfigPostgresSettings.maxParallelMaintenanceWorkers":
		if e.complexity.ConfigPostgresSettings.MaxParallelMaintenanceWorkers == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxParallelMaintenanceWorkers(childComplexity), true

	case "ConfigPostgresSettings.maxParallelWorkers":
		if e.complexity.ConfigPostgresSettings.MaxParallelWorkers == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxParallelWorkers(childComplexity), true

	case "ConfigPostgresSettings.maxParallelWorkersPerGather":
		if e.complexity.ConfigPostgresSettings.MaxParallelWorkersPerGather == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxParallelWorkersPerGather(childComplexity), true

	case "ConfigPostgresSettings.maxReplicationSlots":
		if e.complexity.ConfigPostgresSettings.MaxReplicationSlots == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxReplicationSlots(childComplexity), true

	case "ConfigPostgresSettings.maxWalSenders":
		if e.complexity.ConfigPostgresSettings.MaxWalSenders == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxWalSenders(childComplexity), true

	case "ConfigPostgresSettings.maxWalSize":
		if e.complexity.ConfigPostgresSettings.MaxWalSize == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxWalSize(childComplexity), true

	case "ConfigPostgresSettings.maxWorkerProcesses":
		if e.complexity.ConfigPostgresSettings.MaxWorkerProcesses == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MaxWorkerProcesses(childComplexity), true

	case "ConfigPostgresSettings.minWalSize":
		if e.complexity.ConfigPostgresSettings.MinWalSize == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.MinWalSize(childComplexity), true

	case "ConfigPostgresSettings.randomPageCost":
		if e.complexity.ConfigPostgresSettings.RandomPageCost == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.RandomPageCost(childComplexity), true

	case "ConfigPostgresSettings.sharedBuffers":
		if e.complexity.ConfigPostgresSettings.SharedBuffers == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.SharedBuffers(childComplexity), true

	case "ConfigPostgresSettings.trackIoTiming":
		if e.complexity.ConfigPostgresSettings.TrackIoTiming == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.TrackIoTiming(childComplexity), true

	case "ConfigPostgresSettings.walBuffers":
		if e.complexity.ConfigPostgresSettings.WalBuffers == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.WalBuffers(childComplexity), true

	case "ConfigPostgresSettings.walLevel":
		if e.complexity.ConfigPostgresSettings.WalLevel == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.WalLevel(childComplexity), true

	case "ConfigPostgresSettings.workMem":
		if e.complexity.ConfigPostgresSettings.WorkMem == nil {
			break
		}

		return e.complexity.ConfigPostgresSettings.WorkMem(childComplexity), true

	case "ConfigProvider.sms":
		if e.complexity.ConfigProvider.Sms == nil {
			break
		}

		return e.complexity.ConfigProvider.Sms(childComplexity), true

	case "ConfigProvider.smtp":
		if e.complexity.ConfigProvider.Smtp == nil {
			break
		}

		return e.complexity.ConfigProvider.Smtp(childComplexity), true

	case "ConfigRateLimit.interval":
		if e.complexity.ConfigRateLimit.Interval == nil {
			break
		}

		return e.complexity.ConfigRateLimit.Interval(childComplexity), true

	case "ConfigRateLimit.limit":
		if e.complexity.ConfigRateLimit.Limit == nil {
			break
		}

		return e.complexity.ConfigRateLimit.Limit(childComplexity), true

	case "ConfigResources.autoscaler":
		if e.complexity.ConfigResources.Autoscaler == nil {
			break
		}

		return e.complexity.ConfigResources.Autoscaler(childComplexity), true

	case "ConfigResources.compute":
		if e.complexity.ConfigResources.Compute == nil {
			break
		}

		return e.complexity.ConfigResources.Compute(childComplexity), true

	case "ConfigResources.networking":
		if e.complexity.ConfigResources.Networking == nil {
			break
		}

		return e.complexity.ConfigResources.Networking(childComplexity), true

	case "ConfigResources.replicas":
		if e.complexity.ConfigResources.Replicas == nil {
			break
		}

		return e.complexity.ConfigResources.Replicas(childComplexity), true

	case "ConfigResourcesCompute.cpu":
		if e.complexity.ConfigResourcesCompute.Cpu == nil {
			break
		}

		return e.complexity.ConfigResourcesCompute.Cpu(childComplexity), true

	case "ConfigResourcesCompute.memory":
		if e.complexity.ConfigResourcesCompute.Memory == nil {
			break
		}

		return e.complexity.ConfigResourcesCompute.Memory(childComplexity), true

	case "ConfigRunServiceConfig.command":
		if e.complexity.ConfigRunServiceConfig.Command == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfig.Command(childComplexity), true

	case "ConfigRunServiceConfig.environment":
		if e.complexity.ConfigRunServiceConfig.Environment == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfig.Environment(childComplexity), true

	case "ConfigRunServiceConfig.healthCheck":
		if e.complexity.ConfigRunServiceConfig.HealthCheck == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfig.HealthCheck(childComplexity), true

	case "ConfigRunServiceConfig.image":
		if e.complexity.ConfigRunServiceConfig.Image == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfig.Image(childComplexity), true

	case "ConfigRunServiceConfig.name":
		if e.complexity.ConfigRunServiceConfig.Name == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfig.Name(childComplexity), true

	case "ConfigRunServiceConfig.ports":
		if e.complexity.ConfigRunServiceConfig.Ports == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfig.Ports(childComplexity), true

	case "ConfigRunServiceConfig.resources":
		if e.complexity.ConfigRunServiceConfig.Resources == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfig.Resources(childComplexity), true

	case "ConfigRunServiceConfigWithID.config":
		if e.complexity.ConfigRunServiceConfigWithID.Config == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfigWithID.Config(childComplexity), true

	case "ConfigRunServiceConfigWithID.serviceID":
		if e.complexity.ConfigRunServiceConfigWithID.ServiceID == nil {
			break
		}

		return e.complexity.ConfigRunServiceConfigWithID.ServiceID(childComplexity), true

	case "ConfigRunServiceImage.image":
		if e.complexity.ConfigRunServiceImage.Image == nil {
			break
		}

		return e.complexity.ConfigRunServiceImage.Image(childComplexity), true

	case "ConfigRunServiceImage.pullCredentials":
		if e.complexity.ConfigRunServiceImage.PullCredentials == nil {
			break
		}

		return e.complexity.ConfigRunServiceImage.PullCredentials(childComplexity), true

	case "ConfigRunServicePort.ingresses":
		if e.complexity.ConfigRunServicePort.Ingresses == nil {
			break
		}

		return e.complexity.ConfigRunServicePort.Ingresses(childComplexity), true

	case "ConfigRunServicePort.port":
		if e.complexity.ConfigRunServicePort.Port == nil {
			break
		}

		return e.complexity.ConfigRunServicePort.Port(childComplexity), true

	case "ConfigRunServicePort.publish":
		if e.complexity.ConfigRunServicePort.Publish == nil {
			break
		}

		return e.complexity.ConfigRunServicePort.Publish(childComplexity), true

	case "ConfigRunServicePort.rateLimit":
		if e.complexity.ConfigRunServicePort.RateLimit == nil {
			break
		}

		return e.complexity.ConfigRunServicePort.RateLimit(childComplexity), true

	case "ConfigRunServicePort.type":
		if e.complexity.ConfigRunServicePort.Type == nil {
			break
		}

		return e.complexity.ConfigRunServicePort.Type(childComplexity), true

	case "ConfigRunServiceResources.autoscaler":
		if e.complexity.ConfigRunServiceResources.Autoscaler == nil {
			break
		}

		return e.complexity.ConfigRunServiceResources.Autoscaler(childComplexity), true

	case "ConfigRunServiceResources.compute":
		if e.complexity.ConfigRunServiceResources.Compute == nil {
			break
		}

		return e.complexity.ConfigRunServiceResources.Compute(childComplexity), true

	case "ConfigRunServiceResources.replicas":
		if e.complexity.ConfigRunServiceResources.Replicas == nil {
			break
		}

		return e.complexity.ConfigRunServiceResources.Replicas(childComplexity), true

	case "ConfigRunServiceResources.storage":
		if e.complexity.ConfigRunServiceResources.Storage == nil {
			break
		}

		return e.complexity.ConfigRunServiceResources.Storage(childComplexity), true

	case "ConfigRunServiceResourcesStorage.capacity":
		if e.complexity.ConfigRunServiceResourcesStorage.Capacity == nil {
			break
		}

		return e.complexity.ConfigRunServiceResourcesStorage.Capacity(childComplexity), true

	case "ConfigRunServiceResourcesStorage.name":
		if e.complexity.ConfigRunServiceResourcesStorage.Name == nil {
			break
		}

		return e.complexity.ConfigRunServiceResourcesStorage.Name(childComplexity), true

	case "ConfigRunServiceResourcesStorage.path":
		if e.complexity.ConfigRunServiceResourcesStorage.Path == nil {
			break
		}

		return e.complexity.ConfigRunServiceResourcesStorage.Path(childComplexity), true

	case "ConfigSms.accountSid":
		if e.complexity.ConfigSms.AccountSid == nil {
			break
		}

		return e.complexity.ConfigSms.AccountSid(childComplexity), true

	case "ConfigSms.authToken":
		if e.complexity.ConfigSms.AuthToken == nil {
			break
		}

		return e.complexity.ConfigSms.AuthToken(childComplexity), true

	case "ConfigSms.messagingServiceId":
		if e.complexity.ConfigSms.MessagingServiceId == nil {
			break
		}

		return e.complexity.ConfigSms.MessagingServiceId(childComplexity), true

	case "ConfigSms.provider":
		if e.complexity.ConfigSms.Provider == nil {
			break
		}

		return e.complexity.ConfigSms.Provider(childComplexity), true

	case "ConfigSmtp.host":
		if e.complexity.ConfigSmtp.Host == nil {
			break
		}

		return e.complexity.ConfigSmtp.Host(childComplexity), true

	case "ConfigSmtp.method":
		if e.complexity.ConfigSmtp.Method == nil {
			break
		}

		return e.complexity.ConfigSmtp.Method(childComplexity), true

	case "ConfigSmtp.password":
		if e.complexity.ConfigSmtp.Password == nil {
			break
		}

		return e.complexity.ConfigSmtp.Password(childComplexity), true

	case "ConfigSmtp.port":
		if e.complexity.ConfigSmtp.Port == nil {
			break
		}

		return e.complexity.ConfigSmtp.Port(childComplexity), true

	case "ConfigSmtp.secure":
		if e.complexity.ConfigSmtp.Secure == nil {
			break
		}

		return e.complexity.ConfigSmtp.Secure(childComplexity), true

	case "ConfigSmtp.sender":
		if e.complexity.ConfigSmtp.Sender == nil {
			break
		}

		return e.complexity.ConfigSmtp.Sender(childComplexity), true

	case "ConfigSmtp.user":
		if e.complexity.ConfigSmtp.User == nil {
			break
		}

		return e.complexity.ConfigSmtp.User(childComplexity), true

	case "ConfigStandardOauthProvider.clientId":
		if e.complexity.ConfigStandardOauthProvider.ClientId == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProvider.ClientId(childComplexity), true

	case "ConfigStandardOauthProvider.clientSecret":
		if e.complexity.ConfigStandardOauthProvider.ClientSecret == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProvider.ClientSecret(childComplexity), true

	case "ConfigStandardOauthProvider.enabled":
		if e.complexity.ConfigStandardOauthProvider.Enabled == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProvider.Enabled(childComplexity), true

	case "ConfigStandardOauthProviderWithScope.audience":
		if e.complexity.ConfigStandardOauthProviderWithScope.Audience == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProviderWithScope.Audience(childComplexity), true

	case "ConfigStandardOauthProviderWithScope.clientId":
		if e.complexity.ConfigStandardOauthProviderWithScope.ClientId == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProviderWithScope.ClientId(childComplexity), true

	case "ConfigStandardOauthProviderWithScope.clientSecret":
		if e.complexity.ConfigStandardOauthProviderWithScope.ClientSecret == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProviderWithScope.ClientSecret(childComplexity), true

	case "ConfigStandardOauthProviderWithScope.enabled":
		if e.complexity.ConfigStandardOauthProviderWithScope.Enabled == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProviderWithScope.Enabled(childComplexity), true

	case "ConfigStandardOauthProviderWithScope.scope":
		if e.complexity.ConfigStandardOauthProviderWithScope.Scope == nil {
			break
		}

		return e.complexity.ConfigStandardOauthProviderWithScope.Scope(childComplexity), true

	case "ConfigStorage.antivirus":
		if e.complexity.ConfigStorage.Antivirus == nil {
			break
		}

		return e.complexity.ConfigStorage.Antivirus(childComplexity), true

	case "ConfigStorage.rateLimit":
		if e.complexity.ConfigStorage.RateLimit == nil {
			break
		}

		return e.complexity.ConfigStorage.RateLimit(childComplexity), true

	case "ConfigStorage.resources":
		if e.complexity.ConfigStorage.Resources == nil {
			break
		}

		return e.complexity.ConfigStorage.Resources(childComplexity), true

	case "ConfigStorage.version":
		if e.complexity.ConfigStorage.Version == nil {
			break
		}

		return e.complexity.ConfigStorage.Version(childComplexity), true

	case "ConfigStorageAntivirus.server":
		if e.complexity.ConfigStorageAntivirus.Server == nil {
			break
		}

		return e.complexity.ConfigStorageAntivirus.Server(childComplexity), true

	case "ConfigSystemConfig.auth":
		if e.complexity.ConfigSystemConfig.Auth == nil {
			break
		}

		return e.complexity.ConfigSystemConfig.Auth(childComplexity), true

	case "ConfigSystemConfig.graphql":
		if e.complexity.ConfigSystemConfig.Graphql == nil {
			break
		}

		return e.complexity.ConfigSystemConfig.Graphql(childComplexity), true

	case "ConfigSystemConfig.persistentVolumesEncrypted":
		if e.complexity.ConfigSystemConfig.PersistentVolumesEncrypted == nil {
			break
		}

		return e.complexity.ConfigSystemConfig.PersistentVolumesEncrypted(childComplexity), true

	case "ConfigSystemConfig.postgres":
		if e.complexity.ConfigSystemConfig.Postgres == nil {
			break
		}

		return e.complexity.ConfigSystemConfig.Postgres(childComplexity), true

	case "ConfigSystemConfigAuth.email":
		if e.complexity.ConfigSystemConfigAuth.Email == nil {
			break
		}

		return e.complexity.ConfigSystemConfigAuth.Email(childComplexity), true

	case "ConfigSystemConfigAuthEmail.templates":
		if e.complexity.ConfigSystemConfigAuthEmail.Templates == nil {
			break
		}

		return e.complexity.ConfigSystemConfigAuthEmail.Templates(childComplexity), true

	case "ConfigSystemConfigAuthEmailTemplates.s3Key":
		if e.complexity.ConfigSystemConfigAuthEmailTemplates.S3Key == nil {
			break
		}

		return e.complexity.ConfigSystemConfigAuthEmailTemplates.S3Key(childComplexity), true

	case "ConfigSystemConfigGraphql.featureAdvancedGraphql":
		if e.complexity.ConfigSystemConfigGraphql.FeatureAdvancedGraphql == nil {
			break
		}

		return e.complexity.ConfigSystemConfigGraphql.FeatureAdvancedGraphql(childComplexity), true

	case "ConfigSystemConfigPostgres.connectionString":
		if e.complexity.ConfigSystemConfigPostgres.ConnectionString == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgres.ConnectionString(childComplexity), true

	case "ConfigSystemConfigPostgres.database":
		if e.complexity.ConfigSystemConfigPostgres.Database == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgres.Database(childComplexity), true

	case "ConfigSystemConfigPostgres.disk":
		if e.complexity.ConfigSystemConfigPostgres.Disk == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgres.Disk(childComplexity), true

	case "ConfigSystemConfigPostgres.enabled":
		if e.complexity.ConfigSystemConfigPostgres.Enabled == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgres.Enabled(childComplexity), true

	case "ConfigSystemConfigPostgres.majorVersion":
		if e.complexity.ConfigSystemConfigPostgres.MajorVersion == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgres.MajorVersion(childComplexity), true

	case "ConfigSystemConfigPostgresConnectionString.auth":
		if e.complexity.ConfigSystemConfigPostgresConnectionString.Auth == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgresConnectionString.Auth(childComplexity), true

	case "ConfigSystemConfigPostgresConnectionString.backup":
		if e.complexity.ConfigSystemConfigPostgresConnectionString.Backup == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgresConnectionString.Backup(childComplexity), true

	case "ConfigSystemConfigPostgresConnectionString.hasura":
		if e.complexity.ConfigSystemConfigPostgresConnectionString.Hasura == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgresConnectionString.Hasura(childComplexity), true

	case "ConfigSystemConfigPostgresConnectionString.storage":
		if e.complexity.ConfigSystemConfigPostgresConnectionString.Storage == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgresConnectionString.Storage(childComplexity), true

	case "ConfigSystemConfigPostgresDisk.iops":
		if e.complexity.ConfigSystemConfigPostgresDisk.Iops == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgresDisk.Iops(childComplexity), true

	case "ConfigSystemConfigPostgresDisk.tput":
		if e.complexity.ConfigSystemConfigPostgresDisk.Tput == nil {
			break
		}

		return e.complexity.ConfigSystemConfigPostgresDisk.Tput(childComplexity), true

	case "InsertRunServiceConfigResponse.config":
		if e.complexity.InsertRunServiceConfigResponse.Config == nil {
			break
		}

		return e.complexity.InsertRunServiceConfigResponse.Config(childComplexity), true

	case "InsertRunServiceConfigResponse.serviceID":
		if e.complexity.InsertRunServiceConfigResponse.ServiceID == nil {
			break
		}

		return e.complexity.InsertRunServiceConfigResponse.ServiceID(childComplexity), true

	case "Mutation.changeDatabaseVersion":
		if e.complexity.Mutation.ChangeDatabaseVersion == nil {
			break
		}

		args, err := ec.field_Mutation_changeDatabaseVersion_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeDatabaseVersion(childComplexity, args["appID"].(string), args["version"].(string), args["force"].(*bool)), true

	case "Mutation.deleteConfig":
		if e.complexity.Mutation.DeleteConfig == nil {
			break
		}

		args, err := ec.field_Mutation_deleteConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConfig(childComplexity, args["appID"].(string)), true

	case "Mutation.deleteRunServiceConfig":
		if e.complexity.Mutation.DeleteRunServiceConfig == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRunServiceConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRunServiceConfig(childComplexity, args["appID"].(string), args["serviceID"].(string)), true

	case "Mutation.deleteSecret":
		if e.complexity.Mutation.DeleteSecret == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSecret_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSecret(childComplexity, args["appID"].(string), args["key"].(string)), true

	case "Mutation.insertConfig":
		if e.complexity.Mutation.InsertConfig == nil {
			break
		}

		args, err := ec.field_Mutation_insertConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertConfig(childComplexity, args["appID"].(string), args["config"].(model.ConfigConfigInsertInput), args["systemConfig"].(model.ConfigSystemConfigInsertInput), args["secrets"].([]*model.ConfigEnvironmentVariableInsertInput)), true

	case "Mutation.insertRunServiceConfig":
		if e.complexity.Mutation.InsertRunServiceConfig == nil {
			break
		}

		args, err := ec.field_Mutation_insertRunServiceConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRunServiceConfig(childComplexity, args["appID"].(string), args["config"].(model.ConfigRunServiceConfigInsertInput)), true

	case "Mutation.insertSecret":
		if e.complexity.Mutation.InsertSecret == nil {
			break
		}

		args, err := ec.field_Mutation_insertSecret_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSecret(childComplexity, args["appID"].(string), args["secret"].(model.ConfigEnvironmentVariableInsertInput)), true

	case "Mutation.replaceConfig":
		if e.complexity.Mutation.ReplaceConfig == nil {
			break
		}

		args, err := ec.field_Mutation_replaceConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceConfig(childComplexity, args["appID"].(string), args["config"].(model.ConfigConfigInsertInput)), true

	case "Mutation.replaceConfigRawJSON":
		if e.complexity.Mutation.ReplaceConfigRawJSON == nil {
			break
		}

		args, err := ec.field_Mutation_replaceConfigRawJSON_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceConfigRawJSON(childComplexity, args["appID"].(string), args["rawJSON"].(string)), true

	case "Mutation.replaceRunServiceConfig":
		if e.complexity.Mutation.ReplaceRunServiceConfig == nil {
			break
		}

		args, err := ec.field_Mutation_replaceRunServiceConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceRunServiceConfig(childComplexity, args["appID"].(string), args["serviceID"].(string), args["config"].(model.ConfigRunServiceConfigInsertInput)), true

	case "Mutation.updateConfig":
		if e.complexity.Mutation.UpdateConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConfig(childComplexity, args["appID"].(string), args["config"].(model.ConfigConfigUpdateInput)), true

	case "Mutation.updateRunServiceConfig":
		if e.complexity.Mutation.UpdateRunServiceConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateRunServiceConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRunServiceConfig(childComplexity, args["appID"].(string), args["serviceID"].(string), args["config"].(model.ConfigRunServiceConfigUpdateInput)), true

	case "Mutation.updateSecret":
		if e.complexity.Mutation.UpdateSecret == nil {
			break
		}

		args, err := ec.field_Mutation_updateSecret_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSecret(childComplexity, args["appID"].(string), args["secret"].(model.ConfigEnvironmentVariableInsertInput)), true

	case "Mutation.updateSystemConfig":
		if e.complexity.Mutation.UpdateSystemConfig == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemConfig(childComplexity, args["appID"].(string), args["systemConfig"].(model.ConfigSystemConfigUpdateInput)), true

	case "Query.appSecrets":
		if e.complexity.Query.AppSecrets == nil {
			break
		}

		args, err := ec.field_Query_appSecrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppSecrets(childComplexity, args["appID"].(string)), true

	case "Query.appsSecrets":
		if e.complexity.Query.AppsSecrets == nil {
			break
		}

		return e.complexity.Query.AppsSecrets(childComplexity), true

	case "Query.config":
		if e.complexity.Query.Config == nil {
			break
		}

		args, err := ec.field_Query_config_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Config(childComplexity, args["appID"].(string), args["resolve"].(bool)), true

	case "Query.configRawJSON":
		if e.complexity.Query.ConfigRawJSON == nil {
			break
		}

		args, err := ec.field_Query_configRawJSON_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConfigRawJSON(childComplexity, args["appID"].(string), args["resolve"].(bool)), true

	case "Query.configs":
		if e.complexity.Query.Configs == nil {
			break
		}

		args, err := ec.field_Query_configs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Configs(childComplexity, args["resolve"].(bool), args["where"].(*model.ConfigConfigComparisonExp)), true

	case "Query.runServiceConfig":
		if e.complexity.Query.RunServiceConfig == nil {
			break
		}

		args, err := ec.field_Query_runServiceConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RunServiceConfig(childComplexity, args["appID"].(string), args["serviceID"].(string), args["resolve"].(bool)), true

	case "Query.runServiceConfigRawJSON":
		if e.complexity.Query.RunServiceConfigRawJSON == nil {
			break
		}

		args, err := ec.field_Query_runServiceConfigRawJSON_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RunServiceConfigRawJSON(childComplexity, args["appID"].(string), args["serviceID"].(string), args["resolve"].(bool)), true

	case "Query.runServiceConfigs":
		if e.complexity.Query.RunServiceConfigs == nil {
			break
		}

		args, err := ec.field_Query_runServiceConfigs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RunServiceConfigs(childComplexity, args["appID"].(string), args["resolve"].(bool)), true

	case "Query.runServiceConfigsAll":
		if e.complexity.Query.RunServiceConfigsAll == nil {
			break
		}

		args, err := ec.field_Query_runServiceConfigsAll_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RunServiceConfigsAll(childComplexity, args["resolve"].(bool), args["where"].(*model.ConfigRunServiceConfigComparisonExp)), true

	case "Query.systemConfig":
		if e.complexity.Query.SystemConfig == nil {
			break
		}

		args, err := ec.field_Query_systemConfig_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemConfig(childComplexity, args["appID"].(string)), true

	case "Query.systemConfigs":
		if e.complexity.Query.SystemConfigs == nil {
			break
		}

		args, err := ec.field_Query_systemConfigs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemConfigs(childComplexity, args["where"].(*model.ConfigSystemConfigComparisonExp)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputConfigAIAutoEmbeddingsComparisonExp,
		ec.unmarshalInputConfigAIAutoEmbeddingsInsertInput,
		ec.unmarshalInputConfigAIComparisonExp,
		ec.unmarshalInputConfigAIInsertInput,
		ec.unmarshalInputConfigAIOpenaiComparisonExp,
		ec.unmarshalInputConfigAIOpenaiInsertInput,
		ec.unmarshalInputConfigAIResourcesComparisonExp,
		ec.unmarshalInputConfigAIResourcesInsertInput,
		ec.unmarshalInputConfigAuthComparisonExp,
		ec.unmarshalInputConfigAuthElevatedPrivilegesComparisonExp,
		ec.unmarshalInputConfigAuthElevatedPrivilegesInsertInput,
		ec.unmarshalInputConfigAuthInsertInput,
		ec.unmarshalInputConfigAuthMethodAnonymousComparisonExp,
		ec.unmarshalInputConfigAuthMethodAnonymousInsertInput,
		ec.unmarshalInputConfigAuthMethodComparisonExp,
		ec.unmarshalInputConfigAuthMethodEmailPasswordComparisonExp,
		ec.unmarshalInputConfigAuthMethodEmailPasswordInsertInput,
		ec.unmarshalInputConfigAuthMethodEmailPasswordlessComparisonExp,
		ec.unmarshalInputConfigAuthMethodEmailPasswordlessInsertInput,
		ec.unmarshalInputConfigAuthMethodInsertInput,
		ec.unmarshalInputConfigAuthMethodOauthAppleComparisonExp,
		ec.unmarshalInputConfigAuthMethodOauthAppleInsertInput,
		ec.unmarshalInputConfigAuthMethodOauthAzureadComparisonExp,
		ec.unmarshalInputConfigAuthMethodOauthAzureadInsertInput,
		ec.unmarshalInputConfigAuthMethodOauthComparisonExp,
		ec.unmarshalInputConfigAuthMethodOauthEntraidComparisonExp,
		ec.unmarshalInputConfigAuthMethodOauthEntraidInsertInput,
		ec.unmarshalInputConfigAuthMethodOauthInsertInput,
		ec.unmarshalInputConfigAuthMethodOauthTwitterComparisonExp,
		ec.unmarshalInputConfigAuthMethodOauthTwitterInsertInput,
		ec.unmarshalInputConfigAuthMethodOauthWorkosComparisonExp,
		ec.unmarshalInputConfigAuthMethodOauthWorkosInsertInput,
		ec.unmarshalInputConfigAuthMethodOtpComparisonExp,
		ec.unmarshalInputConfigAuthMethodOtpEmailComparisonExp,
		ec.unmarshalInputConfigAuthMethodOtpEmailInsertInput,
		ec.unmarshalInputConfigAuthMethodOtpInsertInput,
		ec.unmarshalInputConfigAuthMethodSmsPasswordlessComparisonExp,
		ec.unmarshalInputConfigAuthMethodSmsPasswordlessInsertInput,
		ec.unmarshalInputConfigAuthMethodWebauthnAttestationComparisonExp,
		ec.unmarshalInputConfigAuthMethodWebauthnAttestationInsertInput,
		ec.unmarshalInputConfigAuthMethodWebauthnComparisonExp,
		ec.unmarshalInputConfigAuthMethodWebauthnInsertInput,
		ec.unmarshalInputConfigAuthMethodWebauthnRelyingPartyComparisonExp,
		ec.unmarshalInputConfigAuthMethodWebauthnRelyingPartyInsertInput,
		ec.unmarshalInputConfigAuthMiscComparisonExp,
		ec.unmarshalInputConfigAuthMiscInsertInput,
		ec.unmarshalInputConfigAuthRateLimitComparisonExp,
		ec.unmarshalInputConfigAuthRateLimitInsertInput,
		ec.unmarshalInputConfigAuthRedirectionsComparisonExp,
		ec.unmarshalInputConfigAuthRedirectionsInsertInput,
		ec.unmarshalInputConfigAuthSessionAccessTokenComparisonExp,
		ec.unmarshalInputConfigAuthSessionAccessTokenInsertInput,
		ec.unmarshalInputConfigAuthSessionComparisonExp,
		ec.unmarshalInputConfigAuthSessionInsertInput,
		ec.unmarshalInputConfigAuthSessionRefreshTokenComparisonExp,
		ec.unmarshalInputConfigAuthSessionRefreshTokenInsertInput,
		ec.unmarshalInputConfigAuthSignUpComparisonExp,
		ec.unmarshalInputConfigAuthSignUpInsertInput,
		ec.unmarshalInputConfigAuthSignUpTurnstileComparisonExp,
		ec.unmarshalInputConfigAuthSignUpTurnstileInsertInput,
		ec.unmarshalInputConfigAuthTotpComparisonExp,
		ec.unmarshalInputConfigAuthTotpInsertInput,
		ec.unmarshalInputConfigAuthUserComparisonExp,
		ec.unmarshalInputConfigAuthUserEmailComparisonExp,
		ec.unmarshalInputConfigAuthUserEmailDomainsComparisonExp,
		ec.unmarshalInputConfigAuthUserEmailDomainsInsertInput,
		ec.unmarshalInputConfigAuthUserEmailInsertInput,
		ec.unmarshalInputConfigAuthUserGravatarComparisonExp,
		ec.unmarshalInputConfigAuthUserGravatarInsertInput,
		ec.unmarshalInputConfigAuthUserInsertInput,
		ec.unmarshalInputConfigAuthUserLocaleComparisonExp,
		ec.unmarshalInputConfigAuthUserLocaleInsertInput,
		ec.unmarshalInputConfigAuthUserRolesComparisonExp,
		ec.unmarshalInputConfigAuthUserRolesInsertInput,
		ec.unmarshalInputConfigAuthsessionaccessTokenCustomClaimsComparisonExp,
		ec.unmarshalInputConfigAuthsessionaccessTokenCustomClaimsInsertInput,
		ec.unmarshalInputConfigAutoscalerComparisonExp,
		ec.unmarshalInputConfigAutoscalerInsertInput,
		ec.unmarshalInputConfigBooleanComparisonExp,
		ec.unmarshalInputConfigClaimMapComparisonExp,
		ec.unmarshalInputConfigClaimMapInsertInput,
		ec.unmarshalInputConfigComputeResourcesComparisonExp,
		ec.unmarshalInputConfigComputeResourcesInsertInput,
		ec.unmarshalInputConfigConfigComparisonExp,
		ec.unmarshalInputConfigConfigInsertInput,
		ec.unmarshalInputConfigEmailComparisonExp,
		ec.unmarshalInputConfigEnvironmentVariableComparisonExp,
		ec.unmarshalInputConfigEnvironmentVariableInsertInput,
		ec.unmarshalInputConfigFloatComparisonExp,
		ec.unmarshalInputConfigFunctionsComparisonExp,
		ec.unmarshalInputConfigFunctionsInsertInput,
		ec.unmarshalInputConfigFunctionsNodeComparisonExp,
		ec.unmarshalInputConfigFunctionsNodeInsertInput,
		ec.unmarshalInputConfigFunctionsResourcesComparisonExp,
		ec.unmarshalInputConfigFunctionsResourcesInsertInput,
		ec.unmarshalInputConfigGlobalComparisonExp,
		ec.unmarshalInputConfigGlobalEnvironmentVariableComparisonExp,
		ec.unmarshalInputConfigGlobalEnvironmentVariableInsertInput,
		ec.unmarshalInputConfigGlobalInsertInput,
		ec.unmarshalInputConfigGrafanaAlertingComparisonExp,
		ec.unmarshalInputConfigGrafanaAlertingInsertInput,
		ec.unmarshalInputConfigGrafanaComparisonExp,
		ec.unmarshalInputConfigGrafanaContactsComparisonExp,
		ec.unmarshalInputConfigGrafanaContactsInsertInput,
		ec.unmarshalInputConfigGrafanaInsertInput,
		ec.unmarshalInputConfigGrafanaSmtpComparisonExp,
		ec.unmarshalInputConfigGrafanaSmtpInsertInput,
		ec.unmarshalInputConfigGrafanacontactsDiscordComparisonExp,
		ec.unmarshalInputConfigGrafanacontactsDiscordInsertInput,
		ec.unmarshalInputConfigGrafanacontactsPagerdutyComparisonExp,
		ec.unmarshalInputConfigGrafanacontactsPagerdutyInsertInput,
		ec.unmarshalInputConfigGrafanacontactsSlackComparisonExp,
		ec.unmarshalInputConfigGrafanacontactsSlackInsertInput,
		ec.unmarshalInputConfigGrafanacontactsWebhookComparisonExp,
		ec.unmarshalInputConfigGrafanacontactsWebhookInsertInput,
		ec.unmarshalInputConfigGraphqlComparisonExp,
		ec.unmarshalInputConfigGraphqlInsertInput,
		ec.unmarshalInputConfigGraphqlSecurityComparisonExp,
		ec.unmarshalInputConfigGraphqlSecurityInsertInput,
		ec.unmarshalInputConfigHasuraAPIsComparisonExp,
		ec.unmarshalInputConfigHasuraAuthHookComparisonExp,
		ec.unmarshalInputConfigHasuraAuthHookInsertInput,
		ec.unmarshalInputConfigHasuraComparisonExp,
		ec.unmarshalInputConfigHasuraEventsComparisonExp,
		ec.unmarshalInputConfigHasuraEventsInsertInput,
		ec.unmarshalInputConfigHasuraInsertInput,
		ec.unmarshalInputConfigHasuraLogsComparisonExp,
		ec.unmarshalInputConfigHasuraLogsInsertInput,
		ec.unmarshalInputConfigHasuraSettingsComparisonExp,
		ec.unmarshalInputConfigHasuraSettingsInsertInput,
		ec.unmarshalInputConfigHealthCheckComparisonExp,
		ec.unmarshalInputConfigHealthCheckInsertInput,
		ec.unmarshalInputConfigIngressComparisonExp,
		ec.unmarshalInputConfigIngressInsertInput,
		ec.unmarshalInputConfigIngressTlsComparisonExp,
		ec.unmarshalInputConfigIngressTlsInsertInput,
		ec.unmarshalInputConfigInt16ComparisonExp,
		ec.unmarshalInputConfigInt32ComparisonExp,
		ec.unmarshalInputConfigInt64ComparisonExp,
		ec.unmarshalInputConfigInt8ComparisonExp,
		ec.unmarshalInputConfigIntComparisonExp,
		ec.unmarshalInputConfigJWTSecretComparisonExp,
		ec.unmarshalInputConfigJWTSecretInsertInput,
		ec.unmarshalInputConfigLocaleComparisonExp,
		ec.unmarshalInputConfigNetworkingComparisonExp,
		ec.unmarshalInputConfigNetworkingInsertInput,
		ec.unmarshalInputConfigObservabilityComparisonExp,
		ec.unmarshalInputConfigObservabilityInsertInput,
		ec.unmarshalInputConfigPortComparisonExp,
		ec.unmarshalInputConfigPostgresComparisonExp,
		ec.unmarshalInputConfigPostgresInsertInput,
		ec.unmarshalInputConfigPostgresPitrComparisonExp,
		ec.unmarshalInputConfigPostgresPitrInsertInput,
		ec.unmarshalInputConfigPostgresResourcesComparisonExp,
		ec.unmarshalInputConfigPostgresResourcesInsertInput,
		ec.unmarshalInputConfigPostgresResourcesStorageComparisonExp,
		ec.unmarshalInputConfigPostgresResourcesStorageInsertInput,
		ec.unmarshalInputConfigPostgresSettingsComparisonExp,
		ec.unmarshalInputConfigPostgresSettingsInsertInput,
		ec.unmarshalInputConfigProviderComparisonExp,
		ec.unmarshalInputConfigProviderInsertInput,
		ec.unmarshalInputConfigRateLimitComparisonExp,
		ec.unmarshalInputConfigRateLimitInsertInput,
		ec.unmarshalInputConfigResourcesComparisonExp,
		ec.unmarshalInputConfigResourcesComputeComparisonExp,
		ec.unmarshalInputConfigResourcesComputeInsertInput,
		ec.unmarshalInputConfigResourcesInsertInput,
		ec.unmarshalInputConfigRunServiceConfigComparisonExp,
		ec.unmarshalInputConfigRunServiceConfigInsertInput,
		ec.unmarshalInputConfigRunServiceImageComparisonExp,
		ec.unmarshalInputConfigRunServiceImageInsertInput,
		ec.unmarshalInputConfigRunServiceNameComparisonExp,
		ec.unmarshalInputConfigRunServicePortComparisonExp,
		ec.unmarshalInputConfigRunServicePortInsertInput,
		ec.unmarshalInputConfigRunServiceResourcesComparisonExp,
		ec.unmarshalInputConfigRunServiceResourcesInsertInput,
		ec.unmarshalInputConfigRunServiceResourcesStorageComparisonExp,
		ec.unmarshalInputConfigRunServiceResourcesStorageInsertInput,
		ec.unmarshalInputConfigSmsComparisonExp,
		ec.unmarshalInputConfigSmsInsertInput,
		ec.unmarshalInputConfigSmtpComparisonExp,
		ec.unmarshalInputConfigSmtpInsertInput,
		ec.unmarshalInputConfigStandardOauthProviderComparisonExp,
		ec.unmarshalInputConfigStandardOauthProviderInsertInput,
		ec.unmarshalInputConfigStandardOauthProviderWithScopeComparisonExp,
		ec.unmarshalInputConfigStandardOauthProviderWithScopeInsertInput,
		ec.unmarshalInputConfigStorageAntivirusComparisonExp,
		ec.unmarshalInputConfigStorageAntivirusInsertInput,
		ec.unmarshalInputConfigStorageComparisonExp,
		ec.unmarshalInputConfigStorageInsertInput,
		ec.unmarshalInputConfigStringComparisonExp,
		ec.unmarshalInputConfigSystemConfigAuthComparisonExp,
		ec.unmarshalInputConfigSystemConfigAuthEmailComparisonExp,
		ec.unmarshalInputConfigSystemConfigAuthEmailInsertInput,
		ec.unmarshalInputConfigSystemConfigAuthEmailTemplatesComparisonExp,
		ec.unmarshalInputConfigSystemConfigAuthEmailTemplatesInsertInput,
		ec.unmarshalInputConfigSystemConfigAuthInsertInput,
		ec.unmarshalInputConfigSystemConfigComparisonExp,
		ec.unmarshalInputConfigSystemConfigGraphqlComparisonExp,
		ec.unmarshalInputConfigSystemConfigGraphqlInsertInput,
		ec.unmarshalInputConfigSystemConfigInsertInput,
		ec.unmarshalInputConfigSystemConfigPostgresComparisonExp,
		ec.unmarshalInputConfigSystemConfigPostgresConnectionStringComparisonExp,
		ec.unmarshalInputConfigSystemConfigPostgresConnectionStringInsertInput,
		ec.unmarshalInputConfigSystemConfigPostgresDiskComparisonExp,
		ec.unmarshalInputConfigSystemConfigPostgresDiskInsertInput,
		ec.unmarshalInputConfigSystemConfigPostgresInsertInput,
		ec.unmarshalInputConfigUint16ComparisonExp,
		ec.unmarshalInputConfigUint32ComparisonExp,
		ec.unmarshalInputConfigUint64ComparisonExp,
		ec.unmarshalInputConfigUint8ComparisonExp,
		ec.unmarshalInputConfigUintComparisonExp,
		ec.unmarshalInputConfigUrlComparisonExp,
		ec.unmarshalInputConfigUserRoleComparisonExp,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../schema/schema.graphqls", Input: `directive @hasAppVisibility on ARGUMENT_DEFINITION
directive @hasRole(
    role: [String!]!,
) on FIELD_DEFINITION

scalar uuid


type ConfigAppConfig {
    appID: uuid!
    config: ConfigConfig!
}

type ConfigAppSecrets {
    appID: uuid!
    secrets: [ConfigEnvironmentVariable!]!
}

type ConfigAppSystemConfig {
    appID: uuid!
    systemConfig: ConfigSystemConfig!
}

type ConfigInsertConfigResponse {
    config: ConfigConfig!
    systemConfig: ConfigSystemConfig!
    secrets: [ConfigEnvironmentVariable!]!
}

type ConfigRunServiceConfigWithID {
    serviceID: uuid!
    config: ConfigRunServiceConfig!
}

type InsertRunServiceConfigResponse {
    serviceID: uuid!
    config: ConfigRunServiceConfig!
}

type Query {
    configRawJSON(
        appID: uuid! @hasAppVisibility,
        resolve: Boolean!,
    ):String!

    config(
        appID: uuid! @hasAppVisibility,
        resolve: Boolean!,
    ):ConfigConfig
    configs(
        resolve: Boolean!,
        where: ConfigConfigComparisonExp
    ): [ConfigAppConfig!]! @hasRole(role: ["admin"]),

    appSecrets(
        appID: uuid! @hasAppVisibility,
    ): [ConfigEnvironmentVariable!]!

    appsSecrets: [ConfigAppSecrets!]

    systemConfig(
        appID: uuid! @hasAppVisibility,
    ):ConfigSystemConfig
    systemConfigs(
        where: ConfigSystemConfigComparisonExp
    ): [ConfigAppSystemConfig!]! @hasRole(role: ["admin", "sa:factorio", "sa:bragi", "sa:watchtower"])

    runServiceConfigRawJSON(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        resolve: Boolean!,
    ):String!
    runServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        resolve: Boolean!,
    ): ConfigRunServiceConfig
    runServiceConfigs(
        appID: uuid! @hasAppVisibility,
        resolve: Boolean!,
    ): [ConfigRunServiceConfigWithID!]!
    runServiceConfigsAll(
        resolve: Boolean!,
        where: ConfigRunServiceConfigComparisonExp,
    ): [ConfigRunServiceConfigWithID!]! @hasRole(role: ["admin"]),
}


type Mutation {
    updateConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigConfigUpdateInput!,
    ): ConfigConfig!
    replaceConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigConfigInsertInput!,
    ): ConfigConfig!
    replaceConfigRawJSON(
        appID: uuid! @hasAppVisibility,
        rawJSON: String!,
    ):String!
    insertConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigConfigInsertInput!,
        systemConfig: ConfigSystemConfigInsertInput!,
        secrets: [ConfigEnvironmentVariableInsertInput!],
    ): ConfigInsertConfigResponse!
    deleteConfig(
        appID: uuid! @hasAppVisibility,
    ): ConfigConfig
    changeDatabaseVersion(
        appID: uuid! @hasAppVisibility,
        version: String!,
        force: Boolean,
    ): Boolean!

    insertSecret(
        appID: uuid! @hasAppVisibility,
        secret: ConfigEnvironmentVariableInsertInput!,
    ): ConfigEnvironmentVariable!
    updateSecret(
        appID: uuid! @hasAppVisibility,
        secret: ConfigEnvironmentVariableInsertInput!,
    ): ConfigEnvironmentVariable!
    deleteSecret(
        appID: uuid! @hasAppVisibility,
        key: String!,
    ): ConfigEnvironmentVariable

    updateSystemConfig(
        appID: uuid! @hasAppVisibility,
        systemConfig: ConfigSystemConfigUpdateInput!,
    ): ConfigSystemConfig! @hasRole(role: ["admin", "sa:factorio", "sa:watchtower"])

    insertRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigRunServiceConfigInsertInput!,
    ): InsertRunServiceConfigResponse!
    updateRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        config: ConfigRunServiceConfigUpdateInput!,
    ): ConfigRunServiceConfig!
    replaceRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        config: ConfigRunServiceConfigInsertInput!,
    ): ConfigRunServiceConfig!
    deleteRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
    ): ConfigRunServiceConfig
}
`, BuiltIn: false},
	{Name: "../../schema/schema_gen.graphqls", Input: `# Code generated by github.com/nhost/be/tools/cuegraph, DO NOT EDIT.

scalar ConfigInt8

input ConfigInt8ComparisonExp {
    _eq: ConfigInt8
    _neq: ConfigInt8
    _in: [ConfigInt8!]
    _nin: [ConfigInt8!]
}

scalar ConfigInt16

input ConfigInt16ComparisonExp {
    _eq: ConfigInt16
    _neq: ConfigInt16
    _in: [ConfigInt16!]
    _nin: [ConfigInt16!]
}

scalar ConfigInt32

input ConfigInt32ComparisonExp {
    _eq: ConfigInt32
    _neq: ConfigInt32
    _in: [ConfigInt32!]
    _nin: [ConfigInt32!]
}

scalar ConfigInt64

input ConfigInt64ComparisonExp {
    _eq: ConfigInt64
    _neq: ConfigInt64
    _in: [ConfigInt64!]
    _nin: [ConfigInt64!]
}

scalar ConfigUint

input ConfigUintComparisonExp {
    _eq: ConfigUint
    _neq: ConfigUint
    _in: [ConfigUint!]
    _nin: [ConfigUint!]
}

scalar ConfigUint8

input ConfigUint8ComparisonExp {
    _eq: ConfigUint8
    _neq: ConfigUint8
    _in: [ConfigUint8!]
    _nin: [ConfigUint8!]
}

scalar ConfigUint16

input ConfigUint16ComparisonExp {
    _eq: ConfigUint16
    _neq: ConfigUint16
    _in: [ConfigUint16!]
    _nin: [ConfigUint16!]
}

scalar ConfigUint32

input ConfigUint32ComparisonExp {
    _eq: ConfigUint32
    _neq: ConfigUint32
    _in: [ConfigUint32!]
    _nin: [ConfigUint32!]
}

scalar ConfigUint64

input ConfigUint64ComparisonExp {
    _eq: ConfigUint64
    _neq: ConfigUint64
    _in: [ConfigUint64!]
    _nin: [ConfigUint64!]
}

input ConfigStringComparisonExp {
    _eq: String
    _neq: String
    _in: [String!]
    _nin: [String!]
}

input ConfigIntComparisonExp {
    _eq: Int
    _neq: Int
    _in: [Int!]
    _nin: [Int!]
}

input ConfigFloatComparisonExp {
    _eq: Float
    _neq: Float
    _in: [Float!]
    _nin: [Float!]
}

input ConfigBooleanComparisonExp {
    _eq: Boolean
    _neq: Boolean
    _in: [Boolean!]
    _nin: [Boolean!]
}

"""

"""
type ConfigAI {
    """

    """
    version: String
    """

    """
    resources: ConfigAIResources!
    """

    """
    openai: ConfigAIOpenai!
    """

    """
    autoEmbeddings: ConfigAIAutoEmbeddings
    """

    """
    webhookSecret: String!
}

input ConfigAIUpdateInput {
    version: String
    resources: ConfigAIResourcesUpdateInput
    openai: ConfigAIOpenaiUpdateInput
    autoEmbeddings: ConfigAIAutoEmbeddingsUpdateInput
    webhookSecret: String
}

input ConfigAIInsertInput {
    version: String
    resources: ConfigAIResourcesInsertInput!
    openai: ConfigAIOpenaiInsertInput!
    autoEmbeddings: ConfigAIAutoEmbeddingsInsertInput
    webhookSecret: String!
}

input ConfigAIComparisonExp {
    _and: [ConfigAIComparisonExp!]
    _not: ConfigAIComparisonExp
    _or: [ConfigAIComparisonExp!]
    version: ConfigStringComparisonExp
    resources: ConfigAIResourcesComparisonExp
    openai: ConfigAIOpenaiComparisonExp
    autoEmbeddings: ConfigAIAutoEmbeddingsComparisonExp
    webhookSecret: ConfigStringComparisonExp
}

"""

"""
type ConfigAIAutoEmbeddings {
    """

    """
    synchPeriodMinutes: ConfigUint32
}

input ConfigAIAutoEmbeddingsUpdateInput {
    synchPeriodMinutes: ConfigUint32
}

input ConfigAIAutoEmbeddingsInsertInput {
    synchPeriodMinutes: ConfigUint32
}

input ConfigAIAutoEmbeddingsComparisonExp {
    _and: [ConfigAIAutoEmbeddingsComparisonExp!]
    _not: ConfigAIAutoEmbeddingsComparisonExp
    _or: [ConfigAIAutoEmbeddingsComparisonExp!]
    synchPeriodMinutes: ConfigUint32ComparisonExp
}

"""

"""
type ConfigAIOpenai {
    """

    """
    organization: String
    """

    """
    apiKey: String!
}

input ConfigAIOpenaiUpdateInput {
    organization: String
    apiKey: String
}

input ConfigAIOpenaiInsertInput {
    organization: String
    apiKey: String!
}

input ConfigAIOpenaiComparisonExp {
    _and: [ConfigAIOpenaiComparisonExp!]
    _not: ConfigAIOpenaiComparisonExp
    _or: [ConfigAIOpenaiComparisonExp!]
    organization: ConfigStringComparisonExp
    apiKey: ConfigStringComparisonExp
}

"""

"""
type ConfigAIResources {
    """

    """
    compute: ConfigComputeResources!
}

input ConfigAIResourcesUpdateInput {
    compute: ConfigComputeResourcesUpdateInput
}

input ConfigAIResourcesInsertInput {
    compute: ConfigComputeResourcesInsertInput!
}

input ConfigAIResourcesComparisonExp {
    _and: [ConfigAIResourcesComparisonExp!]
    _not: ConfigAIResourcesComparisonExp
    _or: [ConfigAIResourcesComparisonExp!]
    compute: ConfigComputeResourcesComparisonExp
}

"""
Configuration for auth service
You can find more information about the configuration here:
https://github.com/nhost/hasura-auth/blob/main/docs/environment-variables.md
"""
type ConfigAuth {
    """
    Version of auth, you can see available versions in the URL below:
    https://hub.docker.com/r/nhost/hasura-auth/tags
    
    Releases:
    
    https://github.com/nhost/hasura-auth/releases
    """
    version: String
    """
    Resources for the service
    """
    resources: ConfigResources
    """

    """
    elevatedPrivileges: ConfigAuthElevatedPrivileges
    """

    """
    redirections: ConfigAuthRedirections
    """

    """
    signUp: ConfigAuthSignUp
    """

    """
    user: ConfigAuthUser
    """

    """
    session: ConfigAuthSession
    """

    """
    method: ConfigAuthMethod
    """

    """
    totp: ConfigAuthTotp
    """

    """
    misc: ConfigAuthMisc
    """

    """
    rateLimit: ConfigAuthRateLimit
}

input ConfigAuthUpdateInput {
    version: String
    resources: ConfigResourcesUpdateInput
    elevatedPrivileges: ConfigAuthElevatedPrivilegesUpdateInput
    redirections: ConfigAuthRedirectionsUpdateInput
    signUp: ConfigAuthSignUpUpdateInput
    user: ConfigAuthUserUpdateInput
    session: ConfigAuthSessionUpdateInput
    method: ConfigAuthMethodUpdateInput
    totp: ConfigAuthTotpUpdateInput
    misc: ConfigAuthMiscUpdateInput
    rateLimit: ConfigAuthRateLimitUpdateInput
}

input ConfigAuthInsertInput {
    version: String
    resources: ConfigResourcesInsertInput
    elevatedPrivileges: ConfigAuthElevatedPrivilegesInsertInput
    redirections: ConfigAuthRedirectionsInsertInput
    signUp: ConfigAuthSignUpInsertInput
    user: ConfigAuthUserInsertInput
    session: ConfigAuthSessionInsertInput
    method: ConfigAuthMethodInsertInput
    totp: ConfigAuthTotpInsertInput
    misc: ConfigAuthMiscInsertInput
    rateLimit: ConfigAuthRateLimitInsertInput
}

input ConfigAuthComparisonExp {
    _and: [ConfigAuthComparisonExp!]
    _not: ConfigAuthComparisonExp
    _or: [ConfigAuthComparisonExp!]
    version: ConfigStringComparisonExp
    resources: ConfigResourcesComparisonExp
    elevatedPrivileges: ConfigAuthElevatedPrivilegesComparisonExp
    redirections: ConfigAuthRedirectionsComparisonExp
    signUp: ConfigAuthSignUpComparisonExp
    user: ConfigAuthUserComparisonExp
    session: ConfigAuthSessionComparisonExp
    method: ConfigAuthMethodComparisonExp
    totp: ConfigAuthTotpComparisonExp
    misc: ConfigAuthMiscComparisonExp
    rateLimit: ConfigAuthRateLimitComparisonExp
}

"""

"""
type ConfigAuthElevatedPrivileges {
    """

    """
    mode: String
}

input ConfigAuthElevatedPrivilegesUpdateInput {
    mode: String
}

input ConfigAuthElevatedPrivilegesInsertInput {
    mode: String
}

input ConfigAuthElevatedPrivilegesComparisonExp {
    _and: [ConfigAuthElevatedPrivilegesComparisonExp!]
    _not: ConfigAuthElevatedPrivilegesComparisonExp
    _or: [ConfigAuthElevatedPrivilegesComparisonExp!]
    mode: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthMethod {
    """

    """
    anonymous: ConfigAuthMethodAnonymous
    """

    """
    emailPasswordless: ConfigAuthMethodEmailPasswordless
    """

    """
    otp: ConfigAuthMethodOtp
    """

    """
    emailPassword: ConfigAuthMethodEmailPassword
    """

    """
    smsPasswordless: ConfigAuthMethodSmsPasswordless
    """

    """
    oauth: ConfigAuthMethodOauth
    """

    """
    webauthn: ConfigAuthMethodWebauthn
}

input ConfigAuthMethodUpdateInput {
    anonymous: ConfigAuthMethodAnonymousUpdateInput
    emailPasswordless: ConfigAuthMethodEmailPasswordlessUpdateInput
    otp: ConfigAuthMethodOtpUpdateInput
    emailPassword: ConfigAuthMethodEmailPasswordUpdateInput
    smsPasswordless: ConfigAuthMethodSmsPasswordlessUpdateInput
    oauth: ConfigAuthMethodOauthUpdateInput
    webauthn: ConfigAuthMethodWebauthnUpdateInput
}

input ConfigAuthMethodInsertInput {
    anonymous: ConfigAuthMethodAnonymousInsertInput
    emailPasswordless: ConfigAuthMethodEmailPasswordlessInsertInput
    otp: ConfigAuthMethodOtpInsertInput
    emailPassword: ConfigAuthMethodEmailPasswordInsertInput
    smsPasswordless: ConfigAuthMethodSmsPasswordlessInsertInput
    oauth: ConfigAuthMethodOauthInsertInput
    webauthn: ConfigAuthMethodWebauthnInsertInput
}

input ConfigAuthMethodComparisonExp {
    _and: [ConfigAuthMethodComparisonExp!]
    _not: ConfigAuthMethodComparisonExp
    _or: [ConfigAuthMethodComparisonExp!]
    anonymous: ConfigAuthMethodAnonymousComparisonExp
    emailPasswordless: ConfigAuthMethodEmailPasswordlessComparisonExp
    otp: ConfigAuthMethodOtpComparisonExp
    emailPassword: ConfigAuthMethodEmailPasswordComparisonExp
    smsPasswordless: ConfigAuthMethodSmsPasswordlessComparisonExp
    oauth: ConfigAuthMethodOauthComparisonExp
    webauthn: ConfigAuthMethodWebauthnComparisonExp
}

"""

"""
type ConfigAuthMethodAnonymous {
    """

    """
    enabled: Boolean
}

input ConfigAuthMethodAnonymousUpdateInput {
    enabled: Boolean
}

input ConfigAuthMethodAnonymousInsertInput {
    enabled: Boolean
}

input ConfigAuthMethodAnonymousComparisonExp {
    _and: [ConfigAuthMethodAnonymousComparisonExp!]
    _not: ConfigAuthMethodAnonymousComparisonExp
    _or: [ConfigAuthMethodAnonymousComparisonExp!]
    enabled: ConfigBooleanComparisonExp
}

"""

"""
type ConfigAuthMethodEmailPassword {
    """
    Disabling email+password sign in is not implmented yet
    enabled: bool | *true
    """
    hibpEnabled: Boolean
    """

    """
    emailVerificationRequired: Boolean
    """

    """
    passwordMinLength: ConfigUint8
}

input ConfigAuthMethodEmailPasswordUpdateInput {
    hibpEnabled: Boolean
    emailVerificationRequired: Boolean
    passwordMinLength: ConfigUint8
}

input ConfigAuthMethodEmailPasswordInsertInput {
    hibpEnabled: Boolean
    emailVerificationRequired: Boolean
    passwordMinLength: ConfigUint8
}

input ConfigAuthMethodEmailPasswordComparisonExp {
    _and: [ConfigAuthMethodEmailPasswordComparisonExp!]
    _not: ConfigAuthMethodEmailPasswordComparisonExp
    _or: [ConfigAuthMethodEmailPasswordComparisonExp!]
    hibpEnabled: ConfigBooleanComparisonExp
    emailVerificationRequired: ConfigBooleanComparisonExp
    passwordMinLength: ConfigUint8ComparisonExp
}

"""

"""
type ConfigAuthMethodEmailPasswordless {
    """

    """
    enabled: Boolean
}

input ConfigAuthMethodEmailPasswordlessUpdateInput {
    enabled: Boolean
}

input ConfigAuthMethodEmailPasswordlessInsertInput {
    enabled: Boolean
}

input ConfigAuthMethodEmailPasswordlessComparisonExp {
    _and: [ConfigAuthMethodEmailPasswordlessComparisonExp!]
    _not: ConfigAuthMethodEmailPasswordlessComparisonExp
    _or: [ConfigAuthMethodEmailPasswordlessComparisonExp!]
    enabled: ConfigBooleanComparisonExp
}

"""

"""
type ConfigAuthMethodOauth {
    """

    """
    apple: ConfigAuthMethodOauthApple
    """

    """
    azuread: ConfigAuthMethodOauthAzuread
    """

    """
    bitbucket: ConfigStandardOauthProvider
    """

    """
    discord: ConfigStandardOauthProviderWithScope
    """

    """
    entraid: ConfigAuthMethodOauthEntraid
    """

    """
    facebook: ConfigStandardOauthProviderWithScope
    """

    """
    github: ConfigStandardOauthProviderWithScope
    """

    """
    gitlab: ConfigStandardOauthProviderWithScope
    """

    """
    google: ConfigStandardOauthProviderWithScope
    """

    """
    linkedin: ConfigStandardOauthProviderWithScope
    """

    """
    spotify: ConfigStandardOauthProviderWithScope
    """

    """
    strava: ConfigStandardOauthProviderWithScope
    """

    """
    twitch: ConfigStandardOauthProviderWithScope
    """

    """
    twitter: ConfigAuthMethodOauthTwitter
    """

    """
    windowslive: ConfigStandardOauthProviderWithScope
    """

    """
    workos: ConfigAuthMethodOauthWorkos
}

input ConfigAuthMethodOauthUpdateInput {
    apple: ConfigAuthMethodOauthAppleUpdateInput
    azuread: ConfigAuthMethodOauthAzureadUpdateInput
    bitbucket: ConfigStandardOauthProviderUpdateInput
    discord: ConfigStandardOauthProviderWithScopeUpdateInput
    entraid: ConfigAuthMethodOauthEntraidUpdateInput
    facebook: ConfigStandardOauthProviderWithScopeUpdateInput
    github: ConfigStandardOauthProviderWithScopeUpdateInput
    gitlab: ConfigStandardOauthProviderWithScopeUpdateInput
    google: ConfigStandardOauthProviderWithScopeUpdateInput
    linkedin: ConfigStandardOauthProviderWithScopeUpdateInput
    spotify: ConfigStandardOauthProviderWithScopeUpdateInput
    strava: ConfigStandardOauthProviderWithScopeUpdateInput
    twitch: ConfigStandardOauthProviderWithScopeUpdateInput
    twitter: ConfigAuthMethodOauthTwitterUpdateInput
    windowslive: ConfigStandardOauthProviderWithScopeUpdateInput
    workos: ConfigAuthMethodOauthWorkosUpdateInput
}

input ConfigAuthMethodOauthInsertInput {
    apple: ConfigAuthMethodOauthAppleInsertInput
    azuread: ConfigAuthMethodOauthAzureadInsertInput
    bitbucket: ConfigStandardOauthProviderInsertInput
    discord: ConfigStandardOauthProviderWithScopeInsertInput
    entraid: ConfigAuthMethodOauthEntraidInsertInput
    facebook: ConfigStandardOauthProviderWithScopeInsertInput
    github: ConfigStandardOauthProviderWithScopeInsertInput
    gitlab: ConfigStandardOauthProviderWithScopeInsertInput
    google: ConfigStandardOauthProviderWithScopeInsertInput
    linkedin: ConfigStandardOauthProviderWithScopeInsertInput
    spotify: ConfigStandardOauthProviderWithScopeInsertInput
    strava: ConfigStandardOauthProviderWithScopeInsertInput
    twitch: ConfigStandardOauthProviderWithScopeInsertInput
    twitter: ConfigAuthMethodOauthTwitterInsertInput
    windowslive: ConfigStandardOauthProviderWithScopeInsertInput
    workos: ConfigAuthMethodOauthWorkosInsertInput
}

input ConfigAuthMethodOauthComparisonExp {
    _and: [ConfigAuthMethodOauthComparisonExp!]
    _not: ConfigAuthMethodOauthComparisonExp
    _or: [ConfigAuthMethodOauthComparisonExp!]
    apple: ConfigAuthMethodOauthAppleComparisonExp
    azuread: ConfigAuthMethodOauthAzureadComparisonExp
    bitbucket: ConfigStandardOauthProviderComparisonExp
    discord: ConfigStandardOauthProviderWithScopeComparisonExp
    entraid: ConfigAuthMethodOauthEntraidComparisonExp
    facebook: ConfigStandardOauthProviderWithScopeComparisonExp
    github: ConfigStandardOauthProviderWithScopeComparisonExp
    gitlab: ConfigStandardOauthProviderWithScopeComparisonExp
    google: ConfigStandardOauthProviderWithScopeComparisonExp
    linkedin: ConfigStandardOauthProviderWithScopeComparisonExp
    spotify: ConfigStandardOauthProviderWithScopeComparisonExp
    strava: ConfigStandardOauthProviderWithScopeComparisonExp
    twitch: ConfigStandardOauthProviderWithScopeComparisonExp
    twitter: ConfigAuthMethodOauthTwitterComparisonExp
    windowslive: ConfigStandardOauthProviderWithScopeComparisonExp
    workos: ConfigAuthMethodOauthWorkosComparisonExp
}

"""

"""
type ConfigAuthMethodOauthApple {
    """

    """
    enabled: Boolean
    """

    """
    audience: String
    """

    """
    clientId: String
    """

    """
    keyId: String
    """

    """
    teamId: String
    """

    """
    scope: [String!]
    """

    """
    privateKey: String
}

input ConfigAuthMethodOauthAppleUpdateInput {
    enabled: Boolean
    audience: String
    clientId: String
    keyId: String
    teamId: String
        scope: [String!]
    privateKey: String
}

input ConfigAuthMethodOauthAppleInsertInput {
    enabled: Boolean
    audience: String
    clientId: String
    keyId: String
    teamId: String
        scope: [String!]
    privateKey: String
}

input ConfigAuthMethodOauthAppleComparisonExp {
    _and: [ConfigAuthMethodOauthAppleComparisonExp!]
    _not: ConfigAuthMethodOauthAppleComparisonExp
    _or: [ConfigAuthMethodOauthAppleComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    audience: ConfigStringComparisonExp
    clientId: ConfigStringComparisonExp
    keyId: ConfigStringComparisonExp
    teamId: ConfigStringComparisonExp
    scope: ConfigStringComparisonExp
    privateKey: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthMethodOauthAzuread {
    """

    """
    tenant: String
    """

    """
    enabled: Boolean
    """

    """
    clientId: String
    """

    """
    clientSecret: String
}

input ConfigAuthMethodOauthAzureadUpdateInput {
    tenant: String
    enabled: Boolean
    clientId: String
    clientSecret: String
}

input ConfigAuthMethodOauthAzureadInsertInput {
    tenant: String
    enabled: Boolean
    clientId: String
    clientSecret: String
}

input ConfigAuthMethodOauthAzureadComparisonExp {
    _and: [ConfigAuthMethodOauthAzureadComparisonExp!]
    _not: ConfigAuthMethodOauthAzureadComparisonExp
    _or: [ConfigAuthMethodOauthAzureadComparisonExp!]
    tenant: ConfigStringComparisonExp
    enabled: ConfigBooleanComparisonExp
    clientId: ConfigStringComparisonExp
    clientSecret: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthMethodOauthEntraid {
    """

    """
    tenant: String
    """

    """
    enabled: Boolean
    """

    """
    clientId: String
    """

    """
    clientSecret: String
}

input ConfigAuthMethodOauthEntraidUpdateInput {
    tenant: String
    enabled: Boolean
    clientId: String
    clientSecret: String
}

input ConfigAuthMethodOauthEntraidInsertInput {
    tenant: String
    enabled: Boolean
    clientId: String
    clientSecret: String
}

input ConfigAuthMethodOauthEntraidComparisonExp {
    _and: [ConfigAuthMethodOauthEntraidComparisonExp!]
    _not: ConfigAuthMethodOauthEntraidComparisonExp
    _or: [ConfigAuthMethodOauthEntraidComparisonExp!]
    tenant: ConfigStringComparisonExp
    enabled: ConfigBooleanComparisonExp
    clientId: ConfigStringComparisonExp
    clientSecret: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthMethodOauthTwitter {
    """

    """
    enabled: Boolean
    """

    """
    consumerKey: String
    """

    """
    consumerSecret: String
}

input ConfigAuthMethodOauthTwitterUpdateInput {
    enabled: Boolean
    consumerKey: String
    consumerSecret: String
}

input ConfigAuthMethodOauthTwitterInsertInput {
    enabled: Boolean
    consumerKey: String
    consumerSecret: String
}

input ConfigAuthMethodOauthTwitterComparisonExp {
    _and: [ConfigAuthMethodOauthTwitterComparisonExp!]
    _not: ConfigAuthMethodOauthTwitterComparisonExp
    _or: [ConfigAuthMethodOauthTwitterComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    consumerKey: ConfigStringComparisonExp
    consumerSecret: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthMethodOauthWorkos {
    """

    """
    connection: String
    """

    """
    enabled: Boolean
    """

    """
    clientId: String
    """

    """
    organization: String
    """

    """
    clientSecret: String
}

input ConfigAuthMethodOauthWorkosUpdateInput {
    connection: String
    enabled: Boolean
    clientId: String
    organization: String
    clientSecret: String
}

input ConfigAuthMethodOauthWorkosInsertInput {
    connection: String
    enabled: Boolean
    clientId: String
    organization: String
    clientSecret: String
}

input ConfigAuthMethodOauthWorkosComparisonExp {
    _and: [ConfigAuthMethodOauthWorkosComparisonExp!]
    _not: ConfigAuthMethodOauthWorkosComparisonExp
    _or: [ConfigAuthMethodOauthWorkosComparisonExp!]
    connection: ConfigStringComparisonExp
    enabled: ConfigBooleanComparisonExp
    clientId: ConfigStringComparisonExp
    organization: ConfigStringComparisonExp
    clientSecret: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthMethodOtp {
    """

    """
    email: ConfigAuthMethodOtpEmail
}

input ConfigAuthMethodOtpUpdateInput {
    email: ConfigAuthMethodOtpEmailUpdateInput
}

input ConfigAuthMethodOtpInsertInput {
    email: ConfigAuthMethodOtpEmailInsertInput
}

input ConfigAuthMethodOtpComparisonExp {
    _and: [ConfigAuthMethodOtpComparisonExp!]
    _not: ConfigAuthMethodOtpComparisonExp
    _or: [ConfigAuthMethodOtpComparisonExp!]
    email: ConfigAuthMethodOtpEmailComparisonExp
}

"""

"""
type ConfigAuthMethodOtpEmail {
    """

    """
    enabled: Boolean
}

input ConfigAuthMethodOtpEmailUpdateInput {
    enabled: Boolean
}

input ConfigAuthMethodOtpEmailInsertInput {
    enabled: Boolean
}

input ConfigAuthMethodOtpEmailComparisonExp {
    _and: [ConfigAuthMethodOtpEmailComparisonExp!]
    _not: ConfigAuthMethodOtpEmailComparisonExp
    _or: [ConfigAuthMethodOtpEmailComparisonExp!]
    enabled: ConfigBooleanComparisonExp
}

"""

"""
type ConfigAuthMethodSmsPasswordless {
    """

    """
    enabled: Boolean
}

input ConfigAuthMethodSmsPasswordlessUpdateInput {
    enabled: Boolean
}

input ConfigAuthMethodSmsPasswordlessInsertInput {
    enabled: Boolean
}

input ConfigAuthMethodSmsPasswordlessComparisonExp {
    _and: [ConfigAuthMethodSmsPasswordlessComparisonExp!]
    _not: ConfigAuthMethodSmsPasswordlessComparisonExp
    _or: [ConfigAuthMethodSmsPasswordlessComparisonExp!]
    enabled: ConfigBooleanComparisonExp
}

"""

"""
type ConfigAuthMethodWebauthn {
    """

    """
    enabled: Boolean
    """

    """
    relyingParty: ConfigAuthMethodWebauthnRelyingParty
    """

    """
    attestation: ConfigAuthMethodWebauthnAttestation
}

input ConfigAuthMethodWebauthnUpdateInput {
    enabled: Boolean
    relyingParty: ConfigAuthMethodWebauthnRelyingPartyUpdateInput
    attestation: ConfigAuthMethodWebauthnAttestationUpdateInput
}

input ConfigAuthMethodWebauthnInsertInput {
    enabled: Boolean
    relyingParty: ConfigAuthMethodWebauthnRelyingPartyInsertInput
    attestation: ConfigAuthMethodWebauthnAttestationInsertInput
}

input ConfigAuthMethodWebauthnComparisonExp {
    _and: [ConfigAuthMethodWebauthnComparisonExp!]
    _not: ConfigAuthMethodWebauthnComparisonExp
    _or: [ConfigAuthMethodWebauthnComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    relyingParty: ConfigAuthMethodWebauthnRelyingPartyComparisonExp
    attestation: ConfigAuthMethodWebauthnAttestationComparisonExp
}

"""

"""
type ConfigAuthMethodWebauthnAttestation {
    """

    """
    timeout: ConfigUint32
}

input ConfigAuthMethodWebauthnAttestationUpdateInput {
    timeout: ConfigUint32
}

input ConfigAuthMethodWebauthnAttestationInsertInput {
    timeout: ConfigUint32
}

input ConfigAuthMethodWebauthnAttestationComparisonExp {
    _and: [ConfigAuthMethodWebauthnAttestationComparisonExp!]
    _not: ConfigAuthMethodWebauthnAttestationComparisonExp
    _or: [ConfigAuthMethodWebauthnAttestationComparisonExp!]
    timeout: ConfigUint32ComparisonExp
}

"""

"""
type ConfigAuthMethodWebauthnRelyingParty {
    """

    """
    id: String
    """

    """
    name: String
    """

    """
    origins: [ConfigUrl!]
}

input ConfigAuthMethodWebauthnRelyingPartyUpdateInput {
    id: String
    name: String
        origins: [ConfigUrl!]
}

input ConfigAuthMethodWebauthnRelyingPartyInsertInput {
    id: String
    name: String
        origins: [ConfigUrl!]
}

input ConfigAuthMethodWebauthnRelyingPartyComparisonExp {
    _and: [ConfigAuthMethodWebauthnRelyingPartyComparisonExp!]
    _not: ConfigAuthMethodWebauthnRelyingPartyComparisonExp
    _or: [ConfigAuthMethodWebauthnRelyingPartyComparisonExp!]
    id: ConfigStringComparisonExp
    name: ConfigStringComparisonExp
    origins: ConfigUrlComparisonExp
}

"""

"""
type ConfigAuthMisc {
    """

    """
    concealErrors: Boolean
}

input ConfigAuthMiscUpdateInput {
    concealErrors: Boolean
}

input ConfigAuthMiscInsertInput {
    concealErrors: Boolean
}

input ConfigAuthMiscComparisonExp {
    _and: [ConfigAuthMiscComparisonExp!]
    _not: ConfigAuthMiscComparisonExp
    _or: [ConfigAuthMiscComparisonExp!]
    concealErrors: ConfigBooleanComparisonExp
}

"""

"""
type ConfigAuthRateLimit {
    """

    """
    emails: ConfigRateLimit
    """

    """
    sms: ConfigRateLimit
    """

    """
    bruteForce: ConfigRateLimit
    """

    """
    signups: ConfigRateLimit
    """

    """
    global: ConfigRateLimit
}

input ConfigAuthRateLimitUpdateInput {
    emails: ConfigRateLimitUpdateInput
    sms: ConfigRateLimitUpdateInput
    bruteForce: ConfigRateLimitUpdateInput
    signups: ConfigRateLimitUpdateInput
    global: ConfigRateLimitUpdateInput
}

input ConfigAuthRateLimitInsertInput {
    emails: ConfigRateLimitInsertInput
    sms: ConfigRateLimitInsertInput
    bruteForce: ConfigRateLimitInsertInput
    signups: ConfigRateLimitInsertInput
    global: ConfigRateLimitInsertInput
}

input ConfigAuthRateLimitComparisonExp {
    _and: [ConfigAuthRateLimitComparisonExp!]
    _not: ConfigAuthRateLimitComparisonExp
    _or: [ConfigAuthRateLimitComparisonExp!]
    emails: ConfigRateLimitComparisonExp
    sms: ConfigRateLimitComparisonExp
    bruteForce: ConfigRateLimitComparisonExp
    signups: ConfigRateLimitComparisonExp
    global: ConfigRateLimitComparisonExp
}

"""

"""
type ConfigAuthRedirections {
    """
    AUTH_CLIENT_URL
    """
    clientUrl: ConfigUrl
    """
    AUTH_ACCESS_CONTROL_ALLOWED_REDIRECT_URLS
    """
    allowedUrls: [String!]
}

input ConfigAuthRedirectionsUpdateInput {
    clientUrl: ConfigUrl
        allowedUrls: [String!]
}

input ConfigAuthRedirectionsInsertInput {
    clientUrl: ConfigUrl
        allowedUrls: [String!]
}

input ConfigAuthRedirectionsComparisonExp {
    _and: [ConfigAuthRedirectionsComparisonExp!]
    _not: ConfigAuthRedirectionsComparisonExp
    _or: [ConfigAuthRedirectionsComparisonExp!]
    clientUrl: ConfigUrlComparisonExp
    allowedUrls: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthSession {
    """

    """
    accessToken: ConfigAuthSessionAccessToken
    """

    """
    refreshToken: ConfigAuthSessionRefreshToken
}

input ConfigAuthSessionUpdateInput {
    accessToken: ConfigAuthSessionAccessTokenUpdateInput
    refreshToken: ConfigAuthSessionRefreshTokenUpdateInput
}

input ConfigAuthSessionInsertInput {
    accessToken: ConfigAuthSessionAccessTokenInsertInput
    refreshToken: ConfigAuthSessionRefreshTokenInsertInput
}

input ConfigAuthSessionComparisonExp {
    _and: [ConfigAuthSessionComparisonExp!]
    _not: ConfigAuthSessionComparisonExp
    _or: [ConfigAuthSessionComparisonExp!]
    accessToken: ConfigAuthSessionAccessTokenComparisonExp
    refreshToken: ConfigAuthSessionRefreshTokenComparisonExp
}

"""

"""
type ConfigAuthSessionAccessToken {
    """
    AUTH_ACCESS_TOKEN_EXPIRES_IN
    """
    expiresIn: ConfigUint32
    """
    AUTH_JWT_CUSTOM_CLAIMS
    """
    customClaims: [ConfigAuthsessionaccessTokenCustomClaims!]
}

input ConfigAuthSessionAccessTokenUpdateInput {
    expiresIn: ConfigUint32
        customClaims: [ConfigAuthsessionaccessTokenCustomClaimsUpdateInput!]
}

input ConfigAuthSessionAccessTokenInsertInput {
    expiresIn: ConfigUint32
        customClaims: [ConfigAuthsessionaccessTokenCustomClaimsInsertInput!]
}

input ConfigAuthSessionAccessTokenComparisonExp {
    _and: [ConfigAuthSessionAccessTokenComparisonExp!]
    _not: ConfigAuthSessionAccessTokenComparisonExp
    _or: [ConfigAuthSessionAccessTokenComparisonExp!]
    expiresIn: ConfigUint32ComparisonExp
    customClaims: ConfigAuthsessionaccessTokenCustomClaimsComparisonExp
}

"""

"""
type ConfigAuthSessionRefreshToken {
    """
    AUTH_REFRESH_TOKEN_EXPIRES_IN
    """
    expiresIn: ConfigUint32
}

input ConfigAuthSessionRefreshTokenUpdateInput {
    expiresIn: ConfigUint32
}

input ConfigAuthSessionRefreshTokenInsertInput {
    expiresIn: ConfigUint32
}

input ConfigAuthSessionRefreshTokenComparisonExp {
    _and: [ConfigAuthSessionRefreshTokenComparisonExp!]
    _not: ConfigAuthSessionRefreshTokenComparisonExp
    _or: [ConfigAuthSessionRefreshTokenComparisonExp!]
    expiresIn: ConfigUint32ComparisonExp
}

"""

"""
type ConfigAuthSignUp {
    """
    Inverse of AUTH_DISABLE_SIGNUP
    """
    enabled: Boolean
    """
    AUTH_DISABLE_NEW_USERS
    """
    disableNewUsers: Boolean
    """

    """
    turnstile: ConfigAuthSignUpTurnstile
}

input ConfigAuthSignUpUpdateInput {
    enabled: Boolean
    disableNewUsers: Boolean
    turnstile: ConfigAuthSignUpTurnstileUpdateInput
}

input ConfigAuthSignUpInsertInput {
    enabled: Boolean
    disableNewUsers: Boolean
    turnstile: ConfigAuthSignUpTurnstileInsertInput
}

input ConfigAuthSignUpComparisonExp {
    _and: [ConfigAuthSignUpComparisonExp!]
    _not: ConfigAuthSignUpComparisonExp
    _or: [ConfigAuthSignUpComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    disableNewUsers: ConfigBooleanComparisonExp
    turnstile: ConfigAuthSignUpTurnstileComparisonExp
}

"""

"""
type ConfigAuthSignUpTurnstile {
    """

    """
    secretKey: String!
}

input ConfigAuthSignUpTurnstileUpdateInput {
    secretKey: String
}

input ConfigAuthSignUpTurnstileInsertInput {
    secretKey: String!
}

input ConfigAuthSignUpTurnstileComparisonExp {
    _and: [ConfigAuthSignUpTurnstileComparisonExp!]
    _not: ConfigAuthSignUpTurnstileComparisonExp
    _or: [ConfigAuthSignUpTurnstileComparisonExp!]
    secretKey: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthTotp {
    """

    """
    enabled: Boolean
    """

    """
    issuer: String
}

input ConfigAuthTotpUpdateInput {
    enabled: Boolean
    issuer: String
}

input ConfigAuthTotpInsertInput {
    enabled: Boolean
    issuer: String
}

input ConfigAuthTotpComparisonExp {
    _and: [ConfigAuthTotpComparisonExp!]
    _not: ConfigAuthTotpComparisonExp
    _or: [ConfigAuthTotpComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    issuer: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthUser {
    """

    """
    roles: ConfigAuthUserRoles
    """

    """
    locale: ConfigAuthUserLocale
    """

    """
    gravatar: ConfigAuthUserGravatar
    """

    """
    email: ConfigAuthUserEmail
    """

    """
    emailDomains: ConfigAuthUserEmailDomains
}

input ConfigAuthUserUpdateInput {
    roles: ConfigAuthUserRolesUpdateInput
    locale: ConfigAuthUserLocaleUpdateInput
    gravatar: ConfigAuthUserGravatarUpdateInput
    email: ConfigAuthUserEmailUpdateInput
    emailDomains: ConfigAuthUserEmailDomainsUpdateInput
}

input ConfigAuthUserInsertInput {
    roles: ConfigAuthUserRolesInsertInput
    locale: ConfigAuthUserLocaleInsertInput
    gravatar: ConfigAuthUserGravatarInsertInput
    email: ConfigAuthUserEmailInsertInput
    emailDomains: ConfigAuthUserEmailDomainsInsertInput
}

input ConfigAuthUserComparisonExp {
    _and: [ConfigAuthUserComparisonExp!]
    _not: ConfigAuthUserComparisonExp
    _or: [ConfigAuthUserComparisonExp!]
    roles: ConfigAuthUserRolesComparisonExp
    locale: ConfigAuthUserLocaleComparisonExp
    gravatar: ConfigAuthUserGravatarComparisonExp
    email: ConfigAuthUserEmailComparisonExp
    emailDomains: ConfigAuthUserEmailDomainsComparisonExp
}

"""

"""
type ConfigAuthUserEmail {
    """
    AUTH_ACCESS_CONTROL_ALLOWED_EMAILS
    """
    allowed: [ConfigEmail!]
    """
    AUTH_ACCESS_CONTROL_BLOCKED_EMAILS
    """
    blocked: [ConfigEmail!]
}

input ConfigAuthUserEmailUpdateInput {
        allowed: [ConfigEmail!]
        blocked: [ConfigEmail!]
}

input ConfigAuthUserEmailInsertInput {
        allowed: [ConfigEmail!]
        blocked: [ConfigEmail!]
}

input ConfigAuthUserEmailComparisonExp {
    _and: [ConfigAuthUserEmailComparisonExp!]
    _not: ConfigAuthUserEmailComparisonExp
    _or: [ConfigAuthUserEmailComparisonExp!]
    allowed: ConfigEmailComparisonExp
    blocked: ConfigEmailComparisonExp
}

"""

"""
type ConfigAuthUserEmailDomains {
    """
    AUTH_ACCESS_CONTROL_ALLOWED_EMAIL_DOMAINS
    """
    allowed: [String!]
    """
    AUTH_ACCESS_CONTROL_BLOCKED_EMAIL_DOMAINS
    """
    blocked: [String!]
}

input ConfigAuthUserEmailDomainsUpdateInput {
        allowed: [String!]
        blocked: [String!]
}

input ConfigAuthUserEmailDomainsInsertInput {
        allowed: [String!]
        blocked: [String!]
}

input ConfigAuthUserEmailDomainsComparisonExp {
    _and: [ConfigAuthUserEmailDomainsComparisonExp!]
    _not: ConfigAuthUserEmailDomainsComparisonExp
    _or: [ConfigAuthUserEmailDomainsComparisonExp!]
    allowed: ConfigStringComparisonExp
    blocked: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthUserGravatar {
    """
    AUTH_GRAVATAR_ENABLED
    """
    enabled: Boolean
    """

    """
    default: String
    """

    """
    rating: String
}

input ConfigAuthUserGravatarUpdateInput {
    enabled: Boolean
    default: String
    rating: String
}

input ConfigAuthUserGravatarInsertInput {
    enabled: Boolean
    default: String
    rating: String
}

input ConfigAuthUserGravatarComparisonExp {
    _and: [ConfigAuthUserGravatarComparisonExp!]
    _not: ConfigAuthUserGravatarComparisonExp
    _or: [ConfigAuthUserGravatarComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    default: ConfigStringComparisonExp
    rating: ConfigStringComparisonExp
}

"""

"""
type ConfigAuthUserLocale {
    """
    AUTH_LOCALE_DEFAULT
    """
    default: ConfigLocale
    """
    AUTH_LOCALE_ALLOWED_LOCALES
    """
    allowed: [ConfigLocale!]
}

input ConfigAuthUserLocaleUpdateInput {
    default: ConfigLocale
        allowed: [ConfigLocale!]
}

input ConfigAuthUserLocaleInsertInput {
    default: ConfigLocale
        allowed: [ConfigLocale!]
}

input ConfigAuthUserLocaleComparisonExp {
    _and: [ConfigAuthUserLocaleComparisonExp!]
    _not: ConfigAuthUserLocaleComparisonExp
    _or: [ConfigAuthUserLocaleComparisonExp!]
    default: ConfigLocaleComparisonExp
    allowed: ConfigLocaleComparisonExp
}

"""

"""
type ConfigAuthUserRoles {
    """
    AUTH_USER_DEFAULT_ROLE
    """
    default: ConfigUserRole
    """
    AUTH_USER_DEFAULT_ALLOWED_ROLES
    """
    allowed: [ConfigUserRole!]
}

input ConfigAuthUserRolesUpdateInput {
    default: ConfigUserRole
        allowed: [ConfigUserRole!]
}

input ConfigAuthUserRolesInsertInput {
    default: ConfigUserRole
        allowed: [ConfigUserRole!]
}

input ConfigAuthUserRolesComparisonExp {
    _and: [ConfigAuthUserRolesComparisonExp!]
    _not: ConfigAuthUserRolesComparisonExp
    _or: [ConfigAuthUserRolesComparisonExp!]
    default: ConfigUserRoleComparisonExp
    allowed: ConfigUserRoleComparisonExp
}

"""
AUTH_JWT_CUSTOM_CLAIMS
"""
type ConfigAuthsessionaccessTokenCustomClaims {
    """

    """
    key: String!
    """

    """
    value: String!
    """

    """
    default: String
}

input ConfigAuthsessionaccessTokenCustomClaimsUpdateInput {
    key: String
    value: String
    default: String
}

input ConfigAuthsessionaccessTokenCustomClaimsInsertInput {
    key: String!
    value: String!
    default: String
}

input ConfigAuthsessionaccessTokenCustomClaimsComparisonExp {
    _and: [ConfigAuthsessionaccessTokenCustomClaimsComparisonExp!]
    _not: ConfigAuthsessionaccessTokenCustomClaimsComparisonExp
    _or: [ConfigAuthsessionaccessTokenCustomClaimsComparisonExp!]
    key: ConfigStringComparisonExp
    value: ConfigStringComparisonExp
    default: ConfigStringComparisonExp
}

"""

"""
type ConfigAutoscaler {
    """

    """
    maxReplicas: ConfigUint8!
}

input ConfigAutoscalerUpdateInput {
    maxReplicas: ConfigUint8
}

input ConfigAutoscalerInsertInput {
    maxReplicas: ConfigUint8!
}

input ConfigAutoscalerComparisonExp {
    _and: [ConfigAutoscalerComparisonExp!]
    _not: ConfigAutoscalerComparisonExp
    _or: [ConfigAutoscalerComparisonExp!]
    maxReplicas: ConfigUint8ComparisonExp
}

"""

"""
type ConfigClaimMap {
    """

    """
    claim: String!
    """

    """
    value: String
    """

    """
    path: String
    """

    """
    default: String
}

input ConfigClaimMapUpdateInput {
    claim: String
    value: String
    path: String
    default: String
}

input ConfigClaimMapInsertInput {
    claim: String!
    value: String
    path: String
    default: String
}

input ConfigClaimMapComparisonExp {
    _and: [ConfigClaimMapComparisonExp!]
    _not: ConfigClaimMapComparisonExp
    _or: [ConfigClaimMapComparisonExp!]
    claim: ConfigStringComparisonExp
    value: ConfigStringComparisonExp
    path: ConfigStringComparisonExp
    default: ConfigStringComparisonExp
}

"""
Resource configuration for a service
"""
type ConfigComputeResources {
    """
    milicpus, 1000 milicpus = 1 cpu
    """
    cpu: ConfigUint32!
    """
    MiB: 128MiB to 30GiB
    """
    memory: ConfigUint32!
}

input ConfigComputeResourcesUpdateInput {
    cpu: ConfigUint32
    memory: ConfigUint32
}

input ConfigComputeResourcesInsertInput {
    cpu: ConfigUint32!
    memory: ConfigUint32!
}

input ConfigComputeResourcesComparisonExp {
    _and: [ConfigComputeResourcesComparisonExp!]
    _not: ConfigComputeResourcesComparisonExp
    _or: [ConfigComputeResourcesComparisonExp!]
    cpu: ConfigUint32ComparisonExp
    memory: ConfigUint32ComparisonExp
}

"""
main entrypoint to the configuration
"""
type ConfigConfig {
    """
    Global configuration that applies to all services
    """
    global: ConfigGlobal
    """
    Configuration for hasura
    """
    hasura: ConfigHasura!
    """
    Advanced configuration for GraphQL
    """
    graphql: ConfigGraphql
    """
    Configuration for functions service
    """
    functions: ConfigFunctions
    """
    Configuration for auth service
    """
    auth: ConfigAuth
    """
    Configuration for postgres service
    """
    postgres: ConfigPostgres!
    """
    Configuration for third party providers like SMTP, SMS, etc.
    """
    provider: ConfigProvider
    """
    Configuration for storage service
    """
    storage: ConfigStorage
    """
    Configuration for graphite service
    """
    ai: ConfigAI
    """
    Configuration for observability service
    """
    observability: ConfigObservability!
}

input ConfigConfigUpdateInput {
    global: ConfigGlobalUpdateInput
    hasura: ConfigHasuraUpdateInput
    graphql: ConfigGraphqlUpdateInput
    functions: ConfigFunctionsUpdateInput
    auth: ConfigAuthUpdateInput
    postgres: ConfigPostgresUpdateInput
    provider: ConfigProviderUpdateInput
    storage: ConfigStorageUpdateInput
    ai: ConfigAIUpdateInput
    observability: ConfigObservabilityUpdateInput
}

input ConfigConfigInsertInput {
    global: ConfigGlobalInsertInput
    hasura: ConfigHasuraInsertInput!
    graphql: ConfigGraphqlInsertInput
    functions: ConfigFunctionsInsertInput
    auth: ConfigAuthInsertInput
    postgres: ConfigPostgresInsertInput!
    provider: ConfigProviderInsertInput
    storage: ConfigStorageInsertInput
    ai: ConfigAIInsertInput
    observability: ConfigObservabilityInsertInput!
}

input ConfigConfigComparisonExp {
    _and: [ConfigConfigComparisonExp!]
    _not: ConfigConfigComparisonExp
    _or: [ConfigConfigComparisonExp!]
    global: ConfigGlobalComparisonExp
    hasura: ConfigHasuraComparisonExp
    graphql: ConfigGraphqlComparisonExp
    functions: ConfigFunctionsComparisonExp
    auth: ConfigAuthComparisonExp
    postgres: ConfigPostgresComparisonExp
    provider: ConfigProviderComparisonExp
    storage: ConfigStorageComparisonExp
    ai: ConfigAIComparisonExp
    observability: ConfigObservabilityComparisonExp
}

scalar ConfigEmail

input ConfigEmailComparisonExp {
    _eq: ConfigEmail
    _neq: ConfigEmail
    _in: [ConfigEmail!]
    _nin: [ConfigEmail!]
}

"""

"""
type ConfigEnvironmentVariable {
    """

    """
    name: String!
    """
    Value of the environment variable
    """
    value: String!
}

input ConfigEnvironmentVariableUpdateInput {
    name: String
    value: String
}

input ConfigEnvironmentVariableInsertInput {
    name: String!
    value: String!
}

input ConfigEnvironmentVariableComparisonExp {
    _and: [ConfigEnvironmentVariableComparisonExp!]
    _not: ConfigEnvironmentVariableComparisonExp
    _or: [ConfigEnvironmentVariableComparisonExp!]
    name: ConfigStringComparisonExp
    value: ConfigStringComparisonExp
}

"""
Configuration for functions service
"""
type ConfigFunctions {
    """

    """
    node: ConfigFunctionsNode
    """

    """
    resources: ConfigFunctionsResources
    """

    """
    rateLimit: ConfigRateLimit
}

input ConfigFunctionsUpdateInput {
    node: ConfigFunctionsNodeUpdateInput
    resources: ConfigFunctionsResourcesUpdateInput
    rateLimit: ConfigRateLimitUpdateInput
}

input ConfigFunctionsInsertInput {
    node: ConfigFunctionsNodeInsertInput
    resources: ConfigFunctionsResourcesInsertInput
    rateLimit: ConfigRateLimitInsertInput
}

input ConfigFunctionsComparisonExp {
    _and: [ConfigFunctionsComparisonExp!]
    _not: ConfigFunctionsComparisonExp
    _or: [ConfigFunctionsComparisonExp!]
    node: ConfigFunctionsNodeComparisonExp
    resources: ConfigFunctionsResourcesComparisonExp
    rateLimit: ConfigRateLimitComparisonExp
}

"""

"""
type ConfigFunctionsNode {
    """

    """
    version: Int
}

input ConfigFunctionsNodeUpdateInput {
    version: Int
}

input ConfigFunctionsNodeInsertInput {
    version: Int
}

input ConfigFunctionsNodeComparisonExp {
    _and: [ConfigFunctionsNodeComparisonExp!]
    _not: ConfigFunctionsNodeComparisonExp
    _or: [ConfigFunctionsNodeComparisonExp!]
    version: ConfigIntComparisonExp
}

"""

"""
type ConfigFunctionsResources {
    """

    """
    networking: ConfigNetworking
}

input ConfigFunctionsResourcesUpdateInput {
    networking: ConfigNetworkingUpdateInput
}

input ConfigFunctionsResourcesInsertInput {
    networking: ConfigNetworkingInsertInput
}

input ConfigFunctionsResourcesComparisonExp {
    _and: [ConfigFunctionsResourcesComparisonExp!]
    _not: ConfigFunctionsResourcesComparisonExp
    _or: [ConfigFunctionsResourcesComparisonExp!]
    networking: ConfigNetworkingComparisonExp
}

"""
Global configuration that applies to all services
"""
type ConfigGlobal {
    """
    User-defined environment variables that are spread over all services
    """
    environment: [ConfigGlobalEnvironmentVariable!]
}

input ConfigGlobalUpdateInput {
        environment: [ConfigGlobalEnvironmentVariableUpdateInput!]
}

input ConfigGlobalInsertInput {
        environment: [ConfigGlobalEnvironmentVariableInsertInput!]
}

input ConfigGlobalComparisonExp {
    _and: [ConfigGlobalComparisonExp!]
    _not: ConfigGlobalComparisonExp
    _or: [ConfigGlobalComparisonExp!]
    environment: ConfigGlobalEnvironmentVariableComparisonExp
}

"""

"""
type ConfigGlobalEnvironmentVariable {
    """

    """
    name: String!
    """
    Value of the environment variable
    """
    value: String!
}

input ConfigGlobalEnvironmentVariableUpdateInput {
    name: String
    value: String
}

input ConfigGlobalEnvironmentVariableInsertInput {
    name: String!
    value: String!
}

input ConfigGlobalEnvironmentVariableComparisonExp {
    _and: [ConfigGlobalEnvironmentVariableComparisonExp!]
    _not: ConfigGlobalEnvironmentVariableComparisonExp
    _or: [ConfigGlobalEnvironmentVariableComparisonExp!]
    name: ConfigStringComparisonExp
    value: ConfigStringComparisonExp
}

"""

"""
type ConfigGrafana {
    """

    """
    adminPassword: String!
    """

    """
    smtp: ConfigGrafanaSmtp
    """

    """
    alerting: ConfigGrafanaAlerting
    """

    """
    contacts: ConfigGrafanaContacts
}

input ConfigGrafanaUpdateInput {
    adminPassword: String
    smtp: ConfigGrafanaSmtpUpdateInput
    alerting: ConfigGrafanaAlertingUpdateInput
    contacts: ConfigGrafanaContactsUpdateInput
}

input ConfigGrafanaInsertInput {
    adminPassword: String!
    smtp: ConfigGrafanaSmtpInsertInput
    alerting: ConfigGrafanaAlertingInsertInput
    contacts: ConfigGrafanaContactsInsertInput
}

input ConfigGrafanaComparisonExp {
    _and: [ConfigGrafanaComparisonExp!]
    _not: ConfigGrafanaComparisonExp
    _or: [ConfigGrafanaComparisonExp!]
    adminPassword: ConfigStringComparisonExp
    smtp: ConfigGrafanaSmtpComparisonExp
    alerting: ConfigGrafanaAlertingComparisonExp
    contacts: ConfigGrafanaContactsComparisonExp
}

"""

"""
type ConfigGrafanaAlerting {
    """

    """
    enabled: Boolean
}

input ConfigGrafanaAlertingUpdateInput {
    enabled: Boolean
}

input ConfigGrafanaAlertingInsertInput {
    enabled: Boolean
}

input ConfigGrafanaAlertingComparisonExp {
    _and: [ConfigGrafanaAlertingComparisonExp!]
    _not: ConfigGrafanaAlertingComparisonExp
    _or: [ConfigGrafanaAlertingComparisonExp!]
    enabled: ConfigBooleanComparisonExp
}

"""

"""
type ConfigGrafanaContacts {
    """

    """
    emails: [String!]
    """

    """
    pagerduty: [ConfigGrafanacontactsPagerduty!]
    """

    """
    discord: [ConfigGrafanacontactsDiscord!]
    """

    """
    slack: [ConfigGrafanacontactsSlack!]
    """

    """
    webhook: [ConfigGrafanacontactsWebhook!]
}

input ConfigGrafanaContactsUpdateInput {
        emails: [String!]
        pagerduty: [ConfigGrafanacontactsPagerdutyUpdateInput!]
        discord: [ConfigGrafanacontactsDiscordUpdateInput!]
        slack: [ConfigGrafanacontactsSlackUpdateInput!]
        webhook: [ConfigGrafanacontactsWebhookUpdateInput!]
}

input ConfigGrafanaContactsInsertInput {
        emails: [String!]
        pagerduty: [ConfigGrafanacontactsPagerdutyInsertInput!]
        discord: [ConfigGrafanacontactsDiscordInsertInput!]
        slack: [ConfigGrafanacontactsSlackInsertInput!]
        webhook: [ConfigGrafanacontactsWebhookInsertInput!]
}

input ConfigGrafanaContactsComparisonExp {
    _and: [ConfigGrafanaContactsComparisonExp!]
    _not: ConfigGrafanaContactsComparisonExp
    _or: [ConfigGrafanaContactsComparisonExp!]
    emails: ConfigStringComparisonExp
    pagerduty: ConfigGrafanacontactsPagerdutyComparisonExp
    discord: ConfigGrafanacontactsDiscordComparisonExp
    slack: ConfigGrafanacontactsSlackComparisonExp
    webhook: ConfigGrafanacontactsWebhookComparisonExp
}

"""

"""
type ConfigGrafanaSmtp {
    """

    """
    host: String!
    """

    """
    port: ConfigPort!
    """

    """
    sender: String!
    """

    """
    user: String!
    """

    """
    password: String!
}

input ConfigGrafanaSmtpUpdateInput {
    host: String
    port: ConfigPort
    sender: String
    user: String
    password: String
}

input ConfigGrafanaSmtpInsertInput {
    host: String!
    port: ConfigPort!
    sender: String!
    user: String!
    password: String!
}

input ConfigGrafanaSmtpComparisonExp {
    _and: [ConfigGrafanaSmtpComparisonExp!]
    _not: ConfigGrafanaSmtpComparisonExp
    _or: [ConfigGrafanaSmtpComparisonExp!]
    host: ConfigStringComparisonExp
    port: ConfigPortComparisonExp
    sender: ConfigStringComparisonExp
    user: ConfigStringComparisonExp
    password: ConfigStringComparisonExp
}

"""

"""
type ConfigGrafanacontactsDiscord {
    """

    """
    url: String!
    """

    """
    avatarUrl: String!
}

input ConfigGrafanacontactsDiscordUpdateInput {
    url: String
    avatarUrl: String
}

input ConfigGrafanacontactsDiscordInsertInput {
    url: String!
    avatarUrl: String!
}

input ConfigGrafanacontactsDiscordComparisonExp {
    _and: [ConfigGrafanacontactsDiscordComparisonExp!]
    _not: ConfigGrafanacontactsDiscordComparisonExp
    _or: [ConfigGrafanacontactsDiscordComparisonExp!]
    url: ConfigStringComparisonExp
    avatarUrl: ConfigStringComparisonExp
}

"""

"""
type ConfigGrafanacontactsPagerduty {
    """

    """
    integrationKey: String!
    """

    """
    severity: String!
    """

    """
    class: String!
    """

    """
    component: String!
    """

    """
    group: String!
}

input ConfigGrafanacontactsPagerdutyUpdateInput {
    integrationKey: String
    severity: String
    class: String
    component: String
    group: String
}

input ConfigGrafanacontactsPagerdutyInsertInput {
    integrationKey: String!
    severity: String!
    class: String!
    component: String!
    group: String!
}

input ConfigGrafanacontactsPagerdutyComparisonExp {
    _and: [ConfigGrafanacontactsPagerdutyComparisonExp!]
    _not: ConfigGrafanacontactsPagerdutyComparisonExp
    _or: [ConfigGrafanacontactsPagerdutyComparisonExp!]
    integrationKey: ConfigStringComparisonExp
    severity: ConfigStringComparisonExp
    class: ConfigStringComparisonExp
    component: ConfigStringComparisonExp
    group: ConfigStringComparisonExp
}

"""

"""
type ConfigGrafanacontactsSlack {
    """

    """
    recipient: String!
    """

    """
    token: String!
    """

    """
    username: String!
    """

    """
    iconEmoji: String!
    """

    """
    iconURL: String!
    """

    """
    mentionUsers: [String!]!
    """

    """
    mentionGroups: [String!]!
    """

    """
    mentionChannel: String!
    """

    """
    url: String!
    """

    """
    endpointURL: String!
}

input ConfigGrafanacontactsSlackUpdateInput {
    recipient: String
    token: String
    username: String
    iconEmoji: String
    iconURL: String
        mentionUsers: [String!]
        mentionGroups: [String!]
    mentionChannel: String
    url: String
    endpointURL: String
}

input ConfigGrafanacontactsSlackInsertInput {
    recipient: String!
    token: String!
    username: String!
    iconEmoji: String!
    iconURL: String!
        mentionUsers: [String!]!
        mentionGroups: [String!]!
    mentionChannel: String!
    url: String!
    endpointURL: String!
}

input ConfigGrafanacontactsSlackComparisonExp {
    _and: [ConfigGrafanacontactsSlackComparisonExp!]
    _not: ConfigGrafanacontactsSlackComparisonExp
    _or: [ConfigGrafanacontactsSlackComparisonExp!]
    recipient: ConfigStringComparisonExp
    token: ConfigStringComparisonExp
    username: ConfigStringComparisonExp
    iconEmoji: ConfigStringComparisonExp
    iconURL: ConfigStringComparisonExp
    mentionUsers: ConfigStringComparisonExp
    mentionGroups: ConfigStringComparisonExp
    mentionChannel: ConfigStringComparisonExp
    url: ConfigStringComparisonExp
    endpointURL: ConfigStringComparisonExp
}

"""

"""
type ConfigGrafanacontactsWebhook {
    """

    """
    url: String!
    """

    """
    httpMethod: String!
    """

    """
    username: String!
    """

    """
    password: String!
    """

    """
    authorizationScheme: String!
    """

    """
    authorizationCredentials: String!
    """

    """
    maxAlerts: Int!
}

input ConfigGrafanacontactsWebhookUpdateInput {
    url: String
    httpMethod: String
    username: String
    password: String
    authorizationScheme: String
    authorizationCredentials: String
    maxAlerts: Int
}

input ConfigGrafanacontactsWebhookInsertInput {
    url: String!
    httpMethod: String!
    username: String!
    password: String!
    authorizationScheme: String!
    authorizationCredentials: String!
    maxAlerts: Int!
}

input ConfigGrafanacontactsWebhookComparisonExp {
    _and: [ConfigGrafanacontactsWebhookComparisonExp!]
    _not: ConfigGrafanacontactsWebhookComparisonExp
    _or: [ConfigGrafanacontactsWebhookComparisonExp!]
    url: ConfigStringComparisonExp
    httpMethod: ConfigStringComparisonExp
    username: ConfigStringComparisonExp
    password: ConfigStringComparisonExp
    authorizationScheme: ConfigStringComparisonExp
    authorizationCredentials: ConfigStringComparisonExp
    maxAlerts: ConfigIntComparisonExp
}

"""

"""
type ConfigGraphql {
    """

    """
    security: ConfigGraphqlSecurity
}

input ConfigGraphqlUpdateInput {
    security: ConfigGraphqlSecurityUpdateInput
}

input ConfigGraphqlInsertInput {
    security: ConfigGraphqlSecurityInsertInput
}

input ConfigGraphqlComparisonExp {
    _and: [ConfigGraphqlComparisonExp!]
    _not: ConfigGraphqlComparisonExp
    _or: [ConfigGraphqlComparisonExp!]
    security: ConfigGraphqlSecurityComparisonExp
}

"""

"""
type ConfigGraphqlSecurity {
    """

    """
    forbidAminSecret: Boolean
    """

    """
    maxDepthQueries: ConfigUint
}

input ConfigGraphqlSecurityUpdateInput {
    forbidAminSecret: Boolean
    maxDepthQueries: ConfigUint
}

input ConfigGraphqlSecurityInsertInput {
    forbidAminSecret: Boolean
    maxDepthQueries: ConfigUint
}

input ConfigGraphqlSecurityComparisonExp {
    _and: [ConfigGraphqlSecurityComparisonExp!]
    _not: ConfigGraphqlSecurityComparisonExp
    _or: [ConfigGraphqlSecurityComparisonExp!]
    forbidAminSecret: ConfigBooleanComparisonExp
    maxDepthQueries: ConfigUintComparisonExp
}

"""
Configuration for hasura service
"""
type ConfigHasura {
    """
    Version of hasura, you can see available versions in the URL below:
    https://hub.docker.com/r/hasura/graphql-engine/tags
    """
    version: String
    """
    JWT Secrets configuration
    """
    jwtSecrets: [ConfigJWTSecret!]
    """
    Admin secret
    """
    adminSecret: String!
    """
    Webhook secret
    """
    webhookSecret: String!
    """
    Configuration for hasura services
    Reference: https://hasura.io/docs/latest/deployment/graphql-engine-flags/reference/
    """
    settings: ConfigHasuraSettings
    """

    """
    authHook: ConfigHasuraAuthHook
    """

    """
    logs: ConfigHasuraLogs
    """

    """
    events: ConfigHasuraEvents
    """
    Resources for the service
    """
    resources: ConfigResources
    """

    """
    rateLimit: ConfigRateLimit
}

input ConfigHasuraUpdateInput {
    version: String
        jwtSecrets: [ConfigJWTSecretUpdateInput!]
    adminSecret: String
    webhookSecret: String
    settings: ConfigHasuraSettingsUpdateInput
    authHook: ConfigHasuraAuthHookUpdateInput
    logs: ConfigHasuraLogsUpdateInput
    events: ConfigHasuraEventsUpdateInput
    resources: ConfigResourcesUpdateInput
    rateLimit: ConfigRateLimitUpdateInput
}

input ConfigHasuraInsertInput {
    version: String
        jwtSecrets: [ConfigJWTSecretInsertInput!]
    adminSecret: String!
    webhookSecret: String!
    settings: ConfigHasuraSettingsInsertInput
    authHook: ConfigHasuraAuthHookInsertInput
    logs: ConfigHasuraLogsInsertInput
    events: ConfigHasuraEventsInsertInput
    resources: ConfigResourcesInsertInput
    rateLimit: ConfigRateLimitInsertInput
}

input ConfigHasuraComparisonExp {
    _and: [ConfigHasuraComparisonExp!]
    _not: ConfigHasuraComparisonExp
    _or: [ConfigHasuraComparisonExp!]
    version: ConfigStringComparisonExp
    jwtSecrets: ConfigJWTSecretComparisonExp
    adminSecret: ConfigStringComparisonExp
    webhookSecret: ConfigStringComparisonExp
    settings: ConfigHasuraSettingsComparisonExp
    authHook: ConfigHasuraAuthHookComparisonExp
    logs: ConfigHasuraLogsComparisonExp
    events: ConfigHasuraEventsComparisonExp
    resources: ConfigResourcesComparisonExp
    rateLimit: ConfigRateLimitComparisonExp
}

scalar ConfigHasuraAPIs

input ConfigHasuraAPIsComparisonExp {
    _eq: ConfigHasuraAPIs
    _neq: ConfigHasuraAPIs
    _in: [ConfigHasuraAPIs!]
    _nin: [ConfigHasuraAPIs!]
}

"""

"""
type ConfigHasuraAuthHook {
    """
    HASURA_GRAPHQL_AUTH_HOOK
    """
    url: String!
    """

    """
    mode: String
    """
    HASURA_GRAPHQL_AUTH_HOOK_SEND_REQUEST_BODY
    """
    sendRequestBody: Boolean
}

input ConfigHasuraAuthHookUpdateInput {
    url: String
    mode: String
    sendRequestBody: Boolean
}

input ConfigHasuraAuthHookInsertInput {
    url: String!
    mode: String
    sendRequestBody: Boolean
}

input ConfigHasuraAuthHookComparisonExp {
    _and: [ConfigHasuraAuthHookComparisonExp!]
    _not: ConfigHasuraAuthHookComparisonExp
    _or: [ConfigHasuraAuthHookComparisonExp!]
    url: ConfigStringComparisonExp
    mode: ConfigStringComparisonExp
    sendRequestBody: ConfigBooleanComparisonExp
}

"""

"""
type ConfigHasuraEvents {
    """
    HASURA_GRAPHQL_EVENTS_HTTP_POOL_SIZE
    """
    httpPoolSize: ConfigUint32
}

input ConfigHasuraEventsUpdateInput {
    httpPoolSize: ConfigUint32
}

input ConfigHasuraEventsInsertInput {
    httpPoolSize: ConfigUint32
}

input ConfigHasuraEventsComparisonExp {
    _and: [ConfigHasuraEventsComparisonExp!]
    _not: ConfigHasuraEventsComparisonExp
    _or: [ConfigHasuraEventsComparisonExp!]
    httpPoolSize: ConfigUint32ComparisonExp
}

"""

"""
type ConfigHasuraLogs {
    """

    """
    level: String
}

input ConfigHasuraLogsUpdateInput {
    level: String
}

input ConfigHasuraLogsInsertInput {
    level: String
}

input ConfigHasuraLogsComparisonExp {
    _and: [ConfigHasuraLogsComparisonExp!]
    _not: ConfigHasuraLogsComparisonExp
    _or: [ConfigHasuraLogsComparisonExp!]
    level: ConfigStringComparisonExp
}

"""
Configuration for hasura services
Reference: https://hasura.io/docs/latest/deployment/graphql-engine-flags/reference/
"""
type ConfigHasuraSettings {
    """
    HASURA_GRAPHQL_CORS_DOMAIN
    """
    corsDomain: [ConfigUrl!]
    """
    HASURA_GRAPHQL_DEV_MODE
    """
    devMode: Boolean
    """
    HASURA_GRAPHQL_ENABLE_ALLOWLIST
    """
    enableAllowList: Boolean
    """
    HASURA_GRAPHQL_ENABLE_CONSOLE
    """
    enableConsole: Boolean
    """
    HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS
    """
    enableRemoteSchemaPermissions: Boolean
    """
    HASURA_GRAPHQL_ENABLED_APIS
    """
    enabledAPIs: [ConfigHasuraAPIs!]
    """
    HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS
    """
    inferFunctionPermissions: Boolean
    """
    HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL
    """
    liveQueriesMultiplexedRefetchInterval: ConfigUint32
    """
    HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES
    """
    stringifyNumericTypes: Boolean
}

input ConfigHasuraSettingsUpdateInput {
        corsDomain: [ConfigUrl!]
    devMode: Boolean
    enableAllowList: Boolean
    enableConsole: Boolean
    enableRemoteSchemaPermissions: Boolean
        enabledAPIs: [ConfigHasuraAPIs!]
    inferFunctionPermissions: Boolean
    liveQueriesMultiplexedRefetchInterval: ConfigUint32
    stringifyNumericTypes: Boolean
}

input ConfigHasuraSettingsInsertInput {
        corsDomain: [ConfigUrl!]
    devMode: Boolean
    enableAllowList: Boolean
    enableConsole: Boolean
    enableRemoteSchemaPermissions: Boolean
        enabledAPIs: [ConfigHasuraAPIs!]
    inferFunctionPermissions: Boolean
    liveQueriesMultiplexedRefetchInterval: ConfigUint32
    stringifyNumericTypes: Boolean
}

input ConfigHasuraSettingsComparisonExp {
    _and: [ConfigHasuraSettingsComparisonExp!]
    _not: ConfigHasuraSettingsComparisonExp
    _or: [ConfigHasuraSettingsComparisonExp!]
    corsDomain: ConfigUrlComparisonExp
    devMode: ConfigBooleanComparisonExp
    enableAllowList: ConfigBooleanComparisonExp
    enableConsole: ConfigBooleanComparisonExp
    enableRemoteSchemaPermissions: ConfigBooleanComparisonExp
    enabledAPIs: ConfigHasuraAPIsComparisonExp
    inferFunctionPermissions: ConfigBooleanComparisonExp
    liveQueriesMultiplexedRefetchInterval: ConfigUint32ComparisonExp
    stringifyNumericTypes: ConfigBooleanComparisonExp
}

"""

"""
type ConfigHealthCheck {
    """

    """
    port: ConfigPort!
    """

    """
    initialDelaySeconds: Int
    """

    """
    probePeriodSeconds: Int
}

input ConfigHealthCheckUpdateInput {
    port: ConfigPort
    initialDelaySeconds: Int
    probePeriodSeconds: Int
}

input ConfigHealthCheckInsertInput {
    port: ConfigPort!
    initialDelaySeconds: Int
    probePeriodSeconds: Int
}

input ConfigHealthCheckComparisonExp {
    _and: [ConfigHealthCheckComparisonExp!]
    _not: ConfigHealthCheckComparisonExp
    _or: [ConfigHealthCheckComparisonExp!]
    port: ConfigPortComparisonExp
    initialDelaySeconds: ConfigIntComparisonExp
    probePeriodSeconds: ConfigIntComparisonExp
}

"""

"""
type ConfigIngress {
    """

    """
    fqdn: [String!]
    """

    """
    tls: ConfigIngressTls
}

input ConfigIngressUpdateInput {
        fqdn: [String!]
    tls: ConfigIngressTlsUpdateInput
}

input ConfigIngressInsertInput {
        fqdn: [String!]
    tls: ConfigIngressTlsInsertInput
}

input ConfigIngressComparisonExp {
    _and: [ConfigIngressComparisonExp!]
    _not: ConfigIngressComparisonExp
    _or: [ConfigIngressComparisonExp!]
    fqdn: ConfigStringComparisonExp
    tls: ConfigIngressTlsComparisonExp
}

"""

"""
type ConfigIngressTls {
    """

    """
    clientCA: String
}

input ConfigIngressTlsUpdateInput {
    clientCA: String
}

input ConfigIngressTlsInsertInput {
    clientCA: String
}

input ConfigIngressTlsComparisonExp {
    _and: [ConfigIngressTlsComparisonExp!]
    _not: ConfigIngressTlsComparisonExp
    _or: [ConfigIngressTlsComparisonExp!]
    clientCA: ConfigStringComparisonExp
}

"""
See https://hasura.io/docs/latest/auth/authentication/jwt/
"""
type ConfigJWTSecret {
    """

    """
    type: String
    """

    """
    key: String
    """

    """
    signingKey: String
    """

    """
    kid: String
    """

    """
    jwk_url: ConfigUrl
    """

    """
    claims_format: String
    """

    """
    audience: String
    """

    """
    issuer: String
    """

    """
    allowed_skew: ConfigUint32
    """

    """
    header: String
    """

    """
    claims_map: [ConfigClaimMap!]
    """

    """
    claims_namespace: String
    """

    """
    claims_namespace_path: String
}

input ConfigJWTSecretUpdateInput {
    type: String
    key: String
    signingKey: String
    kid: String
    jwk_url: ConfigUrl
    claims_format: String
    audience: String
    issuer: String
    allowed_skew: ConfigUint32
    header: String
        claims_map: [ConfigClaimMapUpdateInput!]
    claims_namespace: String
    claims_namespace_path: String
}

input ConfigJWTSecretInsertInput {
    type: String
    key: String
    signingKey: String
    kid: String
    jwk_url: ConfigUrl
    claims_format: String
    audience: String
    issuer: String
    allowed_skew: ConfigUint32
    header: String
        claims_map: [ConfigClaimMapInsertInput!]
    claims_namespace: String
    claims_namespace_path: String
}

input ConfigJWTSecretComparisonExp {
    _and: [ConfigJWTSecretComparisonExp!]
    _not: ConfigJWTSecretComparisonExp
    _or: [ConfigJWTSecretComparisonExp!]
    type: ConfigStringComparisonExp
    key: ConfigStringComparisonExp
    signingKey: ConfigStringComparisonExp
    kid: ConfigStringComparisonExp
    jwk_url: ConfigUrlComparisonExp
    claims_format: ConfigStringComparisonExp
    audience: ConfigStringComparisonExp
    issuer: ConfigStringComparisonExp
    allowed_skew: ConfigUint32ComparisonExp
    header: ConfigStringComparisonExp
    claims_map: ConfigClaimMapComparisonExp
    claims_namespace: ConfigStringComparisonExp
    claims_namespace_path: ConfigStringComparisonExp
}

scalar ConfigLocale

input ConfigLocaleComparisonExp {
    _eq: ConfigLocale
    _neq: ConfigLocale
    _in: [ConfigLocale!]
    _nin: [ConfigLocale!]
}

"""

"""
type ConfigNetworking {
    """

    """
    ingresses: [ConfigIngress!]
}

input ConfigNetworkingUpdateInput {
        ingresses: [ConfigIngressUpdateInput!]
}

input ConfigNetworkingInsertInput {
        ingresses: [ConfigIngressInsertInput!]
}

input ConfigNetworkingComparisonExp {
    _and: [ConfigNetworkingComparisonExp!]
    _not: ConfigNetworkingComparisonExp
    _or: [ConfigNetworkingComparisonExp!]
    ingresses: ConfigIngressComparisonExp
}

"""

"""
type ConfigObservability {
    """

    """
    grafana: ConfigGrafana!
}

input ConfigObservabilityUpdateInput {
    grafana: ConfigGrafanaUpdateInput
}

input ConfigObservabilityInsertInput {
    grafana: ConfigGrafanaInsertInput!
}

input ConfigObservabilityComparisonExp {
    _and: [ConfigObservabilityComparisonExp!]
    _not: ConfigObservabilityComparisonExp
    _or: [ConfigObservabilityComparisonExp!]
    grafana: ConfigGrafanaComparisonExp
}

scalar ConfigPort

input ConfigPortComparisonExp {
    _eq: ConfigPort
    _neq: ConfigPort
    _in: [ConfigPort!]
    _nin: [ConfigPort!]
}

"""
Configuration for postgres service
"""
type ConfigPostgres {
    """
    Version of postgres, you can see available versions in the URL below:
    https://hub.docker.com/r/nhost/postgres/tags
    """
    version: String
    """
    Resources for the service
    """
    resources: ConfigPostgresResources!
    """

    """
    settings: ConfigPostgresSettings
    """

    """
    pitr: ConfigPostgresPitr
}

input ConfigPostgresUpdateInput {
    version: String
    resources: ConfigPostgresResourcesUpdateInput
    settings: ConfigPostgresSettingsUpdateInput
    pitr: ConfigPostgresPitrUpdateInput
}

input ConfigPostgresInsertInput {
    version: String
    resources: ConfigPostgresResourcesInsertInput!
    settings: ConfigPostgresSettingsInsertInput
    pitr: ConfigPostgresPitrInsertInput
}

input ConfigPostgresComparisonExp {
    _and: [ConfigPostgresComparisonExp!]
    _not: ConfigPostgresComparisonExp
    _or: [ConfigPostgresComparisonExp!]
    version: ConfigStringComparisonExp
    resources: ConfigPostgresResourcesComparisonExp
    settings: ConfigPostgresSettingsComparisonExp
    pitr: ConfigPostgresPitrComparisonExp
}

"""

"""
type ConfigPostgresPitr {
    """

    """
    retention: ConfigUint8
}

input ConfigPostgresPitrUpdateInput {
    retention: ConfigUint8
}

input ConfigPostgresPitrInsertInput {
    retention: ConfigUint8
}

input ConfigPostgresPitrComparisonExp {
    _and: [ConfigPostgresPitrComparisonExp!]
    _not: ConfigPostgresPitrComparisonExp
    _or: [ConfigPostgresPitrComparisonExp!]
    retention: ConfigUint8ComparisonExp
}

"""
Resources for the service
"""
type ConfigPostgresResources {
    """

    """
    compute: ConfigResourcesCompute
    """

    """
    storage: ConfigPostgresResourcesStorage!
    """

    """
    replicas: Int
    """

    """
    enablePublicAccess: Boolean
}

input ConfigPostgresResourcesUpdateInput {
    compute: ConfigResourcesComputeUpdateInput
    storage: ConfigPostgresResourcesStorageUpdateInput
    replicas: Int
    enablePublicAccess: Boolean
}

input ConfigPostgresResourcesInsertInput {
    compute: ConfigResourcesComputeInsertInput
    storage: ConfigPostgresResourcesStorageInsertInput!
    replicas: Int
    enablePublicAccess: Boolean
}

input ConfigPostgresResourcesComparisonExp {
    _and: [ConfigPostgresResourcesComparisonExp!]
    _not: ConfigPostgresResourcesComparisonExp
    _or: [ConfigPostgresResourcesComparisonExp!]
    compute: ConfigResourcesComputeComparisonExp
    storage: ConfigPostgresResourcesStorageComparisonExp
    replicas: ConfigIntComparisonExp
    enablePublicAccess: ConfigBooleanComparisonExp
}

"""

"""
type ConfigPostgresResourcesStorage {
    """

    """
    capacity: ConfigUint32!
}

input ConfigPostgresResourcesStorageUpdateInput {
    capacity: ConfigUint32
}

input ConfigPostgresResourcesStorageInsertInput {
    capacity: ConfigUint32!
}

input ConfigPostgresResourcesStorageComparisonExp {
    _and: [ConfigPostgresResourcesStorageComparisonExp!]
    _not: ConfigPostgresResourcesStorageComparisonExp
    _or: [ConfigPostgresResourcesStorageComparisonExp!]
    capacity: ConfigUint32ComparisonExp
}

"""

"""
type ConfigPostgresSettings {
    """

    """
    jit: String
    """

    """
    maxConnections: ConfigInt32
    """

    """
    sharedBuffers: String
    """

    """
    effectiveCacheSize: String
    """

    """
    maintenanceWorkMem: String
    """

    """
    checkpointCompletionTarget: Float
    """

    """
    walBuffers: String
    """

    """
    defaultStatisticsTarget: ConfigInt32
    """

    """
    randomPageCost: Float
    """

    """
    effectiveIOConcurrency: ConfigInt32
    """

    """
    workMem: String
    """

    """
    hugePages: String
    """

    """
    minWalSize: String
    """

    """
    maxWalSize: String
    """

    """
    maxWorkerProcesses: ConfigInt32
    """

    """
    maxParallelWorkersPerGather: ConfigInt32
    """

    """
    maxParallelWorkers: ConfigInt32
    """

    """
    maxParallelMaintenanceWorkers: ConfigInt32
    """

    """
    walLevel: String
    """

    """
    maxWalSenders: ConfigInt32
    """

    """
    maxReplicationSlots: ConfigInt32
    """

    """
    archiveTimeout: ConfigInt32
    """

    """
    trackIoTiming: String
}

input ConfigPostgresSettingsUpdateInput {
    jit: String
    maxConnections: ConfigInt32
    sharedBuffers: String
    effectiveCacheSize: String
    maintenanceWorkMem: String
    checkpointCompletionTarget: Float
    walBuffers: String
    defaultStatisticsTarget: ConfigInt32
    randomPageCost: Float
    effectiveIOConcurrency: ConfigInt32
    workMem: String
    hugePages: String
    minWalSize: String
    maxWalSize: String
    maxWorkerProcesses: ConfigInt32
    maxParallelWorkersPerGather: ConfigInt32
    maxParallelWorkers: ConfigInt32
    maxParallelMaintenanceWorkers: ConfigInt32
    walLevel: String
    maxWalSenders: ConfigInt32
    maxReplicationSlots: ConfigInt32
    archiveTimeout: ConfigInt32
    trackIoTiming: String
}

input ConfigPostgresSettingsInsertInput {
    jit: String
    maxConnections: ConfigInt32
    sharedBuffers: String
    effectiveCacheSize: String
    maintenanceWorkMem: String
    checkpointCompletionTarget: Float
    walBuffers: String
    defaultStatisticsTarget: ConfigInt32
    randomPageCost: Float
    effectiveIOConcurrency: ConfigInt32
    workMem: String
    hugePages: String
    minWalSize: String
    maxWalSize: String
    maxWorkerProcesses: ConfigInt32
    maxParallelWorkersPerGather: ConfigInt32
    maxParallelWorkers: ConfigInt32
    maxParallelMaintenanceWorkers: ConfigInt32
    walLevel: String
    maxWalSenders: ConfigInt32
    maxReplicationSlots: ConfigInt32
    archiveTimeout: ConfigInt32
    trackIoTiming: String
}

input ConfigPostgresSettingsComparisonExp {
    _and: [ConfigPostgresSettingsComparisonExp!]
    _not: ConfigPostgresSettingsComparisonExp
    _or: [ConfigPostgresSettingsComparisonExp!]
    jit: ConfigStringComparisonExp
    maxConnections: ConfigInt32ComparisonExp
    sharedBuffers: ConfigStringComparisonExp
    effectiveCacheSize: ConfigStringComparisonExp
    maintenanceWorkMem: ConfigStringComparisonExp
    checkpointCompletionTarget: ConfigFloatComparisonExp
    walBuffers: ConfigStringComparisonExp
    defaultStatisticsTarget: ConfigInt32ComparisonExp
    randomPageCost: ConfigFloatComparisonExp
    effectiveIOConcurrency: ConfigInt32ComparisonExp
    workMem: ConfigStringComparisonExp
    hugePages: ConfigStringComparisonExp
    minWalSize: ConfigStringComparisonExp
    maxWalSize: ConfigStringComparisonExp
    maxWorkerProcesses: ConfigInt32ComparisonExp
    maxParallelWorkersPerGather: ConfigInt32ComparisonExp
    maxParallelWorkers: ConfigInt32ComparisonExp
    maxParallelMaintenanceWorkers: ConfigInt32ComparisonExp
    walLevel: ConfigStringComparisonExp
    maxWalSenders: ConfigInt32ComparisonExp
    maxReplicationSlots: ConfigInt32ComparisonExp
    archiveTimeout: ConfigInt32ComparisonExp
    trackIoTiming: ConfigStringComparisonExp
}

"""

"""
type ConfigProvider {
    """

    """
    smtp: ConfigSmtp
    """

    """
    sms: ConfigSms
}

input ConfigProviderUpdateInput {
    smtp: ConfigSmtpUpdateInput
    sms: ConfigSmsUpdateInput
}

input ConfigProviderInsertInput {
    smtp: ConfigSmtpInsertInput
    sms: ConfigSmsInsertInput
}

input ConfigProviderComparisonExp {
    _and: [ConfigProviderComparisonExp!]
    _not: ConfigProviderComparisonExp
    _or: [ConfigProviderComparisonExp!]
    smtp: ConfigSmtpComparisonExp
    sms: ConfigSmsComparisonExp
}

"""

"""
type ConfigRateLimit {
    """

    """
    limit: ConfigUint32!
    """

    """
    interval: String!
}

input ConfigRateLimitUpdateInput {
    limit: ConfigUint32
    interval: String
}

input ConfigRateLimitInsertInput {
    limit: ConfigUint32!
    interval: String!
}

input ConfigRateLimitComparisonExp {
    _and: [ConfigRateLimitComparisonExp!]
    _not: ConfigRateLimitComparisonExp
    _or: [ConfigRateLimitComparisonExp!]
    limit: ConfigUint32ComparisonExp
    interval: ConfigStringComparisonExp
}

"""
Resource configuration for a service
"""
type ConfigResources {
    """

    """
    compute: ConfigResourcesCompute
    """
    Number of replicas for a service
    """
    replicas: ConfigUint8
    """

    """
    autoscaler: ConfigAutoscaler
    """

    """
    networking: ConfigNetworking
}

input ConfigResourcesUpdateInput {
    compute: ConfigResourcesComputeUpdateInput
    replicas: ConfigUint8
    autoscaler: ConfigAutoscalerUpdateInput
    networking: ConfigNetworkingUpdateInput
}

input ConfigResourcesInsertInput {
    compute: ConfigResourcesComputeInsertInput
    replicas: ConfigUint8
    autoscaler: ConfigAutoscalerInsertInput
    networking: ConfigNetworkingInsertInput
}

input ConfigResourcesComparisonExp {
    _and: [ConfigResourcesComparisonExp!]
    _not: ConfigResourcesComparisonExp
    _or: [ConfigResourcesComparisonExp!]
    compute: ConfigResourcesComputeComparisonExp
    replicas: ConfigUint8ComparisonExp
    autoscaler: ConfigAutoscalerComparisonExp
    networking: ConfigNetworkingComparisonExp
}

"""

"""
type ConfigResourcesCompute {
    """
    milicpus, 1000 milicpus = 1 cpu
    """
    cpu: ConfigUint32!
    """
    MiB: 128MiB to 30GiB
    """
    memory: ConfigUint32!
}

input ConfigResourcesComputeUpdateInput {
    cpu: ConfigUint32
    memory: ConfigUint32
}

input ConfigResourcesComputeInsertInput {
    cpu: ConfigUint32!
    memory: ConfigUint32!
}

input ConfigResourcesComputeComparisonExp {
    _and: [ConfigResourcesComputeComparisonExp!]
    _not: ConfigResourcesComputeComparisonExp
    _or: [ConfigResourcesComputeComparisonExp!]
    cpu: ConfigUint32ComparisonExp
    memory: ConfigUint32ComparisonExp
}

"""

"""
type ConfigRunServiceConfig {
    """

    """
    name: ConfigRunServiceName!
    """

    """
    image: ConfigRunServiceImage!
    """

    """
    command: [String!]
    """

    """
    environment: [ConfigEnvironmentVariable!]
    """

    """
    ports: [ConfigRunServicePort!]
    """

    """
    resources: ConfigRunServiceResources!
    """

    """
    healthCheck: ConfigHealthCheck
}

input ConfigRunServiceConfigUpdateInput {
    name: ConfigRunServiceName
    image: ConfigRunServiceImageUpdateInput
        command: [String!]
        environment: [ConfigEnvironmentVariableUpdateInput!]
        ports: [ConfigRunServicePortUpdateInput!]
    resources: ConfigRunServiceResourcesUpdateInput
    healthCheck: ConfigHealthCheckUpdateInput
}

input ConfigRunServiceConfigInsertInput {
    name: ConfigRunServiceName!
    image: ConfigRunServiceImageInsertInput!
        command: [String!]
        environment: [ConfigEnvironmentVariableInsertInput!]
        ports: [ConfigRunServicePortInsertInput!]
    resources: ConfigRunServiceResourcesInsertInput!
    healthCheck: ConfigHealthCheckInsertInput
}

input ConfigRunServiceConfigComparisonExp {
    _and: [ConfigRunServiceConfigComparisonExp!]
    _not: ConfigRunServiceConfigComparisonExp
    _or: [ConfigRunServiceConfigComparisonExp!]
    name: ConfigRunServiceNameComparisonExp
    image: ConfigRunServiceImageComparisonExp
    command: ConfigStringComparisonExp
    environment: ConfigEnvironmentVariableComparisonExp
    ports: ConfigRunServicePortComparisonExp
    resources: ConfigRunServiceResourcesComparisonExp
    healthCheck: ConfigHealthCheckComparisonExp
}

"""

"""
type ConfigRunServiceImage {
    """

    """
    image: String!
    """
    content of "auths", i.e., { "auths": $THIS }
    """
    pullCredentials: String
}

input ConfigRunServiceImageUpdateInput {
    image: String
    pullCredentials: String
}

input ConfigRunServiceImageInsertInput {
    image: String!
    pullCredentials: String
}

input ConfigRunServiceImageComparisonExp {
    _and: [ConfigRunServiceImageComparisonExp!]
    _not: ConfigRunServiceImageComparisonExp
    _or: [ConfigRunServiceImageComparisonExp!]
    image: ConfigStringComparisonExp
    pullCredentials: ConfigStringComparisonExp
}

scalar ConfigRunServiceName

input ConfigRunServiceNameComparisonExp {
    _eq: ConfigRunServiceName
    _neq: ConfigRunServiceName
    _in: [ConfigRunServiceName!]
    _nin: [ConfigRunServiceName!]
}

"""

"""
type ConfigRunServicePort {
    """

    """
    port: ConfigPort!
    """

    """
    type: String!
    """

    """
    publish: Boolean
    """

    """
    ingresses: [ConfigIngress!]
    """

    """
    rateLimit: ConfigRateLimit
}

input ConfigRunServicePortUpdateInput {
    port: ConfigPort
    type: String
    publish: Boolean
        ingresses: [ConfigIngressUpdateInput!]
    rateLimit: ConfigRateLimitUpdateInput
}

input ConfigRunServicePortInsertInput {
    port: ConfigPort!
    type: String!
    publish: Boolean
        ingresses: [ConfigIngressInsertInput!]
    rateLimit: ConfigRateLimitInsertInput
}

input ConfigRunServicePortComparisonExp {
    _and: [ConfigRunServicePortComparisonExp!]
    _not: ConfigRunServicePortComparisonExp
    _or: [ConfigRunServicePortComparisonExp!]
    port: ConfigPortComparisonExp
    type: ConfigStringComparisonExp
    publish: ConfigBooleanComparisonExp
    ingresses: ConfigIngressComparisonExp
    rateLimit: ConfigRateLimitComparisonExp
}

"""
Resource configuration for a service
"""
type ConfigRunServiceResources {
    """

    """
    compute: ConfigComputeResources!
    """

    """
    storage: [ConfigRunServiceResourcesStorage!]
    """
    Number of replicas for a service
    """
    replicas: ConfigUint8!
    """

    """
    autoscaler: ConfigAutoscaler
}

input ConfigRunServiceResourcesUpdateInput {
    compute: ConfigComputeResourcesUpdateInput
        storage: [ConfigRunServiceResourcesStorageUpdateInput!]
    replicas: ConfigUint8
    autoscaler: ConfigAutoscalerUpdateInput
}

input ConfigRunServiceResourcesInsertInput {
    compute: ConfigComputeResourcesInsertInput!
        storage: [ConfigRunServiceResourcesStorageInsertInput!]
    replicas: ConfigUint8!
    autoscaler: ConfigAutoscalerInsertInput
}

input ConfigRunServiceResourcesComparisonExp {
    _and: [ConfigRunServiceResourcesComparisonExp!]
    _not: ConfigRunServiceResourcesComparisonExp
    _or: [ConfigRunServiceResourcesComparisonExp!]
    compute: ConfigComputeResourcesComparisonExp
    storage: ConfigRunServiceResourcesStorageComparisonExp
    replicas: ConfigUint8ComparisonExp
    autoscaler: ConfigAutoscalerComparisonExp
}

"""

"""
type ConfigRunServiceResourcesStorage {
    """
    name of the volume, changing it will cause data loss
    """
    name: ConfigRunServiceName!
    """
    GiB
    """
    capacity: ConfigUint32!
    """

    """
    path: String!
}

input ConfigRunServiceResourcesStorageUpdateInput {
    name: ConfigRunServiceName
    capacity: ConfigUint32
    path: String
}

input ConfigRunServiceResourcesStorageInsertInput {
    name: ConfigRunServiceName!
    capacity: ConfigUint32!
    path: String!
}

input ConfigRunServiceResourcesStorageComparisonExp {
    _and: [ConfigRunServiceResourcesStorageComparisonExp!]
    _not: ConfigRunServiceResourcesStorageComparisonExp
    _or: [ConfigRunServiceResourcesStorageComparisonExp!]
    name: ConfigRunServiceNameComparisonExp
    capacity: ConfigUint32ComparisonExp
    path: ConfigStringComparisonExp
}

"""

"""
type ConfigSms {
    """

    """
    provider: String
    """

    """
    accountSid: String!
    """

    """
    authToken: String!
    """

    """
    messagingServiceId: String!
}

input ConfigSmsUpdateInput {
    provider: String
    accountSid: String
    authToken: String
    messagingServiceId: String
}

input ConfigSmsInsertInput {
    provider: String
    accountSid: String!
    authToken: String!
    messagingServiceId: String!
}

input ConfigSmsComparisonExp {
    _and: [ConfigSmsComparisonExp!]
    _not: ConfigSmsComparisonExp
    _or: [ConfigSmsComparisonExp!]
    provider: ConfigStringComparisonExp
    accountSid: ConfigStringComparisonExp
    authToken: ConfigStringComparisonExp
    messagingServiceId: ConfigStringComparisonExp
}

"""

"""
type ConfigSmtp {
    """

    """
    user: String!
    """

    """
    password: String!
    """

    """
    sender: String!
    """

    """
    host: String!
    """

    """
    port: ConfigPort!
    """

    """
    secure: Boolean!
    """

    """
    method: String!
}

input ConfigSmtpUpdateInput {
    user: String
    password: String
    sender: String
    host: String
    port: ConfigPort
    secure: Boolean
    method: String
}

input ConfigSmtpInsertInput {
    user: String!
    password: String!
    sender: String!
    host: String!
    port: ConfigPort!
    secure: Boolean!
    method: String!
}

input ConfigSmtpComparisonExp {
    _and: [ConfigSmtpComparisonExp!]
    _not: ConfigSmtpComparisonExp
    _or: [ConfigSmtpComparisonExp!]
    user: ConfigStringComparisonExp
    password: ConfigStringComparisonExp
    sender: ConfigStringComparisonExp
    host: ConfigStringComparisonExp
    port: ConfigPortComparisonExp
    secure: ConfigBooleanComparisonExp
    method: ConfigStringComparisonExp
}

"""

"""
type ConfigStandardOauthProvider {
    """

    """
    enabled: Boolean
    """

    """
    clientId: String
    """

    """
    clientSecret: String
}

input ConfigStandardOauthProviderUpdateInput {
    enabled: Boolean
    clientId: String
    clientSecret: String
}

input ConfigStandardOauthProviderInsertInput {
    enabled: Boolean
    clientId: String
    clientSecret: String
}

input ConfigStandardOauthProviderComparisonExp {
    _and: [ConfigStandardOauthProviderComparisonExp!]
    _not: ConfigStandardOauthProviderComparisonExp
    _or: [ConfigStandardOauthProviderComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    clientId: ConfigStringComparisonExp
    clientSecret: ConfigStringComparisonExp
}

"""

"""
type ConfigStandardOauthProviderWithScope {
    """

    """
    enabled: Boolean
    """

    """
    audience: String
    """

    """
    clientId: String
    """

    """
    scope: [String!]
    """

    """
    clientSecret: String
}

input ConfigStandardOauthProviderWithScopeUpdateInput {
    enabled: Boolean
    audience: String
    clientId: String
        scope: [String!]
    clientSecret: String
}

input ConfigStandardOauthProviderWithScopeInsertInput {
    enabled: Boolean
    audience: String
    clientId: String
        scope: [String!]
    clientSecret: String
}

input ConfigStandardOauthProviderWithScopeComparisonExp {
    _and: [ConfigStandardOauthProviderWithScopeComparisonExp!]
    _not: ConfigStandardOauthProviderWithScopeComparisonExp
    _or: [ConfigStandardOauthProviderWithScopeComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    audience: ConfigStringComparisonExp
    clientId: ConfigStringComparisonExp
    scope: ConfigStringComparisonExp
    clientSecret: ConfigStringComparisonExp
}

"""
Configuration for storage service
"""
type ConfigStorage {
    """
    Version of storage service, you can see available versions in the URL below:
    https://hub.docker.com/r/nhost/hasura-storage/tags
    
    Releases:
    
    https://github.com/nhost/hasura-storage/releases
    """
    version: String
    """
    Networking (custom domains at the moment) are not allowed as we need to do further
    configurations in the CDN. We will enable it again in the future.
    """
    resources: ConfigResources
    """

    """
    antivirus: ConfigStorageAntivirus
    """

    """
    rateLimit: ConfigRateLimit
}

input ConfigStorageUpdateInput {
    version: String
    resources: ConfigResourcesUpdateInput
    antivirus: ConfigStorageAntivirusUpdateInput
    rateLimit: ConfigRateLimitUpdateInput
}

input ConfigStorageInsertInput {
    version: String
    resources: ConfigResourcesInsertInput
    antivirus: ConfigStorageAntivirusInsertInput
    rateLimit: ConfigRateLimitInsertInput
}

input ConfigStorageComparisonExp {
    _and: [ConfigStorageComparisonExp!]
    _not: ConfigStorageComparisonExp
    _or: [ConfigStorageComparisonExp!]
    version: ConfigStringComparisonExp
    resources: ConfigResourcesComparisonExp
    antivirus: ConfigStorageAntivirusComparisonExp
    rateLimit: ConfigRateLimitComparisonExp
}

"""

"""
type ConfigStorageAntivirus {
    """

    """
    server: String
}

input ConfigStorageAntivirusUpdateInput {
    server: String
}

input ConfigStorageAntivirusInsertInput {
    server: String
}

input ConfigStorageAntivirusComparisonExp {
    _and: [ConfigStorageAntivirusComparisonExp!]
    _not: ConfigStorageAntivirusComparisonExp
    _or: [ConfigStorageAntivirusComparisonExp!]
    server: ConfigStringComparisonExp
}

"""

"""
type ConfigSystemConfig {
    """

    """
    auth: ConfigSystemConfigAuth
    """

    """
    graphql: ConfigSystemConfigGraphql
    """

    """
    postgres: ConfigSystemConfigPostgres!
    """

    """
    persistentVolumesEncrypted: Boolean
}

input ConfigSystemConfigUpdateInput {
    auth: ConfigSystemConfigAuthUpdateInput
    graphql: ConfigSystemConfigGraphqlUpdateInput
    postgres: ConfigSystemConfigPostgresUpdateInput
    persistentVolumesEncrypted: Boolean
}

input ConfigSystemConfigInsertInput {
    auth: ConfigSystemConfigAuthInsertInput
    graphql: ConfigSystemConfigGraphqlInsertInput
    postgres: ConfigSystemConfigPostgresInsertInput!
    persistentVolumesEncrypted: Boolean
}

input ConfigSystemConfigComparisonExp {
    _and: [ConfigSystemConfigComparisonExp!]
    _not: ConfigSystemConfigComparisonExp
    _or: [ConfigSystemConfigComparisonExp!]
    auth: ConfigSystemConfigAuthComparisonExp
    graphql: ConfigSystemConfigGraphqlComparisonExp
    postgres: ConfigSystemConfigPostgresComparisonExp
    persistentVolumesEncrypted: ConfigBooleanComparisonExp
}

"""

"""
type ConfigSystemConfigAuth {
    """

    """
    email: ConfigSystemConfigAuthEmail
}

input ConfigSystemConfigAuthUpdateInput {
    email: ConfigSystemConfigAuthEmailUpdateInput
}

input ConfigSystemConfigAuthInsertInput {
    email: ConfigSystemConfigAuthEmailInsertInput
}

input ConfigSystemConfigAuthComparisonExp {
    _and: [ConfigSystemConfigAuthComparisonExp!]
    _not: ConfigSystemConfigAuthComparisonExp
    _or: [ConfigSystemConfigAuthComparisonExp!]
    email: ConfigSystemConfigAuthEmailComparisonExp
}

"""

"""
type ConfigSystemConfigAuthEmail {
    """

    """
    templates: ConfigSystemConfigAuthEmailTemplates
}

input ConfigSystemConfigAuthEmailUpdateInput {
    templates: ConfigSystemConfigAuthEmailTemplatesUpdateInput
}

input ConfigSystemConfigAuthEmailInsertInput {
    templates: ConfigSystemConfigAuthEmailTemplatesInsertInput
}

input ConfigSystemConfigAuthEmailComparisonExp {
    _and: [ConfigSystemConfigAuthEmailComparisonExp!]
    _not: ConfigSystemConfigAuthEmailComparisonExp
    _or: [ConfigSystemConfigAuthEmailComparisonExp!]
    templates: ConfigSystemConfigAuthEmailTemplatesComparisonExp
}

"""

"""
type ConfigSystemConfigAuthEmailTemplates {
    """

    """
    s3Key: String
}

input ConfigSystemConfigAuthEmailTemplatesUpdateInput {
    s3Key: String
}

input ConfigSystemConfigAuthEmailTemplatesInsertInput {
    s3Key: String
}

input ConfigSystemConfigAuthEmailTemplatesComparisonExp {
    _and: [ConfigSystemConfigAuthEmailTemplatesComparisonExp!]
    _not: ConfigSystemConfigAuthEmailTemplatesComparisonExp
    _or: [ConfigSystemConfigAuthEmailTemplatesComparisonExp!]
    s3Key: ConfigStringComparisonExp
}

"""

"""
type ConfigSystemConfigGraphql {
    """
    manually enable graphi on a per-service basis
    by default it follows the plan
    """
    featureAdvancedGraphql: Boolean
}

input ConfigSystemConfigGraphqlUpdateInput {
    featureAdvancedGraphql: Boolean
}

input ConfigSystemConfigGraphqlInsertInput {
    featureAdvancedGraphql: Boolean
}

input ConfigSystemConfigGraphqlComparisonExp {
    _and: [ConfigSystemConfigGraphqlComparisonExp!]
    _not: ConfigSystemConfigGraphqlComparisonExp
    _or: [ConfigSystemConfigGraphqlComparisonExp!]
    featureAdvancedGraphql: ConfigBooleanComparisonExp
}

"""

"""
type ConfigSystemConfigPostgres {
    """

    """
    enabled: Boolean
    """

    """
    majorVersion: String
    """

    """
    connectionString: ConfigSystemConfigPostgresConnectionString!
    """

    """
    database: String!
    """

    """
    disk: ConfigSystemConfigPostgresDisk
}

input ConfigSystemConfigPostgresUpdateInput {
    enabled: Boolean
    majorVersion: String
    connectionString: ConfigSystemConfigPostgresConnectionStringUpdateInput
    database: String
    disk: ConfigSystemConfigPostgresDiskUpdateInput
}

input ConfigSystemConfigPostgresInsertInput {
    enabled: Boolean
    majorVersion: String
    connectionString: ConfigSystemConfigPostgresConnectionStringInsertInput!
    database: String!
    disk: ConfigSystemConfigPostgresDiskInsertInput
}

input ConfigSystemConfigPostgresComparisonExp {
    _and: [ConfigSystemConfigPostgresComparisonExp!]
    _not: ConfigSystemConfigPostgresComparisonExp
    _or: [ConfigSystemConfigPostgresComparisonExp!]
    enabled: ConfigBooleanComparisonExp
    majorVersion: ConfigStringComparisonExp
    connectionString: ConfigSystemConfigPostgresConnectionStringComparisonExp
    database: ConfigStringComparisonExp
    disk: ConfigSystemConfigPostgresDiskComparisonExp
}

"""

"""
type ConfigSystemConfigPostgresConnectionString {
    """

    """
    backup: String!
    """

    """
    hasura: String!
    """

    """
    auth: String!
    """

    """
    storage: String!
}

input ConfigSystemConfigPostgresConnectionStringUpdateInput {
    backup: String
    hasura: String
    auth: String
    storage: String
}

input ConfigSystemConfigPostgresConnectionStringInsertInput {
    backup: String!
    hasura: String!
    auth: String!
    storage: String!
}

input ConfigSystemConfigPostgresConnectionStringComparisonExp {
    _and: [ConfigSystemConfigPostgresConnectionStringComparisonExp!]
    _not: ConfigSystemConfigPostgresConnectionStringComparisonExp
    _or: [ConfigSystemConfigPostgresConnectionStringComparisonExp!]
    backup: ConfigStringComparisonExp
    hasura: ConfigStringComparisonExp
    auth: ConfigStringComparisonExp
    storage: ConfigStringComparisonExp
}

"""

"""
type ConfigSystemConfigPostgresDisk {
    """

    """
    iops: ConfigUint32
    """

    """
    tput: ConfigUint32
}

input ConfigSystemConfigPostgresDiskUpdateInput {
    iops: ConfigUint32
    tput: ConfigUint32
}

input ConfigSystemConfigPostgresDiskInsertInput {
    iops: ConfigUint32
    tput: ConfigUint32
}

input ConfigSystemConfigPostgresDiskComparisonExp {
    _and: [ConfigSystemConfigPostgresDiskComparisonExp!]
    _not: ConfigSystemConfigPostgresDiskComparisonExp
    _or: [ConfigSystemConfigPostgresDiskComparisonExp!]
    iops: ConfigUint32ComparisonExp
    tput: ConfigUint32ComparisonExp
}

scalar ConfigUrl

input ConfigUrlComparisonExp {
    _eq: ConfigUrl
    _neq: ConfigUrl
    _in: [ConfigUrl!]
    _nin: [ConfigUrl!]
}

scalar ConfigUserRole

input ConfigUserRoleComparisonExp {
    _eq: ConfigUserRole
    _neq: ConfigUserRole
    _in: [ConfigUserRole!]
    _nin: [ConfigUserRole!]
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_hasRole_argsRole(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["role"] = arg0
	return args, nil
}
func (ec *executionContext) dir_hasRole_argsRole(
	ctx context.Context,
	rawArgs map[string]any,
) ([]string, error) {
	if _, ok := rawArgs["role"]; !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
	if tmp, ok := rawArgs["role"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_changeDatabaseVersion_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_changeDatabaseVersion_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_changeDatabaseVersion_argsVersion(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["version"] = arg1
	arg2, err := ec.field_Mutation_changeDatabaseVersion_argsForce(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["force"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_changeDatabaseVersion_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_changeDatabaseVersion_argsVersion(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["version"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
	if tmp, ok := rawArgs["version"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_changeDatabaseVersion_argsForce(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["force"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("force"))
	if tmp, ok := rawArgs["force"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_deleteRunServiceConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteRunServiceConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_deleteRunServiceConfig_argsServiceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["serviceID"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteRunServiceConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_deleteRunServiceConfig_argsServiceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["serviceID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceID"))
	if tmp, ok := rawArgs["serviceID"]; ok {
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteSecret_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteSecret_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_deleteSecret_argsKey(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["key"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteSecret_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_deleteSecret_argsKey(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["key"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
	if tmp, ok := rawArgs["key"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_insertConfig_argsConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["config"] = arg1
	arg2, err := ec.field_Mutation_insertConfig_argsSystemConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["systemConfig"] = arg2
	arg3, err := ec.field_Mutation_insertConfig_argsSecrets(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["secrets"] = arg3
	return args, nil
}
func (ec *executionContext) field_Mutation_insertConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_insertConfig_argsConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigConfigInsertInput, error) {
	if _, ok := rawArgs["config"]; !ok {
		var zeroVal model.ConfigConfigInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
	if tmp, ok := rawArgs["config"]; ok {
		return ec.unmarshalNConfigConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigInsertInput(ctx, tmp)
	}

	var zeroVal model.ConfigConfigInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertConfig_argsSystemConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigSystemConfigInsertInput, error) {
	if _, ok := rawArgs["systemConfig"]; !ok {
		var zeroVal model.ConfigSystemConfigInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("systemConfig"))
	if tmp, ok := rawArgs["systemConfig"]; ok {
		return ec.unmarshalNConfigSystemConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigInsertInput(ctx, tmp)
	}

	var zeroVal model.ConfigSystemConfigInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertConfig_argsSecrets(
	ctx context.Context,
	rawArgs map[string]any,
) ([]*model.ConfigEnvironmentVariableInsertInput, error) {
	if _, ok := rawArgs["secrets"]; !ok {
		var zeroVal []*model.ConfigEnvironmentVariableInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("secrets"))
	if tmp, ok := rawArgs["secrets"]; ok {
		return ec.unmarshalOConfigEnvironmentVariableInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInputᚄ(ctx, tmp)
	}

	var zeroVal []*model.ConfigEnvironmentVariableInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertRunServiceConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertRunServiceConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_insertRunServiceConfig_argsConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["config"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_insertRunServiceConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_insertRunServiceConfig_argsConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigRunServiceConfigInsertInput, error) {
	if _, ok := rawArgs["config"]; !ok {
		var zeroVal model.ConfigRunServiceConfigInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
	if tmp, ok := rawArgs["config"]; ok {
		return ec.unmarshalNConfigRunServiceConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigInsertInput(ctx, tmp)
	}

	var zeroVal model.ConfigRunServiceConfigInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_insertSecret_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_insertSecret_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_insertSecret_argsSecret(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["secret"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_insertSecret_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_insertSecret_argsSecret(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigEnvironmentVariableInsertInput, error) {
	if _, ok := rawArgs["secret"]; !ok {
		var zeroVal model.ConfigEnvironmentVariableInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("secret"))
	if tmp, ok := rawArgs["secret"]; ok {
		return ec.unmarshalNConfigEnvironmentVariableInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInput(ctx, tmp)
	}

	var zeroVal model.ConfigEnvironmentVariableInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_replaceConfigRawJSON_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_replaceConfigRawJSON_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_replaceConfigRawJSON_argsRawJSON(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["rawJSON"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_replaceConfigRawJSON_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_replaceConfigRawJSON_argsRawJSON(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["rawJSON"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("rawJSON"))
	if tmp, ok := rawArgs["rawJSON"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_replaceConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_replaceConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_replaceConfig_argsConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["config"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_replaceConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_replaceConfig_argsConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigConfigInsertInput, error) {
	if _, ok := rawArgs["config"]; !ok {
		var zeroVal model.ConfigConfigInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
	if tmp, ok := rawArgs["config"]; ok {
		return ec.unmarshalNConfigConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigInsertInput(ctx, tmp)
	}

	var zeroVal model.ConfigConfigInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_replaceRunServiceConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_replaceRunServiceConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_replaceRunServiceConfig_argsServiceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["serviceID"] = arg1
	arg2, err := ec.field_Mutation_replaceRunServiceConfig_argsConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["config"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_replaceRunServiceConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_replaceRunServiceConfig_argsServiceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["serviceID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceID"))
	if tmp, ok := rawArgs["serviceID"]; ok {
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_replaceRunServiceConfig_argsConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigRunServiceConfigInsertInput, error) {
	if _, ok := rawArgs["config"]; !ok {
		var zeroVal model.ConfigRunServiceConfigInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
	if tmp, ok := rawArgs["config"]; ok {
		return ec.unmarshalNConfigRunServiceConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigInsertInput(ctx, tmp)
	}

	var zeroVal model.ConfigRunServiceConfigInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_updateConfig_argsConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["config"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_updateConfig_argsConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigConfigUpdateInput, error) {
	if _, ok := rawArgs["config"]; !ok {
		var zeroVal model.ConfigConfigUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
	if tmp, ok := rawArgs["config"]; ok {
		return ec.unmarshalNConfigConfigUpdateInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigUpdateInput(ctx, tmp)
	}

	var zeroVal model.ConfigConfigUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateRunServiceConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateRunServiceConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_updateRunServiceConfig_argsServiceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["serviceID"] = arg1
	arg2, err := ec.field_Mutation_updateRunServiceConfig_argsConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["config"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_updateRunServiceConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_updateRunServiceConfig_argsServiceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["serviceID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceID"))
	if tmp, ok := rawArgs["serviceID"]; ok {
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateRunServiceConfig_argsConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigRunServiceConfigUpdateInput, error) {
	if _, ok := rawArgs["config"]; !ok {
		var zeroVal model.ConfigRunServiceConfigUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
	if tmp, ok := rawArgs["config"]; ok {
		return ec.unmarshalNConfigRunServiceConfigUpdateInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigUpdateInput(ctx, tmp)
	}

	var zeroVal model.ConfigRunServiceConfigUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSecret_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSecret_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_updateSecret_argsSecret(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["secret"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSecret_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_updateSecret_argsSecret(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigEnvironmentVariableInsertInput, error) {
	if _, ok := rawArgs["secret"]; !ok {
		var zeroVal model.ConfigEnvironmentVariableInsertInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("secret"))
	if tmp, ok := rawArgs["secret"]; ok {
		return ec.unmarshalNConfigEnvironmentVariableInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInput(ctx, tmp)
	}

	var zeroVal model.ConfigEnvironmentVariableInsertInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Mutation_updateSystemConfig_argsSystemConfig(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["systemConfig"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Mutation_updateSystemConfig_argsSystemConfig(
	ctx context.Context,
	rawArgs map[string]any,
) (model.ConfigSystemConfigUpdateInput, error) {
	if _, ok := rawArgs["systemConfig"]; !ok {
		var zeroVal model.ConfigSystemConfigUpdateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("systemConfig"))
	if tmp, ok := rawArgs["systemConfig"]; ok {
		return ec.unmarshalNConfigSystemConfigUpdateInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigUpdateInput(ctx, tmp)
	}

	var zeroVal model.ConfigSystemConfigUpdateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_appSecrets_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_appSecrets_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_appSecrets_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Query_configRawJSON_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_configRawJSON_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Query_configRawJSON_argsResolve(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resolve"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_configRawJSON_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Query_configRawJSON_argsResolve(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["resolve"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resolve"))
	if tmp, ok := rawArgs["resolve"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_config_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_config_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Query_config_argsResolve(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resolve"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_config_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Query_config_argsResolve(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["resolve"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resolve"))
	if tmp, ok := rawArgs["resolve"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_configs_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_configs_argsResolve(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resolve"] = arg0
	arg1, err := ec.field_Query_configs_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_configs_argsResolve(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["resolve"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resolve"))
	if tmp, ok := rawArgs["resolve"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_configs_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ConfigConfigComparisonExp, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.ConfigConfigComparisonExp
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOConfigConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExp(ctx, tmp)
	}

	var zeroVal *model.ConfigConfigComparisonExp
	return zeroVal, nil
}

func (ec *executionContext) field_Query_runServiceConfigRawJSON_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_runServiceConfigRawJSON_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Query_runServiceConfigRawJSON_argsServiceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["serviceID"] = arg1
	arg2, err := ec.field_Query_runServiceConfigRawJSON_argsResolve(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resolve"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_runServiceConfigRawJSON_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Query_runServiceConfigRawJSON_argsServiceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["serviceID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceID"))
	if tmp, ok := rawArgs["serviceID"]; ok {
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_runServiceConfigRawJSON_argsResolve(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["resolve"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resolve"))
	if tmp, ok := rawArgs["resolve"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_runServiceConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_runServiceConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Query_runServiceConfig_argsServiceID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["serviceID"] = arg1
	arg2, err := ec.field_Query_runServiceConfig_argsResolve(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resolve"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_runServiceConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Query_runServiceConfig_argsServiceID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["serviceID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceID"))
	if tmp, ok := rawArgs["serviceID"]; ok {
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_runServiceConfig_argsResolve(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["resolve"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resolve"))
	if tmp, ok := rawArgs["resolve"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_runServiceConfigsAll_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_runServiceConfigsAll_argsResolve(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resolve"] = arg0
	arg1, err := ec.field_Query_runServiceConfigsAll_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_runServiceConfigsAll_argsResolve(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["resolve"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resolve"))
	if tmp, ok := rawArgs["resolve"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_runServiceConfigsAll_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ConfigRunServiceConfigComparisonExp, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.ConfigRunServiceConfigComparisonExp
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOConfigRunServiceConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExp(ctx, tmp)
	}

	var zeroVal *model.ConfigRunServiceConfigComparisonExp
	return zeroVal, nil
}

func (ec *executionContext) field_Query_runServiceConfigs_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_runServiceConfigs_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	arg1, err := ec.field_Query_runServiceConfigs_argsResolve(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["resolve"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_runServiceConfigs_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Query_runServiceConfigs_argsResolve(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["resolve"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("resolve"))
	if tmp, ok := rawArgs["resolve"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_systemConfig_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_systemConfig_argsAppID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["appID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_systemConfig_argsAppID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["appID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("appID"))
	directive0 := func(ctx context.Context) (any, error) {
		tmp, ok := rawArgs["appID"]
		if !ok {
			var zeroVal string
			return zeroVal, nil
		}
		return ec.unmarshalNuuid2string(ctx, tmp)
	}

	directive1 := func(ctx context.Context) (any, error) {
		if ec.directives.HasAppVisibility == nil {
			var zeroVal string
			return zeroVal, errors.New("directive hasAppVisibility is not implemented")
		}
		return ec.directives.HasAppVisibility(ctx, rawArgs, directive0)
	}

	tmp, err := directive1(ctx)
	if err != nil {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, err)
	}
	if data, ok := tmp.(string); ok {
		return data, nil
	} else {
		var zeroVal string
		return zeroVal, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
	}
}

func (ec *executionContext) field_Query_systemConfigs_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_systemConfigs_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_systemConfigs_argsWhere(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.ConfigSystemConfigComparisonExp, error) {
	if _, ok := rawArgs["where"]; !ok {
		var zeroVal *model.ConfigSystemConfigComparisonExp
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOConfigSystemConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExp(ctx, tmp)
	}

	var zeroVal *model.ConfigSystemConfigComparisonExp
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ConfigAI_version(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAI_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAI_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAI_resources(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAI_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAIResources)
	fc.Result = res
	return ec.marshalNConfigAIResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAI_resources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "compute":
				return ec.fieldContext_ConfigAIResources_compute(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAIResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAI_openai(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAI_openai(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Openai, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAIOpenai)
	fc.Result = res
	return ec.marshalNConfigAIOpenai2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenai(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAI_openai(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "organization":
				return ec.fieldContext_ConfigAIOpenai_organization(ctx, field)
			case "apiKey":
				return ec.fieldContext_ConfigAIOpenai_apiKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAIOpenai", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAI_autoEmbeddings(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAI_autoEmbeddings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoEmbeddings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAIAutoEmbeddings)
	fc.Result = res
	return ec.marshalOConfigAIAutoEmbeddings2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAI_autoEmbeddings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "synchPeriodMinutes":
				return ec.fieldContext_ConfigAIAutoEmbeddings_synchPeriodMinutes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAIAutoEmbeddings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAI_webhookSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAI_webhookSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAI_webhookSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAIAutoEmbeddings_synchPeriodMinutes(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAIAutoEmbeddings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAIAutoEmbeddings_synchPeriodMinutes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SynchPeriodMinutes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAIAutoEmbeddings_synchPeriodMinutes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAIAutoEmbeddings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAIOpenai_organization(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAIOpenai) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAIOpenai_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAIOpenai_organization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAIOpenai",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAIOpenai_apiKey(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAIOpenai) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAIOpenai_apiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApiKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAIOpenai_apiKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAIOpenai",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAIResources_compute(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAIResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAIResources_compute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Compute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigComputeResources)
	fc.Result = res
	return ec.marshalNConfigComputeResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAIResources_compute(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAIResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cpu":
				return ec.fieldContext_ConfigComputeResources_cpu(ctx, field)
			case "memory":
				return ec.fieldContext_ConfigComputeResources_memory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigComputeResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAppConfig_appID(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAppConfig_appID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNuuid2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAppConfig_appID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAppConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type uuid does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAppConfig_config(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAppConfig_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigConfig)
	fc.Result = res
	return ec.marshalNConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAppConfig_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAppConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "global":
				return ec.fieldContext_ConfigConfig_global(ctx, field)
			case "hasura":
				return ec.fieldContext_ConfigConfig_hasura(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigConfig_graphql(ctx, field)
			case "functions":
				return ec.fieldContext_ConfigConfig_functions(ctx, field)
			case "auth":
				return ec.fieldContext_ConfigConfig_auth(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigConfig_postgres(ctx, field)
			case "provider":
				return ec.fieldContext_ConfigConfig_provider(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigConfig_storage(ctx, field)
			case "ai":
				return ec.fieldContext_ConfigConfig_ai(ctx, field)
			case "observability":
				return ec.fieldContext_ConfigConfig_observability(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAppSecrets_appID(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppSecrets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAppSecrets_appID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNuuid2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAppSecrets_appID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAppSecrets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type uuid does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAppSecrets_secrets(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppSecrets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAppSecrets_secrets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secrets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigEnvironmentVariable)
	fc.Result = res
	return ec.marshalNConfigEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAppSecrets_secrets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAppSecrets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigEnvironmentVariable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAppSystemConfig_appID(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppSystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAppSystemConfig_appID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNuuid2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAppSystemConfig_appID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAppSystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type uuid does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAppSystemConfig_systemConfig(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppSystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAppSystemConfig_systemConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfig)
	fc.Result = res
	return ec.marshalNConfigSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAppSystemConfig_systemConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAppSystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "auth":
				return ec.fieldContext_ConfigSystemConfig_auth(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigSystemConfig_graphql(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigSystemConfig_postgres(ctx, field)
			case "persistentVolumesEncrypted":
				return ec.fieldContext_ConfigSystemConfig_persistentVolumesEncrypted(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_version(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_resources(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigResources)
	fc.Result = res
	return ec.marshalOConfigResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_resources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "compute":
				return ec.fieldContext_ConfigResources_compute(ctx, field)
			case "replicas":
				return ec.fieldContext_ConfigResources_replicas(ctx, field)
			case "autoscaler":
				return ec.fieldContext_ConfigResources_autoscaler(ctx, field)
			case "networking":
				return ec.fieldContext_ConfigResources_networking(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_elevatedPrivileges(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_elevatedPrivileges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElevatedPrivileges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthElevatedPrivileges)
	fc.Result = res
	return ec.marshalOConfigAuthElevatedPrivileges2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivileges(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_elevatedPrivileges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mode":
				return ec.fieldContext_ConfigAuthElevatedPrivileges_mode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthElevatedPrivileges", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_redirections(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_redirections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Redirections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthRedirections)
	fc.Result = res
	return ec.marshalOConfigAuthRedirections2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirections(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_redirections(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientUrl":
				return ec.fieldContext_ConfigAuthRedirections_clientUrl(ctx, field)
			case "allowedUrls":
				return ec.fieldContext_ConfigAuthRedirections_allowedUrls(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthRedirections", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_signUp(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_signUp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignUp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthSignUp)
	fc.Result = res
	return ec.marshalOConfigAuthSignUp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_signUp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthSignUp_enabled(ctx, field)
			case "disableNewUsers":
				return ec.fieldContext_ConfigAuthSignUp_disableNewUsers(ctx, field)
			case "turnstile":
				return ec.fieldContext_ConfigAuthSignUp_turnstile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthSignUp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_user(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthUser)
	fc.Result = res
	return ec.marshalOConfigAuthUser2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roles":
				return ec.fieldContext_ConfigAuthUser_roles(ctx, field)
			case "locale":
				return ec.fieldContext_ConfigAuthUser_locale(ctx, field)
			case "gravatar":
				return ec.fieldContext_ConfigAuthUser_gravatar(ctx, field)
			case "email":
				return ec.fieldContext_ConfigAuthUser_email(ctx, field)
			case "emailDomains":
				return ec.fieldContext_ConfigAuthUser_emailDomains(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_session(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_session(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthSession)
	fc.Result = res
	return ec.marshalOConfigAuthSession2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_session(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_ConfigAuthSession_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_ConfigAuthSession_refreshToken(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_method(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethod)
	fc.Result = res
	return ec.marshalOConfigAuthMethod2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "anonymous":
				return ec.fieldContext_ConfigAuthMethod_anonymous(ctx, field)
			case "emailPasswordless":
				return ec.fieldContext_ConfigAuthMethod_emailPasswordless(ctx, field)
			case "otp":
				return ec.fieldContext_ConfigAuthMethod_otp(ctx, field)
			case "emailPassword":
				return ec.fieldContext_ConfigAuthMethod_emailPassword(ctx, field)
			case "smsPasswordless":
				return ec.fieldContext_ConfigAuthMethod_smsPasswordless(ctx, field)
			case "oauth":
				return ec.fieldContext_ConfigAuthMethod_oauth(ctx, field)
			case "webauthn":
				return ec.fieldContext_ConfigAuthMethod_webauthn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_totp(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_totp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Totp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthTotp)
	fc.Result = res
	return ec.marshalOConfigAuthTotp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_totp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthTotp_enabled(ctx, field)
			case "issuer":
				return ec.fieldContext_ConfigAuthTotp_issuer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthTotp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_misc(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_misc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Misc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMisc)
	fc.Result = res
	return ec.marshalOConfigAuthMisc2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMisc(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_misc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "concealErrors":
				return ec.fieldContext_ConfigAuthMisc_concealErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMisc", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuth_rateLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuth_rateLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthRateLimit)
	fc.Result = res
	return ec.marshalOConfigAuthRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuth_rateLimit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emails":
				return ec.fieldContext_ConfigAuthRateLimit_emails(ctx, field)
			case "sms":
				return ec.fieldContext_ConfigAuthRateLimit_sms(ctx, field)
			case "bruteForce":
				return ec.fieldContext_ConfigAuthRateLimit_bruteForce(ctx, field)
			case "signups":
				return ec.fieldContext_ConfigAuthRateLimit_signups(ctx, field)
			case "global":
				return ec.fieldContext_ConfigAuthRateLimit_global(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthElevatedPrivileges_mode(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthElevatedPrivileges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthElevatedPrivileges_mode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthElevatedPrivileges_mode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthElevatedPrivileges",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethod_anonymous(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethod_anonymous(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Anonymous, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodAnonymous)
	fc.Result = res
	return ec.marshalOConfigAuthMethodAnonymous2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymous(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethod_anonymous(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodAnonymous_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodAnonymous", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethod_emailPasswordless(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethod_emailPasswordless(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailPasswordless, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodEmailPasswordless)
	fc.Result = res
	return ec.marshalOConfigAuthMethodEmailPasswordless2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordless(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethod_emailPasswordless(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodEmailPasswordless_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodEmailPasswordless", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethod_otp(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethod_otp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Otp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOtp)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOtp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethod_otp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "email":
				return ec.fieldContext_ConfigAuthMethodOtp_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOtp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethod_emailPassword(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethod_emailPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailPassword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodEmailPassword)
	fc.Result = res
	return ec.marshalOConfigAuthMethodEmailPassword2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPassword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethod_emailPassword(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hibpEnabled":
				return ec.fieldContext_ConfigAuthMethodEmailPassword_hibpEnabled(ctx, field)
			case "emailVerificationRequired":
				return ec.fieldContext_ConfigAuthMethodEmailPassword_emailVerificationRequired(ctx, field)
			case "passwordMinLength":
				return ec.fieldContext_ConfigAuthMethodEmailPassword_passwordMinLength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodEmailPassword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethod_smsPasswordless(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethod_smsPasswordless(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmsPasswordless, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodSmsPasswordless)
	fc.Result = res
	return ec.marshalOConfigAuthMethodSmsPasswordless2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordless(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethod_smsPasswordless(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodSmsPasswordless_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodSmsPasswordless", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethod_oauth(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethod_oauth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Oauth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOauth)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOauth2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethod_oauth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "apple":
				return ec.fieldContext_ConfigAuthMethodOauth_apple(ctx, field)
			case "azuread":
				return ec.fieldContext_ConfigAuthMethodOauth_azuread(ctx, field)
			case "bitbucket":
				return ec.fieldContext_ConfigAuthMethodOauth_bitbucket(ctx, field)
			case "discord":
				return ec.fieldContext_ConfigAuthMethodOauth_discord(ctx, field)
			case "entraid":
				return ec.fieldContext_ConfigAuthMethodOauth_entraid(ctx, field)
			case "facebook":
				return ec.fieldContext_ConfigAuthMethodOauth_facebook(ctx, field)
			case "github":
				return ec.fieldContext_ConfigAuthMethodOauth_github(ctx, field)
			case "gitlab":
				return ec.fieldContext_ConfigAuthMethodOauth_gitlab(ctx, field)
			case "google":
				return ec.fieldContext_ConfigAuthMethodOauth_google(ctx, field)
			case "linkedin":
				return ec.fieldContext_ConfigAuthMethodOauth_linkedin(ctx, field)
			case "spotify":
				return ec.fieldContext_ConfigAuthMethodOauth_spotify(ctx, field)
			case "strava":
				return ec.fieldContext_ConfigAuthMethodOauth_strava(ctx, field)
			case "twitch":
				return ec.fieldContext_ConfigAuthMethodOauth_twitch(ctx, field)
			case "twitter":
				return ec.fieldContext_ConfigAuthMethodOauth_twitter(ctx, field)
			case "windowslive":
				return ec.fieldContext_ConfigAuthMethodOauth_windowslive(ctx, field)
			case "workos":
				return ec.fieldContext_ConfigAuthMethodOauth_workos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOauth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethod_webauthn(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethod_webauthn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Webauthn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodWebauthn)
	fc.Result = res
	return ec.marshalOConfigAuthMethodWebauthn2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethod_webauthn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodWebauthn_enabled(ctx, field)
			case "relyingParty":
				return ec.fieldContext_ConfigAuthMethodWebauthn_relyingParty(ctx, field)
			case "attestation":
				return ec.fieldContext_ConfigAuthMethodWebauthn_attestation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodWebauthn", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodAnonymous_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodAnonymous) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodAnonymous_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodAnonymous_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodAnonymous",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodEmailPassword_hibpEnabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodEmailPassword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodEmailPassword_hibpEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HibpEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodEmailPassword_hibpEnabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodEmailPassword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodEmailPassword_emailVerificationRequired(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodEmailPassword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodEmailPassword_emailVerificationRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailVerificationRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodEmailPassword_emailVerificationRequired(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodEmailPassword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodEmailPassword_passwordMinLength(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodEmailPassword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodEmailPassword_passwordMinLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordMinLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint8)
	fc.Result = res
	return ec.marshalOConfigUint82ᚖuint8(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodEmailPassword_passwordMinLength(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodEmailPassword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint8 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodEmailPasswordless_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodEmailPasswordless) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodEmailPasswordless_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodEmailPasswordless_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodEmailPasswordless",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_apple(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_apple(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apple, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOauthApple)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOauthApple2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthApple(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_apple(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodOauthApple_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigAuthMethodOauthApple_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigAuthMethodOauthApple_clientId(ctx, field)
			case "keyId":
				return ec.fieldContext_ConfigAuthMethodOauthApple_keyId(ctx, field)
			case "teamId":
				return ec.fieldContext_ConfigAuthMethodOauthApple_teamId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigAuthMethodOauthApple_scope(ctx, field)
			case "privateKey":
				return ec.fieldContext_ConfigAuthMethodOauthApple_privateKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOauthApple", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_azuread(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_azuread(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Azuread, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOauthAzuread)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOauthAzuread2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzuread(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_azuread(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tenant":
				return ec.fieldContext_ConfigAuthMethodOauthAzuread_tenant(ctx, field)
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodOauthAzuread_enabled(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigAuthMethodOauthAzuread_clientId(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigAuthMethodOauthAzuread_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOauthAzuread", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_bitbucket(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_bitbucket(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bitbucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProvider)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProvider2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProvider(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_bitbucket(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProvider_enabled(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProvider_clientId(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProvider_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProvider", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_discord(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_discord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_discord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_entraid(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_entraid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entraid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOauthEntraid)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOauthEntraid2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraid(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_entraid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tenant":
				return ec.fieldContext_ConfigAuthMethodOauthEntraid_tenant(ctx, field)
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodOauthEntraid_enabled(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigAuthMethodOauthEntraid_clientId(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigAuthMethodOauthEntraid_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOauthEntraid", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_facebook(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_facebook(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facebook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_facebook(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_github(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_github(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Github, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_github(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_gitlab(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_gitlab(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gitlab, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_gitlab(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_google(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_google(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Google, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_google(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_linkedin(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_linkedin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linkedin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_linkedin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_spotify(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_spotify(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_spotify(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_strava(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_strava(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Strava, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_strava(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_twitch(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_twitch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Twitch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_twitch(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_twitter(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_twitter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Twitter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOauthTwitter)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOauthTwitter2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_twitter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodOauthTwitter_enabled(ctx, field)
			case "consumerKey":
				return ec.fieldContext_ConfigAuthMethodOauthTwitter_consumerKey(ctx, field)
			case "consumerSecret":
				return ec.fieldContext_ConfigAuthMethodOauthTwitter_consumerSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOauthTwitter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_windowslive(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_windowslive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Windowslive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStandardOauthProviderWithScope)
	fc.Result = res
	return ec.marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_windowslive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
			case "scope":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStandardOauthProviderWithScope", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauth_workos(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauth_workos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOauthWorkos)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOauthWorkos2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkos(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauth_workos(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "connection":
				return ec.fieldContext_ConfigAuthMethodOauthWorkos_connection(ctx, field)
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodOauthWorkos_enabled(ctx, field)
			case "clientId":
				return ec.fieldContext_ConfigAuthMethodOauthWorkos_clientId(ctx, field)
			case "organization":
				return ec.fieldContext_ConfigAuthMethodOauthWorkos_organization(ctx, field)
			case "clientSecret":
				return ec.fieldContext_ConfigAuthMethodOauthWorkos_clientSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOauthWorkos", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthApple_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthApple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthApple_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthApple_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthApple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthApple_audience(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthApple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthApple_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthApple_audience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthApple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthApple_clientId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthApple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthApple_clientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthApple_clientId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthApple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthApple_keyId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthApple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthApple_keyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthApple_keyId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthApple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthApple_teamId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthApple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthApple_teamId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthApple_teamId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthApple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthApple_scope(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthApple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthApple_scope(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthApple_scope(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthApple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthApple_privateKey(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthApple) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthApple_privateKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivateKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthApple_privateKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthApple",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthAzuread_tenant(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthAzuread) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthAzuread_tenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthAzuread_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthAzuread",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthAzuread_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthAzuread) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthAzuread_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthAzuread_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthAzuread",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthAzuread_clientId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthAzuread) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthAzuread_clientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthAzuread_clientId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthAzuread",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthAzuread_clientSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthAzuread) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthAzuread_clientSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthAzuread_clientSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthAzuread",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthEntraid_tenant(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthEntraid) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthEntraid_tenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthEntraid_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthEntraid",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthEntraid_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthEntraid) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthEntraid_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthEntraid_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthEntraid",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthEntraid_clientId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthEntraid) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthEntraid_clientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthEntraid_clientId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthEntraid",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthEntraid_clientSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthEntraid) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthEntraid_clientSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthEntraid_clientSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthEntraid",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthTwitter_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthTwitter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthTwitter_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthTwitter_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthTwitter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthTwitter_consumerKey(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthTwitter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthTwitter_consumerKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConsumerKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthTwitter_consumerKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthTwitter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthTwitter_consumerSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthTwitter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthTwitter_consumerSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConsumerSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthTwitter_consumerSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthTwitter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthWorkos_connection(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthWorkos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthWorkos_connection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthWorkos_connection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthWorkos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthWorkos_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthWorkos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthWorkos_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthWorkos_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthWorkos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthWorkos_clientId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthWorkos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthWorkos_clientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthWorkos_clientId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthWorkos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthWorkos_organization(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthWorkos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthWorkos_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthWorkos_organization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthWorkos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOauthWorkos_clientSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOauthWorkos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOauthWorkos_clientSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOauthWorkos_clientSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOauthWorkos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOtp_email(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOtp_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodOtpEmail)
	fc.Result = res
	return ec.marshalOConfigAuthMethodOtpEmail2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOtp_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthMethodOtpEmail_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodOtpEmail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodOtpEmail_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodOtpEmail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodOtpEmail_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodOtpEmail_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodOtpEmail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodSmsPasswordless_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodSmsPasswordless) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodSmsPasswordless_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodSmsPasswordless_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodSmsPasswordless",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodWebauthn_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodWebauthn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodWebauthn_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodWebauthn_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodWebauthn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodWebauthn_relyingParty(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodWebauthn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodWebauthn_relyingParty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelyingParty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodWebauthnRelyingParty)
	fc.Result = res
	return ec.marshalOConfigAuthMethodWebauthnRelyingParty2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingParty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodWebauthn_relyingParty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodWebauthn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConfigAuthMethodWebauthnRelyingParty_id(ctx, field)
			case "name":
				return ec.fieldContext_ConfigAuthMethodWebauthnRelyingParty_name(ctx, field)
			case "origins":
				return ec.fieldContext_ConfigAuthMethodWebauthnRelyingParty_origins(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodWebauthnRelyingParty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodWebauthn_attestation(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodWebauthn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodWebauthn_attestation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attestation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthMethodWebauthnAttestation)
	fc.Result = res
	return ec.marshalOConfigAuthMethodWebauthnAttestation2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodWebauthn_attestation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodWebauthn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timeout":
				return ec.fieldContext_ConfigAuthMethodWebauthnAttestation_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthMethodWebauthnAttestation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodWebauthnAttestation_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodWebauthnAttestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodWebauthnAttestation_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodWebauthnAttestation_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodWebauthnAttestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodWebauthnRelyingParty_id(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodWebauthnRelyingParty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodWebauthnRelyingParty_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodWebauthnRelyingParty_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodWebauthnRelyingParty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodWebauthnRelyingParty_name(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodWebauthnRelyingParty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodWebauthnRelyingParty_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodWebauthnRelyingParty_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodWebauthnRelyingParty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMethodWebauthnRelyingParty_origins(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMethodWebauthnRelyingParty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMethodWebauthnRelyingParty_origins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Origins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOConfigUrl2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMethodWebauthnRelyingParty_origins(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMethodWebauthnRelyingParty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUrl does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthMisc_concealErrors(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthMisc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthMisc_concealErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConcealErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthMisc_concealErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthMisc",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthRateLimit_emails(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthRateLimit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthRateLimit_emails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthRateLimit_emails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthRateLimit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthRateLimit_sms(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthRateLimit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthRateLimit_sms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthRateLimit_sms(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthRateLimit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthRateLimit_bruteForce(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthRateLimit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthRateLimit_bruteForce(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BruteForce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthRateLimit_bruteForce(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthRateLimit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthRateLimit_signups(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthRateLimit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthRateLimit_signups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthRateLimit_signups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthRateLimit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthRateLimit_global(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthRateLimit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthRateLimit_global(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Global, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthRateLimit_global(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthRateLimit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthRedirections_clientUrl(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthRedirections) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthRedirections_clientUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOConfigUrl2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthRedirections_clientUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthRedirections",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUrl does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthRedirections_allowedUrls(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthRedirections) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthRedirections_allowedUrls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedUrls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthRedirections_allowedUrls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthRedirections",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSession_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSession_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthSessionAccessToken)
	fc.Result = res
	return ec.marshalOConfigAuthSessionAccessToken2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSession_accessToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expiresIn":
				return ec.fieldContext_ConfigAuthSessionAccessToken_expiresIn(ctx, field)
			case "customClaims":
				return ec.fieldContext_ConfigAuthSessionAccessToken_customClaims(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthSessionAccessToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSession_refreshToken(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSession_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthSessionRefreshToken)
	fc.Result = res
	return ec.marshalOConfigAuthSessionRefreshToken2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSession_refreshToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expiresIn":
				return ec.fieldContext_ConfigAuthSessionRefreshToken_expiresIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthSessionRefreshToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSessionAccessToken_expiresIn(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSessionAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSessionAccessToken_expiresIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSessionAccessToken_expiresIn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSessionAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSessionAccessToken_customClaims(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSessionAccessToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSessionAccessToken_customClaims(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomClaims, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigAuthsessionaccessTokenCustomClaims)
	fc.Result = res
	return ec.marshalOConfigAuthsessionaccessTokenCustomClaims2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSessionAccessToken_customClaims(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSessionAccessToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_ConfigAuthsessionaccessTokenCustomClaims_key(ctx, field)
			case "value":
				return ec.fieldContext_ConfigAuthsessionaccessTokenCustomClaims_value(ctx, field)
			case "default":
				return ec.fieldContext_ConfigAuthsessionaccessTokenCustomClaims_default(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthsessionaccessTokenCustomClaims", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSessionRefreshToken_expiresIn(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSessionRefreshToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSessionRefreshToken_expiresIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSessionRefreshToken_expiresIn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSessionRefreshToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSignUp_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSignUp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSignUp_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSignUp_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSignUp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSignUp_disableNewUsers(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSignUp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSignUp_disableNewUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisableNewUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSignUp_disableNewUsers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSignUp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSignUp_turnstile(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSignUp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSignUp_turnstile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Turnstile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthSignUpTurnstile)
	fc.Result = res
	return ec.marshalOConfigAuthSignUpTurnstile2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSignUp_turnstile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSignUp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "secretKey":
				return ec.fieldContext_ConfigAuthSignUpTurnstile_secretKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthSignUpTurnstile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthSignUpTurnstile_secretKey(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthSignUpTurnstile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthSignUpTurnstile_secretKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecretKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthSignUpTurnstile_secretKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthSignUpTurnstile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthTotp_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthTotp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthTotp_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthTotp_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthTotp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthTotp_issuer(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthTotp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthTotp_issuer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issuer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthTotp_issuer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthTotp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUser_roles(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUser_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthUserRoles)
	fc.Result = res
	return ec.marshalOConfigAuthUserRoles2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRoles(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUser_roles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_ConfigAuthUserRoles_default(ctx, field)
			case "allowed":
				return ec.fieldContext_ConfigAuthUserRoles_allowed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthUserRoles", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUser_locale(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUser_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthUserLocale)
	fc.Result = res
	return ec.marshalOConfigAuthUserLocale2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocale(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUser_locale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_ConfigAuthUserLocale_default(ctx, field)
			case "allowed":
				return ec.fieldContext_ConfigAuthUserLocale_allowed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthUserLocale", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUser_gravatar(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUser_gravatar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gravatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthUserGravatar)
	fc.Result = res
	return ec.marshalOConfigAuthUserGravatar2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatar(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUser_gravatar(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigAuthUserGravatar_enabled(ctx, field)
			case "default":
				return ec.fieldContext_ConfigAuthUserGravatar_default(ctx, field)
			case "rating":
				return ec.fieldContext_ConfigAuthUserGravatar_rating(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthUserGravatar", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUser_email(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUser_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthUserEmail)
	fc.Result = res
	return ec.marshalOConfigAuthUserEmail2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUser_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allowed":
				return ec.fieldContext_ConfigAuthUserEmail_allowed(ctx, field)
			case "blocked":
				return ec.fieldContext_ConfigAuthUserEmail_blocked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthUserEmail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUser_emailDomains(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUser_emailDomains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailDomains, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuthUserEmailDomains)
	fc.Result = res
	return ec.marshalOConfigAuthUserEmailDomains2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomains(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUser_emailDomains(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "allowed":
				return ec.fieldContext_ConfigAuthUserEmailDomains_allowed(ctx, field)
			case "blocked":
				return ec.fieldContext_ConfigAuthUserEmailDomains_blocked(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuthUserEmailDomains", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserEmail_allowed(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserEmail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserEmail_allowed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOConfigEmail2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserEmail_allowed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserEmail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigEmail does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserEmail_blocked(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserEmail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserEmail_blocked(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOConfigEmail2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserEmail_blocked(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserEmail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigEmail does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserEmailDomains_allowed(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserEmailDomains) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserEmailDomains_allowed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserEmailDomains_allowed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserEmailDomains",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserEmailDomains_blocked(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserEmailDomains) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserEmailDomains_blocked(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserEmailDomains_blocked(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserEmailDomains",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserGravatar_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserGravatar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserGravatar_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserGravatar_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserGravatar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserGravatar_default(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserGravatar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserGravatar_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserGravatar_default(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserGravatar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserGravatar_rating(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserGravatar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserGravatar_rating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserGravatar_rating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserGravatar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserLocale_default(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserLocale) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserLocale_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOConfigLocale2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserLocale_default(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserLocale",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigLocale does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserLocale_allowed(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserLocale) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserLocale_allowed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOConfigLocale2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserLocale_allowed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserLocale",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigLocale does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserRoles_default(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserRoles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserRoles_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOConfigUserRole2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserRoles_default(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserRoles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUserRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthUserRoles_allowed(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthUserRoles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthUserRoles_allowed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOConfigUserRole2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthUserRoles_allowed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthUserRoles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUserRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthsessionaccessTokenCustomClaims_key(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthsessionaccessTokenCustomClaims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthsessionaccessTokenCustomClaims_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthsessionaccessTokenCustomClaims_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthsessionaccessTokenCustomClaims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthsessionaccessTokenCustomClaims_value(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthsessionaccessTokenCustomClaims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthsessionaccessTokenCustomClaims_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthsessionaccessTokenCustomClaims_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthsessionaccessTokenCustomClaims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAuthsessionaccessTokenCustomClaims_default(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAuthsessionaccessTokenCustomClaims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAuthsessionaccessTokenCustomClaims_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAuthsessionaccessTokenCustomClaims_default(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAuthsessionaccessTokenCustomClaims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigAutoscaler_maxReplicas(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAutoscaler) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigAutoscaler_maxReplicas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxReplicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	fc.Result = res
	return ec.marshalNConfigUint82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigAutoscaler_maxReplicas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigAutoscaler",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint8 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigClaimMap_claim(ctx context.Context, field graphql.CollectedField, obj *model.ConfigClaimMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigClaimMap_claim(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Claim, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigClaimMap_claim(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigClaimMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigClaimMap_value(ctx context.Context, field graphql.CollectedField, obj *model.ConfigClaimMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigClaimMap_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigClaimMap_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigClaimMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigClaimMap_path(ctx context.Context, field graphql.CollectedField, obj *model.ConfigClaimMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigClaimMap_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigClaimMap_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigClaimMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigClaimMap_default(ctx context.Context, field graphql.CollectedField, obj *model.ConfigClaimMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigClaimMap_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigClaimMap_default(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigClaimMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigComputeResources_cpu(ctx context.Context, field graphql.CollectedField, obj *model.ConfigComputeResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigComputeResources_cpu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cpu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNConfigUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigComputeResources_cpu(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigComputeResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigComputeResources_memory(ctx context.Context, field graphql.CollectedField, obj *model.ConfigComputeResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigComputeResources_memory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Memory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNConfigUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigComputeResources_memory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigComputeResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_global(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_global(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Global, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigGlobal)
	fc.Result = res
	return ec.marshalOConfigGlobal2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_global(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "environment":
				return ec.fieldContext_ConfigGlobal_environment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGlobal", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_hasura(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_hasura(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hasura, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigHasura)
	fc.Result = res
	return ec.marshalNConfigHasura2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasura(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_hasura(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_ConfigHasura_version(ctx, field)
			case "jwtSecrets":
				return ec.fieldContext_ConfigHasura_jwtSecrets(ctx, field)
			case "adminSecret":
				return ec.fieldContext_ConfigHasura_adminSecret(ctx, field)
			case "webhookSecret":
				return ec.fieldContext_ConfigHasura_webhookSecret(ctx, field)
			case "settings":
				return ec.fieldContext_ConfigHasura_settings(ctx, field)
			case "authHook":
				return ec.fieldContext_ConfigHasura_authHook(ctx, field)
			case "logs":
				return ec.fieldContext_ConfigHasura_logs(ctx, field)
			case "events":
				return ec.fieldContext_ConfigHasura_events(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigHasura_resources(ctx, field)
			case "rateLimit":
				return ec.fieldContext_ConfigHasura_rateLimit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigHasura", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_graphql(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_graphql(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Graphql, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigGraphql)
	fc.Result = res
	return ec.marshalOConfigGraphql2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphql(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_graphql(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "security":
				return ec.fieldContext_ConfigGraphql_security(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGraphql", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_functions(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_functions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Functions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigFunctions)
	fc.Result = res
	return ec.marshalOConfigFunctions2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_functions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ConfigFunctions_node(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigFunctions_resources(ctx, field)
			case "rateLimit":
				return ec.fieldContext_ConfigFunctions_rateLimit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigFunctions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_auth(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_auth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Auth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAuth)
	fc.Result = res
	return ec.marshalOConfigAuth2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_auth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_ConfigAuth_version(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigAuth_resources(ctx, field)
			case "elevatedPrivileges":
				return ec.fieldContext_ConfigAuth_elevatedPrivileges(ctx, field)
			case "redirections":
				return ec.fieldContext_ConfigAuth_redirections(ctx, field)
			case "signUp":
				return ec.fieldContext_ConfigAuth_signUp(ctx, field)
			case "user":
				return ec.fieldContext_ConfigAuth_user(ctx, field)
			case "session":
				return ec.fieldContext_ConfigAuth_session(ctx, field)
			case "method":
				return ec.fieldContext_ConfigAuth_method(ctx, field)
			case "totp":
				return ec.fieldContext_ConfigAuth_totp(ctx, field)
			case "misc":
				return ec.fieldContext_ConfigAuth_misc(ctx, field)
			case "rateLimit":
				return ec.fieldContext_ConfigAuth_rateLimit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAuth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_postgres(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_postgres(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Postgres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigPostgres)
	fc.Result = res
	return ec.marshalNConfigPostgres2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgres(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_postgres(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_ConfigPostgres_version(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigPostgres_resources(ctx, field)
			case "settings":
				return ec.fieldContext_ConfigPostgres_settings(ctx, field)
			case "pitr":
				return ec.fieldContext_ConfigPostgres_pitr(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigPostgres", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_provider(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigProvider)
	fc.Result = res
	return ec.marshalOConfigProvider2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProvider(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_provider(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "smtp":
				return ec.fieldContext_ConfigProvider_smtp(ctx, field)
			case "sms":
				return ec.fieldContext_ConfigProvider_sms(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigProvider", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_storage(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_storage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Storage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStorage)
	fc.Result = res
	return ec.marshalOConfigStorage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_storage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_ConfigStorage_version(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigStorage_resources(ctx, field)
			case "antivirus":
				return ec.fieldContext_ConfigStorage_antivirus(ctx, field)
			case "rateLimit":
				return ec.fieldContext_ConfigStorage_rateLimit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStorage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_ai(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_ai(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ai, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAI)
	fc.Result = res
	return ec.marshalOConfigAI2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_ai(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_ConfigAI_version(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigAI_resources(ctx, field)
			case "openai":
				return ec.fieldContext_ConfigAI_openai(ctx, field)
			case "autoEmbeddings":
				return ec.fieldContext_ConfigAI_autoEmbeddings(ctx, field)
			case "webhookSecret":
				return ec.fieldContext_ConfigAI_webhookSecret(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAI", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigConfig_observability(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigConfig_observability(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Observability, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigObservability)
	fc.Result = res
	return ec.marshalNConfigObservability2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservability(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigConfig_observability(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "grafana":
				return ec.fieldContext_ConfigObservability_grafana(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigObservability", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigEnvironmentVariable_name(ctx context.Context, field graphql.CollectedField, obj *model.ConfigEnvironmentVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigEnvironmentVariable_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigEnvironmentVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigEnvironmentVariable_value(ctx context.Context, field graphql.CollectedField, obj *model.ConfigEnvironmentVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigEnvironmentVariable_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigEnvironmentVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigFunctions_node(ctx context.Context, field graphql.CollectedField, obj *model.ConfigFunctions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigFunctions_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigFunctionsNode)
	fc.Result = res
	return ec.marshalOConfigFunctionsNode2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigFunctions_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigFunctions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_ConfigFunctionsNode_version(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigFunctionsNode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigFunctions_resources(ctx context.Context, field graphql.CollectedField, obj *model.ConfigFunctions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigFunctions_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigFunctionsResources)
	fc.Result = res
	return ec.marshalOConfigFunctionsResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigFunctions_resources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigFunctions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "networking":
				return ec.fieldContext_ConfigFunctionsResources_networking(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigFunctionsResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigFunctions_rateLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigFunctions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigFunctions_rateLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigFunctions_rateLimit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigFunctions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigFunctionsNode_version(ctx context.Context, field graphql.CollectedField, obj *model.ConfigFunctionsNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigFunctionsNode_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigFunctionsNode_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigFunctionsNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigFunctionsResources_networking(ctx context.Context, field graphql.CollectedField, obj *model.ConfigFunctionsResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigFunctionsResources_networking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Networking, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigNetworking)
	fc.Result = res
	return ec.marshalOConfigNetworking2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworking(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigFunctionsResources_networking(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigFunctionsResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ingresses":
				return ec.fieldContext_ConfigNetworking_ingresses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigNetworking", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGlobal_environment(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGlobal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGlobal_environment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Environment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigGlobalEnvironmentVariable)
	fc.Result = res
	return ec.marshalOConfigGlobalEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGlobal_environment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGlobal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigGlobalEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigGlobalEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGlobalEnvironmentVariable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGlobalEnvironmentVariable_name(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGlobalEnvironmentVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGlobalEnvironmentVariable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGlobalEnvironmentVariable_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGlobalEnvironmentVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGlobalEnvironmentVariable_value(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGlobalEnvironmentVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGlobalEnvironmentVariable_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGlobalEnvironmentVariable_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGlobalEnvironmentVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafana_adminPassword(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafana) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafana_adminPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdminPassword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafana_adminPassword(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafana",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafana_smtp(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafana) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafana_smtp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Smtp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigGrafanaSmtp)
	fc.Result = res
	return ec.marshalOConfigGrafanaSmtp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafana_smtp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafana",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConfigGrafanaSmtp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConfigGrafanaSmtp_port(ctx, field)
			case "sender":
				return ec.fieldContext_ConfigGrafanaSmtp_sender(ctx, field)
			case "user":
				return ec.fieldContext_ConfigGrafanaSmtp_user(ctx, field)
			case "password":
				return ec.fieldContext_ConfigGrafanaSmtp_password(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafanaSmtp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafana_alerting(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafana) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafana_alerting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alerting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigGrafanaAlerting)
	fc.Result = res
	return ec.marshalOConfigGrafanaAlerting2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlerting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafana_alerting(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafana",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigGrafanaAlerting_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafanaAlerting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafana_contacts(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafana) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafana_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigGrafanaContacts)
	fc.Result = res
	return ec.marshalOConfigGrafanaContacts2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContacts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafana_contacts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafana",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emails":
				return ec.fieldContext_ConfigGrafanaContacts_emails(ctx, field)
			case "pagerduty":
				return ec.fieldContext_ConfigGrafanaContacts_pagerduty(ctx, field)
			case "discord":
				return ec.fieldContext_ConfigGrafanaContacts_discord(ctx, field)
			case "slack":
				return ec.fieldContext_ConfigGrafanaContacts_slack(ctx, field)
			case "webhook":
				return ec.fieldContext_ConfigGrafanaContacts_webhook(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafanaContacts", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaAlerting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaAlerting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaAlerting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaAlerting_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaAlerting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaContacts_emails(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaContacts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaContacts_emails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaContacts_emails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaContacts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaContacts_pagerduty(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaContacts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaContacts_pagerduty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagerduty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigGrafanacontactsPagerduty)
	fc.Result = res
	return ec.marshalOConfigGrafanacontactsPagerduty2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaContacts_pagerduty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaContacts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "integrationKey":
				return ec.fieldContext_ConfigGrafanacontactsPagerduty_integrationKey(ctx, field)
			case "severity":
				return ec.fieldContext_ConfigGrafanacontactsPagerduty_severity(ctx, field)
			case "class":
				return ec.fieldContext_ConfigGrafanacontactsPagerduty_class(ctx, field)
			case "component":
				return ec.fieldContext_ConfigGrafanacontactsPagerduty_component(ctx, field)
			case "group":
				return ec.fieldContext_ConfigGrafanacontactsPagerduty_group(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafanacontactsPagerduty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaContacts_discord(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaContacts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaContacts_discord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigGrafanacontactsDiscord)
	fc.Result = res
	return ec.marshalOConfigGrafanacontactsDiscord2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaContacts_discord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaContacts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ConfigGrafanacontactsDiscord_url(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_ConfigGrafanacontactsDiscord_avatarUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafanacontactsDiscord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaContacts_slack(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaContacts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaContacts_slack(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigGrafanacontactsSlack)
	fc.Result = res
	return ec.marshalOConfigGrafanacontactsSlack2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaContacts_slack(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaContacts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "recipient":
				return ec.fieldContext_ConfigGrafanacontactsSlack_recipient(ctx, field)
			case "token":
				return ec.fieldContext_ConfigGrafanacontactsSlack_token(ctx, field)
			case "username":
				return ec.fieldContext_ConfigGrafanacontactsSlack_username(ctx, field)
			case "iconEmoji":
				return ec.fieldContext_ConfigGrafanacontactsSlack_iconEmoji(ctx, field)
			case "iconURL":
				return ec.fieldContext_ConfigGrafanacontactsSlack_iconURL(ctx, field)
			case "mentionUsers":
				return ec.fieldContext_ConfigGrafanacontactsSlack_mentionUsers(ctx, field)
			case "mentionGroups":
				return ec.fieldContext_ConfigGrafanacontactsSlack_mentionGroups(ctx, field)
			case "mentionChannel":
				return ec.fieldContext_ConfigGrafanacontactsSlack_mentionChannel(ctx, field)
			case "url":
				return ec.fieldContext_ConfigGrafanacontactsSlack_url(ctx, field)
			case "endpointURL":
				return ec.fieldContext_ConfigGrafanacontactsSlack_endpointURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafanacontactsSlack", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaContacts_webhook(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaContacts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaContacts_webhook(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Webhook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigGrafanacontactsWebhook)
	fc.Result = res
	return ec.marshalOConfigGrafanacontactsWebhook2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaContacts_webhook(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaContacts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ConfigGrafanacontactsWebhook_url(ctx, field)
			case "httpMethod":
				return ec.fieldContext_ConfigGrafanacontactsWebhook_httpMethod(ctx, field)
			case "username":
				return ec.fieldContext_ConfigGrafanacontactsWebhook_username(ctx, field)
			case "password":
				return ec.fieldContext_ConfigGrafanacontactsWebhook_password(ctx, field)
			case "authorizationScheme":
				return ec.fieldContext_ConfigGrafanacontactsWebhook_authorizationScheme(ctx, field)
			case "authorizationCredentials":
				return ec.fieldContext_ConfigGrafanacontactsWebhook_authorizationCredentials(ctx, field)
			case "maxAlerts":
				return ec.fieldContext_ConfigGrafanacontactsWebhook_maxAlerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafanacontactsWebhook", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaSmtp_host(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaSmtp_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaSmtp_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaSmtp_port(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaSmtp_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint16)
	fc.Result = res
	return ec.marshalNConfigPort2uint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaSmtp_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigPort does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaSmtp_sender(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaSmtp_sender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaSmtp_sender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaSmtp_user(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaSmtp_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaSmtp_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanaSmtp_password(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanaSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanaSmtp_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanaSmtp_password(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanaSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsDiscord_url(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsDiscord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsDiscord_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Url, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsDiscord_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsDiscord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsDiscord_avatarUrl(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsDiscord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsDiscord_avatarUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsDiscord_avatarUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsDiscord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsPagerduty_integrationKey(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsPagerduty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsPagerduty_integrationKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsPagerduty_integrationKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsPagerduty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsPagerduty_severity(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsPagerduty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsPagerduty_severity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsPagerduty_severity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsPagerduty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsPagerduty_class(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsPagerduty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsPagerduty_class(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Class, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsPagerduty_class(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsPagerduty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsPagerduty_component(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsPagerduty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsPagerduty_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsPagerduty_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsPagerduty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsPagerduty_group(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsPagerduty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsPagerduty_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsPagerduty_group(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsPagerduty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_recipient(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_recipient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_recipient(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_token(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_username(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_iconEmoji(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_iconEmoji(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconEmoji, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_iconEmoji(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_iconURL(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_iconURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_iconURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_mentionUsers(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_mentionUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MentionUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_mentionUsers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_mentionGroups(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_mentionGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MentionGroups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_mentionGroups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_mentionChannel(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_mentionChannel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MentionChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_mentionChannel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_url(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Url, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsSlack_endpointURL(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsSlack_endpointURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndpointURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsSlack_endpointURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsWebhook_url(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsWebhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsWebhook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Url, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsWebhook_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsWebhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsWebhook_httpMethod(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsWebhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsWebhook_httpMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HttpMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsWebhook_httpMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsWebhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsWebhook_username(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsWebhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsWebhook_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsWebhook_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsWebhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsWebhook_password(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsWebhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsWebhook_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsWebhook_password(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsWebhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsWebhook_authorizationScheme(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsWebhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsWebhook_authorizationScheme(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizationScheme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsWebhook_authorizationScheme(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsWebhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsWebhook_authorizationCredentials(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsWebhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsWebhook_authorizationCredentials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizationCredentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsWebhook_authorizationCredentials(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsWebhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGrafanacontactsWebhook_maxAlerts(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGrafanacontactsWebhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGrafanacontactsWebhook_maxAlerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxAlerts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGrafanacontactsWebhook_maxAlerts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGrafanacontactsWebhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGraphql_security(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGraphql) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGraphql_security(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Security, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigGraphqlSecurity)
	fc.Result = res
	return ec.marshalOConfigGraphqlSecurity2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGraphql_security(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGraphql",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "forbidAminSecret":
				return ec.fieldContext_ConfigGraphqlSecurity_forbidAminSecret(ctx, field)
			case "maxDepthQueries":
				return ec.fieldContext_ConfigGraphqlSecurity_maxDepthQueries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGraphqlSecurity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGraphqlSecurity_forbidAminSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGraphqlSecurity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGraphqlSecurity_forbidAminSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForbidAminSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGraphqlSecurity_forbidAminSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGraphqlSecurity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigGraphqlSecurity_maxDepthQueries(ctx context.Context, field graphql.CollectedField, obj *model.ConfigGraphqlSecurity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigGraphqlSecurity_maxDepthQueries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDepthQueries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOConfigUint2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigGraphqlSecurity_maxDepthQueries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigGraphqlSecurity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_version(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_jwtSecrets(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_jwtSecrets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JwtSecrets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigJWTSecret)
	fc.Result = res
	return ec.marshalOConfigJWTSecret2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_jwtSecrets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ConfigJWTSecret_type(ctx, field)
			case "key":
				return ec.fieldContext_ConfigJWTSecret_key(ctx, field)
			case "signingKey":
				return ec.fieldContext_ConfigJWTSecret_signingKey(ctx, field)
			case "kid":
				return ec.fieldContext_ConfigJWTSecret_kid(ctx, field)
			case "jwk_url":
				return ec.fieldContext_ConfigJWTSecret_jwk_url(ctx, field)
			case "claims_format":
				return ec.fieldContext_ConfigJWTSecret_claims_format(ctx, field)
			case "audience":
				return ec.fieldContext_ConfigJWTSecret_audience(ctx, field)
			case "issuer":
				return ec.fieldContext_ConfigJWTSecret_issuer(ctx, field)
			case "allowed_skew":
				return ec.fieldContext_ConfigJWTSecret_allowed_skew(ctx, field)
			case "header":
				return ec.fieldContext_ConfigJWTSecret_header(ctx, field)
			case "claims_map":
				return ec.fieldContext_ConfigJWTSecret_claims_map(ctx, field)
			case "claims_namespace":
				return ec.fieldContext_ConfigJWTSecret_claims_namespace(ctx, field)
			case "claims_namespace_path":
				return ec.fieldContext_ConfigJWTSecret_claims_namespace_path(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigJWTSecret", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_adminSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_adminSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdminSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_adminSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_webhookSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_webhookSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_webhookSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_settings(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigHasuraSettings)
	fc.Result = res
	return ec.marshalOConfigHasuraSettings2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_settings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "corsDomain":
				return ec.fieldContext_ConfigHasuraSettings_corsDomain(ctx, field)
			case "devMode":
				return ec.fieldContext_ConfigHasuraSettings_devMode(ctx, field)
			case "enableAllowList":
				return ec.fieldContext_ConfigHasuraSettings_enableAllowList(ctx, field)
			case "enableConsole":
				return ec.fieldContext_ConfigHasuraSettings_enableConsole(ctx, field)
			case "enableRemoteSchemaPermissions":
				return ec.fieldContext_ConfigHasuraSettings_enableRemoteSchemaPermissions(ctx, field)
			case "enabledAPIs":
				return ec.fieldContext_ConfigHasuraSettings_enabledAPIs(ctx, field)
			case "inferFunctionPermissions":
				return ec.fieldContext_ConfigHasuraSettings_inferFunctionPermissions(ctx, field)
			case "liveQueriesMultiplexedRefetchInterval":
				return ec.fieldContext_ConfigHasuraSettings_liveQueriesMultiplexedRefetchInterval(ctx, field)
			case "stringifyNumericTypes":
				return ec.fieldContext_ConfigHasuraSettings_stringifyNumericTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigHasuraSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_authHook(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_authHook(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthHook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigHasuraAuthHook)
	fc.Result = res
	return ec.marshalOConfigHasuraAuthHook2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHook(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_authHook(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_ConfigHasuraAuthHook_url(ctx, field)
			case "mode":
				return ec.fieldContext_ConfigHasuraAuthHook_mode(ctx, field)
			case "sendRequestBody":
				return ec.fieldContext_ConfigHasuraAuthHook_sendRequestBody(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigHasuraAuthHook", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_logs(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_logs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigHasuraLogs)
	fc.Result = res
	return ec.marshalOConfigHasuraLogs2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_logs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "level":
				return ec.fieldContext_ConfigHasuraLogs_level(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigHasuraLogs", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_events(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigHasuraEvents)
	fc.Result = res
	return ec.marshalOConfigHasuraEvents2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEvents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "httpPoolSize":
				return ec.fieldContext_ConfigHasuraEvents_httpPoolSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigHasuraEvents", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_resources(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigResources)
	fc.Result = res
	return ec.marshalOConfigResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_resources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "compute":
				return ec.fieldContext_ConfigResources_compute(ctx, field)
			case "replicas":
				return ec.fieldContext_ConfigResources_replicas(ctx, field)
			case "autoscaler":
				return ec.fieldContext_ConfigResources_autoscaler(ctx, field)
			case "networking":
				return ec.fieldContext_ConfigResources_networking(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasura_rateLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasura) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasura_rateLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasura_rateLimit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasura",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraAuthHook_url(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraAuthHook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraAuthHook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Url, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraAuthHook_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraAuthHook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraAuthHook_mode(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraAuthHook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraAuthHook_mode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraAuthHook_mode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraAuthHook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraAuthHook_sendRequestBody(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraAuthHook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraAuthHook_sendRequestBody(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendRequestBody, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraAuthHook_sendRequestBody(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraAuthHook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraEvents_httpPoolSize(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraEvents_httpPoolSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HttpPoolSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraEvents_httpPoolSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraLogs_level(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraLogs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraLogs_level(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraLogs_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraLogs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_corsDomain(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_corsDomain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorsDomain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOConfigUrl2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_corsDomain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUrl does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_devMode(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_devMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_devMode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_enableAllowList(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_enableAllowList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableAllowList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_enableAllowList(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_enableConsole(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_enableConsole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableConsole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_enableConsole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_enableRemoteSchemaPermissions(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_enableRemoteSchemaPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableRemoteSchemaPermissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_enableRemoteSchemaPermissions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_enabledAPIs(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_enabledAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnabledAPIs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOConfigHasuraAPIs2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_enabledAPIs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigHasuraAPIs does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_inferFunctionPermissions(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_inferFunctionPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InferFunctionPermissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_inferFunctionPermissions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_liveQueriesMultiplexedRefetchInterval(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_liveQueriesMultiplexedRefetchInterval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LiveQueriesMultiplexedRefetchInterval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_liveQueriesMultiplexedRefetchInterval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHasuraSettings_stringifyNumericTypes(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHasuraSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHasuraSettings_stringifyNumericTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringifyNumericTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHasuraSettings_stringifyNumericTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHasuraSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHealthCheck_port(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHealthCheck) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHealthCheck_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint16)
	fc.Result = res
	return ec.marshalNConfigPort2uint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHealthCheck_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHealthCheck",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigPort does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHealthCheck_initialDelaySeconds(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHealthCheck) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHealthCheck_initialDelaySeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialDelaySeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHealthCheck_initialDelaySeconds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHealthCheck",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigHealthCheck_probePeriodSeconds(ctx context.Context, field graphql.CollectedField, obj *model.ConfigHealthCheck) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigHealthCheck_probePeriodSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProbePeriodSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigHealthCheck_probePeriodSeconds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigHealthCheck",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigIngress_fqdn(ctx context.Context, field graphql.CollectedField, obj *model.ConfigIngress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigIngress_fqdn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fqdn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigIngress_fqdn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigIngress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigIngress_tls(ctx context.Context, field graphql.CollectedField, obj *model.ConfigIngress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigIngress_tls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigIngressTls)
	fc.Result = res
	return ec.marshalOConfigIngressTls2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTls(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigIngress_tls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigIngress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientCA":
				return ec.fieldContext_ConfigIngressTls_clientCA(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigIngressTls", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigIngressTls_clientCA(ctx context.Context, field graphql.CollectedField, obj *model.ConfigIngressTls) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigIngressTls_clientCA(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientCA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigIngressTls_clientCA(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigIngressTls",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigInsertConfigResponse_config(ctx context.Context, field graphql.CollectedField, obj *model.ConfigInsertConfigResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigInsertConfigResponse_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigConfig)
	fc.Result = res
	return ec.marshalNConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigInsertConfigResponse_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigInsertConfigResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "global":
				return ec.fieldContext_ConfigConfig_global(ctx, field)
			case "hasura":
				return ec.fieldContext_ConfigConfig_hasura(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigConfig_graphql(ctx, field)
			case "functions":
				return ec.fieldContext_ConfigConfig_functions(ctx, field)
			case "auth":
				return ec.fieldContext_ConfigConfig_auth(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigConfig_postgres(ctx, field)
			case "provider":
				return ec.fieldContext_ConfigConfig_provider(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigConfig_storage(ctx, field)
			case "ai":
				return ec.fieldContext_ConfigConfig_ai(ctx, field)
			case "observability":
				return ec.fieldContext_ConfigConfig_observability(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigInsertConfigResponse_systemConfig(ctx context.Context, field graphql.CollectedField, obj *model.ConfigInsertConfigResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigInsertConfigResponse_systemConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfig)
	fc.Result = res
	return ec.marshalNConfigSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigInsertConfigResponse_systemConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigInsertConfigResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "auth":
				return ec.fieldContext_ConfigSystemConfig_auth(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigSystemConfig_graphql(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigSystemConfig_postgres(ctx, field)
			case "persistentVolumesEncrypted":
				return ec.fieldContext_ConfigSystemConfig_persistentVolumesEncrypted(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigInsertConfigResponse_secrets(ctx context.Context, field graphql.CollectedField, obj *model.ConfigInsertConfigResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigInsertConfigResponse_secrets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secrets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigEnvironmentVariable)
	fc.Result = res
	return ec.marshalNConfigEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigInsertConfigResponse_secrets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigInsertConfigResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigEnvironmentVariable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_type(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_key(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_signingKey(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_signingKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SigningKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_signingKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_kid(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_kid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_kid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_jwk_url(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_jwk_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JwkUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOConfigUrl2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_jwk_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUrl does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_claims_format(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_claims_format(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClaimsFormat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_claims_format(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_audience(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_audience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_issuer(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_issuer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issuer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_issuer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_allowed_skew(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_allowed_skew(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedSkew, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_allowed_skew(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_header(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_header(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Header, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_header(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_claims_map(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_claims_map(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClaimsMap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigClaimMap)
	fc.Result = res
	return ec.marshalOConfigClaimMap2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_claims_map(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "claim":
				return ec.fieldContext_ConfigClaimMap_claim(ctx, field)
			case "value":
				return ec.fieldContext_ConfigClaimMap_value(ctx, field)
			case "path":
				return ec.fieldContext_ConfigClaimMap_path(ctx, field)
			case "default":
				return ec.fieldContext_ConfigClaimMap_default(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigClaimMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_claims_namespace(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_claims_namespace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClaimsNamespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_claims_namespace(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigJWTSecret_claims_namespace_path(ctx context.Context, field graphql.CollectedField, obj *model.ConfigJWTSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigJWTSecret_claims_namespace_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClaimsNamespacePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigJWTSecret_claims_namespace_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigJWTSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigNetworking_ingresses(ctx context.Context, field graphql.CollectedField, obj *model.ConfigNetworking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigNetworking_ingresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ingresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigIngress)
	fc.Result = res
	return ec.marshalOConfigIngress2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigNetworking_ingresses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigNetworking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fqdn":
				return ec.fieldContext_ConfigIngress_fqdn(ctx, field)
			case "tls":
				return ec.fieldContext_ConfigIngress_tls(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigIngress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigObservability_grafana(ctx context.Context, field graphql.CollectedField, obj *model.ConfigObservability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigObservability_grafana(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grafana, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigGrafana)
	fc.Result = res
	return ec.marshalNConfigGrafana2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafana(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigObservability_grafana(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigObservability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adminPassword":
				return ec.fieldContext_ConfigGrafana_adminPassword(ctx, field)
			case "smtp":
				return ec.fieldContext_ConfigGrafana_smtp(ctx, field)
			case "alerting":
				return ec.fieldContext_ConfigGrafana_alerting(ctx, field)
			case "contacts":
				return ec.fieldContext_ConfigGrafana_contacts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigGrafana", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgres_version(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgres_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgres_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgres_resources(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgres_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigPostgresResources)
	fc.Result = res
	return ec.marshalNConfigPostgresResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgres_resources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "compute":
				return ec.fieldContext_ConfigPostgresResources_compute(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigPostgresResources_storage(ctx, field)
			case "replicas":
				return ec.fieldContext_ConfigPostgresResources_replicas(ctx, field)
			case "enablePublicAccess":
				return ec.fieldContext_ConfigPostgresResources_enablePublicAccess(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigPostgresResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgres_settings(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgres_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigPostgresSettings)
	fc.Result = res
	return ec.marshalOConfigPostgresSettings2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgres_settings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "jit":
				return ec.fieldContext_ConfigPostgresSettings_jit(ctx, field)
			case "maxConnections":
				return ec.fieldContext_ConfigPostgresSettings_maxConnections(ctx, field)
			case "sharedBuffers":
				return ec.fieldContext_ConfigPostgresSettings_sharedBuffers(ctx, field)
			case "effectiveCacheSize":
				return ec.fieldContext_ConfigPostgresSettings_effectiveCacheSize(ctx, field)
			case "maintenanceWorkMem":
				return ec.fieldContext_ConfigPostgresSettings_maintenanceWorkMem(ctx, field)
			case "checkpointCompletionTarget":
				return ec.fieldContext_ConfigPostgresSettings_checkpointCompletionTarget(ctx, field)
			case "walBuffers":
				return ec.fieldContext_ConfigPostgresSettings_walBuffers(ctx, field)
			case "defaultStatisticsTarget":
				return ec.fieldContext_ConfigPostgresSettings_defaultStatisticsTarget(ctx, field)
			case "randomPageCost":
				return ec.fieldContext_ConfigPostgresSettings_randomPageCost(ctx, field)
			case "effectiveIOConcurrency":
				return ec.fieldContext_ConfigPostgresSettings_effectiveIOConcurrency(ctx, field)
			case "workMem":
				return ec.fieldContext_ConfigPostgresSettings_workMem(ctx, field)
			case "hugePages":
				return ec.fieldContext_ConfigPostgresSettings_hugePages(ctx, field)
			case "minWalSize":
				return ec.fieldContext_ConfigPostgresSettings_minWalSize(ctx, field)
			case "maxWalSize":
				return ec.fieldContext_ConfigPostgresSettings_maxWalSize(ctx, field)
			case "maxWorkerProcesses":
				return ec.fieldContext_ConfigPostgresSettings_maxWorkerProcesses(ctx, field)
			case "maxParallelWorkersPerGather":
				return ec.fieldContext_ConfigPostgresSettings_maxParallelWorkersPerGather(ctx, field)
			case "maxParallelWorkers":
				return ec.fieldContext_ConfigPostgresSettings_maxParallelWorkers(ctx, field)
			case "maxParallelMaintenanceWorkers":
				return ec.fieldContext_ConfigPostgresSettings_maxParallelMaintenanceWorkers(ctx, field)
			case "walLevel":
				return ec.fieldContext_ConfigPostgresSettings_walLevel(ctx, field)
			case "maxWalSenders":
				return ec.fieldContext_ConfigPostgresSettings_maxWalSenders(ctx, field)
			case "maxReplicationSlots":
				return ec.fieldContext_ConfigPostgresSettings_maxReplicationSlots(ctx, field)
			case "archiveTimeout":
				return ec.fieldContext_ConfigPostgresSettings_archiveTimeout(ctx, field)
			case "trackIoTiming":
				return ec.fieldContext_ConfigPostgresSettings_trackIoTiming(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigPostgresSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgres_pitr(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgres_pitr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pitr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigPostgresPitr)
	fc.Result = res
	return ec.marshalOConfigPostgresPitr2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitr(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgres_pitr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "retention":
				return ec.fieldContext_ConfigPostgresPitr_retention(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigPostgresPitr", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresPitr_retention(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresPitr) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresPitr_retention(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Retention, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint8)
	fc.Result = res
	return ec.marshalOConfigUint82ᚖuint8(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresPitr_retention(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresPitr",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint8 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresResources_compute(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresResources_compute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Compute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigResourcesCompute)
	fc.Result = res
	return ec.marshalOConfigResourcesCompute2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesCompute(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresResources_compute(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cpu":
				return ec.fieldContext_ConfigResourcesCompute_cpu(ctx, field)
			case "memory":
				return ec.fieldContext_ConfigResourcesCompute_memory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigResourcesCompute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresResources_storage(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresResources_storage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Storage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigPostgresResourcesStorage)
	fc.Result = res
	return ec.marshalNConfigPostgresResourcesStorage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresResources_storage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "capacity":
				return ec.fieldContext_ConfigPostgresResourcesStorage_capacity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigPostgresResourcesStorage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresResources_replicas(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresResources_replicas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresResources_replicas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresResources_enablePublicAccess(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresResources_enablePublicAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnablePublicAccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresResources_enablePublicAccess(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresResourcesStorage_capacity(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresResourcesStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresResourcesStorage_capacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capacity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNConfigUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresResourcesStorage_capacity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresResourcesStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_jit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_jit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_jit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxConnections(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxConnections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxConnections(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_sharedBuffers(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_sharedBuffers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedBuffers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_sharedBuffers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_effectiveCacheSize(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_effectiveCacheSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveCacheSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_effectiveCacheSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maintenanceWorkMem(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maintenanceWorkMem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaintenanceWorkMem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maintenanceWorkMem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_checkpointCompletionTarget(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_checkpointCompletionTarget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckpointCompletionTarget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_checkpointCompletionTarget(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_walBuffers(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_walBuffers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalBuffers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_walBuffers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_defaultStatisticsTarget(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_defaultStatisticsTarget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultStatisticsTarget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_defaultStatisticsTarget(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_randomPageCost(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_randomPageCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RandomPageCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_randomPageCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_effectiveIOConcurrency(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_effectiveIOConcurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveIOConcurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_effectiveIOConcurrency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_workMem(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_workMem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkMem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_workMem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_hugePages(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_hugePages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HugePages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_hugePages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_minWalSize(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_minWalSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinWalSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_minWalSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxWalSize(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxWalSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxWalSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxWalSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxWorkerProcesses(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxWorkerProcesses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxWorkerProcesses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxWorkerProcesses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxParallelWorkersPerGather(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxParallelWorkersPerGather(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxParallelWorkersPerGather, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxParallelWorkersPerGather(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxParallelWorkers(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxParallelWorkers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxParallelWorkers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxParallelWorkers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxParallelMaintenanceWorkers(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxParallelMaintenanceWorkers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxParallelMaintenanceWorkers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxParallelMaintenanceWorkers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_walLevel(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_walLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_walLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxWalSenders(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxWalSenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxWalSenders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxWalSenders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_maxReplicationSlots(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_maxReplicationSlots(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxReplicationSlots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_maxReplicationSlots(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_archiveTimeout(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_archiveTimeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchiveTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOConfigInt322ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_archiveTimeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigInt32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigPostgresSettings_trackIoTiming(ctx context.Context, field graphql.CollectedField, obj *model.ConfigPostgresSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigPostgresSettings_trackIoTiming(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrackIoTiming, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigPostgresSettings_trackIoTiming(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigPostgresSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigProvider_smtp(ctx context.Context, field graphql.CollectedField, obj *model.ConfigProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigProvider_smtp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Smtp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSmtp)
	fc.Result = res
	return ec.marshalOConfigSmtp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigProvider_smtp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_ConfigSmtp_user(ctx, field)
			case "password":
				return ec.fieldContext_ConfigSmtp_password(ctx, field)
			case "sender":
				return ec.fieldContext_ConfigSmtp_sender(ctx, field)
			case "host":
				return ec.fieldContext_ConfigSmtp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConfigSmtp_port(ctx, field)
			case "secure":
				return ec.fieldContext_ConfigSmtp_secure(ctx, field)
			case "method":
				return ec.fieldContext_ConfigSmtp_method(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSmtp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigProvider_sms(ctx context.Context, field graphql.CollectedField, obj *model.ConfigProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigProvider_sms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSms)
	fc.Result = res
	return ec.marshalOConfigSms2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSms(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigProvider_sms(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "provider":
				return ec.fieldContext_ConfigSms_provider(ctx, field)
			case "accountSid":
				return ec.fieldContext_ConfigSms_accountSid(ctx, field)
			case "authToken":
				return ec.fieldContext_ConfigSms_authToken(ctx, field)
			case "messagingServiceId":
				return ec.fieldContext_ConfigSms_messagingServiceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSms", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRateLimit_limit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRateLimit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRateLimit_limit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Limit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNConfigUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRateLimit_limit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRateLimit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRateLimit_interval(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRateLimit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRateLimit_interval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRateLimit_interval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRateLimit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigResources_compute(ctx context.Context, field graphql.CollectedField, obj *model.ConfigResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigResources_compute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Compute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigResourcesCompute)
	fc.Result = res
	return ec.marshalOConfigResourcesCompute2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesCompute(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigResources_compute(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cpu":
				return ec.fieldContext_ConfigResourcesCompute_cpu(ctx, field)
			case "memory":
				return ec.fieldContext_ConfigResourcesCompute_memory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigResourcesCompute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigResources_replicas(ctx context.Context, field graphql.CollectedField, obj *model.ConfigResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigResources_replicas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint8)
	fc.Result = res
	return ec.marshalOConfigUint82ᚖuint8(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigResources_replicas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint8 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigResources_autoscaler(ctx context.Context, field graphql.CollectedField, obj *model.ConfigResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigResources_autoscaler(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Autoscaler, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAutoscaler)
	fc.Result = res
	return ec.marshalOConfigAutoscaler2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscaler(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigResources_autoscaler(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxReplicas":
				return ec.fieldContext_ConfigAutoscaler_maxReplicas(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAutoscaler", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigResources_networking(ctx context.Context, field graphql.CollectedField, obj *model.ConfigResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigResources_networking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Networking, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigNetworking)
	fc.Result = res
	return ec.marshalOConfigNetworking2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworking(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigResources_networking(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ingresses":
				return ec.fieldContext_ConfigNetworking_ingresses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigNetworking", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigResourcesCompute_cpu(ctx context.Context, field graphql.CollectedField, obj *model.ConfigResourcesCompute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigResourcesCompute_cpu(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cpu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNConfigUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigResourcesCompute_cpu(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigResourcesCompute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigResourcesCompute_memory(ctx context.Context, field graphql.CollectedField, obj *model.ConfigResourcesCompute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigResourcesCompute_memory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Memory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNConfigUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigResourcesCompute_memory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigResourcesCompute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfig_name(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfig_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNConfigRunServiceName2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfig_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigRunServiceName does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfig_image(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfig_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceImage)
	fc.Result = res
	return ec.marshalNConfigRunServiceImage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfig_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "image":
				return ec.fieldContext_ConfigRunServiceImage_image(ctx, field)
			case "pullCredentials":
				return ec.fieldContext_ConfigRunServiceImage_pullCredentials(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfig_command(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfig_command(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Command, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfig_command(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfig_environment(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfig_environment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Environment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigEnvironmentVariable)
	fc.Result = res
	return ec.marshalOConfigEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfig_environment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigEnvironmentVariable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfig_ports(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfig_ports(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ports, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigRunServicePort)
	fc.Result = res
	return ec.marshalOConfigRunServicePort2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfig_ports(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "port":
				return ec.fieldContext_ConfigRunServicePort_port(ctx, field)
			case "type":
				return ec.fieldContext_ConfigRunServicePort_type(ctx, field)
			case "publish":
				return ec.fieldContext_ConfigRunServicePort_publish(ctx, field)
			case "ingresses":
				return ec.fieldContext_ConfigRunServicePort_ingresses(ctx, field)
			case "rateLimit":
				return ec.fieldContext_ConfigRunServicePort_rateLimit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServicePort", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfig_resources(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfig_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceResources)
	fc.Result = res
	return ec.marshalNConfigRunServiceResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfig_resources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "compute":
				return ec.fieldContext_ConfigRunServiceResources_compute(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigRunServiceResources_storage(ctx, field)
			case "replicas":
				return ec.fieldContext_ConfigRunServiceResources_replicas(ctx, field)
			case "autoscaler":
				return ec.fieldContext_ConfigRunServiceResources_autoscaler(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfig_healthCheck(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfig_healthCheck(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HealthCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigHealthCheck)
	fc.Result = res
	return ec.marshalOConfigHealthCheck2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheck(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfig_healthCheck(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "port":
				return ec.fieldContext_ConfigHealthCheck_port(ctx, field)
			case "initialDelaySeconds":
				return ec.fieldContext_ConfigHealthCheck_initialDelaySeconds(ctx, field)
			case "probePeriodSeconds":
				return ec.fieldContext_ConfigHealthCheck_probePeriodSeconds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigHealthCheck", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfigWithID_serviceID(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfigWithID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfigWithID_serviceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNuuid2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfigWithID_serviceID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfigWithID",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type uuid does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceConfigWithID_config(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceConfigWithID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceConfigWithID_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceConfig)
	fc.Result = res
	return ec.marshalNConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceConfigWithID_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceConfigWithID",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigRunServiceConfig_name(ctx, field)
			case "image":
				return ec.fieldContext_ConfigRunServiceConfig_image(ctx, field)
			case "command":
				return ec.fieldContext_ConfigRunServiceConfig_command(ctx, field)
			case "environment":
				return ec.fieldContext_ConfigRunServiceConfig_environment(ctx, field)
			case "ports":
				return ec.fieldContext_ConfigRunServiceConfig_ports(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigRunServiceConfig_resources(ctx, field)
			case "healthCheck":
				return ec.fieldContext_ConfigRunServiceConfig_healthCheck(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceImage_image(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceImage_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceImage_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceImage_pullCredentials(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceImage_pullCredentials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PullCredentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceImage_pullCredentials(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServicePort_port(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServicePort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServicePort_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint16)
	fc.Result = res
	return ec.marshalNConfigPort2uint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServicePort_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServicePort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigPort does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServicePort_type(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServicePort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServicePort_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServicePort_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServicePort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServicePort_publish(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServicePort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServicePort_publish(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Publish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServicePort_publish(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServicePort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServicePort_ingresses(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServicePort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServicePort_ingresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ingresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigIngress)
	fc.Result = res
	return ec.marshalOConfigIngress2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServicePort_ingresses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServicePort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fqdn":
				return ec.fieldContext_ConfigIngress_fqdn(ctx, field)
			case "tls":
				return ec.fieldContext_ConfigIngress_tls(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigIngress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServicePort_rateLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServicePort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServicePort_rateLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServicePort_rateLimit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServicePort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceResources_compute(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceResources_compute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Compute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigComputeResources)
	fc.Result = res
	return ec.marshalNConfigComputeResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceResources_compute(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cpu":
				return ec.fieldContext_ConfigComputeResources_cpu(ctx, field)
			case "memory":
				return ec.fieldContext_ConfigComputeResources_memory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigComputeResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceResources_storage(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceResources_storage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Storage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigRunServiceResourcesStorage)
	fc.Result = res
	return ec.marshalOConfigRunServiceResourcesStorage2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceResources_storage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigRunServiceResourcesStorage_name(ctx, field)
			case "capacity":
				return ec.fieldContext_ConfigRunServiceResourcesStorage_capacity(ctx, field)
			case "path":
				return ec.fieldContext_ConfigRunServiceResourcesStorage_path(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceResourcesStorage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceResources_replicas(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceResources_replicas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint8)
	fc.Result = res
	return ec.marshalNConfigUint82uint8(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceResources_replicas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint8 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceResources_autoscaler(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceResources_autoscaler(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Autoscaler, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigAutoscaler)
	fc.Result = res
	return ec.marshalOConfigAutoscaler2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscaler(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceResources_autoscaler(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxReplicas":
				return ec.fieldContext_ConfigAutoscaler_maxReplicas(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAutoscaler", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceResourcesStorage_name(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceResourcesStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceResourcesStorage_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNConfigRunServiceName2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceResourcesStorage_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceResourcesStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigRunServiceName does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceResourcesStorage_capacity(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceResourcesStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceResourcesStorage_capacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capacity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNConfigUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceResourcesStorage_capacity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceResourcesStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigRunServiceResourcesStorage_path(ctx context.Context, field graphql.CollectedField, obj *model.ConfigRunServiceResourcesStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigRunServiceResourcesStorage_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigRunServiceResourcesStorage_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigRunServiceResourcesStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSms_provider(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSms_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSms_provider(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSms",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSms_accountSid(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSms_accountSid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountSid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSms_accountSid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSms",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSms_authToken(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSms_authToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSms_authToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSms",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSms_messagingServiceId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSms_messagingServiceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessagingServiceId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSms_messagingServiceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSms",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSmtp_user(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSmtp_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSmtp_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSmtp_password(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSmtp_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSmtp_password(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSmtp_sender(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSmtp_sender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSmtp_sender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSmtp_host(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSmtp_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSmtp_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSmtp_port(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSmtp_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint16)
	fc.Result = res
	return ec.marshalNConfigPort2uint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSmtp_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigPort does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSmtp_secure(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSmtp_secure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSmtp_secure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSmtp_method(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSmtp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSmtp_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSmtp_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSmtp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProvider_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProvider_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProvider_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProvider_clientId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProvider_clientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProvider_clientId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProvider_clientSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProvider_clientSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProvider_clientSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProviderWithScope_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProviderWithScope) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProviderWithScope_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProviderWithScope_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProviderWithScope",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProviderWithScope_audience(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProviderWithScope) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProviderWithScope_audience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProviderWithScope_audience(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProviderWithScope",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProviderWithScope_clientId(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProviderWithScope) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProviderWithScope_clientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProviderWithScope_clientId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProviderWithScope",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProviderWithScope_scope(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProviderWithScope) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProviderWithScope_scope(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProviderWithScope_scope(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProviderWithScope",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStandardOauthProviderWithScope_clientSecret(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStandardOauthProviderWithScope) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStandardOauthProviderWithScope_clientSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStandardOauthProviderWithScope",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStorage_version(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStorage_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStorage_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStorage_resources(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStorage_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigResources)
	fc.Result = res
	return ec.marshalOConfigResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStorage_resources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "compute":
				return ec.fieldContext_ConfigResources_compute(ctx, field)
			case "replicas":
				return ec.fieldContext_ConfigResources_replicas(ctx, field)
			case "autoscaler":
				return ec.fieldContext_ConfigResources_autoscaler(ctx, field)
			case "networking":
				return ec.fieldContext_ConfigResources_networking(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigResources", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStorage_antivirus(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStorage_antivirus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Antivirus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigStorageAntivirus)
	fc.Result = res
	return ec.marshalOConfigStorageAntivirus2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStorage_antivirus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "server":
				return ec.fieldContext_ConfigStorageAntivirus_server(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigStorageAntivirus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStorage_rateLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStorage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStorage_rateLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRateLimit)
	fc.Result = res
	return ec.marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStorage_rateLimit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStorage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_ConfigRateLimit_limit(ctx, field)
			case "interval":
				return ec.fieldContext_ConfigRateLimit_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRateLimit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigStorageAntivirus_server(ctx context.Context, field graphql.CollectedField, obj *model.ConfigStorageAntivirus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigStorageAntivirus_server(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Server, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigStorageAntivirus_server(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigStorageAntivirus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfig_auth(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfig_auth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Auth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfigAuth)
	fc.Result = res
	return ec.marshalOConfigSystemConfigAuth2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfig_auth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "email":
				return ec.fieldContext_ConfigSystemConfigAuth_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfigAuth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfig_graphql(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfig_graphql(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Graphql, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfigGraphql)
	fc.Result = res
	return ec.marshalOConfigSystemConfigGraphql2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphql(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfig_graphql(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "featureAdvancedGraphql":
				return ec.fieldContext_ConfigSystemConfigGraphql_featureAdvancedGraphql(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfigGraphql", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfig_postgres(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfig_postgres(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Postgres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfigPostgres)
	fc.Result = res
	return ec.marshalNConfigSystemConfigPostgres2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgres(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfig_postgres(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ConfigSystemConfigPostgres_enabled(ctx, field)
			case "majorVersion":
				return ec.fieldContext_ConfigSystemConfigPostgres_majorVersion(ctx, field)
			case "connectionString":
				return ec.fieldContext_ConfigSystemConfigPostgres_connectionString(ctx, field)
			case "database":
				return ec.fieldContext_ConfigSystemConfigPostgres_database(ctx, field)
			case "disk":
				return ec.fieldContext_ConfigSystemConfigPostgres_disk(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfigPostgres", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfig_persistentVolumesEncrypted(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfig_persistentVolumesEncrypted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersistentVolumesEncrypted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfig_persistentVolumesEncrypted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigAuth_email(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigAuth_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfigAuthEmail)
	fc.Result = res
	return ec.marshalOConfigSystemConfigAuthEmail2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigAuth_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "templates":
				return ec.fieldContext_ConfigSystemConfigAuthEmail_templates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfigAuthEmail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigAuthEmail_templates(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigAuthEmail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigAuthEmail_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfigAuthEmailTemplates)
	fc.Result = res
	return ec.marshalOConfigSystemConfigAuthEmailTemplates2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigAuthEmail_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigAuthEmail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "s3Key":
				return ec.fieldContext_ConfigSystemConfigAuthEmailTemplates_s3Key(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfigAuthEmailTemplates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigAuthEmailTemplates_s3Key(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigAuthEmailTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigAuthEmailTemplates_s3Key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.S3Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigAuthEmailTemplates_s3Key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigAuthEmailTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigGraphql_featureAdvancedGraphql(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigGraphql) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigGraphql_featureAdvancedGraphql(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeatureAdvancedGraphql, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigGraphql_featureAdvancedGraphql(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigGraphql",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgres_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgres_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgres_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgres_majorVersion(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgres_majorVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MajorVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgres_majorVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgres_connectionString(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgres_connectionString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfigPostgresConnectionString)
	fc.Result = res
	return ec.marshalNConfigSystemConfigPostgresConnectionString2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgres_connectionString(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "backup":
				return ec.fieldContext_ConfigSystemConfigPostgresConnectionString_backup(ctx, field)
			case "hasura":
				return ec.fieldContext_ConfigSystemConfigPostgresConnectionString_hasura(ctx, field)
			case "auth":
				return ec.fieldContext_ConfigSystemConfigPostgresConnectionString_auth(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigSystemConfigPostgresConnectionString_storage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfigPostgresConnectionString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgres_database(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgres_database(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Database, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgres_database(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgres_disk(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgres) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgres_disk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfigPostgresDisk)
	fc.Result = res
	return ec.marshalOConfigSystemConfigPostgresDisk2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDisk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgres_disk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgres",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iops":
				return ec.fieldContext_ConfigSystemConfigPostgresDisk_iops(ctx, field)
			case "tput":
				return ec.fieldContext_ConfigSystemConfigPostgresDisk_tput(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfigPostgresDisk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgresConnectionString_backup(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgresConnectionString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgresConnectionString_backup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Backup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgresConnectionString_backup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgresConnectionString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgresConnectionString_hasura(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgresConnectionString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgresConnectionString_hasura(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hasura, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgresConnectionString_hasura(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgresConnectionString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgresConnectionString_auth(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgresConnectionString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgresConnectionString_auth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Auth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgresConnectionString_auth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgresConnectionString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgresConnectionString_storage(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgresConnectionString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgresConnectionString_storage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Storage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgresConnectionString_storage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgresConnectionString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgresDisk_iops(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgresDisk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgresDisk_iops(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iops, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgresDisk_iops(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgresDisk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigSystemConfigPostgresDisk_tput(ctx context.Context, field graphql.CollectedField, obj *model.ConfigSystemConfigPostgresDisk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigSystemConfigPostgresDisk_tput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOConfigUint322ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigSystemConfigPostgresDisk_tput(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigSystemConfigPostgresDisk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfigUint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsertRunServiceConfigResponse_serviceID(ctx context.Context, field graphql.CollectedField, obj *model.InsertRunServiceConfigResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsertRunServiceConfigResponse_serviceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNuuid2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsertRunServiceConfigResponse_serviceID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsertRunServiceConfigResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type uuid does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InsertRunServiceConfigResponse_config(ctx context.Context, field graphql.CollectedField, obj *model.InsertRunServiceConfigResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InsertRunServiceConfigResponse_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceConfig)
	fc.Result = res
	return ec.marshalNConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InsertRunServiceConfigResponse_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InsertRunServiceConfigResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigRunServiceConfig_name(ctx, field)
			case "image":
				return ec.fieldContext_ConfigRunServiceConfig_image(ctx, field)
			case "command":
				return ec.fieldContext_ConfigRunServiceConfig_command(ctx, field)
			case "environment":
				return ec.fieldContext_ConfigRunServiceConfig_environment(ctx, field)
			case "ports":
				return ec.fieldContext_ConfigRunServiceConfig_ports(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigRunServiceConfig_resources(ctx, field)
			case "healthCheck":
				return ec.fieldContext_ConfigRunServiceConfig_healthCheck(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConfig(rctx, fc.Args["appID"].(string), fc.Args["config"].(model.ConfigConfigUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigConfig)
	fc.Result = res
	return ec.marshalNConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "global":
				return ec.fieldContext_ConfigConfig_global(ctx, field)
			case "hasura":
				return ec.fieldContext_ConfigConfig_hasura(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigConfig_graphql(ctx, field)
			case "functions":
				return ec.fieldContext_ConfigConfig_functions(ctx, field)
			case "auth":
				return ec.fieldContext_ConfigConfig_auth(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigConfig_postgres(ctx, field)
			case "provider":
				return ec.fieldContext_ConfigConfig_provider(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigConfig_storage(ctx, field)
			case "ai":
				return ec.fieldContext_ConfigConfig_ai(ctx, field)
			case "observability":
				return ec.fieldContext_ConfigConfig_observability(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceConfig(rctx, fc.Args["appID"].(string), fc.Args["config"].(model.ConfigConfigInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigConfig)
	fc.Result = res
	return ec.marshalNConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "global":
				return ec.fieldContext_ConfigConfig_global(ctx, field)
			case "hasura":
				return ec.fieldContext_ConfigConfig_hasura(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigConfig_graphql(ctx, field)
			case "functions":
				return ec.fieldContext_ConfigConfig_functions(ctx, field)
			case "auth":
				return ec.fieldContext_ConfigConfig_auth(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigConfig_postgres(ctx, field)
			case "provider":
				return ec.fieldContext_ConfigConfig_provider(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigConfig_storage(ctx, field)
			case "ai":
				return ec.fieldContext_ConfigConfig_ai(ctx, field)
			case "observability":
				return ec.fieldContext_ConfigConfig_observability(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceConfigRawJSON(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceConfigRawJSON(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceConfigRawJSON(rctx, fc.Args["appID"].(string), fc.Args["rawJSON"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceConfigRawJSON(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceConfigRawJSON_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertConfig(rctx, fc.Args["appID"].(string), fc.Args["config"].(model.ConfigConfigInsertInput), fc.Args["systemConfig"].(model.ConfigSystemConfigInsertInput), fc.Args["secrets"].([]*model.ConfigEnvironmentVariableInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigInsertConfigResponse)
	fc.Result = res
	return ec.marshalNConfigInsertConfigResponse2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigInsertConfigResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "config":
				return ec.fieldContext_ConfigInsertConfigResponse_config(ctx, field)
			case "systemConfig":
				return ec.fieldContext_ConfigInsertConfigResponse_systemConfig(ctx, field)
			case "secrets":
				return ec.fieldContext_ConfigInsertConfigResponse_secrets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigInsertConfigResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConfig(rctx, fc.Args["appID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigConfig)
	fc.Result = res
	return ec.marshalOConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "global":
				return ec.fieldContext_ConfigConfig_global(ctx, field)
			case "hasura":
				return ec.fieldContext_ConfigConfig_hasura(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigConfig_graphql(ctx, field)
			case "functions":
				return ec.fieldContext_ConfigConfig_functions(ctx, field)
			case "auth":
				return ec.fieldContext_ConfigConfig_auth(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigConfig_postgres(ctx, field)
			case "provider":
				return ec.fieldContext_ConfigConfig_provider(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigConfig_storage(ctx, field)
			case "ai":
				return ec.fieldContext_ConfigConfig_ai(ctx, field)
			case "observability":
				return ec.fieldContext_ConfigConfig_observability(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changeDatabaseVersion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changeDatabaseVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangeDatabaseVersion(rctx, fc.Args["appID"].(string), fc.Args["version"].(string), fc.Args["force"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changeDatabaseVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changeDatabaseVersion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSecret(rctx, fc.Args["appID"].(string), fc.Args["secret"].(model.ConfigEnvironmentVariableInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigEnvironmentVariable)
	fc.Result = res
	return ec.marshalNConfigEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertSecret(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigEnvironmentVariable", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertSecret_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSecret(rctx, fc.Args["appID"].(string), fc.Args["secret"].(model.ConfigEnvironmentVariableInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigEnvironmentVariable)
	fc.Result = res
	return ec.marshalNConfigEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSecret(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigEnvironmentVariable", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSecret_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSecret(rctx, fc.Args["appID"].(string), fc.Args["key"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigEnvironmentVariable)
	fc.Result = res
	return ec.marshalOConfigEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSecret(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigEnvironmentVariable", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSecret_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemConfig(rctx, fc.Args["appID"].(string), fc.Args["systemConfig"].(model.ConfigSystemConfigUpdateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"admin", "sa:factorio", "sa:watchtower"})
			if err != nil {
				var zeroVal *model.ConfigSystemConfig
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *model.ConfigSystemConfig
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ConfigSystemConfig); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/nhost/be/services/mimir/model.ConfigSystemConfig`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfig)
	fc.Result = res
	return ec.marshalNConfigSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "auth":
				return ec.fieldContext_ConfigSystemConfig_auth(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigSystemConfig_graphql(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigSystemConfig_postgres(ctx, field)
			case "persistentVolumesEncrypted":
				return ec.fieldContext_ConfigSystemConfig_persistentVolumesEncrypted(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_insertRunServiceConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_insertRunServiceConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRunServiceConfig(rctx, fc.Args["appID"].(string), fc.Args["config"].(model.ConfigRunServiceConfigInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InsertRunServiceConfigResponse)
	fc.Result = res
	return ec.marshalNInsertRunServiceConfigResponse2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐInsertRunServiceConfigResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_insertRunServiceConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "serviceID":
				return ec.fieldContext_InsertRunServiceConfigResponse_serviceID(ctx, field)
			case "config":
				return ec.fieldContext_InsertRunServiceConfigResponse_config(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InsertRunServiceConfigResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_insertRunServiceConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRunServiceConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRunServiceConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRunServiceConfig(rctx, fc.Args["appID"].(string), fc.Args["serviceID"].(string), fc.Args["config"].(model.ConfigRunServiceConfigUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceConfig)
	fc.Result = res
	return ec.marshalNConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRunServiceConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigRunServiceConfig_name(ctx, field)
			case "image":
				return ec.fieldContext_ConfigRunServiceConfig_image(ctx, field)
			case "command":
				return ec.fieldContext_ConfigRunServiceConfig_command(ctx, field)
			case "environment":
				return ec.fieldContext_ConfigRunServiceConfig_environment(ctx, field)
			case "ports":
				return ec.fieldContext_ConfigRunServiceConfig_ports(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigRunServiceConfig_resources(ctx, field)
			case "healthCheck":
				return ec.fieldContext_ConfigRunServiceConfig_healthCheck(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRunServiceConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceRunServiceConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceRunServiceConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceRunServiceConfig(rctx, fc.Args["appID"].(string), fc.Args["serviceID"].(string), fc.Args["config"].(model.ConfigRunServiceConfigInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceConfig)
	fc.Result = res
	return ec.marshalNConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceRunServiceConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigRunServiceConfig_name(ctx, field)
			case "image":
				return ec.fieldContext_ConfigRunServiceConfig_image(ctx, field)
			case "command":
				return ec.fieldContext_ConfigRunServiceConfig_command(ctx, field)
			case "environment":
				return ec.fieldContext_ConfigRunServiceConfig_environment(ctx, field)
			case "ports":
				return ec.fieldContext_ConfigRunServiceConfig_ports(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigRunServiceConfig_resources(ctx, field)
			case "healthCheck":
				return ec.fieldContext_ConfigRunServiceConfig_healthCheck(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceRunServiceConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRunServiceConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRunServiceConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRunServiceConfig(rctx, fc.Args["appID"].(string), fc.Args["serviceID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceConfig)
	fc.Result = res
	return ec.marshalOConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRunServiceConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigRunServiceConfig_name(ctx, field)
			case "image":
				return ec.fieldContext_ConfigRunServiceConfig_image(ctx, field)
			case "command":
				return ec.fieldContext_ConfigRunServiceConfig_command(ctx, field)
			case "environment":
				return ec.fieldContext_ConfigRunServiceConfig_environment(ctx, field)
			case "ports":
				return ec.fieldContext_ConfigRunServiceConfig_ports(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigRunServiceConfig_resources(ctx, field)
			case "healthCheck":
				return ec.fieldContext_ConfigRunServiceConfig_healthCheck(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRunServiceConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_configRawJSON(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_configRawJSON(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConfigRawJSON(rctx, fc.Args["appID"].(string), fc.Args["resolve"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_configRawJSON(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_configRawJSON_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_config(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Config(rctx, fc.Args["appID"].(string), fc.Args["resolve"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigConfig)
	fc.Result = res
	return ec.marshalOConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_config(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "global":
				return ec.fieldContext_ConfigConfig_global(ctx, field)
			case "hasura":
				return ec.fieldContext_ConfigConfig_hasura(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigConfig_graphql(ctx, field)
			case "functions":
				return ec.fieldContext_ConfigConfig_functions(ctx, field)
			case "auth":
				return ec.fieldContext_ConfigConfig_auth(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigConfig_postgres(ctx, field)
			case "provider":
				return ec.fieldContext_ConfigConfig_provider(ctx, field)
			case "storage":
				return ec.fieldContext_ConfigConfig_storage(ctx, field)
			case "ai":
				return ec.fieldContext_ConfigConfig_ai(ctx, field)
			case "observability":
				return ec.fieldContext_ConfigConfig_observability(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_config_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_configs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_configs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Configs(rctx, fc.Args["resolve"].(bool), fc.Args["where"].(*model.ConfigConfigComparisonExp))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"admin"})
			if err != nil {
				var zeroVal []*model.ConfigAppConfig
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*model.ConfigAppConfig
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.ConfigAppConfig); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/nhost/be/services/mimir/model.ConfigAppConfig`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigAppConfig)
	fc.Result = res
	return ec.marshalNConfigAppConfig2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppConfigᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_configs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appID":
				return ec.fieldContext_ConfigAppConfig_appID(ctx, field)
			case "config":
				return ec.fieldContext_ConfigAppConfig_config(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAppConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_configs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_appSecrets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_appSecrets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppSecrets(rctx, fc.Args["appID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigEnvironmentVariable)
	fc.Result = res
	return ec.marshalNConfigEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_appSecrets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigEnvironmentVariable_name(ctx, field)
			case "value":
				return ec.fieldContext_ConfigEnvironmentVariable_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigEnvironmentVariable", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_appSecrets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_appsSecrets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_appsSecrets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppsSecrets(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigAppSecrets)
	fc.Result = res
	return ec.marshalOConfigAppSecrets2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSecretsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_appsSecrets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appID":
				return ec.fieldContext_ConfigAppSecrets_appID(ctx, field)
			case "secrets":
				return ec.fieldContext_ConfigAppSecrets_secrets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAppSecrets", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemConfig(rctx, fc.Args["appID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigSystemConfig)
	fc.Result = res
	return ec.marshalOConfigSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "auth":
				return ec.fieldContext_ConfigSystemConfig_auth(ctx, field)
			case "graphql":
				return ec.fieldContext_ConfigSystemConfig_graphql(ctx, field)
			case "postgres":
				return ec.fieldContext_ConfigSystemConfig_postgres(ctx, field)
			case "persistentVolumesEncrypted":
				return ec.fieldContext_ConfigSystemConfig_persistentVolumesEncrypted(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigSystemConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_systemConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemConfigs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemConfigs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SystemConfigs(rctx, fc.Args["where"].(*model.ConfigSystemConfigComparisonExp))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"admin", "sa:factorio", "sa:bragi", "sa:watchtower"})
			if err != nil {
				var zeroVal []*model.ConfigAppSystemConfig
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*model.ConfigAppSystemConfig
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.ConfigAppSystemConfig); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/nhost/be/services/mimir/model.ConfigAppSystemConfig`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigAppSystemConfig)
	fc.Result = res
	return ec.marshalNConfigAppSystemConfig2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSystemConfigᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemConfigs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appID":
				return ec.fieldContext_ConfigAppSystemConfig_appID(ctx, field)
			case "systemConfig":
				return ec.fieldContext_ConfigAppSystemConfig_systemConfig(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigAppSystemConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_systemConfigs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_runServiceConfigRawJSON(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_runServiceConfigRawJSON(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RunServiceConfigRawJSON(rctx, fc.Args["appID"].(string), fc.Args["serviceID"].(string), fc.Args["resolve"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_runServiceConfigRawJSON(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_runServiceConfigRawJSON_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_runServiceConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_runServiceConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RunServiceConfig(rctx, fc.Args["appID"].(string), fc.Args["serviceID"].(string), fc.Args["resolve"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigRunServiceConfig)
	fc.Result = res
	return ec.marshalOConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_runServiceConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ConfigRunServiceConfig_name(ctx, field)
			case "image":
				return ec.fieldContext_ConfigRunServiceConfig_image(ctx, field)
			case "command":
				return ec.fieldContext_ConfigRunServiceConfig_command(ctx, field)
			case "environment":
				return ec.fieldContext_ConfigRunServiceConfig_environment(ctx, field)
			case "ports":
				return ec.fieldContext_ConfigRunServiceConfig_ports(ctx, field)
			case "resources":
				return ec.fieldContext_ConfigRunServiceConfig_resources(ctx, field)
			case "healthCheck":
				return ec.fieldContext_ConfigRunServiceConfig_healthCheck(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfig", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_runServiceConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_runServiceConfigs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_runServiceConfigs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RunServiceConfigs(rctx, fc.Args["appID"].(string), fc.Args["resolve"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigRunServiceConfigWithID)
	fc.Result = res
	return ec.marshalNConfigRunServiceConfigWithID2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigWithIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_runServiceConfigs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "serviceID":
				return ec.fieldContext_ConfigRunServiceConfigWithID_serviceID(ctx, field)
			case "config":
				return ec.fieldContext_ConfigRunServiceConfigWithID_config(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfigWithID", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_runServiceConfigs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_runServiceConfigsAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_runServiceConfigsAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RunServiceConfigsAll(rctx, fc.Args["resolve"].(bool), fc.Args["where"].(*model.ConfigRunServiceConfigComparisonExp))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNString2ᚕstringᚄ(ctx, []any{"admin"})
			if err != nil {
				var zeroVal []*model.ConfigRunServiceConfigWithID
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*model.ConfigRunServiceConfigWithID
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.ConfigRunServiceConfigWithID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/nhost/be/services/mimir/model.ConfigRunServiceConfigWithID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigRunServiceConfigWithID)
	fc.Result = res
	return ec.marshalNConfigRunServiceConfigWithID2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigWithIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_runServiceConfigsAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "serviceID":
				return ec.fieldContext_ConfigRunServiceConfigWithID_serviceID(ctx, field)
			case "config":
				return ec.fieldContext_ConfigRunServiceConfigWithID_config(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigRunServiceConfigWithID", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_runServiceConfigsAll_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputConfigAIAutoEmbeddingsComparisonExp(ctx context.Context, obj any) (model.ConfigAIAutoEmbeddingsComparisonExp, error) {
	var it model.ConfigAIAutoEmbeddingsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "synchPeriodMinutes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAIAutoEmbeddingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAIAutoEmbeddingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAIAutoEmbeddingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "synchPeriodMinutes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synchPeriodMinutes"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.SynchPeriodMinutes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAIAutoEmbeddingsInsertInput(ctx context.Context, obj any) (model.ConfigAIAutoEmbeddingsInsertInput, error) {
	var it model.ConfigAIAutoEmbeddingsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"synchPeriodMinutes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "synchPeriodMinutes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synchPeriodMinutes"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SynchPeriodMinutes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAIComparisonExp(ctx context.Context, obj any) (model.ConfigAIComparisonExp, error) {
	var it model.ConfigAIComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "version", "resources", "openai", "autoEmbeddings", "webhookSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAIComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAIComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAIComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigAIResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "openai":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openai"))
			data, err := ec.unmarshalOConfigAIOpenaiComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Openai = data
		case "autoEmbeddings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoEmbeddings"))
			data, err := ec.unmarshalOConfigAIAutoEmbeddingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoEmbeddings = data
		case "webhookSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhookSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebhookSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAIInsertInput(ctx context.Context, obj any) (model.ConfigAIInsertInput, error) {
	var it model.ConfigAIInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"version", "resources", "openai", "autoEmbeddings", "webhookSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalNConfigAIResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "openai":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openai"))
			data, err := ec.unmarshalNConfigAIOpenaiInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Openai = data
		case "autoEmbeddings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoEmbeddings"))
			data, err := ec.unmarshalOConfigAIAutoEmbeddingsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoEmbeddings = data
		case "webhookSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhookSecret"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebhookSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAIOpenaiComparisonExp(ctx context.Context, obj any) (model.ConfigAIOpenaiComparisonExp, error) {
	var it model.ConfigAIOpenaiComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "organization", "apiKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAIOpenaiComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAIOpenaiComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAIOpenaiComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "organization":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Organization = data
		case "apiKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApiKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAIOpenaiInsertInput(ctx context.Context, obj any) (model.ConfigAIOpenaiInsertInput, error) {
	var it model.ConfigAIOpenaiInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organization", "apiKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organization":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Organization = data
		case "apiKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApiKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAIResourcesComparisonExp(ctx context.Context, obj any) (model.ConfigAIResourcesComparisonExp, error) {
	var it model.ConfigAIResourcesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "compute"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAIResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAIResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAIResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalOConfigComputeResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAIResourcesInsertInput(ctx context.Context, obj any) (model.ConfigAIResourcesInsertInput, error) {
	var it model.ConfigAIResourcesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"compute"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalNConfigComputeResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthComparisonExp(ctx context.Context, obj any) (model.ConfigAuthComparisonExp, error) {
	var it model.ConfigAuthComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "version", "resources", "elevatedPrivileges", "redirections", "signUp", "user", "session", "method", "totp", "misc", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "elevatedPrivileges":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elevatedPrivileges"))
			data, err := ec.unmarshalOConfigAuthElevatedPrivilegesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ElevatedPrivileges = data
		case "redirections":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redirections"))
			data, err := ec.unmarshalOConfigAuthRedirectionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Redirections = data
		case "signUp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signUp"))
			data, err := ec.unmarshalOConfigAuthSignUpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.SignUp = data
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalOConfigAuthUserComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "session":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("session"))
			data, err := ec.unmarshalOConfigAuthSessionComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Session = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOConfigAuthMethodComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "totp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totp"))
			data, err := ec.unmarshalOConfigAuthTotpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Totp = data
		case "misc":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("misc"))
			data, err := ec.unmarshalOConfigAuthMiscComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Misc = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigAuthRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthElevatedPrivilegesComparisonExp(ctx context.Context, obj any) (model.ConfigAuthElevatedPrivilegesComparisonExp, error) {
	var it model.ConfigAuthElevatedPrivilegesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "mode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthElevatedPrivilegesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthElevatedPrivilegesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthElevatedPrivilegesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "mode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthElevatedPrivilegesInsertInput(ctx context.Context, obj any) (model.ConfigAuthElevatedPrivilegesInsertInput, error) {
	var it model.ConfigAuthElevatedPrivilegesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"mode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "mode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthInsertInput(ctx context.Context, obj any) (model.ConfigAuthInsertInput, error) {
	var it model.ConfigAuthInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"version", "resources", "elevatedPrivileges", "redirections", "signUp", "user", "session", "method", "totp", "misc", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "elevatedPrivileges":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elevatedPrivileges"))
			data, err := ec.unmarshalOConfigAuthElevatedPrivilegesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ElevatedPrivileges = data
		case "redirections":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redirections"))
			data, err := ec.unmarshalOConfigAuthRedirectionsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Redirections = data
		case "signUp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signUp"))
			data, err := ec.unmarshalOConfigAuthSignUpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.SignUp = data
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalOConfigAuthUserInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "session":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("session"))
			data, err := ec.unmarshalOConfigAuthSessionInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Session = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOConfigAuthMethodInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "totp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totp"))
			data, err := ec.unmarshalOConfigAuthTotpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Totp = data
		case "misc":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("misc"))
			data, err := ec.unmarshalOConfigAuthMiscInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Misc = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigAuthRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodAnonymousComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodAnonymousComparisonExp, error) {
	var it model.ConfigAuthMethodAnonymousComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodAnonymousComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodAnonymousComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodAnonymousComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodAnonymousInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodAnonymousInsertInput, error) {
	var it model.ConfigAuthMethodAnonymousInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodComparisonExp, error) {
	var it model.ConfigAuthMethodComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "anonymous", "emailPasswordless", "otp", "emailPassword", "smsPasswordless", "oauth", "webauthn"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "anonymous":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("anonymous"))
			data, err := ec.unmarshalOConfigAuthMethodAnonymousComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Anonymous = data
		case "emailPasswordless":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailPasswordless"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailPasswordless = data
		case "otp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
			data, err := ec.unmarshalOConfigAuthMethodOtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Otp = data
		case "emailPassword":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailPassword"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailPassword = data
		case "smsPasswordless":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsPasswordless"))
			data, err := ec.unmarshalOConfigAuthMethodSmsPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.SmsPasswordless = data
		case "oauth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oauth"))
			data, err := ec.unmarshalOConfigAuthMethodOauthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Oauth = data
		case "webauthn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webauthn"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Webauthn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodEmailPasswordComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodEmailPasswordComparisonExp, error) {
	var it model.ConfigAuthMethodEmailPasswordComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "hibpEnabled", "emailVerificationRequired", "passwordMinLength"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "hibpEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hibpEnabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.HibpEnabled = data
		case "emailVerificationRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailVerificationRequired"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailVerificationRequired = data
		case "passwordMinLength":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMinLength"))
			data, err := ec.unmarshalOConfigUint8ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordMinLength = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodEmailPasswordInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodEmailPasswordInsertInput, error) {
	var it model.ConfigAuthMethodEmailPasswordInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"hibpEnabled", "emailVerificationRequired", "passwordMinLength"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "hibpEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hibpEnabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HibpEnabled = data
		case "emailVerificationRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailVerificationRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailVerificationRequired = data
		case "passwordMinLength":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordMinLength"))
			data, err := ec.unmarshalOConfigUint82ᚖuint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.PasswordMinLength = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodEmailPasswordlessComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodEmailPasswordlessComparisonExp, error) {
	var it model.ConfigAuthMethodEmailPasswordlessComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordlessComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordlessComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodEmailPasswordlessInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodEmailPasswordlessInsertInput, error) {
	var it model.ConfigAuthMethodEmailPasswordlessInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodInsertInput, error) {
	var it model.ConfigAuthMethodInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"anonymous", "emailPasswordless", "otp", "emailPassword", "smsPasswordless", "oauth", "webauthn"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "anonymous":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("anonymous"))
			data, err := ec.unmarshalOConfigAuthMethodAnonymousInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Anonymous = data
		case "emailPasswordless":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailPasswordless"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordlessInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailPasswordless = data
		case "otp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
			data, err := ec.unmarshalOConfigAuthMethodOtpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Otp = data
		case "emailPassword":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailPassword"))
			data, err := ec.unmarshalOConfigAuthMethodEmailPasswordInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailPassword = data
		case "smsPasswordless":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smsPasswordless"))
			data, err := ec.unmarshalOConfigAuthMethodSmsPasswordlessInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.SmsPasswordless = data
		case "oauth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oauth"))
			data, err := ec.unmarshalOConfigAuthMethodOauthInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Oauth = data
		case "webauthn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webauthn"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Webauthn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthAppleComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOauthAppleComparisonExp, error) {
	var it model.ConfigAuthMethodOauthAppleComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "audience", "clientId", "keyId", "teamId", "scope", "privateKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAppleComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAppleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAppleComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "audience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Audience = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "keyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyId = data
		case "teamId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.TeamId = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "privateKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privateKey"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrivateKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthAppleInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOauthAppleInsertInput, error) {
	var it model.ConfigAuthMethodOauthAppleInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "audience", "clientId", "keyId", "teamId", "scope", "privateKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "audience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Audience = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "keyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyId = data
		case "teamId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TeamId = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "privateKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privateKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrivateKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthAzureadComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOauthAzureadComparisonExp, error) {
	var it model.ConfigAuthMethodOauthAzureadComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "tenant", "enabled", "clientId", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAzureadComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAzureadComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAzureadComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "tenant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tenant = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthAzureadInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOauthAzureadInsertInput, error) {
	var it model.ConfigAuthMethodOauthAzureadInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tenant", "enabled", "clientId", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tenant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tenant = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOauthComparisonExp, error) {
	var it model.ConfigAuthMethodOauthComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "apple", "azuread", "bitbucket", "discord", "entraid", "facebook", "github", "gitlab", "google", "linkedin", "spotify", "strava", "twitch", "twitter", "windowslive", "workos"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOauthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOauthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOauthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "apple":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apple"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAppleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Apple = data
		case "azuread":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azuread"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAzureadComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Azuread = data
		case "bitbucket":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bitbucket"))
			data, err := ec.unmarshalOConfigStandardOauthProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Bitbucket = data
		case "discord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discord"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discord = data
		case "entraid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entraid"))
			data, err := ec.unmarshalOConfigAuthMethodOauthEntraidComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Entraid = data
		case "facebook":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facebook"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Facebook = data
		case "github":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Github = data
		case "gitlab":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gitlab"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gitlab = data
		case "google":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("google"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Google = data
		case "linkedin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkedin"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Linkedin = data
		case "spotify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spotify"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Spotify = data
		case "strava":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strava"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Strava = data
		case "twitch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitch"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Twitch = data
		case "twitter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter"))
			data, err := ec.unmarshalOConfigAuthMethodOauthTwitterComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Twitter = data
		case "windowslive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("windowslive"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Windowslive = data
		case "workos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workos"))
			data, err := ec.unmarshalOConfigAuthMethodOauthWorkosComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Workos = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthEntraidComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOauthEntraidComparisonExp, error) {
	var it model.ConfigAuthMethodOauthEntraidComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "tenant", "enabled", "clientId", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOauthEntraidComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOauthEntraidComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOauthEntraidComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "tenant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tenant = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthEntraidInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOauthEntraidInsertInput, error) {
	var it model.ConfigAuthMethodOauthEntraidInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tenant", "enabled", "clientId", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tenant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tenant = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOauthInsertInput, error) {
	var it model.ConfigAuthMethodOauthInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"apple", "azuread", "bitbucket", "discord", "entraid", "facebook", "github", "gitlab", "google", "linkedin", "spotify", "strava", "twitch", "twitter", "windowslive", "workos"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "apple":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apple"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAppleInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Apple = data
		case "azuread":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azuread"))
			data, err := ec.unmarshalOConfigAuthMethodOauthAzureadInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Azuread = data
		case "bitbucket":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bitbucket"))
			data, err := ec.unmarshalOConfigStandardOauthProviderInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Bitbucket = data
		case "discord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discord"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discord = data
		case "entraid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entraid"))
			data, err := ec.unmarshalOConfigAuthMethodOauthEntraidInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Entraid = data
		case "facebook":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facebook"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Facebook = data
		case "github":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("github"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Github = data
		case "gitlab":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gitlab"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gitlab = data
		case "google":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("google"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Google = data
		case "linkedin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkedin"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Linkedin = data
		case "spotify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spotify"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Spotify = data
		case "strava":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strava"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Strava = data
		case "twitch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitch"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Twitch = data
		case "twitter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter"))
			data, err := ec.unmarshalOConfigAuthMethodOauthTwitterInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Twitter = data
		case "windowslive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("windowslive"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Windowslive = data
		case "workos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workos"))
			data, err := ec.unmarshalOConfigAuthMethodOauthWorkosInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Workos = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthTwitterComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOauthTwitterComparisonExp, error) {
	var it model.ConfigAuthMethodOauthTwitterComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "consumerKey", "consumerSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOauthTwitterComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOauthTwitterComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOauthTwitterComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "consumerKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consumerKey"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsumerKey = data
		case "consumerSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consumerSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsumerSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthTwitterInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOauthTwitterInsertInput, error) {
	var it model.ConfigAuthMethodOauthTwitterInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "consumerKey", "consumerSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "consumerKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consumerKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsumerKey = data
		case "consumerSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consumerSecret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsumerSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthWorkosComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOauthWorkosComparisonExp, error) {
	var it model.ConfigAuthMethodOauthWorkosComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "connection", "enabled", "clientId", "organization", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOauthWorkosComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOauthWorkosComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOauthWorkosComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "connection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connection"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Connection = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "organization":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Organization = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOauthWorkosInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOauthWorkosInsertInput, error) {
	var it model.ConfigAuthMethodOauthWorkosInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"connection", "enabled", "clientId", "organization", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "connection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connection"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Connection = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "organization":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Organization = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOtpComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOtpComparisonExp, error) {
	var it model.ConfigAuthMethodOtpComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOConfigAuthMethodOtpEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOtpEmailComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodOtpEmailComparisonExp, error) {
	var it model.ConfigAuthMethodOtpEmailComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodOtpEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodOtpEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodOtpEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOtpEmailInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOtpEmailInsertInput, error) {
	var it model.ConfigAuthMethodOtpEmailInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodOtpInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodOtpInsertInput, error) {
	var it model.ConfigAuthMethodOtpInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOConfigAuthMethodOtpEmailInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodSmsPasswordlessComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodSmsPasswordlessComparisonExp, error) {
	var it model.ConfigAuthMethodSmsPasswordlessComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodSmsPasswordlessComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodSmsPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodSmsPasswordlessComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodSmsPasswordlessInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodSmsPasswordlessInsertInput, error) {
	var it model.ConfigAuthMethodSmsPasswordlessInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodWebauthnAttestationComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodWebauthnAttestationComparisonExp, error) {
	var it model.ConfigAuthMethodWebauthnAttestationComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "timeout"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnAttestationComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnAttestationComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnAttestationComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "timeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeout"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timeout = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodWebauthnAttestationInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodWebauthnAttestationInsertInput, error) {
	var it model.ConfigAuthMethodWebauthnAttestationInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"timeout"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "timeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeout"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timeout = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodWebauthnComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodWebauthnComparisonExp, error) {
	var it model.ConfigAuthMethodWebauthnComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "relyingParty", "attestation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "relyingParty":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relyingParty"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RelyingParty = data
		case "attestation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attestation"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnAttestationComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attestation = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodWebauthnInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodWebauthnInsertInput, error) {
	var it model.ConfigAuthMethodWebauthnInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "relyingParty", "attestation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "relyingParty":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relyingParty"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnRelyingPartyInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RelyingParty = data
		case "attestation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attestation"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnAttestationInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attestation = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMethodWebauthnRelyingPartyComparisonExp, error) {
	var it model.ConfigAuthMethodWebauthnRelyingPartyComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "id", "name", "origins"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "origins":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("origins"))
			data, err := ec.unmarshalOConfigUrlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUrlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Origins = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMethodWebauthnRelyingPartyInsertInput(ctx context.Context, obj any) (model.ConfigAuthMethodWebauthnRelyingPartyInsertInput, error) {
	var it model.ConfigAuthMethodWebauthnRelyingPartyInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "origins"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "origins":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("origins"))
			data, err := ec.unmarshalOConfigUrl2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Origins = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMiscComparisonExp(ctx context.Context, obj any) (model.ConfigAuthMiscComparisonExp, error) {
	var it model.ConfigAuthMiscComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "concealErrors"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthMiscComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthMiscComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthMiscComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "concealErrors":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concealErrors"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConcealErrors = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthMiscInsertInput(ctx context.Context, obj any) (model.ConfigAuthMiscInsertInput, error) {
	var it model.ConfigAuthMiscInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"concealErrors"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "concealErrors":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concealErrors"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConcealErrors = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthRateLimitComparisonExp(ctx context.Context, obj any) (model.ConfigAuthRateLimitComparisonExp, error) {
	var it model.ConfigAuthRateLimitComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "emails", "sms", "bruteForce", "signups", "global"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthRateLimitComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthRateLimitComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "emails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Emails = data
		case "sms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sms = data
		case "bruteForce":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bruteForce"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.BruteForce = data
		case "signups":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signups"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Signups = data
		case "global":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("global"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Global = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthRateLimitInsertInput(ctx context.Context, obj any) (model.ConfigAuthRateLimitInsertInput, error) {
	var it model.ConfigAuthRateLimitInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"emails", "sms", "bruteForce", "signups", "global"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "emails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Emails = data
		case "sms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sms = data
		case "bruteForce":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bruteForce"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BruteForce = data
		case "signups":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signups"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Signups = data
		case "global":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("global"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Global = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthRedirectionsComparisonExp(ctx context.Context, obj any) (model.ConfigAuthRedirectionsComparisonExp, error) {
	var it model.ConfigAuthRedirectionsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "clientUrl", "allowedUrls"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthRedirectionsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthRedirectionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthRedirectionsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "clientUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientUrl"))
			data, err := ec.unmarshalOConfigUrlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUrlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientUrl = data
		case "allowedUrls":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedUrls"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedUrls = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthRedirectionsInsertInput(ctx context.Context, obj any) (model.ConfigAuthRedirectionsInsertInput, error) {
	var it model.ConfigAuthRedirectionsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"clientUrl", "allowedUrls"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "clientUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientUrl"))
			data, err := ec.unmarshalOConfigUrl2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientUrl = data
		case "allowedUrls":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedUrls"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedUrls = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSessionAccessTokenComparisonExp(ctx context.Context, obj any) (model.ConfigAuthSessionAccessTokenComparisonExp, error) {
	var it model.ConfigAuthSessionAccessTokenComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "expiresIn", "customClaims"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthSessionAccessTokenComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthSessionAccessTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthSessionAccessTokenComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "expiresIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresIn"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresIn = data
		case "customClaims":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customClaims"))
			data, err := ec.unmarshalOConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomClaims = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSessionAccessTokenInsertInput(ctx context.Context, obj any) (model.ConfigAuthSessionAccessTokenInsertInput, error) {
	var it model.ConfigAuthSessionAccessTokenInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"expiresIn", "customClaims"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "expiresIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresIn"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresIn = data
		case "customClaims":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customClaims"))
			data, err := ec.unmarshalOConfigAuthsessionaccessTokenCustomClaimsInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomClaims = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSessionComparisonExp(ctx context.Context, obj any) (model.ConfigAuthSessionComparisonExp, error) {
	var it model.ConfigAuthSessionComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "accessToken", "refreshToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthSessionComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthSessionComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthSessionComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "accessToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessToken"))
			data, err := ec.unmarshalOConfigAuthSessionAccessTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessToken = data
		case "refreshToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
			data, err := ec.unmarshalOConfigAuthSessionRefreshTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSessionInsertInput(ctx context.Context, obj any) (model.ConfigAuthSessionInsertInput, error) {
	var it model.ConfigAuthSessionInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accessToken", "refreshToken"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accessToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessToken"))
			data, err := ec.unmarshalOConfigAuthSessionAccessTokenInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessToken = data
		case "refreshToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
			data, err := ec.unmarshalOConfigAuthSessionRefreshTokenInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSessionRefreshTokenComparisonExp(ctx context.Context, obj any) (model.ConfigAuthSessionRefreshTokenComparisonExp, error) {
	var it model.ConfigAuthSessionRefreshTokenComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "expiresIn"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthSessionRefreshTokenComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthSessionRefreshTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthSessionRefreshTokenComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "expiresIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresIn"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSessionRefreshTokenInsertInput(ctx context.Context, obj any) (model.ConfigAuthSessionRefreshTokenInsertInput, error) {
	var it model.ConfigAuthSessionRefreshTokenInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"expiresIn"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "expiresIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresIn"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresIn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSignUpComparisonExp(ctx context.Context, obj any) (model.ConfigAuthSignUpComparisonExp, error) {
	var it model.ConfigAuthSignUpComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "disableNewUsers", "turnstile"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthSignUpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthSignUpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthSignUpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "disableNewUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disableNewUsers"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisableNewUsers = data
		case "turnstile":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnstile"))
			data, err := ec.unmarshalOConfigAuthSignUpTurnstileComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Turnstile = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSignUpInsertInput(ctx context.Context, obj any) (model.ConfigAuthSignUpInsertInput, error) {
	var it model.ConfigAuthSignUpInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "disableNewUsers", "turnstile"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "disableNewUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disableNewUsers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisableNewUsers = data
		case "turnstile":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("turnstile"))
			data, err := ec.unmarshalOConfigAuthSignUpTurnstileInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Turnstile = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSignUpTurnstileComparisonExp(ctx context.Context, obj any) (model.ConfigAuthSignUpTurnstileComparisonExp, error) {
	var it model.ConfigAuthSignUpTurnstileComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "secretKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthSignUpTurnstileComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthSignUpTurnstileComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthSignUpTurnstileComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "secretKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretKey"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthSignUpTurnstileInsertInput(ctx context.Context, obj any) (model.ConfigAuthSignUpTurnstileInsertInput, error) {
	var it model.ConfigAuthSignUpTurnstileInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"secretKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "secretKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SecretKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthTotpComparisonExp(ctx context.Context, obj any) (model.ConfigAuthTotpComparisonExp, error) {
	var it model.ConfigAuthTotpComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "issuer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthTotpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthTotpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthTotpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "issuer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issuer"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Issuer = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthTotpInsertInput(ctx context.Context, obj any) (model.ConfigAuthTotpInsertInput, error) {
	var it model.ConfigAuthTotpInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "issuer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "issuer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issuer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Issuer = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserComparisonExp(ctx context.Context, obj any) (model.ConfigAuthUserComparisonExp, error) {
	var it model.ConfigAuthUserComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "roles", "locale", "gravatar", "email", "emailDomains"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthUserComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthUserComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthUserComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "roles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			data, err := ec.unmarshalOConfigAuthUserRolesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Roles = data
		case "locale":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			data, err := ec.unmarshalOConfigAuthUserLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locale = data
		case "gravatar":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gravatar"))
			data, err := ec.unmarshalOConfigAuthUserGravatarComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gravatar = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOConfigAuthUserEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailDomains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailDomains"))
			data, err := ec.unmarshalOConfigAuthUserEmailDomainsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailDomains = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserEmailComparisonExp(ctx context.Context, obj any) (model.ConfigAuthUserEmailComparisonExp, error) {
	var it model.ConfigAuthUserEmailComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "allowed", "blocked"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthUserEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthUserEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthUserEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOConfigEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		case "blocked":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blocked"))
			data, err := ec.unmarshalOConfigEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Blocked = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserEmailDomainsComparisonExp(ctx context.Context, obj any) (model.ConfigAuthUserEmailDomainsComparisonExp, error) {
	var it model.ConfigAuthUserEmailDomainsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "allowed", "blocked"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthUserEmailDomainsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthUserEmailDomainsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthUserEmailDomainsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		case "blocked":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blocked"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Blocked = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserEmailDomainsInsertInput(ctx context.Context, obj any) (model.ConfigAuthUserEmailDomainsInsertInput, error) {
	var it model.ConfigAuthUserEmailDomainsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"allowed", "blocked"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		case "blocked":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blocked"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Blocked = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserEmailInsertInput(ctx context.Context, obj any) (model.ConfigAuthUserEmailInsertInput, error) {
	var it model.ConfigAuthUserEmailInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"allowed", "blocked"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOConfigEmail2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		case "blocked":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blocked"))
			data, err := ec.unmarshalOConfigEmail2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Blocked = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserGravatarComparisonExp(ctx context.Context, obj any) (model.ConfigAuthUserGravatarComparisonExp, error) {
	var it model.ConfigAuthUserGravatarComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "default", "rating"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthUserGravatarComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthUserGravatarComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthUserGravatarComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		case "rating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rating = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserGravatarInsertInput(ctx context.Context, obj any) (model.ConfigAuthUserGravatarInsertInput, error) {
	var it model.ConfigAuthUserGravatarInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "default", "rating"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		case "rating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rating = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserInsertInput(ctx context.Context, obj any) (model.ConfigAuthUserInsertInput, error) {
	var it model.ConfigAuthUserInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"roles", "locale", "gravatar", "email", "emailDomains"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "roles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
			data, err := ec.unmarshalOConfigAuthUserRolesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Roles = data
		case "locale":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
			data, err := ec.unmarshalOConfigAuthUserLocaleInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locale = data
		case "gravatar":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gravatar"))
			data, err := ec.unmarshalOConfigAuthUserGravatarInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gravatar = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOConfigAuthUserEmailInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailDomains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailDomains"))
			data, err := ec.unmarshalOConfigAuthUserEmailDomainsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailDomains = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserLocaleComparisonExp(ctx context.Context, obj any) (model.ConfigAuthUserLocaleComparisonExp, error) {
	var it model.ConfigAuthUserLocaleComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "default", "allowed"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthUserLocaleComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthUserLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthUserLocaleComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOConfigLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigLocaleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOConfigLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigLocaleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserLocaleInsertInput(ctx context.Context, obj any) (model.ConfigAuthUserLocaleInsertInput, error) {
	var it model.ConfigAuthUserLocaleInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"default", "allowed"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOConfigLocale2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOConfigLocale2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserRolesComparisonExp(ctx context.Context, obj any) (model.ConfigAuthUserRolesComparisonExp, error) {
	var it model.ConfigAuthUserRolesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "default", "allowed"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthUserRolesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthUserRolesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthUserRolesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOConfigUserRoleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUserRoleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOConfigUserRoleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUserRoleComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthUserRolesInsertInput(ctx context.Context, obj any) (model.ConfigAuthUserRolesInsertInput, error) {
	var it model.ConfigAuthUserRolesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"default", "allowed"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOConfigUserRole2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		case "allowed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed"))
			data, err := ec.unmarshalOConfigUserRole2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Allowed = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx context.Context, obj any) (model.ConfigAuthsessionaccessTokenCustomClaimsComparisonExp, error) {
	var it model.ConfigAuthsessionaccessTokenCustomClaimsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "key", "value", "default"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAuthsessionaccessTokenCustomClaimsInsertInput(ctx context.Context, obj any) (model.ConfigAuthsessionaccessTokenCustomClaimsInsertInput, error) {
	var it model.ConfigAuthsessionaccessTokenCustomClaimsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "value", "default"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAutoscalerComparisonExp(ctx context.Context, obj any) (model.ConfigAutoscalerComparisonExp, error) {
	var it model.ConfigAutoscalerComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "maxReplicas"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigAutoscalerComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigAutoscalerComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigAutoscalerComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "maxReplicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxReplicas"))
			data, err := ec.unmarshalOConfigUint8ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxReplicas = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigAutoscalerInsertInput(ctx context.Context, obj any) (model.ConfigAutoscalerInsertInput, error) {
	var it model.ConfigAutoscalerInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"maxReplicas"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "maxReplicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxReplicas"))
			data, err := ec.unmarshalNConfigUint82uint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxReplicas = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigBooleanComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[bool], error) {
	var it model.GenericComparisonExp[bool]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigClaimMapComparisonExp(ctx context.Context, obj any) (model.ConfigClaimMapComparisonExp, error) {
	var it model.ConfigClaimMapComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "claim", "value", "path", "default"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigClaimMapComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigClaimMapComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigClaimMapComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "claim":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claim"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Claim = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "path":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Path = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigClaimMapInsertInput(ctx context.Context, obj any) (model.ConfigClaimMapInsertInput, error) {
	var it model.ConfigClaimMapInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"claim", "value", "path", "default"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "claim":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claim"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Claim = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "path":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Path = data
		case "default":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("default"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Default = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigComputeResourcesComparisonExp(ctx context.Context, obj any) (model.ConfigComputeResourcesComparisonExp, error) {
	var it model.ConfigComputeResourcesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "cpu", "memory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigComputeResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigComputeResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigComputeResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "cpu":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpu"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cpu = data
		case "memory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memory"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Memory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigComputeResourcesInsertInput(ctx context.Context, obj any) (model.ConfigComputeResourcesInsertInput, error) {
	var it model.ConfigComputeResourcesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cpu", "memory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cpu":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpu"))
			data, err := ec.unmarshalNConfigUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cpu = data
		case "memory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memory"))
			data, err := ec.unmarshalNConfigUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Memory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigConfigComparisonExp(ctx context.Context, obj any) (model.ConfigConfigComparisonExp, error) {
	var it model.ConfigConfigComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "global", "hasura", "graphql", "functions", "auth", "postgres", "provider", "storage", "ai", "observability"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "global":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("global"))
			data, err := ec.unmarshalOConfigGlobalComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Global = data
		case "hasura":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasura"))
			data, err := ec.unmarshalOConfigHasuraComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hasura = data
		case "graphql":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("graphql"))
			data, err := ec.unmarshalOConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Graphql = data
		case "functions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("functions"))
			data, err := ec.unmarshalOConfigFunctionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Functions = data
		case "auth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth"))
			data, err := ec.unmarshalOConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Auth = data
		case "postgres":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postgres"))
			data, err := ec.unmarshalOConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Postgres = data
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalOConfigProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalOConfigStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		case "ai":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ai"))
			data, err := ec.unmarshalOConfigAIComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ai = data
		case "observability":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("observability"))
			data, err := ec.unmarshalOConfigObservabilityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Observability = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigConfigInsertInput(ctx context.Context, obj any) (model.ConfigConfigInsertInput, error) {
	var it model.ConfigConfigInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"global", "hasura", "graphql", "functions", "auth", "postgres", "provider", "storage", "ai", "observability"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "global":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("global"))
			data, err := ec.unmarshalOConfigGlobalInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Global = data
		case "hasura":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasura"))
			data, err := ec.unmarshalNConfigHasuraInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hasura = data
		case "graphql":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("graphql"))
			data, err := ec.unmarshalOConfigGraphqlInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Graphql = data
		case "functions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("functions"))
			data, err := ec.unmarshalOConfigFunctionsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Functions = data
		case "auth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth"))
			data, err := ec.unmarshalOConfigAuthInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Auth = data
		case "postgres":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postgres"))
			data, err := ec.unmarshalNConfigPostgresInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Postgres = data
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalOConfigProviderInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalOConfigStorageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		case "ai":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ai"))
			data, err := ec.unmarshalOConfigAIInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ai = data
		case "observability":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("observability"))
			data, err := ec.unmarshalNConfigObservabilityInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Observability = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigEmailComparisonExp(ctx context.Context, obj any) (model.ConfigEmailComparisonExp, error) {
	var it model.ConfigEmailComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigEmail2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigEmail2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigEmail2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigEnvironmentVariableComparisonExp(ctx context.Context, obj any) (model.ConfigEnvironmentVariableComparisonExp, error) {
	var it model.ConfigEnvironmentVariableComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigEnvironmentVariableComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigEnvironmentVariableComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigEnvironmentVariableInsertInput(ctx context.Context, obj any) (model.ConfigEnvironmentVariableInsertInput, error) {
	var it model.ConfigEnvironmentVariableInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigFloatComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[float64], error) {
	var it model.GenericComparisonExp[float64]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigFunctionsComparisonExp(ctx context.Context, obj any) (model.ConfigFunctionsComparisonExp, error) {
	var it model.ConfigFunctionsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "node", "resources", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigFunctionsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigFunctionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigFunctionsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "node":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			data, err := ec.unmarshalOConfigFunctionsNodeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Node = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigFunctionsResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigFunctionsInsertInput(ctx context.Context, obj any) (model.ConfigFunctionsInsertInput, error) {
	var it model.ConfigFunctionsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"node", "resources", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "node":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("node"))
			data, err := ec.unmarshalOConfigFunctionsNodeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Node = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigFunctionsResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigFunctionsNodeComparisonExp(ctx context.Context, obj any) (model.ConfigFunctionsNodeComparisonExp, error) {
	var it model.ConfigFunctionsNodeComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "version"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigFunctionsNodeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigFunctionsNodeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigFunctionsNodeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOConfigIntComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigFunctionsNodeInsertInput(ctx context.Context, obj any) (model.ConfigFunctionsNodeInsertInput, error) {
	var it model.ConfigFunctionsNodeInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"version"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigFunctionsResourcesComparisonExp(ctx context.Context, obj any) (model.ConfigFunctionsResourcesComparisonExp, error) {
	var it model.ConfigFunctionsResourcesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "networking"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigFunctionsResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigFunctionsResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigFunctionsResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "networking":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("networking"))
			data, err := ec.unmarshalOConfigNetworkingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Networking = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigFunctionsResourcesInsertInput(ctx context.Context, obj any) (model.ConfigFunctionsResourcesInsertInput, error) {
	var it model.ConfigFunctionsResourcesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"networking"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "networking":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("networking"))
			data, err := ec.unmarshalOConfigNetworkingInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Networking = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGlobalComparisonExp(ctx context.Context, obj any) (model.ConfigGlobalComparisonExp, error) {
	var it model.ConfigGlobalComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "environment"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGlobalComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGlobalComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGlobalComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "environment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environment"))
			data, err := ec.unmarshalOConfigGlobalEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Environment = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGlobalEnvironmentVariableComparisonExp(ctx context.Context, obj any) (model.ConfigGlobalEnvironmentVariableComparisonExp, error) {
	var it model.ConfigGlobalEnvironmentVariableComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGlobalEnvironmentVariableComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGlobalEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGlobalEnvironmentVariableComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGlobalEnvironmentVariableInsertInput(ctx context.Context, obj any) (model.ConfigGlobalEnvironmentVariableInsertInput, error) {
	var it model.ConfigGlobalEnvironmentVariableInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGlobalInsertInput(ctx context.Context, obj any) (model.ConfigGlobalInsertInput, error) {
	var it model.ConfigGlobalInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"environment"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "environment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environment"))
			data, err := ec.unmarshalOConfigGlobalEnvironmentVariableInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Environment = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaAlertingComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanaAlertingComparisonExp, error) {
	var it model.ConfigGrafanaAlertingComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanaAlertingComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanaAlertingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanaAlertingComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaAlertingInsertInput(ctx context.Context, obj any) (model.ConfigGrafanaAlertingInsertInput, error) {
	var it model.ConfigGrafanaAlertingInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanaComparisonExp, error) {
	var it model.ConfigGrafanaComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "adminPassword", "smtp", "alerting", "contacts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanaComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanaComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanaComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "adminPassword":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminPassword"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminPassword = data
		case "smtp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtp"))
			data, err := ec.unmarshalOConfigGrafanaSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Smtp = data
		case "alerting":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alerting"))
			data, err := ec.unmarshalOConfigGrafanaAlertingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alerting = data
		case "contacts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			data, err := ec.unmarshalOConfigGrafanaContactsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contacts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaContactsComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanaContactsComparisonExp, error) {
	var it model.ConfigGrafanaContactsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "emails", "pagerduty", "discord", "slack", "webhook"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanaContactsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanaContactsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanaContactsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "emails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Emails = data
		case "pagerduty":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagerduty"))
			data, err := ec.unmarshalOConfigGrafanacontactsPagerdutyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pagerduty = data
		case "discord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discord"))
			data, err := ec.unmarshalOConfigGrafanacontactsDiscordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discord = data
		case "slack":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slack"))
			data, err := ec.unmarshalOConfigGrafanacontactsSlackComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slack = data
		case "webhook":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhook"))
			data, err := ec.unmarshalOConfigGrafanacontactsWebhookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Webhook = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaContactsInsertInput(ctx context.Context, obj any) (model.ConfigGrafanaContactsInsertInput, error) {
	var it model.ConfigGrafanaContactsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"emails", "pagerduty", "discord", "slack", "webhook"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "emails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Emails = data
		case "pagerduty":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagerduty"))
			data, err := ec.unmarshalOConfigGrafanacontactsPagerdutyInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pagerduty = data
		case "discord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discord"))
			data, err := ec.unmarshalOConfigGrafanacontactsDiscordInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discord = data
		case "slack":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slack"))
			data, err := ec.unmarshalOConfigGrafanacontactsSlackInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slack = data
		case "webhook":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhook"))
			data, err := ec.unmarshalOConfigGrafanacontactsWebhookInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Webhook = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaInsertInput(ctx context.Context, obj any) (model.ConfigGrafanaInsertInput, error) {
	var it model.ConfigGrafanaInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"adminPassword", "smtp", "alerting", "contacts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "adminPassword":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminPassword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminPassword = data
		case "smtp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtp"))
			data, err := ec.unmarshalOConfigGrafanaSmtpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Smtp = data
		case "alerting":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alerting"))
			data, err := ec.unmarshalOConfigGrafanaAlertingInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alerting = data
		case "contacts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			data, err := ec.unmarshalOConfigGrafanaContactsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contacts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaSmtpComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanaSmtpComparisonExp, error) {
	var it model.ConfigGrafanaSmtpComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "host", "port", "sender", "user", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanaSmtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanaSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanaSmtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "host":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("host"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Host = data
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalOConfigPortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPortComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "sender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sender = data
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanaSmtpInsertInput(ctx context.Context, obj any) (model.ConfigGrafanaSmtpInsertInput, error) {
	var it model.ConfigGrafanaSmtpInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"host", "port", "sender", "user", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "host":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("host"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Host = data
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalNConfigPort2uint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "sender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sender = data
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsDiscordComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanacontactsDiscordComparisonExp, error) {
	var it model.ConfigGrafanacontactsDiscordComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "url", "avatarUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanacontactsDiscordComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanacontactsDiscordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanacontactsDiscordComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "avatarUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarUrl"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarUrl = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsDiscordInsertInput(ctx context.Context, obj any) (model.ConfigGrafanacontactsDiscordInsertInput, error) {
	var it model.ConfigGrafanacontactsDiscordInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"url", "avatarUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "avatarUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarUrl"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarUrl = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsPagerdutyComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanacontactsPagerdutyComparisonExp, error) {
	var it model.ConfigGrafanacontactsPagerdutyComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "integrationKey", "severity", "class", "component", "group"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanacontactsPagerdutyComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanacontactsPagerdutyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanacontactsPagerdutyComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "integrationKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("integrationKey"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.IntegrationKey = data
		case "severity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Severity = data
		case "class":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("class"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Class = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsPagerdutyInsertInput(ctx context.Context, obj any) (model.ConfigGrafanacontactsPagerdutyInsertInput, error) {
	var it model.ConfigGrafanacontactsPagerdutyInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"integrationKey", "severity", "class", "component", "group"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "integrationKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("integrationKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IntegrationKey = data
		case "severity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Severity = data
		case "class":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("class"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Class = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsSlackComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanacontactsSlackComparisonExp, error) {
	var it model.ConfigGrafanacontactsSlackComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "recipient", "token", "username", "iconEmoji", "iconURL", "mentionUsers", "mentionGroups", "mentionChannel", "url", "endpointURL"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanacontactsSlackComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanacontactsSlackComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanacontactsSlackComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "recipient":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipient"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Recipient = data
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "iconEmoji":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconEmoji"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconEmoji = data
		case "iconURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconURL"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconURL = data
		case "mentionUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentionUsers"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MentionUsers = data
		case "mentionGroups":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentionGroups"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MentionGroups = data
		case "mentionChannel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentionChannel"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MentionChannel = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "endpointURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpointURL"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndpointURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsSlackInsertInput(ctx context.Context, obj any) (model.ConfigGrafanacontactsSlackInsertInput, error) {
	var it model.ConfigGrafanacontactsSlackInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"recipient", "token", "username", "iconEmoji", "iconURL", "mentionUsers", "mentionGroups", "mentionChannel", "url", "endpointURL"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "recipient":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipient"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Recipient = data
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "iconEmoji":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconEmoji"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconEmoji = data
		case "iconURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconURL"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconURL = data
		case "mentionUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentionUsers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MentionUsers = data
		case "mentionGroups":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentionGroups"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MentionGroups = data
		case "mentionChannel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mentionChannel"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MentionChannel = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "endpointURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpointURL"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndpointURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsWebhookComparisonExp(ctx context.Context, obj any) (model.ConfigGrafanacontactsWebhookComparisonExp, error) {
	var it model.ConfigGrafanacontactsWebhookComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "url", "httpMethod", "username", "password", "authorizationScheme", "authorizationCredentials", "maxAlerts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGrafanacontactsWebhookComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGrafanacontactsWebhookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGrafanacontactsWebhookComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "httpMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpMethod"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpMethod = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "authorizationScheme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorizationScheme"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthorizationScheme = data
		case "authorizationCredentials":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorizationCredentials"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthorizationCredentials = data
		case "maxAlerts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxAlerts"))
			data, err := ec.unmarshalOConfigIntComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxAlerts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGrafanacontactsWebhookInsertInput(ctx context.Context, obj any) (model.ConfigGrafanacontactsWebhookInsertInput, error) {
	var it model.ConfigGrafanacontactsWebhookInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"url", "httpMethod", "username", "password", "authorizationScheme", "authorizationCredentials", "maxAlerts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "httpMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpMethod"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpMethod = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "authorizationScheme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorizationScheme"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthorizationScheme = data
		case "authorizationCredentials":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorizationCredentials"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthorizationCredentials = data
		case "maxAlerts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxAlerts"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxAlerts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGraphqlComparisonExp(ctx context.Context, obj any) (model.ConfigGraphqlComparisonExp, error) {
	var it model.ConfigGraphqlComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "security"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGraphqlComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGraphqlComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "security":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("security"))
			data, err := ec.unmarshalOConfigGraphqlSecurityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Security = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGraphqlInsertInput(ctx context.Context, obj any) (model.ConfigGraphqlInsertInput, error) {
	var it model.ConfigGraphqlInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"security"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "security":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("security"))
			data, err := ec.unmarshalOConfigGraphqlSecurityInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Security = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGraphqlSecurityComparisonExp(ctx context.Context, obj any) (model.ConfigGraphqlSecurityComparisonExp, error) {
	var it model.ConfigGraphqlSecurityComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "forbidAminSecret", "maxDepthQueries"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigGraphqlSecurityComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigGraphqlSecurityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigGraphqlSecurityComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "forbidAminSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("forbidAminSecret"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ForbidAminSecret = data
		case "maxDepthQueries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxDepthQueries"))
			data, err := ec.unmarshalOConfigUintComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxDepthQueries = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGraphqlSecurityInsertInput(ctx context.Context, obj any) (model.ConfigGraphqlSecurityInsertInput, error) {
	var it model.ConfigGraphqlSecurityInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"forbidAminSecret", "maxDepthQueries"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "forbidAminSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("forbidAminSecret"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ForbidAminSecret = data
		case "maxDepthQueries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxDepthQueries"))
			data, err := ec.unmarshalOConfigUint2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxDepthQueries = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraAPIsComparisonExp(ctx context.Context, obj any) (model.ConfigHasuraAPIsComparisonExp, error) {
	var it model.ConfigHasuraAPIsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigHasuraAPIs2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigHasuraAPIs2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigHasuraAPIs2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigHasuraAPIs2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraAuthHookComparisonExp(ctx context.Context, obj any) (model.ConfigHasuraAuthHookComparisonExp, error) {
	var it model.ConfigHasuraAuthHookComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "url", "mode", "sendRequestBody"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigHasuraAuthHookComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigHasuraAuthHookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigHasuraAuthHookComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "mode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mode = data
		case "sendRequestBody":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendRequestBody"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendRequestBody = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraAuthHookInsertInput(ctx context.Context, obj any) (model.ConfigHasuraAuthHookInsertInput, error) {
	var it model.ConfigHasuraAuthHookInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"url", "mode", "sendRequestBody"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Url = data
		case "mode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mode = data
		case "sendRequestBody":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendRequestBody"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendRequestBody = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraComparisonExp(ctx context.Context, obj any) (model.ConfigHasuraComparisonExp, error) {
	var it model.ConfigHasuraComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "version", "jwtSecrets", "adminSecret", "webhookSecret", "settings", "authHook", "logs", "events", "resources", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigHasuraComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigHasuraComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigHasuraComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "jwtSecrets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jwtSecrets"))
			data, err := ec.unmarshalOConfigJWTSecretComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.JwtSecrets = data
		case "adminSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminSecret = data
		case "webhookSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhookSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebhookSecret = data
		case "settings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			data, err := ec.unmarshalOConfigHasuraSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Settings = data
		case "authHook":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authHook"))
			data, err := ec.unmarshalOConfigHasuraAuthHookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthHook = data
		case "logs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logs"))
			data, err := ec.unmarshalOConfigHasuraLogsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logs = data
		case "events":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events"))
			data, err := ec.unmarshalOConfigHasuraEventsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Events = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraEventsComparisonExp(ctx context.Context, obj any) (model.ConfigHasuraEventsComparisonExp, error) {
	var it model.ConfigHasuraEventsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "httpPoolSize"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigHasuraEventsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigHasuraEventsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigHasuraEventsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "httpPoolSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpPoolSize"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpPoolSize = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraEventsInsertInput(ctx context.Context, obj any) (model.ConfigHasuraEventsInsertInput, error) {
	var it model.ConfigHasuraEventsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"httpPoolSize"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "httpPoolSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpPoolSize"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpPoolSize = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraInsertInput(ctx context.Context, obj any) (model.ConfigHasuraInsertInput, error) {
	var it model.ConfigHasuraInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"version", "jwtSecrets", "adminSecret", "webhookSecret", "settings", "authHook", "logs", "events", "resources", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "jwtSecrets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jwtSecrets"))
			data, err := ec.unmarshalOConfigJWTSecretInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.JwtSecrets = data
		case "adminSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminSecret"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminSecret = data
		case "webhookSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhookSecret"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.WebhookSecret = data
		case "settings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			data, err := ec.unmarshalOConfigHasuraSettingsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Settings = data
		case "authHook":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authHook"))
			data, err := ec.unmarshalOConfigHasuraAuthHookInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthHook = data
		case "logs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logs"))
			data, err := ec.unmarshalOConfigHasuraLogsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logs = data
		case "events":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("events"))
			data, err := ec.unmarshalOConfigHasuraEventsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Events = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraLogsComparisonExp(ctx context.Context, obj any) (model.ConfigHasuraLogsComparisonExp, error) {
	var it model.ConfigHasuraLogsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "level"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigHasuraLogsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigHasuraLogsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigHasuraLogsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "level":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Level = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraLogsInsertInput(ctx context.Context, obj any) (model.ConfigHasuraLogsInsertInput, error) {
	var it model.ConfigHasuraLogsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"level"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "level":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Level = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraSettingsComparisonExp(ctx context.Context, obj any) (model.ConfigHasuraSettingsComparisonExp, error) {
	var it model.ConfigHasuraSettingsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "corsDomain", "devMode", "enableAllowList", "enableConsole", "enableRemoteSchemaPermissions", "enabledAPIs", "inferFunctionPermissions", "liveQueriesMultiplexedRefetchInterval", "stringifyNumericTypes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigHasuraSettingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigHasuraSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigHasuraSettingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "corsDomain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("corsDomain"))
			data, err := ec.unmarshalOConfigUrlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUrlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.CorsDomain = data
		case "devMode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("devMode"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.DevMode = data
		case "enableAllowList":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enableAllowList"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnableAllowList = data
		case "enableConsole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enableConsole"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnableConsole = data
		case "enableRemoteSchemaPermissions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enableRemoteSchemaPermissions"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnableRemoteSchemaPermissions = data
		case "enabledAPIs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabledAPIs"))
			data, err := ec.unmarshalOConfigHasuraAPIsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAPIsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnabledAPIs = data
		case "inferFunctionPermissions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inferFunctionPermissions"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.InferFunctionPermissions = data
		case "liveQueriesMultiplexedRefetchInterval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liveQueriesMultiplexedRefetchInterval"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiveQueriesMultiplexedRefetchInterval = data
		case "stringifyNumericTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stringifyNumericTypes"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.StringifyNumericTypes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHasuraSettingsInsertInput(ctx context.Context, obj any) (model.ConfigHasuraSettingsInsertInput, error) {
	var it model.ConfigHasuraSettingsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"corsDomain", "devMode", "enableAllowList", "enableConsole", "enableRemoteSchemaPermissions", "enabledAPIs", "inferFunctionPermissions", "liveQueriesMultiplexedRefetchInterval", "stringifyNumericTypes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "corsDomain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("corsDomain"))
			data, err := ec.unmarshalOConfigUrl2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CorsDomain = data
		case "devMode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("devMode"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DevMode = data
		case "enableAllowList":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enableAllowList"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnableAllowList = data
		case "enableConsole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enableConsole"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnableConsole = data
		case "enableRemoteSchemaPermissions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enableRemoteSchemaPermissions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnableRemoteSchemaPermissions = data
		case "enabledAPIs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabledAPIs"))
			data, err := ec.unmarshalOConfigHasuraAPIs2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnabledAPIs = data
		case "inferFunctionPermissions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inferFunctionPermissions"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InferFunctionPermissions = data
		case "liveQueriesMultiplexedRefetchInterval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("liveQueriesMultiplexedRefetchInterval"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LiveQueriesMultiplexedRefetchInterval = data
		case "stringifyNumericTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stringifyNumericTypes"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StringifyNumericTypes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHealthCheckComparisonExp(ctx context.Context, obj any) (model.ConfigHealthCheckComparisonExp, error) {
	var it model.ConfigHealthCheckComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "port", "initialDelaySeconds", "probePeriodSeconds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigHealthCheckComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigHealthCheckComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigHealthCheckComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalOConfigPortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPortComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "initialDelaySeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initialDelaySeconds"))
			data, err := ec.unmarshalOConfigIntComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.InitialDelaySeconds = data
		case "probePeriodSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("probePeriodSeconds"))
			data, err := ec.unmarshalOConfigIntComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProbePeriodSeconds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigHealthCheckInsertInput(ctx context.Context, obj any) (model.ConfigHealthCheckInsertInput, error) {
	var it model.ConfigHealthCheckInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"port", "initialDelaySeconds", "probePeriodSeconds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalNConfigPort2uint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "initialDelaySeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initialDelaySeconds"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.InitialDelaySeconds = data
		case "probePeriodSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("probePeriodSeconds"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProbePeriodSeconds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigIngressComparisonExp(ctx context.Context, obj any) (model.ConfigIngressComparisonExp, error) {
	var it model.ConfigIngressComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "fqdn", "tls"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigIngressComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigIngressComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigIngressComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "fqdn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fqdn"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Fqdn = data
		case "tls":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tls"))
			data, err := ec.unmarshalOConfigIngressTlsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tls = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigIngressInsertInput(ctx context.Context, obj any) (model.ConfigIngressInsertInput, error) {
	var it model.ConfigIngressInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fqdn", "tls"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fqdn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fqdn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Fqdn = data
		case "tls":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tls"))
			data, err := ec.unmarshalOConfigIngressTlsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tls = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigIngressTlsComparisonExp(ctx context.Context, obj any) (model.ConfigIngressTlsComparisonExp, error) {
	var it model.ConfigIngressTlsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "clientCA"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigIngressTlsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigIngressTlsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigIngressTlsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "clientCA":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientCA"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientCA = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigIngressTlsInsertInput(ctx context.Context, obj any) (model.ConfigIngressTlsInsertInput, error) {
	var it model.ConfigIngressTlsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"clientCA"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "clientCA":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientCA"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientCA = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigInt16ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[int16], error) {
	var it model.GenericComparisonExp[int16]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigInt162ᚖint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigInt162ᚖint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigInt162ᚕint16ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigInt162ᚕint16ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigInt32ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[int32], error) {
	var it model.GenericComparisonExp[int32]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigInt322ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigInt322ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigInt64ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[int64], error) {
	var it model.GenericComparisonExp[int64]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigInt642ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigInt8ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[int8], error) {
	var it model.GenericComparisonExp[int8]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigInt82ᚖint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigInt82ᚖint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigInt82ᚕint8ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigInt82ᚕint8ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigIntComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[int], error) {
	var it model.GenericComparisonExp[int]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigJWTSecretComparisonExp(ctx context.Context, obj any) (model.ConfigJWTSecretComparisonExp, error) {
	var it model.ConfigJWTSecretComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "type", "key", "signingKey", "kid", "jwk_url", "claims_format", "audience", "issuer", "allowed_skew", "header", "claims_map", "claims_namespace", "claims_namespace_path"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigJWTSecretComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigJWTSecretComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigJWTSecretComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "signingKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signingKey"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.SigningKey = data
		case "kid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kid"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Kid = data
		case "jwk_url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jwk_url"))
			data, err := ec.unmarshalOConfigUrlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUrlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.JwkUrl = data
		case "claims_format":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_format"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsFormat = data
		case "audience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Audience = data
		case "issuer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issuer"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Issuer = data
		case "allowed_skew":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed_skew"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedSkew = data
		case "header":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("header"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Header = data
		case "claims_map":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_map"))
			data, err := ec.unmarshalOConfigClaimMapComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsMap = data
		case "claims_namespace":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_namespace"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsNamespace = data
		case "claims_namespace_path":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_namespace_path"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsNamespacePath = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigJWTSecretInsertInput(ctx context.Context, obj any) (model.ConfigJWTSecretInsertInput, error) {
	var it model.ConfigJWTSecretInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "key", "signingKey", "kid", "jwk_url", "claims_format", "audience", "issuer", "allowed_skew", "header", "claims_map", "claims_namespace", "claims_namespace_path"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "signingKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signingKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SigningKey = data
		case "kid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Kid = data
		case "jwk_url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jwk_url"))
			data, err := ec.unmarshalOConfigUrl2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JwkUrl = data
		case "claims_format":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_format"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsFormat = data
		case "audience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Audience = data
		case "issuer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issuer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Issuer = data
		case "allowed_skew":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowed_skew"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowedSkew = data
		case "header":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("header"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Header = data
		case "claims_map":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_map"))
			data, err := ec.unmarshalOConfigClaimMapInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsMap = data
		case "claims_namespace":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_namespace"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsNamespace = data
		case "claims_namespace_path":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claims_namespace_path"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimsNamespacePath = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigLocaleComparisonExp(ctx context.Context, obj any) (model.ConfigLocaleComparisonExp, error) {
	var it model.ConfigLocaleComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigLocale2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigLocale2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigLocale2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigLocale2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigNetworkingComparisonExp(ctx context.Context, obj any) (model.ConfigNetworkingComparisonExp, error) {
	var it model.ConfigNetworkingComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "ingresses"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigNetworkingComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigNetworkingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigNetworkingComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "ingresses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ingresses"))
			data, err := ec.unmarshalOConfigIngressComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ingresses = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigNetworkingInsertInput(ctx context.Context, obj any) (model.ConfigNetworkingInsertInput, error) {
	var it model.ConfigNetworkingInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ingresses"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ingresses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ingresses"))
			data, err := ec.unmarshalOConfigIngressInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ingresses = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigObservabilityComparisonExp(ctx context.Context, obj any) (model.ConfigObservabilityComparisonExp, error) {
	var it model.ConfigObservabilityComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "grafana"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigObservabilityComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigObservabilityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigObservabilityComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "grafana":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grafana"))
			data, err := ec.unmarshalOConfigGrafanaComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Grafana = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigObservabilityInsertInput(ctx context.Context, obj any) (model.ConfigObservabilityInsertInput, error) {
	var it model.ConfigObservabilityInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"grafana"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "grafana":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grafana"))
			data, err := ec.unmarshalNConfigGrafanaInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Grafana = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPortComparisonExp(ctx context.Context, obj any) (model.ConfigPortComparisonExp, error) {
	var it model.ConfigPortComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigPort2ᚖuint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigPort2ᚖuint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigPort2ᚕuint16ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigPort2ᚕuint16ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresComparisonExp(ctx context.Context, obj any) (model.ConfigPostgresComparisonExp, error) {
	var it model.ConfigPostgresComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "version", "resources", "settings", "pitr"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigPostgresComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigPostgresComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigPostgresResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "settings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			data, err := ec.unmarshalOConfigPostgresSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Settings = data
		case "pitr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pitr"))
			data, err := ec.unmarshalOConfigPostgresPitrComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pitr = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresInsertInput(ctx context.Context, obj any) (model.ConfigPostgresInsertInput, error) {
	var it model.ConfigPostgresInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"version", "resources", "settings", "pitr"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalNConfigPostgresResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "settings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			data, err := ec.unmarshalOConfigPostgresSettingsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Settings = data
		case "pitr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pitr"))
			data, err := ec.unmarshalOConfigPostgresPitrInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pitr = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresPitrComparisonExp(ctx context.Context, obj any) (model.ConfigPostgresPitrComparisonExp, error) {
	var it model.ConfigPostgresPitrComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "retention"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigPostgresPitrComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigPostgresPitrComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigPostgresPitrComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "retention":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retention"))
			data, err := ec.unmarshalOConfigUint8ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Retention = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresPitrInsertInput(ctx context.Context, obj any) (model.ConfigPostgresPitrInsertInput, error) {
	var it model.ConfigPostgresPitrInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"retention"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "retention":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retention"))
			data, err := ec.unmarshalOConfigUint82ᚖuint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.Retention = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresResourcesComparisonExp(ctx context.Context, obj any) (model.ConfigPostgresResourcesComparisonExp, error) {
	var it model.ConfigPostgresResourcesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "compute", "storage", "replicas", "enablePublicAccess"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigPostgresResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigPostgresResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigPostgresResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalOConfigResourcesComputeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalOConfigPostgresResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		case "replicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			data, err := ec.unmarshalOConfigIntComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Replicas = data
		case "enablePublicAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablePublicAccess"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnablePublicAccess = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresResourcesInsertInput(ctx context.Context, obj any) (model.ConfigPostgresResourcesInsertInput, error) {
	var it model.ConfigPostgresResourcesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"compute", "storage", "replicas", "enablePublicAccess"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalOConfigResourcesComputeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalNConfigPostgresResourcesStorageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		case "replicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Replicas = data
		case "enablePublicAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enablePublicAccess"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnablePublicAccess = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresResourcesStorageComparisonExp(ctx context.Context, obj any) (model.ConfigPostgresResourcesStorageComparisonExp, error) {
	var it model.ConfigPostgresResourcesStorageComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "capacity"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigPostgresResourcesStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigPostgresResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigPostgresResourcesStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "capacity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresResourcesStorageInsertInput(ctx context.Context, obj any) (model.ConfigPostgresResourcesStorageInsertInput, error) {
	var it model.ConfigPostgresResourcesStorageInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"capacity"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "capacity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalNConfigUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresSettingsComparisonExp(ctx context.Context, obj any) (model.ConfigPostgresSettingsComparisonExp, error) {
	var it model.ConfigPostgresSettingsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "jit", "maxConnections", "sharedBuffers", "effectiveCacheSize", "maintenanceWorkMem", "checkpointCompletionTarget", "walBuffers", "defaultStatisticsTarget", "randomPageCost", "effectiveIOConcurrency", "workMem", "hugePages", "minWalSize", "maxWalSize", "maxWorkerProcesses", "maxParallelWorkersPerGather", "maxParallelWorkers", "maxParallelMaintenanceWorkers", "walLevel", "maxWalSenders", "maxReplicationSlots", "archiveTimeout", "trackIoTiming"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigPostgresSettingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigPostgresSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigPostgresSettingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "jit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jit"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Jit = data
		case "maxConnections":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxConnections"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxConnections = data
		case "sharedBuffers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sharedBuffers"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.SharedBuffers = data
		case "effectiveCacheSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveCacheSize"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveCacheSize = data
		case "maintenanceWorkMem":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maintenanceWorkMem"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaintenanceWorkMem = data
		case "checkpointCompletionTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checkpointCompletionTarget"))
			data, err := ec.unmarshalOConfigFloatComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.CheckpointCompletionTarget = data
		case "walBuffers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walBuffers"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalBuffers = data
		case "defaultStatisticsTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultStatisticsTarget"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultStatisticsTarget = data
		case "randomPageCost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("randomPageCost"))
			data, err := ec.unmarshalOConfigFloatComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RandomPageCost = data
		case "effectiveIOConcurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveIOConcurrency"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveIOConcurrency = data
		case "workMem":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workMem"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkMem = data
		case "hugePages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hugePages"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.HugePages = data
		case "minWalSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minWalSize"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinWalSize = data
		case "maxWalSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWalSize"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxWalSize = data
		case "maxWorkerProcesses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWorkerProcesses"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxWorkerProcesses = data
		case "maxParallelWorkersPerGather":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParallelWorkersPerGather"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParallelWorkersPerGather = data
		case "maxParallelWorkers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParallelWorkers"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParallelWorkers = data
		case "maxParallelMaintenanceWorkers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParallelMaintenanceWorkers"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParallelMaintenanceWorkers = data
		case "walLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walLevel"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalLevel = data
		case "maxWalSenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWalSenders"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxWalSenders = data
		case "maxReplicationSlots":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxReplicationSlots"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxReplicationSlots = data
		case "archiveTimeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveTimeout"))
			data, err := ec.unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveTimeout = data
		case "trackIoTiming":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trackIoTiming"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrackIoTiming = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigPostgresSettingsInsertInput(ctx context.Context, obj any) (model.ConfigPostgresSettingsInsertInput, error) {
	var it model.ConfigPostgresSettingsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"jit", "maxConnections", "sharedBuffers", "effectiveCacheSize", "maintenanceWorkMem", "checkpointCompletionTarget", "walBuffers", "defaultStatisticsTarget", "randomPageCost", "effectiveIOConcurrency", "workMem", "hugePages", "minWalSize", "maxWalSize", "maxWorkerProcesses", "maxParallelWorkersPerGather", "maxParallelWorkers", "maxParallelMaintenanceWorkers", "walLevel", "maxWalSenders", "maxReplicationSlots", "archiveTimeout", "trackIoTiming"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "jit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Jit = data
		case "maxConnections":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxConnections"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxConnections = data
		case "sharedBuffers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sharedBuffers"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SharedBuffers = data
		case "effectiveCacheSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveCacheSize"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveCacheSize = data
		case "maintenanceWorkMem":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maintenanceWorkMem"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaintenanceWorkMem = data
		case "checkpointCompletionTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checkpointCompletionTarget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CheckpointCompletionTarget = data
		case "walBuffers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walBuffers"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalBuffers = data
		case "defaultStatisticsTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultStatisticsTarget"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefaultStatisticsTarget = data
		case "randomPageCost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("randomPageCost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RandomPageCost = data
		case "effectiveIOConcurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveIOConcurrency"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveIOConcurrency = data
		case "workMem":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workMem"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkMem = data
		case "hugePages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hugePages"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HugePages = data
		case "minWalSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minWalSize"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinWalSize = data
		case "maxWalSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWalSize"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxWalSize = data
		case "maxWorkerProcesses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWorkerProcesses"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxWorkerProcesses = data
		case "maxParallelWorkersPerGather":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParallelWorkersPerGather"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParallelWorkersPerGather = data
		case "maxParallelWorkers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParallelWorkers"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParallelWorkers = data
		case "maxParallelMaintenanceWorkers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxParallelMaintenanceWorkers"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxParallelMaintenanceWorkers = data
		case "walLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walLevel"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WalLevel = data
		case "maxWalSenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxWalSenders"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxWalSenders = data
		case "maxReplicationSlots":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxReplicationSlots"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxReplicationSlots = data
		case "archiveTimeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveTimeout"))
			data, err := ec.unmarshalOConfigInt322ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveTimeout = data
		case "trackIoTiming":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trackIoTiming"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrackIoTiming = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigProviderComparisonExp(ctx context.Context, obj any) (model.ConfigProviderComparisonExp, error) {
	var it model.ConfigProviderComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "smtp", "sms"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigProviderComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigProviderComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "smtp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtp"))
			data, err := ec.unmarshalOConfigSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Smtp = data
		case "sms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms"))
			data, err := ec.unmarshalOConfigSmsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sms = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigProviderInsertInput(ctx context.Context, obj any) (model.ConfigProviderInsertInput, error) {
	var it model.ConfigProviderInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"smtp", "sms"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "smtp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smtp"))
			data, err := ec.unmarshalOConfigSmtpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Smtp = data
		case "sms":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sms"))
			data, err := ec.unmarshalOConfigSmsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sms = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRateLimitComparisonExp(ctx context.Context, obj any) (model.ConfigRateLimitComparisonExp, error) {
	var it model.ConfigRateLimitComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "limit", "interval"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		case "interval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interval"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Interval = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRateLimitInsertInput(ctx context.Context, obj any) (model.ConfigRateLimitInsertInput, error) {
	var it model.ConfigRateLimitInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "interval"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalNConfigUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		case "interval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interval"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Interval = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigResourcesComparisonExp(ctx context.Context, obj any) (model.ConfigResourcesComparisonExp, error) {
	var it model.ConfigResourcesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "compute", "replicas", "autoscaler", "networking"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalOConfigResourcesComputeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		case "replicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			data, err := ec.unmarshalOConfigUint8ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Replicas = data
		case "autoscaler":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoscaler"))
			data, err := ec.unmarshalOConfigAutoscalerComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Autoscaler = data
		case "networking":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("networking"))
			data, err := ec.unmarshalOConfigNetworkingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Networking = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigResourcesComputeComparisonExp(ctx context.Context, obj any) (model.ConfigResourcesComputeComparisonExp, error) {
	var it model.ConfigResourcesComputeComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "cpu", "memory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigResourcesComputeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigResourcesComputeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigResourcesComputeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "cpu":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpu"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cpu = data
		case "memory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memory"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Memory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigResourcesComputeInsertInput(ctx context.Context, obj any) (model.ConfigResourcesComputeInsertInput, error) {
	var it model.ConfigResourcesComputeInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cpu", "memory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cpu":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpu"))
			data, err := ec.unmarshalNConfigUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cpu = data
		case "memory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memory"))
			data, err := ec.unmarshalNConfigUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Memory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigResourcesInsertInput(ctx context.Context, obj any) (model.ConfigResourcesInsertInput, error) {
	var it model.ConfigResourcesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"compute", "replicas", "autoscaler", "networking"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalOConfigResourcesComputeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		case "replicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			data, err := ec.unmarshalOConfigUint82ᚖuint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.Replicas = data
		case "autoscaler":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoscaler"))
			data, err := ec.unmarshalOConfigAutoscalerInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Autoscaler = data
		case "networking":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("networking"))
			data, err := ec.unmarshalOConfigNetworkingInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Networking = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceConfigComparisonExp(ctx context.Context, obj any) (model.ConfigRunServiceConfigComparisonExp, error) {
	var it model.ConfigRunServiceConfigComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "name", "image", "command", "environment", "ports", "resources", "healthCheck"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigRunServiceConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigRunServiceConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigRunServiceConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOConfigRunServiceNameComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceNameComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalOConfigRunServiceImageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		case "command":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Command = data
		case "environment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environment"))
			data, err := ec.unmarshalOConfigEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Environment = data
		case "ports":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ports"))
			data, err := ec.unmarshalOConfigRunServicePortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ports = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigRunServiceResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "healthCheck":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("healthCheck"))
			data, err := ec.unmarshalOConfigHealthCheckComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.HealthCheck = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceConfigInsertInput(ctx context.Context, obj any) (model.ConfigRunServiceConfigInsertInput, error) {
	var it model.ConfigRunServiceConfigInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "image", "command", "environment", "ports", "resources", "healthCheck"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNConfigRunServiceName2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalNConfigRunServiceImageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		case "command":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Command = data
		case "environment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environment"))
			data, err := ec.unmarshalOConfigEnvironmentVariableInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Environment = data
		case "ports":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ports"))
			data, err := ec.unmarshalOConfigRunServicePortInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ports = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalNConfigRunServiceResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "healthCheck":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("healthCheck"))
			data, err := ec.unmarshalOConfigHealthCheckInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.HealthCheck = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceImageComparisonExp(ctx context.Context, obj any) (model.ConfigRunServiceImageComparisonExp, error) {
	var it model.ConfigRunServiceImageComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "image", "pullCredentials"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigRunServiceImageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigRunServiceImageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigRunServiceImageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		case "pullCredentials":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pullCredentials"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.PullCredentials = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceImageInsertInput(ctx context.Context, obj any) (model.ConfigRunServiceImageInsertInput, error) {
	var it model.ConfigRunServiceImageInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"image", "pullCredentials"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		case "pullCredentials":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pullCredentials"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PullCredentials = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceNameComparisonExp(ctx context.Context, obj any) (model.ConfigRunServiceNameComparisonExp, error) {
	var it model.ConfigRunServiceNameComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigRunServiceName2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigRunServiceName2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigRunServiceName2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigRunServiceName2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServicePortComparisonExp(ctx context.Context, obj any) (model.ConfigRunServicePortComparisonExp, error) {
	var it model.ConfigRunServicePortComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "port", "type", "publish", "ingresses", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigRunServicePortComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigRunServicePortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigRunServicePortComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalOConfigPortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPortComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "publish":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Publish = data
		case "ingresses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ingresses"))
			data, err := ec.unmarshalOConfigIngressComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ingresses = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServicePortInsertInput(ctx context.Context, obj any) (model.ConfigRunServicePortInsertInput, error) {
	var it model.ConfigRunServicePortInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"port", "type", "publish", "ingresses", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalNConfigPort2uint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "publish":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Publish = data
		case "ingresses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ingresses"))
			data, err := ec.unmarshalOConfigIngressInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ingresses = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceResourcesComparisonExp(ctx context.Context, obj any) (model.ConfigRunServiceResourcesComparisonExp, error) {
	var it model.ConfigRunServiceResourcesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "compute", "storage", "replicas", "autoscaler"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigRunServiceResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigRunServiceResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigRunServiceResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalOConfigComputeResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalOConfigRunServiceResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		case "replicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			data, err := ec.unmarshalOConfigUint8ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Replicas = data
		case "autoscaler":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoscaler"))
			data, err := ec.unmarshalOConfigAutoscalerComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Autoscaler = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceResourcesInsertInput(ctx context.Context, obj any) (model.ConfigRunServiceResourcesInsertInput, error) {
	var it model.ConfigRunServiceResourcesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"compute", "storage", "replicas", "autoscaler"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "compute":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compute"))
			data, err := ec.unmarshalNConfigComputeResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Compute = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalOConfigRunServiceResourcesStorageInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		case "replicas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			data, err := ec.unmarshalNConfigUint82uint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.Replicas = data
		case "autoscaler":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoscaler"))
			data, err := ec.unmarshalOConfigAutoscalerInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Autoscaler = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceResourcesStorageComparisonExp(ctx context.Context, obj any) (model.ConfigRunServiceResourcesStorageComparisonExp, error) {
	var it model.ConfigRunServiceResourcesStorageComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "name", "capacity", "path"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigRunServiceResourcesStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigRunServiceResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigRunServiceResourcesStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOConfigRunServiceNameComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceNameComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "capacity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		case "path":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Path = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigRunServiceResourcesStorageInsertInput(ctx context.Context, obj any) (model.ConfigRunServiceResourcesStorageInsertInput, error) {
	var it model.ConfigRunServiceResourcesStorageInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "capacity", "path"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNConfigRunServiceName2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "capacity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalNConfigUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		case "path":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Path = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSmsComparisonExp(ctx context.Context, obj any) (model.ConfigSmsComparisonExp, error) {
	var it model.ConfigSmsComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "provider", "accountSid", "authToken", "messagingServiceId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSmsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSmsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSmsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "accountSid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountSid"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountSid = data
		case "authToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authToken"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthToken = data
		case "messagingServiceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messagingServiceId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessagingServiceId = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSmsInsertInput(ctx context.Context, obj any) (model.ConfigSmsInsertInput, error) {
	var it model.ConfigSmsInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"provider", "accountSid", "authToken", "messagingServiceId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "accountSid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountSid"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountSid = data
		case "authToken":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authToken"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthToken = data
		case "messagingServiceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messagingServiceId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessagingServiceId = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSmtpComparisonExp(ctx context.Context, obj any) (model.ConfigSmtpComparisonExp, error) {
	var it model.ConfigSmtpComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "user", "password", "sender", "host", "port", "secure", "method"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSmtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSmtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "sender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sender = data
		case "host":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("host"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Host = data
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalOConfigPortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPortComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "secure":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secure"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Secure = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSmtpInsertInput(ctx context.Context, obj any) (model.ConfigSmtpInsertInput, error) {
	var it model.ConfigSmtpInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user", "password", "sender", "host", "port", "secure", "method"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "sender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sender = data
		case "host":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("host"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Host = data
		case "port":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			data, err := ec.unmarshalNConfigPort2uint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Port = data
		case "secure":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secure"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Secure = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStandardOauthProviderComparisonExp(ctx context.Context, obj any) (model.ConfigStandardOauthProviderComparisonExp, error) {
	var it model.ConfigStandardOauthProviderComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "clientId", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigStandardOauthProviderComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigStandardOauthProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigStandardOauthProviderComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStandardOauthProviderInsertInput(ctx context.Context, obj any) (model.ConfigStandardOauthProviderInsertInput, error) {
	var it model.ConfigStandardOauthProviderInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "clientId", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStandardOauthProviderWithScopeComparisonExp(ctx context.Context, obj any) (model.ConfigStandardOauthProviderWithScopeComparisonExp, error) {
	var it model.ConfigStandardOauthProviderWithScopeComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "audience", "clientId", "scope", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "audience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Audience = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStandardOauthProviderWithScopeInsertInput(ctx context.Context, obj any) (model.ConfigStandardOauthProviderWithScopeInsertInput, error) {
	var it model.ConfigStandardOauthProviderWithScopeInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "audience", "clientId", "scope", "clientSecret"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "audience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Audience = data
		case "clientId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientId = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "clientSecret":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClientSecret = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStorageAntivirusComparisonExp(ctx context.Context, obj any) (model.ConfigStorageAntivirusComparisonExp, error) {
	var it model.ConfigStorageAntivirusComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "server"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigStorageAntivirusComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigStorageAntivirusComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigStorageAntivirusComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "server":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Server = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStorageAntivirusInsertInput(ctx context.Context, obj any) (model.ConfigStorageAntivirusInsertInput, error) {
	var it model.ConfigStorageAntivirusInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"server"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "server":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Server = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStorageComparisonExp(ctx context.Context, obj any) (model.ConfigStorageComparisonExp, error) {
	var it model.ConfigStorageComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "version", "resources", "antivirus", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "antivirus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("antivirus"))
			data, err := ec.unmarshalOConfigStorageAntivirusComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Antivirus = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStorageInsertInput(ctx context.Context, obj any) (model.ConfigStorageInsertInput, error) {
	var it model.ConfigStorageInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"version", "resources", "antivirus", "rateLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "resources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resources"))
			data, err := ec.unmarshalOConfigResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Resources = data
		case "antivirus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("antivirus"))
			data, err := ec.unmarshalOConfigStorageAntivirusInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Antivirus = data
		case "rateLimit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rateLimit"))
			data, err := ec.unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RateLimit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigStringComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[string], error) {
	var it model.GenericComparisonExp[string]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigAuthComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigAuthComparisonExp, error) {
	var it model.ConfigSystemConfigAuthComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigAuthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigAuthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigAuthEmailComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigAuthEmailComparisonExp, error) {
	var it model.ConfigSystemConfigAuthEmailComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "templates"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "templates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templates"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Templates = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigAuthEmailInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigAuthEmailInsertInput, error) {
	var it model.ConfigSystemConfigAuthEmailInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"templates"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "templates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templates"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailTemplatesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Templates = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigAuthEmailTemplatesComparisonExp, error) {
	var it model.ConfigSystemConfigAuthEmailTemplatesComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "s3Key"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "s3Key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3Key"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.S3Key = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigAuthEmailTemplatesInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigAuthEmailTemplatesInsertInput, error) {
	var it model.ConfigSystemConfigAuthEmailTemplatesInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"s3Key"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "s3Key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3Key"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.S3Key = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigAuthInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigAuthInsertInput, error) {
	var it model.ConfigSystemConfigAuthInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOConfigSystemConfigAuthEmailInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigComparisonExp, error) {
	var it model.ConfigSystemConfigComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "auth", "graphql", "postgres", "persistentVolumesEncrypted"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "auth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth"))
			data, err := ec.unmarshalOConfigSystemConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Auth = data
		case "graphql":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("graphql"))
			data, err := ec.unmarshalOConfigSystemConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Graphql = data
		case "postgres":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postgres"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Postgres = data
		case "persistentVolumesEncrypted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("persistentVolumesEncrypted"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.PersistentVolumesEncrypted = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigGraphqlComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigGraphqlComparisonExp, error) {
	var it model.ConfigSystemConfigGraphqlComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "featureAdvancedGraphql"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigGraphqlComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigGraphqlComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "featureAdvancedGraphql":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("featureAdvancedGraphql"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.FeatureAdvancedGraphql = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigGraphqlInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigGraphqlInsertInput, error) {
	var it model.ConfigSystemConfigGraphqlInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"featureAdvancedGraphql"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "featureAdvancedGraphql":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("featureAdvancedGraphql"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FeatureAdvancedGraphql = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigInsertInput, error) {
	var it model.ConfigSystemConfigInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"auth", "graphql", "postgres", "persistentVolumesEncrypted"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "auth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth"))
			data, err := ec.unmarshalOConfigSystemConfigAuthInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Auth = data
		case "graphql":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("graphql"))
			data, err := ec.unmarshalOConfigSystemConfigGraphqlInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Graphql = data
		case "postgres":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postgres"))
			data, err := ec.unmarshalNConfigSystemConfigPostgresInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Postgres = data
		case "persistentVolumesEncrypted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("persistentVolumesEncrypted"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PersistentVolumesEncrypted = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigPostgresComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigPostgresComparisonExp, error) {
	var it model.ConfigSystemConfigPostgresComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "enabled", "majorVersion", "connectionString", "database", "disk"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "majorVersion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorVersion"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorVersion = data
		case "connectionString":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionString"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresConnectionStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConnectionString = data
		case "database":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("database"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Database = data
		case "disk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disk"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresDiskComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disk = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigPostgresConnectionStringComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigPostgresConnectionStringComparisonExp, error) {
	var it model.ConfigSystemConfigPostgresConnectionStringComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "backup", "hasura", "auth", "storage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresConnectionStringComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresConnectionStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresConnectionStringComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "backup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backup"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Backup = data
		case "hasura":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasura"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hasura = data
		case "auth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Auth = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigPostgresConnectionStringInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigPostgresConnectionStringInsertInput, error) {
	var it model.ConfigSystemConfigPostgresConnectionStringInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"backup", "hasura", "auth", "storage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "backup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backup"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Backup = data
		case "hasura":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasura"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hasura = data
		case "auth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("auth"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Auth = data
		case "storage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storage"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Storage = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigPostgresDiskComparisonExp(ctx context.Context, obj any) (model.ConfigSystemConfigPostgresDiskComparisonExp, error) {
	var it model.ConfigSystemConfigPostgresDiskComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_and", "_not", "_or", "iops", "tput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresDiskComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "_not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresDiskComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "_or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresDiskComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExpᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "iops":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iops"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iops = data
		case "tput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tput"))
			data, err := ec.unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigPostgresDiskInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigPostgresDiskInsertInput, error) {
	var it model.ConfigSystemConfigPostgresDiskInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"iops", "tput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "iops":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iops"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iops = data
		case "tput":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tput"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigSystemConfigPostgresInsertInput(ctx context.Context, obj any) (model.ConfigSystemConfigPostgresInsertInput, error) {
	var it model.ConfigSystemConfigPostgresInsertInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "majorVersion", "connectionString", "database", "disk"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "majorVersion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorVersion"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorVersion = data
		case "connectionString":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionString"))
			data, err := ec.unmarshalNConfigSystemConfigPostgresConnectionStringInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConnectionString = data
		case "database":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("database"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Database = data
		case "disk":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disk"))
			data, err := ec.unmarshalOConfigSystemConfigPostgresDiskInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disk = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigUint16ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[uint16], error) {
	var it model.GenericComparisonExp[uint16]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigUint162ᚖuint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigUint162ᚖuint16(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigUint162ᚕuint16ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigUint162ᚕuint16ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigUint32ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[uint32], error) {
	var it model.GenericComparisonExp[uint32]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigUint322ᚖuint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigUint322ᚕuint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigUint322ᚕuint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigUint64ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[uint64], error) {
	var it model.GenericComparisonExp[uint64]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigUint642ᚕuint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigUint8ComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[uint8], error) {
	var it model.GenericComparisonExp[uint8]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigUint82ᚖuint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigUint82ᚖuint8(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigUint82ᚕuint8ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigUint82ᚕuint8ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigUintComparisonExp(ctx context.Context, obj any) (model.GenericComparisonExp[uint], error) {
	var it model.GenericComparisonExp[uint]
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigUint2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigUint2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigUint2ᚕuintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigUint2ᚕuintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigUrlComparisonExp(ctx context.Context, obj any) (model.ConfigUrlComparisonExp, error) {
	var it model.ConfigUrlComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigUrl2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigUrl2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigUrl2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigUrl2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigUserRoleComparisonExp(ctx context.Context, obj any) (model.ConfigUserRoleComparisonExp, error) {
	var it model.ConfigUserRoleComparisonExp
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"_eq", "_neq", "_in", "_nin"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "_eq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			data, err := ec.unmarshalOConfigUserRole2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Eq = data
		case "_neq":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			data, err := ec.unmarshalOConfigUserRole2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Neq = data
		case "_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			data, err := ec.unmarshalOConfigUserRole2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.In = data
		case "_nin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			data, err := ec.unmarshalOConfigUserRole2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Nin = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var configAIImplementors = []string{"ConfigAI"}

func (ec *executionContext) _ConfigAI(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAI) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAIImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAI")
		case "version":
			out.Values[i] = ec._ConfigAI_version(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ConfigAI_resources(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "openai":
			out.Values[i] = ec._ConfigAI_openai(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "autoEmbeddings":
			out.Values[i] = ec._ConfigAI_autoEmbeddings(ctx, field, obj)
		case "webhookSecret":
			out.Values[i] = ec._ConfigAI_webhookSecret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAIAutoEmbeddingsImplementors = []string{"ConfigAIAutoEmbeddings"}

func (ec *executionContext) _ConfigAIAutoEmbeddings(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAIAutoEmbeddings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAIAutoEmbeddingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAIAutoEmbeddings")
		case "synchPeriodMinutes":
			out.Values[i] = ec._ConfigAIAutoEmbeddings_synchPeriodMinutes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAIOpenaiImplementors = []string{"ConfigAIOpenai"}

func (ec *executionContext) _ConfigAIOpenai(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAIOpenai) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAIOpenaiImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAIOpenai")
		case "organization":
			out.Values[i] = ec._ConfigAIOpenai_organization(ctx, field, obj)
		case "apiKey":
			out.Values[i] = ec._ConfigAIOpenai_apiKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAIResourcesImplementors = []string{"ConfigAIResources"}

func (ec *executionContext) _ConfigAIResources(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAIResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAIResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAIResources")
		case "compute":
			out.Values[i] = ec._ConfigAIResources_compute(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAppConfigImplementors = []string{"ConfigAppConfig"}

func (ec *executionContext) _ConfigAppConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAppConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAppConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAppConfig")
		case "appID":
			out.Values[i] = ec._ConfigAppConfig_appID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "config":
			out.Values[i] = ec._ConfigAppConfig_config(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAppSecretsImplementors = []string{"ConfigAppSecrets"}

func (ec *executionContext) _ConfigAppSecrets(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAppSecrets) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAppSecretsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAppSecrets")
		case "appID":
			out.Values[i] = ec._ConfigAppSecrets_appID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "secrets":
			out.Values[i] = ec._ConfigAppSecrets_secrets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAppSystemConfigImplementors = []string{"ConfigAppSystemConfig"}

func (ec *executionContext) _ConfigAppSystemConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAppSystemConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAppSystemConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAppSystemConfig")
		case "appID":
			out.Values[i] = ec._ConfigAppSystemConfig_appID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemConfig":
			out.Values[i] = ec._ConfigAppSystemConfig_systemConfig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthImplementors = []string{"ConfigAuth"}

func (ec *executionContext) _ConfigAuth(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuth")
		case "version":
			out.Values[i] = ec._ConfigAuth_version(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ConfigAuth_resources(ctx, field, obj)
		case "elevatedPrivileges":
			out.Values[i] = ec._ConfigAuth_elevatedPrivileges(ctx, field, obj)
		case "redirections":
			out.Values[i] = ec._ConfigAuth_redirections(ctx, field, obj)
		case "signUp":
			out.Values[i] = ec._ConfigAuth_signUp(ctx, field, obj)
		case "user":
			out.Values[i] = ec._ConfigAuth_user(ctx, field, obj)
		case "session":
			out.Values[i] = ec._ConfigAuth_session(ctx, field, obj)
		case "method":
			out.Values[i] = ec._ConfigAuth_method(ctx, field, obj)
		case "totp":
			out.Values[i] = ec._ConfigAuth_totp(ctx, field, obj)
		case "misc":
			out.Values[i] = ec._ConfigAuth_misc(ctx, field, obj)
		case "rateLimit":
			out.Values[i] = ec._ConfigAuth_rateLimit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthElevatedPrivilegesImplementors = []string{"ConfigAuthElevatedPrivileges"}

func (ec *executionContext) _ConfigAuthElevatedPrivileges(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthElevatedPrivileges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthElevatedPrivilegesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthElevatedPrivileges")
		case "mode":
			out.Values[i] = ec._ConfigAuthElevatedPrivileges_mode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodImplementors = []string{"ConfigAuthMethod"}

func (ec *executionContext) _ConfigAuthMethod(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethod")
		case "anonymous":
			out.Values[i] = ec._ConfigAuthMethod_anonymous(ctx, field, obj)
		case "emailPasswordless":
			out.Values[i] = ec._ConfigAuthMethod_emailPasswordless(ctx, field, obj)
		case "otp":
			out.Values[i] = ec._ConfigAuthMethod_otp(ctx, field, obj)
		case "emailPassword":
			out.Values[i] = ec._ConfigAuthMethod_emailPassword(ctx, field, obj)
		case "smsPasswordless":
			out.Values[i] = ec._ConfigAuthMethod_smsPasswordless(ctx, field, obj)
		case "oauth":
			out.Values[i] = ec._ConfigAuthMethod_oauth(ctx, field, obj)
		case "webauthn":
			out.Values[i] = ec._ConfigAuthMethod_webauthn(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodAnonymousImplementors = []string{"ConfigAuthMethodAnonymous"}

func (ec *executionContext) _ConfigAuthMethodAnonymous(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodAnonymous) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodAnonymousImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodAnonymous")
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodAnonymous_enabled(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodEmailPasswordImplementors = []string{"ConfigAuthMethodEmailPassword"}

func (ec *executionContext) _ConfigAuthMethodEmailPassword(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodEmailPassword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodEmailPasswordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodEmailPassword")
		case "hibpEnabled":
			out.Values[i] = ec._ConfigAuthMethodEmailPassword_hibpEnabled(ctx, field, obj)
		case "emailVerificationRequired":
			out.Values[i] = ec._ConfigAuthMethodEmailPassword_emailVerificationRequired(ctx, field, obj)
		case "passwordMinLength":
			out.Values[i] = ec._ConfigAuthMethodEmailPassword_passwordMinLength(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodEmailPasswordlessImplementors = []string{"ConfigAuthMethodEmailPasswordless"}

func (ec *executionContext) _ConfigAuthMethodEmailPasswordless(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodEmailPasswordless) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodEmailPasswordlessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodEmailPasswordless")
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodEmailPasswordless_enabled(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOauthImplementors = []string{"ConfigAuthMethodOauth"}

func (ec *executionContext) _ConfigAuthMethodOauth(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOauth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOauthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOauth")
		case "apple":
			out.Values[i] = ec._ConfigAuthMethodOauth_apple(ctx, field, obj)
		case "azuread":
			out.Values[i] = ec._ConfigAuthMethodOauth_azuread(ctx, field, obj)
		case "bitbucket":
			out.Values[i] = ec._ConfigAuthMethodOauth_bitbucket(ctx, field, obj)
		case "discord":
			out.Values[i] = ec._ConfigAuthMethodOauth_discord(ctx, field, obj)
		case "entraid":
			out.Values[i] = ec._ConfigAuthMethodOauth_entraid(ctx, field, obj)
		case "facebook":
			out.Values[i] = ec._ConfigAuthMethodOauth_facebook(ctx, field, obj)
		case "github":
			out.Values[i] = ec._ConfigAuthMethodOauth_github(ctx, field, obj)
		case "gitlab":
			out.Values[i] = ec._ConfigAuthMethodOauth_gitlab(ctx, field, obj)
		case "google":
			out.Values[i] = ec._ConfigAuthMethodOauth_google(ctx, field, obj)
		case "linkedin":
			out.Values[i] = ec._ConfigAuthMethodOauth_linkedin(ctx, field, obj)
		case "spotify":
			out.Values[i] = ec._ConfigAuthMethodOauth_spotify(ctx, field, obj)
		case "strava":
			out.Values[i] = ec._ConfigAuthMethodOauth_strava(ctx, field, obj)
		case "twitch":
			out.Values[i] = ec._ConfigAuthMethodOauth_twitch(ctx, field, obj)
		case "twitter":
			out.Values[i] = ec._ConfigAuthMethodOauth_twitter(ctx, field, obj)
		case "windowslive":
			out.Values[i] = ec._ConfigAuthMethodOauth_windowslive(ctx, field, obj)
		case "workos":
			out.Values[i] = ec._ConfigAuthMethodOauth_workos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOauthAppleImplementors = []string{"ConfigAuthMethodOauthApple"}

func (ec *executionContext) _ConfigAuthMethodOauthApple(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOauthApple) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOauthAppleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOauthApple")
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodOauthApple_enabled(ctx, field, obj)
		case "audience":
			out.Values[i] = ec._ConfigAuthMethodOauthApple_audience(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._ConfigAuthMethodOauthApple_clientId(ctx, field, obj)
		case "keyId":
			out.Values[i] = ec._ConfigAuthMethodOauthApple_keyId(ctx, field, obj)
		case "teamId":
			out.Values[i] = ec._ConfigAuthMethodOauthApple_teamId(ctx, field, obj)
		case "scope":
			out.Values[i] = ec._ConfigAuthMethodOauthApple_scope(ctx, field, obj)
		case "privateKey":
			out.Values[i] = ec._ConfigAuthMethodOauthApple_privateKey(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOauthAzureadImplementors = []string{"ConfigAuthMethodOauthAzuread"}

func (ec *executionContext) _ConfigAuthMethodOauthAzuread(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOauthAzuread) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOauthAzureadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOauthAzuread")
		case "tenant":
			out.Values[i] = ec._ConfigAuthMethodOauthAzuread_tenant(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodOauthAzuread_enabled(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._ConfigAuthMethodOauthAzuread_clientId(ctx, field, obj)
		case "clientSecret":
			out.Values[i] = ec._ConfigAuthMethodOauthAzuread_clientSecret(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOauthEntraidImplementors = []string{"ConfigAuthMethodOauthEntraid"}

func (ec *executionContext) _ConfigAuthMethodOauthEntraid(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOauthEntraid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOauthEntraidImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOauthEntraid")
		case "tenant":
			out.Values[i] = ec._ConfigAuthMethodOauthEntraid_tenant(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodOauthEntraid_enabled(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._ConfigAuthMethodOauthEntraid_clientId(ctx, field, obj)
		case "clientSecret":
			out.Values[i] = ec._ConfigAuthMethodOauthEntraid_clientSecret(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOauthTwitterImplementors = []string{"ConfigAuthMethodOauthTwitter"}

func (ec *executionContext) _ConfigAuthMethodOauthTwitter(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOauthTwitter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOauthTwitterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOauthTwitter")
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodOauthTwitter_enabled(ctx, field, obj)
		case "consumerKey":
			out.Values[i] = ec._ConfigAuthMethodOauthTwitter_consumerKey(ctx, field, obj)
		case "consumerSecret":
			out.Values[i] = ec._ConfigAuthMethodOauthTwitter_consumerSecret(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOauthWorkosImplementors = []string{"ConfigAuthMethodOauthWorkos"}

func (ec *executionContext) _ConfigAuthMethodOauthWorkos(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOauthWorkos) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOauthWorkosImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOauthWorkos")
		case "connection":
			out.Values[i] = ec._ConfigAuthMethodOauthWorkos_connection(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodOauthWorkos_enabled(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._ConfigAuthMethodOauthWorkos_clientId(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._ConfigAuthMethodOauthWorkos_organization(ctx, field, obj)
		case "clientSecret":
			out.Values[i] = ec._ConfigAuthMethodOauthWorkos_clientSecret(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOtpImplementors = []string{"ConfigAuthMethodOtp"}

func (ec *executionContext) _ConfigAuthMethodOtp(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOtp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOtpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOtp")
		case "email":
			out.Values[i] = ec._ConfigAuthMethodOtp_email(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodOtpEmailImplementors = []string{"ConfigAuthMethodOtpEmail"}

func (ec *executionContext) _ConfigAuthMethodOtpEmail(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodOtpEmail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodOtpEmailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodOtpEmail")
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodOtpEmail_enabled(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodSmsPasswordlessImplementors = []string{"ConfigAuthMethodSmsPasswordless"}

func (ec *executionContext) _ConfigAuthMethodSmsPasswordless(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodSmsPasswordless) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodSmsPasswordlessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodSmsPasswordless")
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodSmsPasswordless_enabled(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodWebauthnImplementors = []string{"ConfigAuthMethodWebauthn"}

func (ec *executionContext) _ConfigAuthMethodWebauthn(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodWebauthn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodWebauthnImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodWebauthn")
		case "enabled":
			out.Values[i] = ec._ConfigAuthMethodWebauthn_enabled(ctx, field, obj)
		case "relyingParty":
			out.Values[i] = ec._ConfigAuthMethodWebauthn_relyingParty(ctx, field, obj)
		case "attestation":
			out.Values[i] = ec._ConfigAuthMethodWebauthn_attestation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodWebauthnAttestationImplementors = []string{"ConfigAuthMethodWebauthnAttestation"}

func (ec *executionContext) _ConfigAuthMethodWebauthnAttestation(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodWebauthnAttestation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodWebauthnAttestationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodWebauthnAttestation")
		case "timeout":
			out.Values[i] = ec._ConfigAuthMethodWebauthnAttestation_timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMethodWebauthnRelyingPartyImplementors = []string{"ConfigAuthMethodWebauthnRelyingParty"}

func (ec *executionContext) _ConfigAuthMethodWebauthnRelyingParty(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMethodWebauthnRelyingParty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMethodWebauthnRelyingPartyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMethodWebauthnRelyingParty")
		case "id":
			out.Values[i] = ec._ConfigAuthMethodWebauthnRelyingParty_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ConfigAuthMethodWebauthnRelyingParty_name(ctx, field, obj)
		case "origins":
			out.Values[i] = ec._ConfigAuthMethodWebauthnRelyingParty_origins(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthMiscImplementors = []string{"ConfigAuthMisc"}

func (ec *executionContext) _ConfigAuthMisc(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthMisc) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthMiscImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthMisc")
		case "concealErrors":
			out.Values[i] = ec._ConfigAuthMisc_concealErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthRateLimitImplementors = []string{"ConfigAuthRateLimit"}

func (ec *executionContext) _ConfigAuthRateLimit(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthRateLimit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthRateLimitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthRateLimit")
		case "emails":
			out.Values[i] = ec._ConfigAuthRateLimit_emails(ctx, field, obj)
		case "sms":
			out.Values[i] = ec._ConfigAuthRateLimit_sms(ctx, field, obj)
		case "bruteForce":
			out.Values[i] = ec._ConfigAuthRateLimit_bruteForce(ctx, field, obj)
		case "signups":
			out.Values[i] = ec._ConfigAuthRateLimit_signups(ctx, field, obj)
		case "global":
			out.Values[i] = ec._ConfigAuthRateLimit_global(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthRedirectionsImplementors = []string{"ConfigAuthRedirections"}

func (ec *executionContext) _ConfigAuthRedirections(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthRedirections) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthRedirectionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthRedirections")
		case "clientUrl":
			out.Values[i] = ec._ConfigAuthRedirections_clientUrl(ctx, field, obj)
		case "allowedUrls":
			out.Values[i] = ec._ConfigAuthRedirections_allowedUrls(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthSessionImplementors = []string{"ConfigAuthSession"}

func (ec *executionContext) _ConfigAuthSession(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthSession) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthSessionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthSession")
		case "accessToken":
			out.Values[i] = ec._ConfigAuthSession_accessToken(ctx, field, obj)
		case "refreshToken":
			out.Values[i] = ec._ConfigAuthSession_refreshToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthSessionAccessTokenImplementors = []string{"ConfigAuthSessionAccessToken"}

func (ec *executionContext) _ConfigAuthSessionAccessToken(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthSessionAccessToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthSessionAccessTokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthSessionAccessToken")
		case "expiresIn":
			out.Values[i] = ec._ConfigAuthSessionAccessToken_expiresIn(ctx, field, obj)
		case "customClaims":
			out.Values[i] = ec._ConfigAuthSessionAccessToken_customClaims(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthSessionRefreshTokenImplementors = []string{"ConfigAuthSessionRefreshToken"}

func (ec *executionContext) _ConfigAuthSessionRefreshToken(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthSessionRefreshToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthSessionRefreshTokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthSessionRefreshToken")
		case "expiresIn":
			out.Values[i] = ec._ConfigAuthSessionRefreshToken_expiresIn(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthSignUpImplementors = []string{"ConfigAuthSignUp"}

func (ec *executionContext) _ConfigAuthSignUp(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthSignUp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthSignUpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthSignUp")
		case "enabled":
			out.Values[i] = ec._ConfigAuthSignUp_enabled(ctx, field, obj)
		case "disableNewUsers":
			out.Values[i] = ec._ConfigAuthSignUp_disableNewUsers(ctx, field, obj)
		case "turnstile":
			out.Values[i] = ec._ConfigAuthSignUp_turnstile(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthSignUpTurnstileImplementors = []string{"ConfigAuthSignUpTurnstile"}

func (ec *executionContext) _ConfigAuthSignUpTurnstile(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthSignUpTurnstile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthSignUpTurnstileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthSignUpTurnstile")
		case "secretKey":
			out.Values[i] = ec._ConfigAuthSignUpTurnstile_secretKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthTotpImplementors = []string{"ConfigAuthTotp"}

func (ec *executionContext) _ConfigAuthTotp(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthTotp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthTotpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthTotp")
		case "enabled":
			out.Values[i] = ec._ConfigAuthTotp_enabled(ctx, field, obj)
		case "issuer":
			out.Values[i] = ec._ConfigAuthTotp_issuer(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthUserImplementors = []string{"ConfigAuthUser"}

func (ec *executionContext) _ConfigAuthUser(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthUser")
		case "roles":
			out.Values[i] = ec._ConfigAuthUser_roles(ctx, field, obj)
		case "locale":
			out.Values[i] = ec._ConfigAuthUser_locale(ctx, field, obj)
		case "gravatar":
			out.Values[i] = ec._ConfigAuthUser_gravatar(ctx, field, obj)
		case "email":
			out.Values[i] = ec._ConfigAuthUser_email(ctx, field, obj)
		case "emailDomains":
			out.Values[i] = ec._ConfigAuthUser_emailDomains(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthUserEmailImplementors = []string{"ConfigAuthUserEmail"}

func (ec *executionContext) _ConfigAuthUserEmail(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthUserEmail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthUserEmailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthUserEmail")
		case "allowed":
			out.Values[i] = ec._ConfigAuthUserEmail_allowed(ctx, field, obj)
		case "blocked":
			out.Values[i] = ec._ConfigAuthUserEmail_blocked(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthUserEmailDomainsImplementors = []string{"ConfigAuthUserEmailDomains"}

func (ec *executionContext) _ConfigAuthUserEmailDomains(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthUserEmailDomains) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthUserEmailDomainsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthUserEmailDomains")
		case "allowed":
			out.Values[i] = ec._ConfigAuthUserEmailDomains_allowed(ctx, field, obj)
		case "blocked":
			out.Values[i] = ec._ConfigAuthUserEmailDomains_blocked(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthUserGravatarImplementors = []string{"ConfigAuthUserGravatar"}

func (ec *executionContext) _ConfigAuthUserGravatar(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthUserGravatar) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthUserGravatarImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthUserGravatar")
		case "enabled":
			out.Values[i] = ec._ConfigAuthUserGravatar_enabled(ctx, field, obj)
		case "default":
			out.Values[i] = ec._ConfigAuthUserGravatar_default(ctx, field, obj)
		case "rating":
			out.Values[i] = ec._ConfigAuthUserGravatar_rating(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthUserLocaleImplementors = []string{"ConfigAuthUserLocale"}

func (ec *executionContext) _ConfigAuthUserLocale(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthUserLocale) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthUserLocaleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthUserLocale")
		case "default":
			out.Values[i] = ec._ConfigAuthUserLocale_default(ctx, field, obj)
		case "allowed":
			out.Values[i] = ec._ConfigAuthUserLocale_allowed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthUserRolesImplementors = []string{"ConfigAuthUserRoles"}

func (ec *executionContext) _ConfigAuthUserRoles(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthUserRoles) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthUserRolesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthUserRoles")
		case "default":
			out.Values[i] = ec._ConfigAuthUserRoles_default(ctx, field, obj)
		case "allowed":
			out.Values[i] = ec._ConfigAuthUserRoles_allowed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAuthsessionaccessTokenCustomClaimsImplementors = []string{"ConfigAuthsessionaccessTokenCustomClaims"}

func (ec *executionContext) _ConfigAuthsessionaccessTokenCustomClaims(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAuthsessionaccessTokenCustomClaims) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAuthsessionaccessTokenCustomClaimsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAuthsessionaccessTokenCustomClaims")
		case "key":
			out.Values[i] = ec._ConfigAuthsessionaccessTokenCustomClaims_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._ConfigAuthsessionaccessTokenCustomClaims_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "default":
			out.Values[i] = ec._ConfigAuthsessionaccessTokenCustomClaims_default(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configAutoscalerImplementors = []string{"ConfigAutoscaler"}

func (ec *executionContext) _ConfigAutoscaler(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAutoscaler) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAutoscalerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAutoscaler")
		case "maxReplicas":
			out.Values[i] = ec._ConfigAutoscaler_maxReplicas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configClaimMapImplementors = []string{"ConfigClaimMap"}

func (ec *executionContext) _ConfigClaimMap(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigClaimMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configClaimMapImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigClaimMap")
		case "claim":
			out.Values[i] = ec._ConfigClaimMap_claim(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._ConfigClaimMap_value(ctx, field, obj)
		case "path":
			out.Values[i] = ec._ConfigClaimMap_path(ctx, field, obj)
		case "default":
			out.Values[i] = ec._ConfigClaimMap_default(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configComputeResourcesImplementors = []string{"ConfigComputeResources"}

func (ec *executionContext) _ConfigComputeResources(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigComputeResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configComputeResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigComputeResources")
		case "cpu":
			out.Values[i] = ec._ConfigComputeResources_cpu(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "memory":
			out.Values[i] = ec._ConfigComputeResources_memory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configConfigImplementors = []string{"ConfigConfig"}

func (ec *executionContext) _ConfigConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigConfig")
		case "global":
			out.Values[i] = ec._ConfigConfig_global(ctx, field, obj)
		case "hasura":
			out.Values[i] = ec._ConfigConfig_hasura(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "graphql":
			out.Values[i] = ec._ConfigConfig_graphql(ctx, field, obj)
		case "functions":
			out.Values[i] = ec._ConfigConfig_functions(ctx, field, obj)
		case "auth":
			out.Values[i] = ec._ConfigConfig_auth(ctx, field, obj)
		case "postgres":
			out.Values[i] = ec._ConfigConfig_postgres(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "provider":
			out.Values[i] = ec._ConfigConfig_provider(ctx, field, obj)
		case "storage":
			out.Values[i] = ec._ConfigConfig_storage(ctx, field, obj)
		case "ai":
			out.Values[i] = ec._ConfigConfig_ai(ctx, field, obj)
		case "observability":
			out.Values[i] = ec._ConfigConfig_observability(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configEnvironmentVariableImplementors = []string{"ConfigEnvironmentVariable"}

func (ec *executionContext) _ConfigEnvironmentVariable(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigEnvironmentVariable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configEnvironmentVariableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigEnvironmentVariable")
		case "name":
			out.Values[i] = ec._ConfigEnvironmentVariable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._ConfigEnvironmentVariable_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configFunctionsImplementors = []string{"ConfigFunctions"}

func (ec *executionContext) _ConfigFunctions(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigFunctions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configFunctionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigFunctions")
		case "node":
			out.Values[i] = ec._ConfigFunctions_node(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ConfigFunctions_resources(ctx, field, obj)
		case "rateLimit":
			out.Values[i] = ec._ConfigFunctions_rateLimit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configFunctionsNodeImplementors = []string{"ConfigFunctionsNode"}

func (ec *executionContext) _ConfigFunctionsNode(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigFunctionsNode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configFunctionsNodeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigFunctionsNode")
		case "version":
			out.Values[i] = ec._ConfigFunctionsNode_version(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configFunctionsResourcesImplementors = []string{"ConfigFunctionsResources"}

func (ec *executionContext) _ConfigFunctionsResources(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigFunctionsResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configFunctionsResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigFunctionsResources")
		case "networking":
			out.Values[i] = ec._ConfigFunctionsResources_networking(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGlobalImplementors = []string{"ConfigGlobal"}

func (ec *executionContext) _ConfigGlobal(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGlobal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGlobalImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGlobal")
		case "environment":
			out.Values[i] = ec._ConfigGlobal_environment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGlobalEnvironmentVariableImplementors = []string{"ConfigGlobalEnvironmentVariable"}

func (ec *executionContext) _ConfigGlobalEnvironmentVariable(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGlobalEnvironmentVariable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGlobalEnvironmentVariableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGlobalEnvironmentVariable")
		case "name":
			out.Values[i] = ec._ConfigGlobalEnvironmentVariable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._ConfigGlobalEnvironmentVariable_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanaImplementors = []string{"ConfigGrafana"}

func (ec *executionContext) _ConfigGrafana(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafana) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafana")
		case "adminPassword":
			out.Values[i] = ec._ConfigGrafana_adminPassword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "smtp":
			out.Values[i] = ec._ConfigGrafana_smtp(ctx, field, obj)
		case "alerting":
			out.Values[i] = ec._ConfigGrafana_alerting(ctx, field, obj)
		case "contacts":
			out.Values[i] = ec._ConfigGrafana_contacts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanaAlertingImplementors = []string{"ConfigGrafanaAlerting"}

func (ec *executionContext) _ConfigGrafanaAlerting(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafanaAlerting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanaAlertingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafanaAlerting")
		case "enabled":
			out.Values[i] = ec._ConfigGrafanaAlerting_enabled(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanaContactsImplementors = []string{"ConfigGrafanaContacts"}

func (ec *executionContext) _ConfigGrafanaContacts(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafanaContacts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanaContactsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafanaContacts")
		case "emails":
			out.Values[i] = ec._ConfigGrafanaContacts_emails(ctx, field, obj)
		case "pagerduty":
			out.Values[i] = ec._ConfigGrafanaContacts_pagerduty(ctx, field, obj)
		case "discord":
			out.Values[i] = ec._ConfigGrafanaContacts_discord(ctx, field, obj)
		case "slack":
			out.Values[i] = ec._ConfigGrafanaContacts_slack(ctx, field, obj)
		case "webhook":
			out.Values[i] = ec._ConfigGrafanaContacts_webhook(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanaSmtpImplementors = []string{"ConfigGrafanaSmtp"}

func (ec *executionContext) _ConfigGrafanaSmtp(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafanaSmtp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanaSmtpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafanaSmtp")
		case "host":
			out.Values[i] = ec._ConfigGrafanaSmtp_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "port":
			out.Values[i] = ec._ConfigGrafanaSmtp_port(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sender":
			out.Values[i] = ec._ConfigGrafanaSmtp_sender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._ConfigGrafanaSmtp_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "password":
			out.Values[i] = ec._ConfigGrafanaSmtp_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanacontactsDiscordImplementors = []string{"ConfigGrafanacontactsDiscord"}

func (ec *executionContext) _ConfigGrafanacontactsDiscord(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafanacontactsDiscord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanacontactsDiscordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafanacontactsDiscord")
		case "url":
			out.Values[i] = ec._ConfigGrafanacontactsDiscord_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "avatarUrl":
			out.Values[i] = ec._ConfigGrafanacontactsDiscord_avatarUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanacontactsPagerdutyImplementors = []string{"ConfigGrafanacontactsPagerduty"}

func (ec *executionContext) _ConfigGrafanacontactsPagerduty(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafanacontactsPagerduty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanacontactsPagerdutyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafanacontactsPagerduty")
		case "integrationKey":
			out.Values[i] = ec._ConfigGrafanacontactsPagerduty_integrationKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "severity":
			out.Values[i] = ec._ConfigGrafanacontactsPagerduty_severity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "class":
			out.Values[i] = ec._ConfigGrafanacontactsPagerduty_class(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "component":
			out.Values[i] = ec._ConfigGrafanacontactsPagerduty_component(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "group":
			out.Values[i] = ec._ConfigGrafanacontactsPagerduty_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanacontactsSlackImplementors = []string{"ConfigGrafanacontactsSlack"}

func (ec *executionContext) _ConfigGrafanacontactsSlack(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafanacontactsSlack) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanacontactsSlackImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafanacontactsSlack")
		case "recipient":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_recipient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "token":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iconEmoji":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_iconEmoji(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iconURL":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_iconURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mentionUsers":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_mentionUsers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mentionGroups":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_mentionGroups(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mentionChannel":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_mentionChannel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endpointURL":
			out.Values[i] = ec._ConfigGrafanacontactsSlack_endpointURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGrafanacontactsWebhookImplementors = []string{"ConfigGrafanacontactsWebhook"}

func (ec *executionContext) _ConfigGrafanacontactsWebhook(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGrafanacontactsWebhook) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGrafanacontactsWebhookImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGrafanacontactsWebhook")
		case "url":
			out.Values[i] = ec._ConfigGrafanacontactsWebhook_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpMethod":
			out.Values[i] = ec._ConfigGrafanacontactsWebhook_httpMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._ConfigGrafanacontactsWebhook_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "password":
			out.Values[i] = ec._ConfigGrafanacontactsWebhook_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authorizationScheme":
			out.Values[i] = ec._ConfigGrafanacontactsWebhook_authorizationScheme(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authorizationCredentials":
			out.Values[i] = ec._ConfigGrafanacontactsWebhook_authorizationCredentials(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxAlerts":
			out.Values[i] = ec._ConfigGrafanacontactsWebhook_maxAlerts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGraphqlImplementors = []string{"ConfigGraphql"}

func (ec *executionContext) _ConfigGraphql(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGraphql) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGraphqlImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGraphql")
		case "security":
			out.Values[i] = ec._ConfigGraphql_security(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configGraphqlSecurityImplementors = []string{"ConfigGraphqlSecurity"}

func (ec *executionContext) _ConfigGraphqlSecurity(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigGraphqlSecurity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGraphqlSecurityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGraphqlSecurity")
		case "forbidAminSecret":
			out.Values[i] = ec._ConfigGraphqlSecurity_forbidAminSecret(ctx, field, obj)
		case "maxDepthQueries":
			out.Values[i] = ec._ConfigGraphqlSecurity_maxDepthQueries(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configHasuraImplementors = []string{"ConfigHasura"}

func (ec *executionContext) _ConfigHasura(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigHasura) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configHasuraImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigHasura")
		case "version":
			out.Values[i] = ec._ConfigHasura_version(ctx, field, obj)
		case "jwtSecrets":
			out.Values[i] = ec._ConfigHasura_jwtSecrets(ctx, field, obj)
		case "adminSecret":
			out.Values[i] = ec._ConfigHasura_adminSecret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "webhookSecret":
			out.Values[i] = ec._ConfigHasura_webhookSecret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "settings":
			out.Values[i] = ec._ConfigHasura_settings(ctx, field, obj)
		case "authHook":
			out.Values[i] = ec._ConfigHasura_authHook(ctx, field, obj)
		case "logs":
			out.Values[i] = ec._ConfigHasura_logs(ctx, field, obj)
		case "events":
			out.Values[i] = ec._ConfigHasura_events(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ConfigHasura_resources(ctx, field, obj)
		case "rateLimit":
			out.Values[i] = ec._ConfigHasura_rateLimit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configHasuraAuthHookImplementors = []string{"ConfigHasuraAuthHook"}

func (ec *executionContext) _ConfigHasuraAuthHook(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigHasuraAuthHook) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configHasuraAuthHookImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigHasuraAuthHook")
		case "url":
			out.Values[i] = ec._ConfigHasuraAuthHook_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mode":
			out.Values[i] = ec._ConfigHasuraAuthHook_mode(ctx, field, obj)
		case "sendRequestBody":
			out.Values[i] = ec._ConfigHasuraAuthHook_sendRequestBody(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configHasuraEventsImplementors = []string{"ConfigHasuraEvents"}

func (ec *executionContext) _ConfigHasuraEvents(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigHasuraEvents) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configHasuraEventsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigHasuraEvents")
		case "httpPoolSize":
			out.Values[i] = ec._ConfigHasuraEvents_httpPoolSize(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configHasuraLogsImplementors = []string{"ConfigHasuraLogs"}

func (ec *executionContext) _ConfigHasuraLogs(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigHasuraLogs) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configHasuraLogsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigHasuraLogs")
		case "level":
			out.Values[i] = ec._ConfigHasuraLogs_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configHasuraSettingsImplementors = []string{"ConfigHasuraSettings"}

func (ec *executionContext) _ConfigHasuraSettings(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigHasuraSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configHasuraSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigHasuraSettings")
		case "corsDomain":
			out.Values[i] = ec._ConfigHasuraSettings_corsDomain(ctx, field, obj)
		case "devMode":
			out.Values[i] = ec._ConfigHasuraSettings_devMode(ctx, field, obj)
		case "enableAllowList":
			out.Values[i] = ec._ConfigHasuraSettings_enableAllowList(ctx, field, obj)
		case "enableConsole":
			out.Values[i] = ec._ConfigHasuraSettings_enableConsole(ctx, field, obj)
		case "enableRemoteSchemaPermissions":
			out.Values[i] = ec._ConfigHasuraSettings_enableRemoteSchemaPermissions(ctx, field, obj)
		case "enabledAPIs":
			out.Values[i] = ec._ConfigHasuraSettings_enabledAPIs(ctx, field, obj)
		case "inferFunctionPermissions":
			out.Values[i] = ec._ConfigHasuraSettings_inferFunctionPermissions(ctx, field, obj)
		case "liveQueriesMultiplexedRefetchInterval":
			out.Values[i] = ec._ConfigHasuraSettings_liveQueriesMultiplexedRefetchInterval(ctx, field, obj)
		case "stringifyNumericTypes":
			out.Values[i] = ec._ConfigHasuraSettings_stringifyNumericTypes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configHealthCheckImplementors = []string{"ConfigHealthCheck"}

func (ec *executionContext) _ConfigHealthCheck(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigHealthCheck) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configHealthCheckImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigHealthCheck")
		case "port":
			out.Values[i] = ec._ConfigHealthCheck_port(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "initialDelaySeconds":
			out.Values[i] = ec._ConfigHealthCheck_initialDelaySeconds(ctx, field, obj)
		case "probePeriodSeconds":
			out.Values[i] = ec._ConfigHealthCheck_probePeriodSeconds(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configIngressImplementors = []string{"ConfigIngress"}

func (ec *executionContext) _ConfigIngress(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigIngress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configIngressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigIngress")
		case "fqdn":
			out.Values[i] = ec._ConfigIngress_fqdn(ctx, field, obj)
		case "tls":
			out.Values[i] = ec._ConfigIngress_tls(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configIngressTlsImplementors = []string{"ConfigIngressTls"}

func (ec *executionContext) _ConfigIngressTls(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigIngressTls) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configIngressTlsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigIngressTls")
		case "clientCA":
			out.Values[i] = ec._ConfigIngressTls_clientCA(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configInsertConfigResponseImplementors = []string{"ConfigInsertConfigResponse"}

func (ec *executionContext) _ConfigInsertConfigResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigInsertConfigResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configInsertConfigResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigInsertConfigResponse")
		case "config":
			out.Values[i] = ec._ConfigInsertConfigResponse_config(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemConfig":
			out.Values[i] = ec._ConfigInsertConfigResponse_systemConfig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "secrets":
			out.Values[i] = ec._ConfigInsertConfigResponse_secrets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configJWTSecretImplementors = []string{"ConfigJWTSecret"}

func (ec *executionContext) _ConfigJWTSecret(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigJWTSecret) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configJWTSecretImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigJWTSecret")
		case "type":
			out.Values[i] = ec._ConfigJWTSecret_type(ctx, field, obj)
		case "key":
			out.Values[i] = ec._ConfigJWTSecret_key(ctx, field, obj)
		case "signingKey":
			out.Values[i] = ec._ConfigJWTSecret_signingKey(ctx, field, obj)
		case "kid":
			out.Values[i] = ec._ConfigJWTSecret_kid(ctx, field, obj)
		case "jwk_url":
			out.Values[i] = ec._ConfigJWTSecret_jwk_url(ctx, field, obj)
		case "claims_format":
			out.Values[i] = ec._ConfigJWTSecret_claims_format(ctx, field, obj)
		case "audience":
			out.Values[i] = ec._ConfigJWTSecret_audience(ctx, field, obj)
		case "issuer":
			out.Values[i] = ec._ConfigJWTSecret_issuer(ctx, field, obj)
		case "allowed_skew":
			out.Values[i] = ec._ConfigJWTSecret_allowed_skew(ctx, field, obj)
		case "header":
			out.Values[i] = ec._ConfigJWTSecret_header(ctx, field, obj)
		case "claims_map":
			out.Values[i] = ec._ConfigJWTSecret_claims_map(ctx, field, obj)
		case "claims_namespace":
			out.Values[i] = ec._ConfigJWTSecret_claims_namespace(ctx, field, obj)
		case "claims_namespace_path":
			out.Values[i] = ec._ConfigJWTSecret_claims_namespace_path(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configNetworkingImplementors = []string{"ConfigNetworking"}

func (ec *executionContext) _ConfigNetworking(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigNetworking) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configNetworkingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigNetworking")
		case "ingresses":
			out.Values[i] = ec._ConfigNetworking_ingresses(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configObservabilityImplementors = []string{"ConfigObservability"}

func (ec *executionContext) _ConfigObservability(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigObservability) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configObservabilityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigObservability")
		case "grafana":
			out.Values[i] = ec._ConfigObservability_grafana(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configPostgresImplementors = []string{"ConfigPostgres"}

func (ec *executionContext) _ConfigPostgres(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigPostgres) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configPostgresImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigPostgres")
		case "version":
			out.Values[i] = ec._ConfigPostgres_version(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ConfigPostgres_resources(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "settings":
			out.Values[i] = ec._ConfigPostgres_settings(ctx, field, obj)
		case "pitr":
			out.Values[i] = ec._ConfigPostgres_pitr(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configPostgresPitrImplementors = []string{"ConfigPostgresPitr"}

func (ec *executionContext) _ConfigPostgresPitr(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigPostgresPitr) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configPostgresPitrImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigPostgresPitr")
		case "retention":
			out.Values[i] = ec._ConfigPostgresPitr_retention(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configPostgresResourcesImplementors = []string{"ConfigPostgresResources"}

func (ec *executionContext) _ConfigPostgresResources(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigPostgresResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configPostgresResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigPostgresResources")
		case "compute":
			out.Values[i] = ec._ConfigPostgresResources_compute(ctx, field, obj)
		case "storage":
			out.Values[i] = ec._ConfigPostgresResources_storage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "replicas":
			out.Values[i] = ec._ConfigPostgresResources_replicas(ctx, field, obj)
		case "enablePublicAccess":
			out.Values[i] = ec._ConfigPostgresResources_enablePublicAccess(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configPostgresResourcesStorageImplementors = []string{"ConfigPostgresResourcesStorage"}

func (ec *executionContext) _ConfigPostgresResourcesStorage(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigPostgresResourcesStorage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configPostgresResourcesStorageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigPostgresResourcesStorage")
		case "capacity":
			out.Values[i] = ec._ConfigPostgresResourcesStorage_capacity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configPostgresSettingsImplementors = []string{"ConfigPostgresSettings"}

func (ec *executionContext) _ConfigPostgresSettings(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigPostgresSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configPostgresSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigPostgresSettings")
		case "jit":
			out.Values[i] = ec._ConfigPostgresSettings_jit(ctx, field, obj)
		case "maxConnections":
			out.Values[i] = ec._ConfigPostgresSettings_maxConnections(ctx, field, obj)
		case "sharedBuffers":
			out.Values[i] = ec._ConfigPostgresSettings_sharedBuffers(ctx, field, obj)
		case "effectiveCacheSize":
			out.Values[i] = ec._ConfigPostgresSettings_effectiveCacheSize(ctx, field, obj)
		case "maintenanceWorkMem":
			out.Values[i] = ec._ConfigPostgresSettings_maintenanceWorkMem(ctx, field, obj)
		case "checkpointCompletionTarget":
			out.Values[i] = ec._ConfigPostgresSettings_checkpointCompletionTarget(ctx, field, obj)
		case "walBuffers":
			out.Values[i] = ec._ConfigPostgresSettings_walBuffers(ctx, field, obj)
		case "defaultStatisticsTarget":
			out.Values[i] = ec._ConfigPostgresSettings_defaultStatisticsTarget(ctx, field, obj)
		case "randomPageCost":
			out.Values[i] = ec._ConfigPostgresSettings_randomPageCost(ctx, field, obj)
		case "effectiveIOConcurrency":
			out.Values[i] = ec._ConfigPostgresSettings_effectiveIOConcurrency(ctx, field, obj)
		case "workMem":
			out.Values[i] = ec._ConfigPostgresSettings_workMem(ctx, field, obj)
		case "hugePages":
			out.Values[i] = ec._ConfigPostgresSettings_hugePages(ctx, field, obj)
		case "minWalSize":
			out.Values[i] = ec._ConfigPostgresSettings_minWalSize(ctx, field, obj)
		case "maxWalSize":
			out.Values[i] = ec._ConfigPostgresSettings_maxWalSize(ctx, field, obj)
		case "maxWorkerProcesses":
			out.Values[i] = ec._ConfigPostgresSettings_maxWorkerProcesses(ctx, field, obj)
		case "maxParallelWorkersPerGather":
			out.Values[i] = ec._ConfigPostgresSettings_maxParallelWorkersPerGather(ctx, field, obj)
		case "maxParallelWorkers":
			out.Values[i] = ec._ConfigPostgresSettings_maxParallelWorkers(ctx, field, obj)
		case "maxParallelMaintenanceWorkers":
			out.Values[i] = ec._ConfigPostgresSettings_maxParallelMaintenanceWorkers(ctx, field, obj)
		case "walLevel":
			out.Values[i] = ec._ConfigPostgresSettings_walLevel(ctx, field, obj)
		case "maxWalSenders":
			out.Values[i] = ec._ConfigPostgresSettings_maxWalSenders(ctx, field, obj)
		case "maxReplicationSlots":
			out.Values[i] = ec._ConfigPostgresSettings_maxReplicationSlots(ctx, field, obj)
		case "archiveTimeout":
			out.Values[i] = ec._ConfigPostgresSettings_archiveTimeout(ctx, field, obj)
		case "trackIoTiming":
			out.Values[i] = ec._ConfigPostgresSettings_trackIoTiming(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configProviderImplementors = []string{"ConfigProvider"}

func (ec *executionContext) _ConfigProvider(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configProviderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigProvider")
		case "smtp":
			out.Values[i] = ec._ConfigProvider_smtp(ctx, field, obj)
		case "sms":
			out.Values[i] = ec._ConfigProvider_sms(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configRateLimitImplementors = []string{"ConfigRateLimit"}

func (ec *executionContext) _ConfigRateLimit(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigRateLimit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configRateLimitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigRateLimit")
		case "limit":
			out.Values[i] = ec._ConfigRateLimit_limit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interval":
			out.Values[i] = ec._ConfigRateLimit_interval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configResourcesImplementors = []string{"ConfigResources"}

func (ec *executionContext) _ConfigResources(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigResources")
		case "compute":
			out.Values[i] = ec._ConfigResources_compute(ctx, field, obj)
		case "replicas":
			out.Values[i] = ec._ConfigResources_replicas(ctx, field, obj)
		case "autoscaler":
			out.Values[i] = ec._ConfigResources_autoscaler(ctx, field, obj)
		case "networking":
			out.Values[i] = ec._ConfigResources_networking(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configResourcesComputeImplementors = []string{"ConfigResourcesCompute"}

func (ec *executionContext) _ConfigResourcesCompute(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigResourcesCompute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configResourcesComputeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigResourcesCompute")
		case "cpu":
			out.Values[i] = ec._ConfigResourcesCompute_cpu(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "memory":
			out.Values[i] = ec._ConfigResourcesCompute_memory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configRunServiceConfigImplementors = []string{"ConfigRunServiceConfig"}

func (ec *executionContext) _ConfigRunServiceConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigRunServiceConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configRunServiceConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigRunServiceConfig")
		case "name":
			out.Values[i] = ec._ConfigRunServiceConfig_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._ConfigRunServiceConfig_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "command":
			out.Values[i] = ec._ConfigRunServiceConfig_command(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._ConfigRunServiceConfig_environment(ctx, field, obj)
		case "ports":
			out.Values[i] = ec._ConfigRunServiceConfig_ports(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ConfigRunServiceConfig_resources(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "healthCheck":
			out.Values[i] = ec._ConfigRunServiceConfig_healthCheck(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configRunServiceConfigWithIDImplementors = []string{"ConfigRunServiceConfigWithID"}

func (ec *executionContext) _ConfigRunServiceConfigWithID(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigRunServiceConfigWithID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configRunServiceConfigWithIDImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigRunServiceConfigWithID")
		case "serviceID":
			out.Values[i] = ec._ConfigRunServiceConfigWithID_serviceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "config":
			out.Values[i] = ec._ConfigRunServiceConfigWithID_config(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configRunServiceImageImplementors = []string{"ConfigRunServiceImage"}

func (ec *executionContext) _ConfigRunServiceImage(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigRunServiceImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configRunServiceImageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigRunServiceImage")
		case "image":
			out.Values[i] = ec._ConfigRunServiceImage_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pullCredentials":
			out.Values[i] = ec._ConfigRunServiceImage_pullCredentials(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configRunServicePortImplementors = []string{"ConfigRunServicePort"}

func (ec *executionContext) _ConfigRunServicePort(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigRunServicePort) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configRunServicePortImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigRunServicePort")
		case "port":
			out.Values[i] = ec._ConfigRunServicePort_port(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._ConfigRunServicePort_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "publish":
			out.Values[i] = ec._ConfigRunServicePort_publish(ctx, field, obj)
		case "ingresses":
			out.Values[i] = ec._ConfigRunServicePort_ingresses(ctx, field, obj)
		case "rateLimit":
			out.Values[i] = ec._ConfigRunServicePort_rateLimit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configRunServiceResourcesImplementors = []string{"ConfigRunServiceResources"}

func (ec *executionContext) _ConfigRunServiceResources(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigRunServiceResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configRunServiceResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigRunServiceResources")
		case "compute":
			out.Values[i] = ec._ConfigRunServiceResources_compute(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "storage":
			out.Values[i] = ec._ConfigRunServiceResources_storage(ctx, field, obj)
		case "replicas":
			out.Values[i] = ec._ConfigRunServiceResources_replicas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "autoscaler":
			out.Values[i] = ec._ConfigRunServiceResources_autoscaler(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configRunServiceResourcesStorageImplementors = []string{"ConfigRunServiceResourcesStorage"}

func (ec *executionContext) _ConfigRunServiceResourcesStorage(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigRunServiceResourcesStorage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configRunServiceResourcesStorageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigRunServiceResourcesStorage")
		case "name":
			out.Values[i] = ec._ConfigRunServiceResourcesStorage_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "capacity":
			out.Values[i] = ec._ConfigRunServiceResourcesStorage_capacity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._ConfigRunServiceResourcesStorage_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSmsImplementors = []string{"ConfigSms"}

func (ec *executionContext) _ConfigSms(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSms) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSmsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSms")
		case "provider":
			out.Values[i] = ec._ConfigSms_provider(ctx, field, obj)
		case "accountSid":
			out.Values[i] = ec._ConfigSms_accountSid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authToken":
			out.Values[i] = ec._ConfigSms_authToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messagingServiceId":
			out.Values[i] = ec._ConfigSms_messagingServiceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSmtpImplementors = []string{"ConfigSmtp"}

func (ec *executionContext) _ConfigSmtp(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSmtp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSmtpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSmtp")
		case "user":
			out.Values[i] = ec._ConfigSmtp_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "password":
			out.Values[i] = ec._ConfigSmtp_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sender":
			out.Values[i] = ec._ConfigSmtp_sender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "host":
			out.Values[i] = ec._ConfigSmtp_host(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "port":
			out.Values[i] = ec._ConfigSmtp_port(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "secure":
			out.Values[i] = ec._ConfigSmtp_secure(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "method":
			out.Values[i] = ec._ConfigSmtp_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configStandardOauthProviderImplementors = []string{"ConfigStandardOauthProvider"}

func (ec *executionContext) _ConfigStandardOauthProvider(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigStandardOauthProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configStandardOauthProviderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigStandardOauthProvider")
		case "enabled":
			out.Values[i] = ec._ConfigStandardOauthProvider_enabled(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._ConfigStandardOauthProvider_clientId(ctx, field, obj)
		case "clientSecret":
			out.Values[i] = ec._ConfigStandardOauthProvider_clientSecret(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configStandardOauthProviderWithScopeImplementors = []string{"ConfigStandardOauthProviderWithScope"}

func (ec *executionContext) _ConfigStandardOauthProviderWithScope(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigStandardOauthProviderWithScope) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configStandardOauthProviderWithScopeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigStandardOauthProviderWithScope")
		case "enabled":
			out.Values[i] = ec._ConfigStandardOauthProviderWithScope_enabled(ctx, field, obj)
		case "audience":
			out.Values[i] = ec._ConfigStandardOauthProviderWithScope_audience(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._ConfigStandardOauthProviderWithScope_clientId(ctx, field, obj)
		case "scope":
			out.Values[i] = ec._ConfigStandardOauthProviderWithScope_scope(ctx, field, obj)
		case "clientSecret":
			out.Values[i] = ec._ConfigStandardOauthProviderWithScope_clientSecret(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configStorageImplementors = []string{"ConfigStorage"}

func (ec *executionContext) _ConfigStorage(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigStorage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configStorageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigStorage")
		case "version":
			out.Values[i] = ec._ConfigStorage_version(ctx, field, obj)
		case "resources":
			out.Values[i] = ec._ConfigStorage_resources(ctx, field, obj)
		case "antivirus":
			out.Values[i] = ec._ConfigStorage_antivirus(ctx, field, obj)
		case "rateLimit":
			out.Values[i] = ec._ConfigStorage_rateLimit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configStorageAntivirusImplementors = []string{"ConfigStorageAntivirus"}

func (ec *executionContext) _ConfigStorageAntivirus(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigStorageAntivirus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configStorageAntivirusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigStorageAntivirus")
		case "server":
			out.Values[i] = ec._ConfigStorageAntivirus_server(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigImplementors = []string{"ConfigSystemConfig"}

func (ec *executionContext) _ConfigSystemConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfig")
		case "auth":
			out.Values[i] = ec._ConfigSystemConfig_auth(ctx, field, obj)
		case "graphql":
			out.Values[i] = ec._ConfigSystemConfig_graphql(ctx, field, obj)
		case "postgres":
			out.Values[i] = ec._ConfigSystemConfig_postgres(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "persistentVolumesEncrypted":
			out.Values[i] = ec._ConfigSystemConfig_persistentVolumesEncrypted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigAuthImplementors = []string{"ConfigSystemConfigAuth"}

func (ec *executionContext) _ConfigSystemConfigAuth(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfigAuth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigAuthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfigAuth")
		case "email":
			out.Values[i] = ec._ConfigSystemConfigAuth_email(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigAuthEmailImplementors = []string{"ConfigSystemConfigAuthEmail"}

func (ec *executionContext) _ConfigSystemConfigAuthEmail(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfigAuthEmail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigAuthEmailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfigAuthEmail")
		case "templates":
			out.Values[i] = ec._ConfigSystemConfigAuthEmail_templates(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigAuthEmailTemplatesImplementors = []string{"ConfigSystemConfigAuthEmailTemplates"}

func (ec *executionContext) _ConfigSystemConfigAuthEmailTemplates(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfigAuthEmailTemplates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigAuthEmailTemplatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfigAuthEmailTemplates")
		case "s3Key":
			out.Values[i] = ec._ConfigSystemConfigAuthEmailTemplates_s3Key(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigGraphqlImplementors = []string{"ConfigSystemConfigGraphql"}

func (ec *executionContext) _ConfigSystemConfigGraphql(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfigGraphql) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigGraphqlImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfigGraphql")
		case "featureAdvancedGraphql":
			out.Values[i] = ec._ConfigSystemConfigGraphql_featureAdvancedGraphql(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigPostgresImplementors = []string{"ConfigSystemConfigPostgres"}

func (ec *executionContext) _ConfigSystemConfigPostgres(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfigPostgres) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigPostgresImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfigPostgres")
		case "enabled":
			out.Values[i] = ec._ConfigSystemConfigPostgres_enabled(ctx, field, obj)
		case "majorVersion":
			out.Values[i] = ec._ConfigSystemConfigPostgres_majorVersion(ctx, field, obj)
		case "connectionString":
			out.Values[i] = ec._ConfigSystemConfigPostgres_connectionString(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "database":
			out.Values[i] = ec._ConfigSystemConfigPostgres_database(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "disk":
			out.Values[i] = ec._ConfigSystemConfigPostgres_disk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigPostgresConnectionStringImplementors = []string{"ConfigSystemConfigPostgresConnectionString"}

func (ec *executionContext) _ConfigSystemConfigPostgresConnectionString(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfigPostgresConnectionString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigPostgresConnectionStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfigPostgresConnectionString")
		case "backup":
			out.Values[i] = ec._ConfigSystemConfigPostgresConnectionString_backup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasura":
			out.Values[i] = ec._ConfigSystemConfigPostgresConnectionString_hasura(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "auth":
			out.Values[i] = ec._ConfigSystemConfigPostgresConnectionString_auth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "storage":
			out.Values[i] = ec._ConfigSystemConfigPostgresConnectionString_storage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var configSystemConfigPostgresDiskImplementors = []string{"ConfigSystemConfigPostgresDisk"}

func (ec *executionContext) _ConfigSystemConfigPostgresDisk(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigSystemConfigPostgresDisk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configSystemConfigPostgresDiskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigSystemConfigPostgresDisk")
		case "iops":
			out.Values[i] = ec._ConfigSystemConfigPostgresDisk_iops(ctx, field, obj)
		case "tput":
			out.Values[i] = ec._ConfigSystemConfigPostgresDisk_tput(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var insertRunServiceConfigResponseImplementors = []string{"InsertRunServiceConfigResponse"}

func (ec *executionContext) _InsertRunServiceConfigResponse(ctx context.Context, sel ast.SelectionSet, obj *model.InsertRunServiceConfigResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, insertRunServiceConfigResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InsertRunServiceConfigResponse")
		case "serviceID":
			out.Values[i] = ec._InsertRunServiceConfigResponse_serviceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "config":
			out.Values[i] = ec._InsertRunServiceConfigResponse_config(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "updateConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "replaceConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "replaceConfigRawJSON":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceConfigRawJSON(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteConfig(ctx, field)
			})
		case "changeDatabaseVersion":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changeDatabaseVersion(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertSecret":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertSecret(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateSecret":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSecret(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSecret":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSecret(ctx, field)
			})
		case "updateSystemConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insertRunServiceConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_insertRunServiceConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRunServiceConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRunServiceConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "replaceRunServiceConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceRunServiceConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteRunServiceConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRunServiceConfig(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "configRawJSON":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_configRawJSON(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "config":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_config(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "configs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_configs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "appSecrets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appSecrets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "appsSecrets":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appsSecrets(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "systemConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "systemConfigs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemConfigs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "runServiceConfigRawJSON":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_runServiceConfigRawJSON(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "runServiceConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_runServiceConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "runServiceConfigs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_runServiceConfigs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "runServiceConfigsAll":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_runServiceConfigsAll(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigAIAutoEmbeddingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExp(ctx context.Context, v any) (*model.ConfigAIAutoEmbeddingsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAIAutoEmbeddingsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAIComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExp(ctx context.Context, v any) (*model.ConfigAIComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAIComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigAIOpenai2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenai(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAIOpenai) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigAIOpenai(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigAIOpenaiComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExp(ctx context.Context, v any) (*model.ConfigAIOpenaiComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAIOpenaiComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAIOpenaiInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiInsertInput(ctx context.Context, v any) (*model.ConfigAIOpenaiInsertInput, error) {
	res, err := ec.unmarshalInputConfigAIOpenaiInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigAIResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResources(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAIResources) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigAIResources(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigAIResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigAIResourcesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAIResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAIResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesInsertInput(ctx context.Context, v any) (*model.ConfigAIResourcesInsertInput, error) {
	res, err := ec.unmarshalInputConfigAIResourcesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigAppConfig2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppConfigᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigAppConfig) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigAppConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppConfig(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNConfigAppConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAppConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigAppConfig(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigAppSecrets2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSecrets(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAppSecrets) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigAppSecrets(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigAppSystemConfig2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSystemConfigᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigAppSystemConfig) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigAppSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSystemConfig(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNConfigAppSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSystemConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAppSystemConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigAppSystemConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExp(ctx context.Context, v any) (*model.ConfigAuthComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthElevatedPrivilegesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExp(ctx context.Context, v any) (*model.ConfigAuthElevatedPrivilegesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthElevatedPrivilegesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodAnonymousComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodAnonymousComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodAnonymousComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodEmailPasswordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodEmailPasswordComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodEmailPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordlessComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodEmailPasswordlessComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOauthAppleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAppleComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOauthAppleComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOauthAzureadComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAzureadComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOauthAzureadComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOauthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOauthComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOauthEntraidComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthEntraidComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOauthEntraidComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOauthTwitterComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthTwitterComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOauthTwitterComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOauthWorkosComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthWorkosComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOauthWorkosComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOtpComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOtpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodOtpEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOtpEmailComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodOtpEmailComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodSmsPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodSmsPasswordlessComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodSmsPasswordlessComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodWebauthnAttestationComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnAttestationComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnAttestationComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodWebauthnComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnRelyingPartyComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthMiscComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMiscComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthMiscComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExp(ctx context.Context, v any) (*model.ConfigAuthRateLimitComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthRateLimitComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthRedirectionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExp(ctx context.Context, v any) (*model.ConfigAuthRedirectionsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthRedirectionsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthSessionAccessTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSessionAccessTokenComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthSessionAccessTokenComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthSessionComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSessionComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthSessionComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthSessionRefreshTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSessionRefreshTokenComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthSessionRefreshTokenComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthSignUpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSignUpComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthSignUpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthSignUpTurnstileComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSignUpTurnstileComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthSignUpTurnstileComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthTotpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExp(ctx context.Context, v any) (*model.ConfigAuthTotpComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthTotpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthUserComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthUserComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthUserEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserEmailComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthUserEmailComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthUserEmailDomainsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserEmailDomainsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthUserEmailDomainsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthUserGravatarComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserGravatarComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthUserGravatarComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthUserLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserLocaleComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthUserLocaleComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthUserRolesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserRolesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthUserRolesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigAuthsessionaccessTokenCustomClaims2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaims(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthsessionaccessTokenCustomClaims) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigAuthsessionaccessTokenCustomClaims(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx context.Context, v any) (*model.ConfigAuthsessionaccessTokenCustomClaimsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthsessionaccessTokenCustomClaimsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsInsertInput(ctx context.Context, v any) (*model.ConfigAuthsessionaccessTokenCustomClaimsInsertInput, error) {
	res, err := ec.unmarshalInputConfigAuthsessionaccessTokenCustomClaimsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAuthsessionaccessTokenCustomClaimsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsUpdateInput(ctx context.Context, v any) (*model.ConfigAuthsessionaccessTokenCustomClaimsUpdateInput, error) {
	var res = new(model.ConfigAuthsessionaccessTokenCustomClaimsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigAutoscalerComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExp(ctx context.Context, v any) (*model.ConfigAutoscalerComparisonExp, error) {
	res, err := ec.unmarshalInputConfigAutoscalerComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigClaimMap2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMap(ctx context.Context, sel ast.SelectionSet, v *model.ConfigClaimMap) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigClaimMap(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigClaimMapComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExp(ctx context.Context, v any) (*model.ConfigClaimMapComparisonExp, error) {
	res, err := ec.unmarshalInputConfigClaimMapComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigClaimMapInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapInsertInput(ctx context.Context, v any) (*model.ConfigClaimMapInsertInput, error) {
	res, err := ec.unmarshalInputConfigClaimMapInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigClaimMapUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapUpdateInput(ctx context.Context, v any) (*model.ConfigClaimMapUpdateInput, error) {
	var res = new(model.ConfigClaimMapUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigComputeResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResources(ctx context.Context, sel ast.SelectionSet, v *model.ConfigComputeResources) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigComputeResources(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigComputeResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigComputeResourcesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigComputeResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigComputeResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesInsertInput(ctx context.Context, v any) (*model.ConfigComputeResourcesInsertInput, error) {
	res, err := ec.unmarshalInputConfigComputeResourcesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigConfig2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx context.Context, sel ast.SelectionSet, v model.ConfigConfig) graphql.Marshaler {
	return ec._ConfigConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExp(ctx context.Context, v any) (*model.ConfigConfigComparisonExp, error) {
	res, err := ec.unmarshalInputConfigConfigComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigInsertInput(ctx context.Context, v any) (model.ConfigConfigInsertInput, error) {
	res, err := ec.unmarshalInputConfigConfigInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigConfigUpdateInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigUpdateInput(ctx context.Context, v any) (model.ConfigConfigUpdateInput, error) {
	var res model.ConfigConfigUpdateInput
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigEmail2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigEmail2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNConfigEnvironmentVariable2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx context.Context, sel ast.SelectionSet, v model.ConfigEnvironmentVariable) graphql.Marshaler {
	return ec._ConfigEnvironmentVariable(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigEnvironmentVariable) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNConfigEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx context.Context, sel ast.SelectionSet, v *model.ConfigEnvironmentVariable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigEnvironmentVariable(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExp(ctx context.Context, v any) (*model.ConfigEnvironmentVariableComparisonExp, error) {
	res, err := ec.unmarshalInputConfigEnvironmentVariableComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigEnvironmentVariableInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInput(ctx context.Context, v any) (model.ConfigEnvironmentVariableInsertInput, error) {
	res, err := ec.unmarshalInputConfigEnvironmentVariableInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigEnvironmentVariableInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInput(ctx context.Context, v any) (*model.ConfigEnvironmentVariableInsertInput, error) {
	res, err := ec.unmarshalInputConfigEnvironmentVariableInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigEnvironmentVariableUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableUpdateInput(ctx context.Context, v any) (*model.ConfigEnvironmentVariableUpdateInput, error) {
	var res = new(model.ConfigEnvironmentVariableUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigFunctionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExp(ctx context.Context, v any) (*model.ConfigFunctionsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigFunctionsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigFunctionsNodeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExp(ctx context.Context, v any) (*model.ConfigFunctionsNodeComparisonExp, error) {
	res, err := ec.unmarshalInputConfigFunctionsNodeComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigFunctionsResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigFunctionsResourcesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigFunctionsResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGlobalComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExp(ctx context.Context, v any) (*model.ConfigGlobalComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGlobalComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigGlobalEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariable(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGlobalEnvironmentVariable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigGlobalEnvironmentVariable(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigGlobalEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExp(ctx context.Context, v any) (*model.ConfigGlobalEnvironmentVariableComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGlobalEnvironmentVariableComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGlobalEnvironmentVariableInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableInsertInput(ctx context.Context, v any) (*model.ConfigGlobalEnvironmentVariableInsertInput, error) {
	res, err := ec.unmarshalInputConfigGlobalEnvironmentVariableInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGlobalEnvironmentVariableUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableUpdateInput(ctx context.Context, v any) (*model.ConfigGlobalEnvironmentVariableUpdateInput, error) {
	var res = new(model.ConfigGlobalEnvironmentVariableUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigGrafana2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafana(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafana) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigGrafana(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigGrafanaAlertingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaAlertingComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanaAlertingComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanaComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanaComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanaContactsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaContactsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanaContactsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanaInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaInsertInput(ctx context.Context, v any) (*model.ConfigGrafanaInsertInput, error) {
	res, err := ec.unmarshalInputConfigGrafanaInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanaSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaSmtpComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanaSmtpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigGrafanacontactsDiscord2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscord(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafanacontactsDiscord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigGrafanacontactsDiscord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsDiscordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsDiscordComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsDiscordComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsDiscordInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordInsertInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsDiscordInsertInput, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsDiscordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsDiscordUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsDiscordUpdateInput, error) {
	var res = new(model.ConfigGrafanacontactsDiscordUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigGrafanacontactsPagerduty2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerduty(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafanacontactsPagerduty) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigGrafanacontactsPagerduty(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsPagerdutyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsPagerdutyComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsPagerdutyComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsPagerdutyInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyInsertInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsPagerdutyInsertInput, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsPagerdutyInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsPagerdutyUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsPagerdutyUpdateInput, error) {
	var res = new(model.ConfigGrafanacontactsPagerdutyUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigGrafanacontactsSlack2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlack(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafanacontactsSlack) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigGrafanacontactsSlack(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsSlackComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsSlackComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsSlackComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsSlackInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackInsertInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsSlackInsertInput, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsSlackInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsSlackUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsSlackUpdateInput, error) {
	var res = new(model.ConfigGrafanacontactsSlackUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigGrafanacontactsWebhook2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhook(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafanacontactsWebhook) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigGrafanacontactsWebhook(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsWebhookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsWebhookComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsWebhookComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsWebhookInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookInsertInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsWebhookInsertInput, error) {
	res, err := ec.unmarshalInputConfigGrafanacontactsWebhookInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGrafanacontactsWebhookUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanacontactsWebhookUpdateInput, error) {
	var res = new(model.ConfigGrafanacontactsWebhookUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExp(ctx context.Context, v any) (*model.ConfigGraphqlComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGraphqlComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigGraphqlSecurityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExp(ctx context.Context, v any) (*model.ConfigGraphqlSecurityComparisonExp, error) {
	res, err := ec.unmarshalInputConfigGraphqlSecurityComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigHasura2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasura(ctx context.Context, sel ast.SelectionSet, v *model.ConfigHasura) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigHasura(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigHasuraAPIs2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigHasuraAPIs2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigHasuraAuthHookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraAuthHookComparisonExp, error) {
	res, err := ec.unmarshalInputConfigHasuraAuthHookComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigHasuraComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraComparisonExp, error) {
	res, err := ec.unmarshalInputConfigHasuraComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigHasuraEventsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraEventsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigHasuraEventsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigHasuraInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraInsertInput(ctx context.Context, v any) (*model.ConfigHasuraInsertInput, error) {
	res, err := ec.unmarshalInputConfigHasuraInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigHasuraLogsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraLogsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigHasuraLogsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigHasuraSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraSettingsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigHasuraSettingsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigHealthCheckComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExp(ctx context.Context, v any) (*model.ConfigHealthCheckComparisonExp, error) {
	res, err := ec.unmarshalInputConfigHealthCheckComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigIngress2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngress(ctx context.Context, sel ast.SelectionSet, v *model.ConfigIngress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigIngress(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigIngressComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExp(ctx context.Context, v any) (*model.ConfigIngressComparisonExp, error) {
	res, err := ec.unmarshalInputConfigIngressComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigIngressInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressInsertInput(ctx context.Context, v any) (*model.ConfigIngressInsertInput, error) {
	res, err := ec.unmarshalInputConfigIngressInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigIngressTlsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExp(ctx context.Context, v any) (*model.ConfigIngressTlsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigIngressTlsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigIngressUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressUpdateInput(ctx context.Context, v any) (*model.ConfigIngressUpdateInput, error) {
	var res = new(model.ConfigIngressUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigInsertConfigResponse2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigInsertConfigResponse(ctx context.Context, sel ast.SelectionSet, v model.ConfigInsertConfigResponse) graphql.Marshaler {
	return ec._ConfigInsertConfigResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigInsertConfigResponse2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigInsertConfigResponse(ctx context.Context, sel ast.SelectionSet, v *model.ConfigInsertConfigResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigInsertConfigResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigInt162int16(ctx context.Context, v any) (int16, error) {
	res, err := types.UnmarshalInt16(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigInt162int16(ctx context.Context, sel ast.SelectionSet, v int16) graphql.Marshaler {
	_ = sel
	res := types.MarshalInt16(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigInt322int32(ctx context.Context, v any) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigInt322int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigInt642int64(ctx context.Context, v any) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigInt82int8(ctx context.Context, v any) (int8, error) {
	res, err := types.UnmarshalInt8(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigInt82int8(ctx context.Context, sel ast.SelectionSet, v int8) graphql.Marshaler {
	_ = sel
	res := types.MarshalInt8(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNConfigJWTSecret2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecret(ctx context.Context, sel ast.SelectionSet, v *model.ConfigJWTSecret) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigJWTSecret(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigJWTSecretComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExp(ctx context.Context, v any) (*model.ConfigJWTSecretComparisonExp, error) {
	res, err := ec.unmarshalInputConfigJWTSecretComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigJWTSecretInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretInsertInput(ctx context.Context, v any) (*model.ConfigJWTSecretInsertInput, error) {
	res, err := ec.unmarshalInputConfigJWTSecretInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigJWTSecretUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretUpdateInput(ctx context.Context, v any) (*model.ConfigJWTSecretUpdateInput, error) {
	var res = new(model.ConfigJWTSecretUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigLocale2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigLocale2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigNetworkingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExp(ctx context.Context, v any) (*model.ConfigNetworkingComparisonExp, error) {
	res, err := ec.unmarshalInputConfigNetworkingComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigObservability2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservability(ctx context.Context, sel ast.SelectionSet, v *model.ConfigObservability) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigObservability(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigObservabilityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExp(ctx context.Context, v any) (*model.ConfigObservabilityComparisonExp, error) {
	res, err := ec.unmarshalInputConfigObservabilityComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigObservabilityInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityInsertInput(ctx context.Context, v any) (*model.ConfigObservabilityInsertInput, error) {
	res, err := ec.unmarshalInputConfigObservabilityInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigPort2uint16(ctx context.Context, v any) (uint16, error) {
	res, err := types.UnmarshalUint16(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigPort2uint16(ctx context.Context, sel ast.SelectionSet, v uint16) graphql.Marshaler {
	_ = sel
	res := types.MarshalUint16(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNConfigPostgres2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgres(ctx context.Context, sel ast.SelectionSet, v *model.ConfigPostgres) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigPostgres(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresComparisonExp, error) {
	res, err := ec.unmarshalInputConfigPostgresComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigPostgresInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresInsertInput(ctx context.Context, v any) (*model.ConfigPostgresInsertInput, error) {
	res, err := ec.unmarshalInputConfigPostgresInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigPostgresPitrComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresPitrComparisonExp, error) {
	res, err := ec.unmarshalInputConfigPostgresPitrComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigPostgresResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResources(ctx context.Context, sel ast.SelectionSet, v *model.ConfigPostgresResources) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigPostgresResources(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigPostgresResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresResourcesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigPostgresResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigPostgresResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesInsertInput(ctx context.Context, v any) (*model.ConfigPostgresResourcesInsertInput, error) {
	res, err := ec.unmarshalInputConfigPostgresResourcesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigPostgresResourcesStorage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorage(ctx context.Context, sel ast.SelectionSet, v *model.ConfigPostgresResourcesStorage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigPostgresResourcesStorage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigPostgresResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresResourcesStorageComparisonExp, error) {
	res, err := ec.unmarshalInputConfigPostgresResourcesStorageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigPostgresResourcesStorageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageInsertInput(ctx context.Context, v any) (*model.ConfigPostgresResourcesStorageInsertInput, error) {
	res, err := ec.unmarshalInputConfigPostgresResourcesStorageInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigPostgresSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresSettingsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigPostgresSettingsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExp(ctx context.Context, v any) (*model.ConfigProviderComparisonExp, error) {
	res, err := ec.unmarshalInputConfigProviderComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx context.Context, v any) (*model.ConfigRateLimitComparisonExp, error) {
	res, err := ec.unmarshalInputConfigRateLimitComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigResourcesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigResourcesComputeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExp(ctx context.Context, v any) (*model.ConfigResourcesComputeComparisonExp, error) {
	res, err := ec.unmarshalInputConfigResourcesComputeComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigRunServiceConfig2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx context.Context, sel ast.SelectionSet, v model.ConfigRunServiceConfig) graphql.Marshaler {
	return ec._ConfigRunServiceConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRunServiceConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigRunServiceConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigRunServiceConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceConfigComparisonExp, error) {
	res, err := ec.unmarshalInputConfigRunServiceConfigComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServiceConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigInsertInput(ctx context.Context, v any) (model.ConfigRunServiceConfigInsertInput, error) {
	res, err := ec.unmarshalInputConfigRunServiceConfigInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServiceConfigUpdateInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigUpdateInput(ctx context.Context, v any) (model.ConfigRunServiceConfigUpdateInput, error) {
	var res model.ConfigRunServiceConfigUpdateInput
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigRunServiceConfigWithID2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigWithIDᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigRunServiceConfigWithID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigRunServiceConfigWithID2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigWithID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNConfigRunServiceConfigWithID2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigWithID(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRunServiceConfigWithID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigRunServiceConfigWithID(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigRunServiceImage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImage(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRunServiceImage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigRunServiceImage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigRunServiceImageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceImageComparisonExp, error) {
	res, err := ec.unmarshalInputConfigRunServiceImageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServiceImageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageInsertInput(ctx context.Context, v any) (*model.ConfigRunServiceImageInsertInput, error) {
	res, err := ec.unmarshalInputConfigRunServiceImageInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServiceName2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigRunServiceName2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNConfigRunServicePort2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePort(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRunServicePort) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigRunServicePort(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigRunServicePortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExp(ctx context.Context, v any) (*model.ConfigRunServicePortComparisonExp, error) {
	res, err := ec.unmarshalInputConfigRunServicePortComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServicePortInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortInsertInput(ctx context.Context, v any) (*model.ConfigRunServicePortInsertInput, error) {
	res, err := ec.unmarshalInputConfigRunServicePortInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServicePortUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortUpdateInput(ctx context.Context, v any) (*model.ConfigRunServicePortUpdateInput, error) {
	var res = new(model.ConfigRunServicePortUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigRunServiceResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResources(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRunServiceResources) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigRunServiceResources(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigRunServiceResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceResourcesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigRunServiceResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServiceResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesInsertInput(ctx context.Context, v any) (*model.ConfigRunServiceResourcesInsertInput, error) {
	res, err := ec.unmarshalInputConfigRunServiceResourcesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigRunServiceResourcesStorage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorage(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRunServiceResourcesStorage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigRunServiceResourcesStorage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigRunServiceResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceResourcesStorageComparisonExp, error) {
	res, err := ec.unmarshalInputConfigRunServiceResourcesStorageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServiceResourcesStorageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageInsertInput(ctx context.Context, v any) (*model.ConfigRunServiceResourcesStorageInsertInput, error) {
	res, err := ec.unmarshalInputConfigRunServiceResourcesStorageInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigRunServiceResourcesStorageUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageUpdateInput(ctx context.Context, v any) (*model.ConfigRunServiceResourcesStorageUpdateInput, error) {
	var res = new(model.ConfigRunServiceResourcesStorageUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSmsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExp(ctx context.Context, v any) (*model.ConfigSmsComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSmsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExp(ctx context.Context, v any) (*model.ConfigSmtpComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSmtpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigStandardOauthProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExp(ctx context.Context, v any) (*model.ConfigStandardOauthProviderComparisonExp, error) {
	res, err := ec.unmarshalInputConfigStandardOauthProviderComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx context.Context, v any) (*model.ConfigStandardOauthProviderWithScopeComparisonExp, error) {
	res, err := ec.unmarshalInputConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigStorageAntivirusComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExp(ctx context.Context, v any) (*model.ConfigStorageAntivirusComparisonExp, error) {
	res, err := ec.unmarshalInputConfigStorageAntivirusComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExp(ctx context.Context, v any) (*model.ConfigStorageComparisonExp, error) {
	res, err := ec.unmarshalInputConfigStorageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigSystemConfig2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfig(ctx context.Context, sel ast.SelectionSet, v model.ConfigSystemConfig) graphql.Marshaler {
	return ec._ConfigSystemConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigSystemConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigSystemConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigAuthComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigAuthComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigAuthEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigAuthEmailComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailTemplatesComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigGraphqlComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigGraphqlComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigInsertInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigInsertInput(ctx context.Context, v any) (model.ConfigSystemConfigInsertInput, error) {
	res, err := ec.unmarshalInputConfigSystemConfigInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigSystemConfigPostgres2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgres(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfigPostgres) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigSystemConfigPostgres(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigSystemConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigPostgresComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigSystemConfigPostgresConnectionString2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionString(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfigPostgresConnectionString) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigSystemConfigPostgresConnectionString(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigSystemConfigPostgresConnectionStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresConnectionStringComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigPostgresConnectionStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigPostgresConnectionStringInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringInsertInput(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresConnectionStringInsertInput, error) {
	res, err := ec.unmarshalInputConfigSystemConfigPostgresConnectionStringInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigPostgresDiskComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresDiskComparisonExp, error) {
	res, err := ec.unmarshalInputConfigSystemConfigPostgresDiskComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigPostgresInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresInsertInput(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresInsertInput, error) {
	res, err := ec.unmarshalInputConfigSystemConfigPostgresInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigSystemConfigUpdateInput2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigUpdateInput(ctx context.Context, v any) (model.ConfigSystemConfigUpdateInput, error) {
	var res model.ConfigSystemConfigUpdateInput
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigUint162uint16(ctx context.Context, v any) (uint16, error) {
	res, err := types.UnmarshalUint16(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigUint162uint16(ctx context.Context, sel ast.SelectionSet, v uint16) graphql.Marshaler {
	_ = sel
	res := types.MarshalUint16(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigUint2uint(ctx context.Context, v any) (uint, error) {
	res, err := graphql.UnmarshalUint(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigUint2uint(ctx context.Context, sel ast.SelectionSet, v uint) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalUint(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigUint322uint32(ctx context.Context, v any) (uint32, error) {
	res, err := graphql.UnmarshalUint32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigUint322uint32(ctx context.Context, sel ast.SelectionSet, v uint32) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalUint32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigUint642uint64(ctx context.Context, v any) (uint64, error) {
	res, err := graphql.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigUint642uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalUint64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigUint82uint8(ctx context.Context, v any) (uint8, error) {
	res, err := types.UnmarshalUint8(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigUint82uint8(ctx context.Context, sel ast.SelectionSet, v uint8) graphql.Marshaler {
	_ = sel
	res := types.MarshalUint8(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigUrl2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigUrl2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConfigUserRole2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigUserRole2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNInsertRunServiceConfigResponse2githubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐInsertRunServiceConfigResponse(ctx context.Context, sel ast.SelectionSet, v model.InsertRunServiceConfigResponse) graphql.Marshaler {
	return ec._InsertRunServiceConfigResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNInsertRunServiceConfigResponse2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐInsertRunServiceConfigResponse(ctx context.Context, sel ast.SelectionSet, v *model.InsertRunServiceConfigResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InsertRunServiceConfigResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNuuid2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNuuid2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v any) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOConfigAI2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAI(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAI) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAI(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigAIAutoEmbeddings2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddings(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAIAutoEmbeddings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAIAutoEmbeddings(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAIAutoEmbeddingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAIAutoEmbeddingsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAIAutoEmbeddingsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAIAutoEmbeddingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAIAutoEmbeddingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsComparisonExp(ctx context.Context, v any) (*model.ConfigAIAutoEmbeddingsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAIAutoEmbeddingsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIAutoEmbeddingsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsInsertInput(ctx context.Context, v any) (*model.ConfigAIAutoEmbeddingsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAIAutoEmbeddingsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIAutoEmbeddingsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIAutoEmbeddingsUpdateInput(ctx context.Context, v any) (*model.ConfigAIAutoEmbeddingsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAIAutoEmbeddingsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAIComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAIComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAIComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAIComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIComparisonExp(ctx context.Context, v any) (*model.ConfigAIComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAIComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIInsertInput(ctx context.Context, v any) (*model.ConfigAIInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAIInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIOpenaiComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAIOpenaiComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAIOpenaiComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAIOpenaiComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAIOpenaiComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiComparisonExp(ctx context.Context, v any) (*model.ConfigAIOpenaiComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAIOpenaiComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIOpenaiUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIOpenaiUpdateInput(ctx context.Context, v any) (*model.ConfigAIOpenaiUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAIOpenaiUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAIResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAIResourcesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAIResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAIResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigAIResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAIResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIResourcesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIResourcesUpdateInput(ctx context.Context, v any) (*model.ConfigAIResourcesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAIResourcesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAIUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAIUpdateInput(ctx context.Context, v any) (*model.ConfigAIUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAIUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAppSecrets2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSecretsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigAppSecrets) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigAppSecrets2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAppSecrets(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOConfigAuth2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuth(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuth(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthComparisonExp(ctx context.Context, v any) (*model.ConfigAuthComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthElevatedPrivileges2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivileges(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthElevatedPrivileges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthElevatedPrivileges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthElevatedPrivilegesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthElevatedPrivilegesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthElevatedPrivilegesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthElevatedPrivilegesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthElevatedPrivilegesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesComparisonExp(ctx context.Context, v any) (*model.ConfigAuthElevatedPrivilegesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthElevatedPrivilegesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthElevatedPrivilegesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesInsertInput(ctx context.Context, v any) (*model.ConfigAuthElevatedPrivilegesInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthElevatedPrivilegesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthElevatedPrivilegesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthElevatedPrivilegesUpdateInput(ctx context.Context, v any) (*model.ConfigAuthElevatedPrivilegesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthElevatedPrivilegesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthInsertInput(ctx context.Context, v any) (*model.ConfigAuthInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethod2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethod(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethod(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigAuthMethodAnonymous2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymous(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodAnonymous) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodAnonymous(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodAnonymousComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodAnonymousComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodAnonymousComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodAnonymousComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodAnonymousComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodAnonymousComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodAnonymousComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodAnonymousInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodAnonymousInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodAnonymousInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodAnonymousUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodAnonymousUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodAnonymousUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodAnonymousUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodEmailPassword2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPassword(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodEmailPassword) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodEmailPassword(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodEmailPasswordComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodEmailPasswordComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodEmailPasswordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodEmailPasswordComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodEmailPasswordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodEmailPasswordUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodEmailPasswordless2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordless(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodEmailPasswordless) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodEmailPasswordless(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordlessComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodEmailPasswordlessComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodEmailPasswordlessComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodEmailPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordlessComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodEmailPasswordlessComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordlessInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordlessInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodEmailPasswordlessInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodEmailPasswordlessUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodEmailPasswordlessUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodEmailPasswordlessUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodEmailPasswordlessUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodOauth2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauth(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOauth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOauth(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigAuthMethodOauthApple2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthApple(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOauthApple) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOauthApple(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAppleComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOauthAppleComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOauthAppleComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOauthAppleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAppleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAppleComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthAppleComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAppleInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAppleInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthAppleInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAppleUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAppleUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAppleUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOauthAppleUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodOauthAzuread2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzuread(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOauthAzuread) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOauthAzuread(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAzureadComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOauthAzureadComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOauthAzureadComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOauthAzureadComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAzureadComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAzureadComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthAzureadComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAzureadInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAzureadInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthAzureadInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthAzureadUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthAzureadUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthAzureadUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOauthAzureadUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOauthComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOauthComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOauthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodOauthEntraid2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraid(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOauthEntraid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOauthEntraid(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthEntraidComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOauthEntraidComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOauthEntraidComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOauthEntraidComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthEntraidComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthEntraidComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthEntraidComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthEntraidInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthEntraidInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthEntraidInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthEntraidUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthEntraidUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthEntraidUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOauthEntraidUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodOauthTwitter2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitter(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOauthTwitter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOauthTwitter(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthTwitterComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOauthTwitterComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOauthTwitterComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOauthTwitterComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthTwitterComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthTwitterComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthTwitterComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthTwitterInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthTwitterInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthTwitterInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthTwitterUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthTwitterUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthTwitterUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOauthTwitterUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOauthUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodOauthWorkos2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkos(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOauthWorkos) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOauthWorkos(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthWorkosComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOauthWorkosComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOauthWorkosComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOauthWorkosComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthWorkosComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOauthWorkosComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthWorkosComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthWorkosInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthWorkosInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOauthWorkosInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOauthWorkosUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOauthWorkosUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOauthWorkosUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOauthWorkosUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodOtp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtp(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOtp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOtp(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOtpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOtpComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOtpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOtpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodOtpEmail2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmail(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodOtpEmail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodOtpEmail(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodOtpEmailComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodOtpEmailComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodOtpEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodOtpEmailComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOtpEmailComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpEmailInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOtpEmailInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOtpEmailInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpEmailUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpEmailUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOtpEmailUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOtpEmailUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodOtpInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodOtpInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodOtpUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodOtpUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodOtpUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodOtpUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodSmsPasswordless2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordless(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodSmsPasswordless) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodSmsPasswordless(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodSmsPasswordlessComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodSmsPasswordlessComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodSmsPasswordlessComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodSmsPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodSmsPasswordlessComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodSmsPasswordlessComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodSmsPasswordlessComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodSmsPasswordlessInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodSmsPasswordlessInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodSmsPasswordlessInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodSmsPasswordlessUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodSmsPasswordlessUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodSmsPasswordlessUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodSmsPasswordlessUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodWebauthn2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthn(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodWebauthn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodWebauthn(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigAuthMethodWebauthnAttestation2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestation(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodWebauthnAttestation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodWebauthnAttestation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnAttestationComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodWebauthnAttestationComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodWebauthnAttestationComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodWebauthnAttestationComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnAttestationComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnAttestationComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnAttestationComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnAttestationInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnAttestationInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnAttestationInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnAttestationUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnAttestationUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnAttestationUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodWebauthnAttestationUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodWebauthnComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodWebauthnComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodWebauthnComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMethodWebauthnRelyingParty2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingParty(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMethodWebauthnRelyingParty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMethodWebauthnRelyingParty(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMethodWebauthnRelyingPartyComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMethodWebauthnRelyingPartyComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnRelyingPartyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnRelyingPartyComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnRelyingPartyComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnRelyingPartyInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyInsertInput(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnRelyingPartyInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMethodWebauthnRelyingPartyInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnRelyingPartyUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnRelyingPartyUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnRelyingPartyUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodWebauthnRelyingPartyUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMethodWebauthnUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMethodWebauthnUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMethodWebauthnUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMethodWebauthnUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthMisc2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMisc(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthMisc) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthMisc(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthMiscComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthMiscComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthMiscComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthMiscComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthMiscComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscComparisonExp(ctx context.Context, v any) (*model.ConfigAuthMiscComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMiscComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMiscInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscInsertInput(ctx context.Context, v any) (*model.ConfigAuthMiscInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthMiscInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthMiscUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthMiscUpdateInput(ctx context.Context, v any) (*model.ConfigAuthMiscUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthMiscUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimit(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthRateLimit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthRateLimit(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthRateLimitComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthRateLimitComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthRateLimitComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitComparisonExp(ctx context.Context, v any) (*model.ConfigAuthRateLimitComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthRateLimitComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitInsertInput(ctx context.Context, v any) (*model.ConfigAuthRateLimitInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthRateLimitInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthRateLimitUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRateLimitUpdateInput(ctx context.Context, v any) (*model.ConfigAuthRateLimitUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthRateLimitUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthRedirections2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirections(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthRedirections) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthRedirections(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthRedirectionsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthRedirectionsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthRedirectionsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthRedirectionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthRedirectionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsComparisonExp(ctx context.Context, v any) (*model.ConfigAuthRedirectionsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthRedirectionsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthRedirectionsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsInsertInput(ctx context.Context, v any) (*model.ConfigAuthRedirectionsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthRedirectionsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthRedirectionsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthRedirectionsUpdateInput(ctx context.Context, v any) (*model.ConfigAuthRedirectionsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthRedirectionsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthSession2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSession(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthSession) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthSession(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigAuthSessionAccessToken2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessToken(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthSessionAccessToken) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthSessionAccessToken(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthSessionAccessTokenComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthSessionAccessTokenComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthSessionAccessTokenComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthSessionAccessTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthSessionAccessTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSessionAccessTokenComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSessionAccessTokenComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSessionAccessTokenInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenInsertInput(ctx context.Context, v any) (*model.ConfigAuthSessionAccessTokenInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSessionAccessTokenInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSessionAccessTokenUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionAccessTokenUpdateInput(ctx context.Context, v any) (*model.ConfigAuthSessionAccessTokenUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthSessionAccessTokenUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSessionComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthSessionComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthSessionComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthSessionComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthSessionComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSessionComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSessionComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSessionInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionInsertInput(ctx context.Context, v any) (*model.ConfigAuthSessionInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSessionInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthSessionRefreshToken2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshToken(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthSessionRefreshToken) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthSessionRefreshToken(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthSessionRefreshTokenComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthSessionRefreshTokenComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthSessionRefreshTokenComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthSessionRefreshTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthSessionRefreshTokenComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSessionRefreshTokenComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSessionRefreshTokenComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSessionRefreshTokenInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenInsertInput(ctx context.Context, v any) (*model.ConfigAuthSessionRefreshTokenInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSessionRefreshTokenInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSessionRefreshTokenUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionRefreshTokenUpdateInput(ctx context.Context, v any) (*model.ConfigAuthSessionRefreshTokenUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthSessionRefreshTokenUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSessionUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSessionUpdateInput(ctx context.Context, v any) (*model.ConfigAuthSessionUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthSessionUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthSignUp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUp(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthSignUp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthSignUp(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthSignUpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthSignUpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthSignUpComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthSignUpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthSignUpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSignUpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSignUpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSignUpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpInsertInput(ctx context.Context, v any) (*model.ConfigAuthSignUpInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSignUpInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthSignUpTurnstile2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstile(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthSignUpTurnstile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthSignUpTurnstile(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthSignUpTurnstileComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthSignUpTurnstileComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthSignUpTurnstileComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthSignUpTurnstileComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthSignUpTurnstileComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileComparisonExp(ctx context.Context, v any) (*model.ConfigAuthSignUpTurnstileComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSignUpTurnstileComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSignUpTurnstileInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileInsertInput(ctx context.Context, v any) (*model.ConfigAuthSignUpTurnstileInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthSignUpTurnstileInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSignUpTurnstileUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpTurnstileUpdateInput(ctx context.Context, v any) (*model.ConfigAuthSignUpTurnstileUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthSignUpTurnstileUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthSignUpUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthSignUpUpdateInput(ctx context.Context, v any) (*model.ConfigAuthSignUpUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthSignUpUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthTotp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotp(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthTotp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthTotp(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthTotpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthTotpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthTotpComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthTotpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthTotpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpComparisonExp(ctx context.Context, v any) (*model.ConfigAuthTotpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthTotpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthTotpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpInsertInput(ctx context.Context, v any) (*model.ConfigAuthTotpInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthTotpInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthTotpUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthTotpUpdateInput(ctx context.Context, v any) (*model.ConfigAuthTotpUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthTotpUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUpdateInput(ctx context.Context, v any) (*model.ConfigAuthUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthUser2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUser(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthUserComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthUserComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthUserComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthUserComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthUserComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthUserEmail2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmail(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthUserEmail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthUserEmail(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthUserEmailComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthUserEmailComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthUserEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserEmailComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserEmailComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthUserEmailDomains2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomains(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthUserEmailDomains) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthUserEmailDomains(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailDomainsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthUserEmailDomainsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthUserEmailDomainsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthUserEmailDomainsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailDomainsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserEmailDomainsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserEmailDomainsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailDomainsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsInsertInput(ctx context.Context, v any) (*model.ConfigAuthUserEmailDomainsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserEmailDomainsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailDomainsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailDomainsUpdateInput(ctx context.Context, v any) (*model.ConfigAuthUserEmailDomainsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthUserEmailDomainsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailInsertInput(ctx context.Context, v any) (*model.ConfigAuthUserEmailInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserEmailInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserEmailUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserEmailUpdateInput(ctx context.Context, v any) (*model.ConfigAuthUserEmailUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthUserEmailUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthUserGravatar2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatar(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthUserGravatar) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthUserGravatar(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthUserGravatarComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthUserGravatarComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthUserGravatarComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthUserGravatarComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthUserGravatarComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserGravatarComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserGravatarComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserGravatarInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarInsertInput(ctx context.Context, v any) (*model.ConfigAuthUserGravatarInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserGravatarInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserGravatarUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserGravatarUpdateInput(ctx context.Context, v any) (*model.ConfigAuthUserGravatarUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthUserGravatarUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserInsertInput(ctx context.Context, v any) (*model.ConfigAuthUserInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthUserLocale2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocale(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthUserLocale) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthUserLocale(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthUserLocaleComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthUserLocaleComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthUserLocaleComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthUserLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthUserLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserLocaleComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserLocaleComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserLocaleInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleInsertInput(ctx context.Context, v any) (*model.ConfigAuthUserLocaleInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserLocaleInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserLocaleUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserLocaleUpdateInput(ctx context.Context, v any) (*model.ConfigAuthUserLocaleUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthUserLocaleUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthUserRoles2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRoles(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAuthUserRoles) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAuthUserRoles(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAuthUserRolesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthUserRolesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthUserRolesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthUserRolesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthUserRolesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesComparisonExp(ctx context.Context, v any) (*model.ConfigAuthUserRolesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserRolesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserRolesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesInsertInput(ctx context.Context, v any) (*model.ConfigAuthUserRolesInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthUserRolesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserRolesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserRolesUpdateInput(ctx context.Context, v any) (*model.ConfigAuthUserRolesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthUserRolesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthUserUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthUserUpdateInput(ctx context.Context, v any) (*model.ConfigAuthUserUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAuthUserUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigAuthsessionaccessTokenCustomClaims2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigAuthsessionaccessTokenCustomClaims) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigAuthsessionaccessTokenCustomClaims2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaims(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAuthsessionaccessTokenCustomClaimsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthsessionaccessTokenCustomClaimsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthsessionaccessTokenCustomClaimsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx context.Context, v any) (*model.ConfigAuthsessionaccessTokenCustomClaimsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAuthsessionaccessTokenCustomClaimsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAuthsessionaccessTokenCustomClaimsInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigAuthsessionaccessTokenCustomClaimsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthsessionaccessTokenCustomClaimsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthsessionaccessTokenCustomClaimsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAuthsessionaccessTokenCustomClaimsUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigAuthsessionaccessTokenCustomClaimsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAuthsessionaccessTokenCustomClaimsUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAuthsessionaccessTokenCustomClaimsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAuthsessionaccessTokenCustomClaimsUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigAutoscaler2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscaler(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAutoscaler) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAutoscaler(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigAutoscalerComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigAutoscalerComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigAutoscalerComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigAutoscalerComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigAutoscalerComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerComparisonExp(ctx context.Context, v any) (*model.ConfigAutoscalerComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAutoscalerComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAutoscalerInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerInsertInput(ctx context.Context, v any) (*model.ConfigAutoscalerInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigAutoscalerInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigAutoscalerUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigAutoscalerUpdateInput(ctx context.Context, v any) (*model.ConfigAutoscalerUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigAutoscalerUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigBooleanComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[bool], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigClaimMap2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigClaimMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigClaimMap2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMap(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigClaimMapComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigClaimMapComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigClaimMapComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigClaimMapComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigClaimMapComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapComparisonExp(ctx context.Context, v any) (*model.ConfigClaimMapComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigClaimMapComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigClaimMapInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigClaimMapInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigClaimMapInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigClaimMapInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigClaimMapUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigClaimMapUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigClaimMapUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigClaimMapUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigClaimMapUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigComputeResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigComputeResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigComputeResourcesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigComputeResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigComputeResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigComputeResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigComputeResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigComputeResourcesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigComputeResourcesUpdateInput(ctx context.Context, v any) (*model.ConfigComputeResourcesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigComputeResourcesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigConfigComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigConfigComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigConfigComparisonExp(ctx context.Context, v any) (*model.ConfigConfigComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigConfigComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigEmail2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigEmail2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigEmail2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigEmail2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigEmail2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigEmail2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEmailComparisonExp(ctx context.Context, v any) (*model.ConfigEmailComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigEmailComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigEnvironmentVariable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOConfigEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariable(ctx context.Context, sel ast.SelectionSet, v *model.ConfigEnvironmentVariable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigEnvironmentVariable(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigEnvironmentVariableComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigEnvironmentVariableComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigEnvironmentVariableComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableComparisonExp(ctx context.Context, v any) (*model.ConfigEnvironmentVariableComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigEnvironmentVariableComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigEnvironmentVariableInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigEnvironmentVariableInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigEnvironmentVariableInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigEnvironmentVariableInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigEnvironmentVariableUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigEnvironmentVariableUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigEnvironmentVariableUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigEnvironmentVariableUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigEnvironmentVariableUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigFloatComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[float64], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigFloatComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigFunctions2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctions(ctx context.Context, sel ast.SelectionSet, v *model.ConfigFunctions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigFunctions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigFunctionsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigFunctionsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigFunctionsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigFunctionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigFunctionsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsComparisonExp(ctx context.Context, v any) (*model.ConfigFunctionsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigFunctionsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigFunctionsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsInsertInput(ctx context.Context, v any) (*model.ConfigFunctionsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigFunctionsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigFunctionsNode2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNode(ctx context.Context, sel ast.SelectionSet, v *model.ConfigFunctionsNode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigFunctionsNode(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigFunctionsNodeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigFunctionsNodeComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigFunctionsNodeComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigFunctionsNodeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigFunctionsNodeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeComparisonExp(ctx context.Context, v any) (*model.ConfigFunctionsNodeComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigFunctionsNodeComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigFunctionsNodeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeInsertInput(ctx context.Context, v any) (*model.ConfigFunctionsNodeInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigFunctionsNodeInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigFunctionsNodeUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsNodeUpdateInput(ctx context.Context, v any) (*model.ConfigFunctionsNodeUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigFunctionsNodeUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigFunctionsResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResources(ctx context.Context, sel ast.SelectionSet, v *model.ConfigFunctionsResources) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigFunctionsResources(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigFunctionsResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigFunctionsResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigFunctionsResourcesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigFunctionsResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigFunctionsResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigFunctionsResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigFunctionsResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigFunctionsResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesInsertInput(ctx context.Context, v any) (*model.ConfigFunctionsResourcesInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigFunctionsResourcesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigFunctionsResourcesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsResourcesUpdateInput(ctx context.Context, v any) (*model.ConfigFunctionsResourcesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigFunctionsResourcesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigFunctionsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigFunctionsUpdateInput(ctx context.Context, v any) (*model.ConfigFunctionsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigFunctionsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigGlobal2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobal(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGlobal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigGlobal(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigGlobalComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGlobalComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGlobalComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGlobalComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGlobalComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalComparisonExp(ctx context.Context, v any) (*model.ConfigGlobalComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGlobalComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigGlobalEnvironmentVariable2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigGlobalEnvironmentVariable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigGlobalEnvironmentVariable2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigGlobalEnvironmentVariableComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGlobalEnvironmentVariableComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGlobalEnvironmentVariableComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGlobalEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGlobalEnvironmentVariableComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableComparisonExp(ctx context.Context, v any) (*model.ConfigGlobalEnvironmentVariableComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGlobalEnvironmentVariableComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGlobalEnvironmentVariableInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigGlobalEnvironmentVariableInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGlobalEnvironmentVariableInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGlobalEnvironmentVariableInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGlobalEnvironmentVariableUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigGlobalEnvironmentVariableUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGlobalEnvironmentVariableUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGlobalEnvironmentVariableUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalEnvironmentVariableUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGlobalInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalInsertInput(ctx context.Context, v any) (*model.ConfigGlobalInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGlobalInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGlobalUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGlobalUpdateInput(ctx context.Context, v any) (*model.ConfigGlobalUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigGlobalUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigGrafanaAlerting2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlerting(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafanaAlerting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigGrafanaAlerting(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigGrafanaAlertingComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanaAlertingComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanaAlertingComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanaAlertingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanaAlertingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaAlertingComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanaAlertingComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaAlertingInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingInsertInput(ctx context.Context, v any) (*model.ConfigGrafanaAlertingInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanaAlertingInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaAlertingUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaAlertingUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanaAlertingUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigGrafanaAlertingUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanaComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanaComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanaComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanaComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanaComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigGrafanaContacts2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContacts(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafanaContacts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigGrafanaContacts(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigGrafanaContactsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanaContactsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanaContactsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanaContactsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanaContactsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaContactsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanaContactsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaContactsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsInsertInput(ctx context.Context, v any) (*model.ConfigGrafanaContactsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanaContactsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaContactsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaContactsUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanaContactsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigGrafanaContactsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigGrafanaSmtp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtp(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGrafanaSmtp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigGrafanaSmtp(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigGrafanaSmtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanaSmtpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanaSmtpComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanaSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanaSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanaSmtpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanaSmtpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaSmtpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpInsertInput(ctx context.Context, v any) (*model.ConfigGrafanaSmtpInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanaSmtpInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaSmtpUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaSmtpUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanaSmtpUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigGrafanaSmtpUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanaUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanaUpdateInput(ctx context.Context, v any) (*model.ConfigGrafanaUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigGrafanaUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigGrafanacontactsDiscord2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigGrafanacontactsDiscord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigGrafanacontactsDiscord2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsDiscordComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsDiscordComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsDiscordComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsDiscordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsDiscordComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsDiscordComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanacontactsDiscordComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsDiscordInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsDiscordInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsDiscordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsDiscordInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsDiscordUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsDiscordUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsDiscordUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsDiscordUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsDiscordUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigGrafanacontactsPagerduty2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigGrafanacontactsPagerduty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigGrafanacontactsPagerduty2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerduty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsPagerdutyComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsPagerdutyComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsPagerdutyComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsPagerdutyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsPagerdutyComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsPagerdutyComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanacontactsPagerdutyComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsPagerdutyInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsPagerdutyInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsPagerdutyInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsPagerdutyInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsPagerdutyUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsPagerdutyUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsPagerdutyUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsPagerdutyUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsPagerdutyUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigGrafanacontactsSlack2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigGrafanacontactsSlack) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigGrafanacontactsSlack2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlack(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsSlackComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsSlackComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsSlackComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsSlackComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsSlackComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsSlackComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanacontactsSlackComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsSlackInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsSlackInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsSlackInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsSlackInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsSlackUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsSlackUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsSlackUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsSlackUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsSlackUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigGrafanacontactsWebhook2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigGrafanacontactsWebhook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigGrafanacontactsWebhook2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhook(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsWebhookComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsWebhookComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsWebhookComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsWebhookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsWebhookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookComparisonExp(ctx context.Context, v any) (*model.ConfigGrafanacontactsWebhookComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGrafanacontactsWebhookComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsWebhookInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsWebhookInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsWebhookInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsWebhookInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGrafanacontactsWebhookUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigGrafanacontactsWebhookUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGrafanacontactsWebhookUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGrafanacontactsWebhookUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGrafanacontactsWebhookUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigGraphql2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphql(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGraphql) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigGraphql(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigGraphqlComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGraphqlComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGraphqlComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlComparisonExp(ctx context.Context, v any) (*model.ConfigGraphqlComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGraphqlComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGraphqlInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlInsertInput(ctx context.Context, v any) (*model.ConfigGraphqlInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGraphqlInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigGraphqlSecurity2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurity(ctx context.Context, sel ast.SelectionSet, v *model.ConfigGraphqlSecurity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigGraphqlSecurity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigGraphqlSecurityComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigGraphqlSecurityComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigGraphqlSecurityComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigGraphqlSecurityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigGraphqlSecurityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityComparisonExp(ctx context.Context, v any) (*model.ConfigGraphqlSecurityComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGraphqlSecurityComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGraphqlSecurityInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityInsertInput(ctx context.Context, v any) (*model.ConfigGraphqlSecurityInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigGraphqlSecurityInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGraphqlSecurityUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlSecurityUpdateInput(ctx context.Context, v any) (*model.ConfigGraphqlSecurityUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigGraphqlSecurityUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigGraphqlUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigGraphqlUpdateInput(ctx context.Context, v any) (*model.ConfigGraphqlUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigGraphqlUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraAPIs2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigHasuraAPIs2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigHasuraAPIs2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigHasuraAPIs2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigHasuraAPIs2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigHasuraAPIs2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigHasuraAPIsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAPIsComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraAPIsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraAPIsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigHasuraAuthHook2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHook(ctx context.Context, sel ast.SelectionSet, v *model.ConfigHasuraAuthHook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigHasuraAuthHook(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigHasuraAuthHookComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigHasuraAuthHookComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigHasuraAuthHookComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigHasuraAuthHookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigHasuraAuthHookComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraAuthHookComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraAuthHookComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraAuthHookInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookInsertInput(ctx context.Context, v any) (*model.ConfigHasuraAuthHookInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraAuthHookInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraAuthHookUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraAuthHookUpdateInput(ctx context.Context, v any) (*model.ConfigHasuraAuthHookUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigHasuraAuthHookUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigHasuraComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigHasuraComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigHasuraComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigHasuraComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigHasuraEvents2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEvents(ctx context.Context, sel ast.SelectionSet, v *model.ConfigHasuraEvents) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigHasuraEvents(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigHasuraEventsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigHasuraEventsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigHasuraEventsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigHasuraEventsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigHasuraEventsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraEventsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraEventsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraEventsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsInsertInput(ctx context.Context, v any) (*model.ConfigHasuraEventsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraEventsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraEventsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraEventsUpdateInput(ctx context.Context, v any) (*model.ConfigHasuraEventsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigHasuraEventsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigHasuraLogs2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogs(ctx context.Context, sel ast.SelectionSet, v *model.ConfigHasuraLogs) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigHasuraLogs(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigHasuraLogsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigHasuraLogsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigHasuraLogsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigHasuraLogsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigHasuraLogsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraLogsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraLogsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraLogsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsInsertInput(ctx context.Context, v any) (*model.ConfigHasuraLogsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraLogsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraLogsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraLogsUpdateInput(ctx context.Context, v any) (*model.ConfigHasuraLogsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigHasuraLogsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigHasuraSettings2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettings(ctx context.Context, sel ast.SelectionSet, v *model.ConfigHasuraSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigHasuraSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigHasuraSettingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigHasuraSettingsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigHasuraSettingsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigHasuraSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigHasuraSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsComparisonExp(ctx context.Context, v any) (*model.ConfigHasuraSettingsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraSettingsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraSettingsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsInsertInput(ctx context.Context, v any) (*model.ConfigHasuraSettingsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHasuraSettingsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraSettingsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraSettingsUpdateInput(ctx context.Context, v any) (*model.ConfigHasuraSettingsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigHasuraSettingsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHasuraUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHasuraUpdateInput(ctx context.Context, v any) (*model.ConfigHasuraUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigHasuraUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigHealthCheck2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheck(ctx context.Context, sel ast.SelectionSet, v *model.ConfigHealthCheck) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigHealthCheck(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigHealthCheckComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigHealthCheckComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigHealthCheckComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigHealthCheckComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigHealthCheckComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckComparisonExp(ctx context.Context, v any) (*model.ConfigHealthCheckComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHealthCheckComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHealthCheckInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckInsertInput(ctx context.Context, v any) (*model.ConfigHealthCheckInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigHealthCheckInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigHealthCheckUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigHealthCheckUpdateInput(ctx context.Context, v any) (*model.ConfigHealthCheckUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigHealthCheckUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigIngress2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigIngress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigIngress2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigIngressComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigIngressComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigIngressComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigIngressComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigIngressComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressComparisonExp(ctx context.Context, v any) (*model.ConfigIngressComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigIngressComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigIngressInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigIngressInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigIngressInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigIngressInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigIngressTls2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTls(ctx context.Context, sel ast.SelectionSet, v *model.ConfigIngressTls) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigIngressTls(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigIngressTlsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigIngressTlsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigIngressTlsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigIngressTlsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigIngressTlsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsComparisonExp(ctx context.Context, v any) (*model.ConfigIngressTlsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigIngressTlsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigIngressTlsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsInsertInput(ctx context.Context, v any) (*model.ConfigIngressTlsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigIngressTlsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigIngressTlsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressTlsUpdateInput(ctx context.Context, v any) (*model.ConfigIngressTlsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigIngressTlsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigIngressUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigIngressUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigIngressUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigIngressUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigIngressUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigInt162ᚕint16ᚄ(ctx context.Context, v any) ([]int16, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int16, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigInt162int16(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigInt162ᚕint16ᚄ(ctx context.Context, sel ast.SelectionSet, v []int16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigInt162int16(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigInt162ᚖint16(ctx context.Context, v any) (*int16, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalInt16(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigInt162ᚖint16(ctx context.Context, sel ast.SelectionSet, v *int16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := types.MarshalInt16(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigInt322ᚕint32ᚄ(ctx context.Context, v any) ([]int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigInt322int32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigInt322ᚕint32ᚄ(ctx context.Context, sel ast.SelectionSet, v []int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigInt322int32(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigInt322ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigInt322ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigInt32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[int32], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigInt32ComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigInt642ᚕint64ᚄ(ctx context.Context, v any) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigInt642int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigInt642ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigInt642int64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigInt642ᚖint64(ctx context.Context, v any) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigInt82ᚕint8ᚄ(ctx context.Context, v any) ([]int8, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int8, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigInt82int8(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigInt82ᚕint8ᚄ(ctx context.Context, sel ast.SelectionSet, v []int8) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigInt82int8(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigInt82ᚖint8(ctx context.Context, v any) (*int8, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalInt8(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigInt82ᚖint8(ctx context.Context, sel ast.SelectionSet, v *int8) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := types.MarshalInt8(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigIntComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[int], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigJWTSecret2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigJWTSecret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigJWTSecret2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecret(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigJWTSecretComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigJWTSecretComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigJWTSecretComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigJWTSecretComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigJWTSecretComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretComparisonExp(ctx context.Context, v any) (*model.ConfigJWTSecretComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigJWTSecretComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigJWTSecretInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigJWTSecretInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigJWTSecretInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigJWTSecretInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigJWTSecretUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigJWTSecretUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigJWTSecretUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigJWTSecretUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigJWTSecretUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigLocale2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigLocale2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigLocale2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigLocale2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigLocale2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigLocale2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigLocaleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigLocaleComparisonExp(ctx context.Context, v any) (*model.ConfigLocaleComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigLocaleComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigNetworking2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworking(ctx context.Context, sel ast.SelectionSet, v *model.ConfigNetworking) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigNetworking(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigNetworkingComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigNetworkingComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigNetworkingComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigNetworkingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigNetworkingComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingComparisonExp(ctx context.Context, v any) (*model.ConfigNetworkingComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigNetworkingComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigNetworkingInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingInsertInput(ctx context.Context, v any) (*model.ConfigNetworkingInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigNetworkingInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigNetworkingUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigNetworkingUpdateInput(ctx context.Context, v any) (*model.ConfigNetworkingUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigNetworkingUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigObservabilityComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigObservabilityComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigObservabilityComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigObservabilityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigObservabilityComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityComparisonExp(ctx context.Context, v any) (*model.ConfigObservabilityComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigObservabilityComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigObservabilityUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigObservabilityUpdateInput(ctx context.Context, v any) (*model.ConfigObservabilityUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigObservabilityUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPort2ᚕuint16ᚄ(ctx context.Context, v any) ([]uint16, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uint16, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigPort2uint16(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigPort2ᚕuint16ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigPort2uint16(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigPort2ᚖuint16(ctx context.Context, v any) (*uint16, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalUint16(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigPort2ᚖuint16(ctx context.Context, sel ast.SelectionSet, v *uint16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := types.MarshalUint16(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigPortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPortComparisonExp(ctx context.Context, v any) (*model.ConfigPortComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPortComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigPostgresComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigPostgresComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPostgresComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigPostgresPitr2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitr(ctx context.Context, sel ast.SelectionSet, v *model.ConfigPostgresPitr) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigPostgresPitr(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigPostgresPitrComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigPostgresPitrComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigPostgresPitrComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigPostgresPitrComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigPostgresPitrComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresPitrComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPostgresPitrComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresPitrInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrInsertInput(ctx context.Context, v any) (*model.ConfigPostgresPitrInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPostgresPitrInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresPitrUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresPitrUpdateInput(ctx context.Context, v any) (*model.ConfigPostgresPitrUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigPostgresPitrUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigPostgresResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigPostgresResourcesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigPostgresResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigPostgresResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPostgresResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresResourcesStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigPostgresResourcesStorageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigPostgresResourcesStorageComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigPostgresResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigPostgresResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresResourcesStorageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPostgresResourcesStorageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresResourcesStorageUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesStorageUpdateInput(ctx context.Context, v any) (*model.ConfigPostgresResourcesStorageUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigPostgresResourcesStorageUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresResourcesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresResourcesUpdateInput(ctx context.Context, v any) (*model.ConfigPostgresResourcesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigPostgresResourcesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigPostgresSettings2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettings(ctx context.Context, sel ast.SelectionSet, v *model.ConfigPostgresSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigPostgresSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigPostgresSettingsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigPostgresSettingsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigPostgresSettingsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigPostgresSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigPostgresSettingsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsComparisonExp(ctx context.Context, v any) (*model.ConfigPostgresSettingsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPostgresSettingsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresSettingsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsInsertInput(ctx context.Context, v any) (*model.ConfigPostgresSettingsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigPostgresSettingsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresSettingsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresSettingsUpdateInput(ctx context.Context, v any) (*model.ConfigPostgresSettingsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigPostgresSettingsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigPostgresUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigPostgresUpdateInput(ctx context.Context, v any) (*model.ConfigPostgresUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigPostgresUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigProvider2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProvider(ctx context.Context, sel ast.SelectionSet, v *model.ConfigProvider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigProviderComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigProviderComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigProviderComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderComparisonExp(ctx context.Context, v any) (*model.ConfigProviderComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigProviderComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigProviderInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderInsertInput(ctx context.Context, v any) (*model.ConfigProviderInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigProviderInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigProviderUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigProviderUpdateInput(ctx context.Context, v any) (*model.ConfigProviderUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigProviderUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigRateLimit2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimit(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRateLimit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigRateLimit(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigRateLimitComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigRateLimitComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRateLimitComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRateLimitComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitComparisonExp(ctx context.Context, v any) (*model.ConfigRateLimitComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRateLimitComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigRateLimitInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitInsertInput(ctx context.Context, v any) (*model.ConfigRateLimitInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRateLimitInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigRateLimitUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRateLimitUpdateInput(ctx context.Context, v any) (*model.ConfigRateLimitUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigRateLimitUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigResources2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResources(ctx context.Context, sel ast.SelectionSet, v *model.ConfigResources) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigResources(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigResourcesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigResourcesCompute2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesCompute(ctx context.Context, sel ast.SelectionSet, v *model.ConfigResourcesCompute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigResourcesCompute(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigResourcesComputeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigResourcesComputeComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigResourcesComputeComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigResourcesComputeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigResourcesComputeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeComparisonExp(ctx context.Context, v any) (*model.ConfigResourcesComputeComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigResourcesComputeComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigResourcesComputeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeInsertInput(ctx context.Context, v any) (*model.ConfigResourcesComputeInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigResourcesComputeInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigResourcesComputeUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesComputeUpdateInput(ctx context.Context, v any) (*model.ConfigResourcesComputeUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigResourcesComputeUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigResourcesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesInsertInput(ctx context.Context, v any) (*model.ConfigResourcesInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigResourcesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigResourcesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigResourcesUpdateInput(ctx context.Context, v any) (*model.ConfigResourcesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigResourcesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigRunServiceConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigRunServiceConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigRunServiceConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigRunServiceConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigRunServiceConfigComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServiceConfigComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServiceConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServiceConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceConfigComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceConfigComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRunServiceConfigComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigRunServiceImageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigRunServiceImageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServiceImageComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServiceImageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServiceImageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceImageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRunServiceImageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigRunServiceImageUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceImageUpdateInput(ctx context.Context, v any) (*model.ConfigRunServiceImageUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigRunServiceImageUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigRunServiceName2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServiceName2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigRunServiceName2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigRunServiceName2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigRunServiceName2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigRunServiceName2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigRunServiceNameComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceNameComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceNameComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRunServiceNameComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigRunServicePort2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigRunServicePort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigRunServicePort2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePort(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigRunServicePortComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigRunServicePortComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServicePortComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServicePortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServicePortComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortComparisonExp(ctx context.Context, v any) (*model.ConfigRunServicePortComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRunServicePortComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigRunServicePortInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigRunServicePortInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServicePortInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServicePortInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServicePortUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigRunServicePortUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServicePortUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServicePortUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServicePortUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServiceResourcesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigRunServiceResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServiceResourcesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServiceResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServiceResourcesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceResourcesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRunServiceResourcesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigRunServiceResourcesStorage2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigRunServiceResourcesStorage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConfigRunServiceResourcesStorage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigRunServiceResourcesStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigRunServiceResourcesStorageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServiceResourcesStorageComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServiceResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServiceResourcesStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageComparisonExp(ctx context.Context, v any) (*model.ConfigRunServiceResourcesStorageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigRunServiceResourcesStorageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigRunServiceResourcesStorageInsertInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageInsertInputᚄ(ctx context.Context, v any) ([]*model.ConfigRunServiceResourcesStorageInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServiceResourcesStorageInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServiceResourcesStorageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServiceResourcesStorageUpdateInput2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageUpdateInputᚄ(ctx context.Context, v any) ([]*model.ConfigRunServiceResourcesStorageUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigRunServiceResourcesStorageUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigRunServiceResourcesStorageUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesStorageUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigRunServiceResourcesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigRunServiceResourcesUpdateInput(ctx context.Context, v any) (*model.ConfigRunServiceResourcesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigRunServiceResourcesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigSms2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSms(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSms) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSms(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigSmsComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSmsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSmsComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSmsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSmsComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsComparisonExp(ctx context.Context, v any) (*model.ConfigSmsComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSmsComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSmsInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsInsertInput(ctx context.Context, v any) (*model.ConfigSmsInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSmsInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSmsUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmsUpdateInput(ctx context.Context, v any) (*model.ConfigSmsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSmsUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigSmtp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtp(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSmtp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSmtp(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigSmtpComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSmtpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSmtpComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSmtpComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpComparisonExp(ctx context.Context, v any) (*model.ConfigSmtpComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSmtpComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSmtpInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpInsertInput(ctx context.Context, v any) (*model.ConfigSmtpInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSmtpInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSmtpUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSmtpUpdateInput(ctx context.Context, v any) (*model.ConfigSmtpUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSmtpUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigStandardOauthProvider2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProvider(ctx context.Context, sel ast.SelectionSet, v *model.ConfigStandardOauthProvider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigStandardOauthProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigStandardOauthProviderComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigStandardOauthProviderComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigStandardOauthProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderComparisonExp(ctx context.Context, v any) (*model.ConfigStandardOauthProviderComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStandardOauthProviderComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderInsertInput(ctx context.Context, v any) (*model.ConfigStandardOauthProviderInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStandardOauthProviderInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderUpdateInput(ctx context.Context, v any) (*model.ConfigStandardOauthProviderUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigStandardOauthProviderUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigStandardOauthProviderWithScope2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScope(ctx context.Context, sel ast.SelectionSet, v *model.ConfigStandardOauthProviderWithScope) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigStandardOauthProviderWithScope(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigStandardOauthProviderWithScopeComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigStandardOauthProviderWithScopeComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderWithScopeComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeComparisonExp(ctx context.Context, v any) (*model.ConfigStandardOauthProviderWithScopeComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStandardOauthProviderWithScopeComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderWithScopeInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeInsertInput(ctx context.Context, v any) (*model.ConfigStandardOauthProviderWithScopeInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStandardOauthProviderWithScopeInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStandardOauthProviderWithScopeUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStandardOauthProviderWithScopeUpdateInput(ctx context.Context, v any) (*model.ConfigStandardOauthProviderWithScopeUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigStandardOauthProviderWithScopeUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigStorage2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorage(ctx context.Context, sel ast.SelectionSet, v *model.ConfigStorage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigStorage(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigStorageAntivirus2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirus(ctx context.Context, sel ast.SelectionSet, v *model.ConfigStorageAntivirus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigStorageAntivirus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigStorageAntivirusComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigStorageAntivirusComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigStorageAntivirusComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigStorageAntivirusComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigStorageAntivirusComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusComparisonExp(ctx context.Context, v any) (*model.ConfigStorageAntivirusComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStorageAntivirusComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStorageAntivirusInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusInsertInput(ctx context.Context, v any) (*model.ConfigStorageAntivirusInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStorageAntivirusInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStorageAntivirusUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageAntivirusUpdateInput(ctx context.Context, v any) (*model.ConfigStorageAntivirusUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigStorageAntivirusUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStorageComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigStorageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigStorageComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigStorageComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageComparisonExp(ctx context.Context, v any) (*model.ConfigStorageComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStorageComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStorageInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageInsertInput(ctx context.Context, v any) (*model.ConfigStorageInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStorageInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStorageUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigStorageUpdateInput(ctx context.Context, v any) (*model.ConfigStorageUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigStorageUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[string], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigSystemConfig2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSystemConfig(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigSystemConfigAuth2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuth(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfigAuth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSystemConfigAuth(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigAuthComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigAuthComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigAuthComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigAuthComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigSystemConfigAuthEmail2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmail(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfigAuthEmail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSystemConfigAuthEmail(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigAuthEmailComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigAuthEmailComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigAuthEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigAuthEmailComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailInsertInput(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigAuthEmailInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigSystemConfigAuthEmailTemplates2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplates(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfigAuthEmailTemplates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSystemConfigAuthEmailTemplates(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigAuthEmailTemplatesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigAuthEmailTemplatesComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailTemplatesComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailTemplatesComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigAuthEmailTemplatesComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailTemplatesInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesInsertInput(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailTemplatesInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigAuthEmailTemplatesInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailTemplatesUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailTemplatesUpdateInput(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailTemplatesUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSystemConfigAuthEmailTemplatesUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthEmailUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthEmailUpdateInput(ctx context.Context, v any) (*model.ConfigSystemConfigAuthEmailUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSystemConfigAuthEmailUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthInsertInput(ctx context.Context, v any) (*model.ConfigSystemConfigAuthInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigAuthInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigAuthUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigAuthUpdateInput(ctx context.Context, v any) (*model.ConfigSystemConfigAuthUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSystemConfigAuthUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigSystemConfigGraphql2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphql(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfigGraphql) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSystemConfigGraphql(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigSystemConfigGraphqlComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigGraphqlComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigGraphqlComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigGraphqlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigGraphqlComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigGraphqlComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigGraphqlInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlInsertInput(ctx context.Context, v any) (*model.ConfigSystemConfigGraphqlInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigGraphqlInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigGraphqlUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigGraphqlUpdateInput(ctx context.Context, v any) (*model.ConfigSystemConfigGraphqlUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSystemConfigGraphqlUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigPostgresComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigPostgresComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigPostgresComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresConnectionStringComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigPostgresConnectionStringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigPostgresConnectionStringComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigPostgresConnectionStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresConnectionStringComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresConnectionStringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigPostgresConnectionStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresConnectionStringUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresConnectionStringUpdateInput(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresConnectionStringUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSystemConfigPostgresConnectionStringUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigSystemConfigPostgresDisk2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDisk(ctx context.Context, sel ast.SelectionSet, v *model.ConfigSystemConfigPostgresDisk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigSystemConfigPostgresDisk(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresDiskComparisonExp2ᚕᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExpᚄ(ctx context.Context, v any) ([]*model.ConfigSystemConfigPostgresDiskComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ConfigSystemConfigPostgresDiskComparisonExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigSystemConfigPostgresDiskComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresDiskComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskComparisonExp(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresDiskComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigPostgresDiskComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresDiskInsertInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskInsertInput(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresDiskInsertInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigSystemConfigPostgresDiskInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresDiskUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresDiskUpdateInput(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresDiskUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSystemConfigPostgresDiskUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigSystemConfigPostgresUpdateInput2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigSystemConfigPostgresUpdateInput(ctx context.Context, v any) (*model.ConfigSystemConfigPostgresUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ConfigSystemConfigPostgresUpdateInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigUint162ᚕuint16ᚄ(ctx context.Context, v any) ([]uint16, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uint16, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigUint162uint16(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigUint162ᚕuint16ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigUint162uint16(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigUint162ᚖuint16(ctx context.Context, v any) (*uint16, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalUint16(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigUint162ᚖuint16(ctx context.Context, sel ast.SelectionSet, v *uint16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := types.MarshalUint16(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigUint2ᚕuintᚄ(ctx context.Context, v any) ([]uint, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uint, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigUint2uint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigUint2ᚕuintᚄ(ctx context.Context, sel ast.SelectionSet, v []uint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigUint2uint(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigUint2ᚖuint(ctx context.Context, v any) (*uint, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUint(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigUint2ᚖuint(ctx context.Context, sel ast.SelectionSet, v *uint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalUint(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigUint322ᚕuint32ᚄ(ctx context.Context, v any) ([]uint32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uint32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigUint322uint32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigUint322ᚕuint32ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigUint322uint32(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigUint322ᚖuint32(ctx context.Context, v any) (*uint32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUint32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigUint322ᚖuint32(ctx context.Context, sel ast.SelectionSet, v *uint32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalUint32(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigUint32ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[uint32], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigUint32ComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigUint642ᚕuint64ᚄ(ctx context.Context, v any) ([]uint64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uint64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigUint642uint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigUint642ᚕuint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigUint642uint64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigUint642ᚖuint64(ctx context.Context, v any) (*uint64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUint64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigUint642ᚖuint64(ctx context.Context, sel ast.SelectionSet, v *uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalUint64(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigUint82ᚕuint8ᚄ(ctx context.Context, v any) ([]uint8, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uint8, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigUint82uint8(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigUint82ᚕuint8ᚄ(ctx context.Context, sel ast.SelectionSet, v []uint8) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigUint82uint8(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigUint82ᚖuint8(ctx context.Context, v any) (*uint8, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalUint8(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigUint82ᚖuint8(ctx context.Context, sel ast.SelectionSet, v *uint8) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := types.MarshalUint8(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigUint8ComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[uint8], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigUint8ComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigUintComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐGenericComparisonExp(ctx context.Context, v any) (*model.GenericComparisonExp[uint], error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigUintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigUrl2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigUrl2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigUrl2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigUrl2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigUrl2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigUrl2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigUrlComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUrlComparisonExp(ctx context.Context, v any) (*model.ConfigUrlComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigUrlComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigUserRole2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConfigUserRole2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOConfigUserRole2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNConfigUserRole2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOConfigUserRole2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfigUserRole2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOConfigUserRoleComparisonExp2ᚖgithubᚗcomᚋnhostᚋbeᚋservicesᚋmimirᚋmodelᚐConfigUserRoleComparisonExp(ctx context.Context, v any) (*model.ConfigUserRoleComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigUserRoleComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v any) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v any) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
