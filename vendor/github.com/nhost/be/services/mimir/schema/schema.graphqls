directive @hasAppVisibility on ARGUMENT_DEFINITION
directive @hasRole(
    role: [String!]!,
) on FIELD_DEFINITION

scalar uuid


type ConfigAppConfig {
    appID: uuid!
    config: ConfigConfig!
}

type ConfigAppSecrets {
    appID: uuid!
    secrets: [ConfigEnvironmentVariable!]!
}

type ConfigAppSystemConfig {
    appID: uuid!
    systemConfig: ConfigSystemConfig!
}

type ConfigInsertConfigResponse {
    config: ConfigConfig!
    systemConfig: ConfigSystemConfig!
    secrets: [ConfigEnvironmentVariable!]!
}

type ConfigRunServiceConfigWithID {
    serviceID: uuid!
    config: ConfigRunServiceConfig!
}

type InsertRunServiceConfigResponse {
    serviceID: uuid!
    config: ConfigRunServiceConfig!
}

type Query {
    configRawJSON(
        appID: uuid! @hasAppVisibility,
        resolve: Boolean!,
    ):String!

    config(
        appID: uuid! @hasAppVisibility,
        resolve: Boolean!,
    ):ConfigConfig
    configs(
        resolve: Boolean!,
        where: ConfigConfigComparisonExp
    ): [ConfigAppConfig!]! @hasRole(role: ["admin"]),

    appSecrets(
        appID: uuid! @hasAppVisibility,
    ): [ConfigEnvironmentVariable!]!

    appsSecrets: [ConfigAppSecrets!]

    systemConfig(
        appID: uuid! @hasAppVisibility,
    ):ConfigSystemConfig
    systemConfigs(
        where: ConfigSystemConfigComparisonExp
    ): [ConfigAppSystemConfig!]! @hasRole(role: ["admin", "sa:factorio", "sa:bragi", "sa:watchtower"])

    runServiceConfigRawJSON(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        resolve: Boolean!,
    ):String!
    runServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        resolve: Boolean!,
    ): ConfigRunServiceConfig
    runServiceConfigs(
        appID: uuid! @hasAppVisibility,
        resolve: Boolean!,
    ): [ConfigRunServiceConfigWithID!]!
    runServiceConfigsAll(
        resolve: Boolean!,
        where: ConfigRunServiceConfigComparisonExp,
    ): [ConfigRunServiceConfigWithID!]! @hasRole(role: ["admin"]),
}


type Mutation {
    updateConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigConfigUpdateInput!,
    ): ConfigConfig!
    replaceConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigConfigInsertInput!,
    ): ConfigConfig!
    replaceConfigRawJSON(
        appID: uuid! @hasAppVisibility,
        rawJSON: String!,
    ):String!
    insertConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigConfigInsertInput!,
        systemConfig: ConfigSystemConfigInsertInput!,
        secrets: [ConfigEnvironmentVariableInsertInput!],
    ): ConfigInsertConfigResponse!
    deleteConfig(
        appID: uuid! @hasAppVisibility,
    ): ConfigConfig
    changeDatabaseVersion(
        appID: uuid! @hasAppVisibility,
        version: String!,
        force: Boolean,
    ): Boolean!

    insertSecret(
        appID: uuid! @hasAppVisibility,
        secret: ConfigEnvironmentVariableInsertInput!,
    ): ConfigEnvironmentVariable!
    updateSecret(
        appID: uuid! @hasAppVisibility,
        secret: ConfigEnvironmentVariableInsertInput!,
    ): ConfigEnvironmentVariable!
    deleteSecret(
        appID: uuid! @hasAppVisibility,
        key: String!,
    ): ConfigEnvironmentVariable

    updateSystemConfig(
        appID: uuid! @hasAppVisibility,
        systemConfig: ConfigSystemConfigUpdateInput!,
    ): ConfigSystemConfig! @hasRole(role: ["admin", "sa:factorio", "sa:watchtower"])

    insertRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        config: ConfigRunServiceConfigInsertInput!,
    ): InsertRunServiceConfigResponse!
    updateRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        config: ConfigRunServiceConfigUpdateInput!,
    ): ConfigRunServiceConfig!
    replaceRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
        config: ConfigRunServiceConfigInsertInput!,
    ): ConfigRunServiceConfig!
    deleteRunServiceConfig(
        appID: uuid! @hasAppVisibility,
        serviceID: uuid!,
    ): ConfigRunServiceConfig
}
