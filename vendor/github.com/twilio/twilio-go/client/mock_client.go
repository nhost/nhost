// Code generated by MockGen. DO NOT EDIT.
// Source: client/base_client.go

// Package mock_client is a generated GoMock package.
package client

import (
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBaseClient is a mock of BaseClient interface.
type MockBaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockBaseClientMockRecorder
}

// MockBaseClientMockRecorder is the mock recorder for MockBaseClient.
type MockBaseClientMockRecorder struct {
	mock *MockBaseClient
}

// NewMockBaseClient creates a new mock instance.
func NewMockBaseClient(ctrl *gomock.Controller) *MockBaseClient {
	mock := &MockBaseClient{ctrl: ctrl}
	mock.recorder = &MockBaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseClient) EXPECT() *MockBaseClientMockRecorder {
	return m.recorder
}

// AccountSid mocks base method.
func (m *MockBaseClient) AccountSid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSid")
	ret0, _ := ret[0].(string)
	return ret0
}

// AccountSid indicates an expected call of AccountSid.
func (mr *MockBaseClientMockRecorder) AccountSid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSid", reflect.TypeOf((*MockBaseClient)(nil).AccountSid))
}

// SendRequest mocks base method.
func (m *MockBaseClient) SendRequest(method, rawURL string, data url.Values, headers map[string]interface{}, body ...byte) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{method, rawURL, data, headers}
	for _, a := range body {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendRequest", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockBaseClientMockRecorder) SendRequest(method, rawURL, data, headers interface{}, body ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method, rawURL, data, headers}, body...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockBaseClient)(nil).SendRequest), varargs...)
}

// SetTimeout mocks base method.
func (m *MockBaseClient) SetTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", timeout)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockBaseClientMockRecorder) SetTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockBaseClient)(nil).SetTimeout), timeout)
}

func (m *MockBaseClient) OAuth() OAuth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuth")
	ret0, _ := ret[0].(OAuth)
	return ret0
}

// Oauth mocks base method.
func (m *MockBaseClient) SetOauth(auth OAuth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOauth", auth)
}

// OAuth indicates an expected call of OAuth.
func (mr *MockBaseClientMockRecorder) OAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOauth", reflect.TypeOf((*MockBaseClient)(nil).OAuth))
}
