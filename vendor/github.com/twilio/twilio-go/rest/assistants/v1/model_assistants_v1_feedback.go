/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"time"

	"github.com/twilio/twilio-go/client"
)

// AssistantsV1Feedback struct for AssistantsV1Feedback
type AssistantsV1Feedback struct {
	// The Assistant ID.
	AssistantId string `json:"assistant_id"`
	// The Feedback ID.
	Id string `json:"id"`
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Feedback.
	AccountSid string `json:"account_sid,omitempty"`
	// The SID of the User created the Feedback.
	UserSid string `json:"user_sid,omitempty"`
	// The Message ID.
	MessageId string `json:"message_id"`
	// The Score to provide as Feedback (0-1)
	Score float32 `json:"score"`
	// The Session ID.
	SessionId string `json:"session_id"`
	// The text to be given as feedback.
	Text string `json:"text"`
	// The date and time in GMT when the Feedback was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	DateCreated time.Time `json:"date_created"`
	// The date and time in GMT when the Feedback was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	DateUpdated time.Time `json:"date_updated"`
}

func (response *AssistantsV1Feedback) UnmarshalJSON(bytes []byte) (err error) {
	raw := struct {
		AssistantId string      `json:"assistant_id"`
		Id          string      `json:"id"`
		AccountSid  string      `json:"account_sid"`
		UserSid     string      `json:"user_sid"`
		MessageId   string      `json:"message_id"`
		Score       interface{} `json:"score"`
		SessionId   string      `json:"session_id"`
		Text        string      `json:"text"`
		DateCreated time.Time   `json:"date_created"`
		DateUpdated time.Time   `json:"date_updated"`
	}{}

	if err = json.Unmarshal(bytes, &raw); err != nil {
		return err
	}

	*response = AssistantsV1Feedback{
		AssistantId: raw.AssistantId,
		Id:          raw.Id,
		AccountSid:  raw.AccountSid,
		UserSid:     raw.UserSid,
		MessageId:   raw.MessageId,
		SessionId:   raw.SessionId,
		Text:        raw.Text,
		DateCreated: raw.DateCreated,
		DateUpdated: raw.DateUpdated,
	}

	responseScore, err := client.UnmarshalFloat32(&raw.Score)
	if err != nil {
		return err
	}
	response.Score = *responseScore

	return
}
