/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateService'
type CreateServiceParams struct {
	// A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.**
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive.
	CodeLength *int `json:"CodeLength,omitempty"`
	// Whether to perform a lookup with each verification started and return info about the phone number.
	LookupEnabled *bool `json:"LookupEnabled,omitempty"`
	// Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`.
	SkipSmsToLandlines *bool `json:"SkipSmsToLandlines,omitempty"`
	// Whether to ask the user to press a number before delivering the verify code in a phone call.
	DtmfInputRequired *bool `json:"DtmfInputRequired,omitempty"`
	// The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages.
	TtsName *string `json:"TtsName,omitempty"`
	// Whether to pass PSD2 transaction parameters when starting a verification.
	Psd2Enabled *bool `json:"Psd2Enabled,omitempty"`
	// Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: `Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code`
	DoNotShareWarningEnabled *bool `json:"DoNotShareWarningEnabled,omitempty"`
	// Whether to allow sending verifications with a custom code instead of a randomly generated one.
	CustomCodeEnabled *bool `json:"CustomCodeEnabled,omitempty"`
	// Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in `date_created`, please use that one instead.
	PushIncludeDate *bool `json:"Push.IncludeDate,omitempty"`
	// Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
	PushApnCredentialSid *string `json:"Push.ApnCredentialSid,omitempty"`
	// Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
	PushFcmCredentialSid *string `json:"Push.FcmCredentialSid,omitempty"`
	// Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided.
	TotpIssuer *string `json:"Totp.Issuer,omitempty"`
	// Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds
	TotpTimeStep *int `json:"Totp.TimeStep,omitempty"`
	// Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6
	TotpCodeLength *int `json:"Totp.CodeLength,omitempty"`
	// Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1
	TotpSkew *int `json:"Totp.Skew,omitempty"`
	// The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only.
	DefaultTemplateSid *string `json:"DefaultTemplateSid,omitempty"`
	// The SID of the Messaging Service containing WhatsApp Sender(s) that Verify will use to send WhatsApp messages to your users.
	WhatsappMsgServiceSid *string `json:"Whatsapp.MsgServiceSid,omitempty"`
	// The number to use as the WhatsApp Sender that Verify will use to send WhatsApp messages to your users.This WhatsApp Sender must be associated with a Messaging Service SID.
	WhatsappFrom *string `json:"Whatsapp.From,omitempty"`
	// The Relying Party ID for Passkeys. This is the domain of your application, e.g. `example.com`. It is used to identify your application when creating Passkeys.
	PasskeysRelyingPartyId *string `json:"Passkeys.RelyingParty.Id,omitempty"`
	// The Relying Party Name for Passkeys. This is the name of your application, e.g. `Example App`. It is used to identify your application when creating Passkeys.
	PasskeysRelyingPartyName *string `json:"Passkeys.RelyingParty.Name,omitempty"`
	// The Relying Party Origins for Passkeys. This is the origin of your application, e.g. `login.example.com,www.example.com`. It is used to identify your application when creating Passkeys, it can have multiple origins split by `,`.
	PasskeysRelyingPartyOrigins *string `json:"Passkeys.RelyingParty.Origins,omitempty"`
	// The Authenticator Attachment for Passkeys. This is the type of authenticator that will be used to create Passkeys. It can be empty or it can have the values `platform`, `cross-platform` or `any`.
	PasskeysAuthenticatorAttachment *string `json:"Passkeys.AuthenticatorAttachment,omitempty"`
	// Indicates whether credentials must be discoverable by the authenticator. It can be empty or it can have the values `required`, `preferred` or `discouraged`.
	PasskeysDiscoverableCredentials *string `json:"Passkeys.DiscoverableCredentials,omitempty"`
	// The User Verification for Passkeys. This is the type of user verification that will be used to create Passkeys. It can be empty or it can have the values `required`, `preferred` or `discouraged`.
	PasskeysUserVerification *string `json:"Passkeys.UserVerification,omitempty"`
	// Whether to allow verifications from the service to reach the stream-events sinks if configured
	VerifyEventSubscriptionEnabled *bool `json:"VerifyEventSubscriptionEnabled,omitempty"`
}

func (params *CreateServiceParams) SetFriendlyName(FriendlyName string) *CreateServiceParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateServiceParams) SetCodeLength(CodeLength int) *CreateServiceParams {
	params.CodeLength = &CodeLength
	return params
}
func (params *CreateServiceParams) SetLookupEnabled(LookupEnabled bool) *CreateServiceParams {
	params.LookupEnabled = &LookupEnabled
	return params
}
func (params *CreateServiceParams) SetSkipSmsToLandlines(SkipSmsToLandlines bool) *CreateServiceParams {
	params.SkipSmsToLandlines = &SkipSmsToLandlines
	return params
}
func (params *CreateServiceParams) SetDtmfInputRequired(DtmfInputRequired bool) *CreateServiceParams {
	params.DtmfInputRequired = &DtmfInputRequired
	return params
}
func (params *CreateServiceParams) SetTtsName(TtsName string) *CreateServiceParams {
	params.TtsName = &TtsName
	return params
}
func (params *CreateServiceParams) SetPsd2Enabled(Psd2Enabled bool) *CreateServiceParams {
	params.Psd2Enabled = &Psd2Enabled
	return params
}
func (params *CreateServiceParams) SetDoNotShareWarningEnabled(DoNotShareWarningEnabled bool) *CreateServiceParams {
	params.DoNotShareWarningEnabled = &DoNotShareWarningEnabled
	return params
}
func (params *CreateServiceParams) SetCustomCodeEnabled(CustomCodeEnabled bool) *CreateServiceParams {
	params.CustomCodeEnabled = &CustomCodeEnabled
	return params
}
func (params *CreateServiceParams) SetPushIncludeDate(PushIncludeDate bool) *CreateServiceParams {
	params.PushIncludeDate = &PushIncludeDate
	return params
}
func (params *CreateServiceParams) SetPushApnCredentialSid(PushApnCredentialSid string) *CreateServiceParams {
	params.PushApnCredentialSid = &PushApnCredentialSid
	return params
}
func (params *CreateServiceParams) SetPushFcmCredentialSid(PushFcmCredentialSid string) *CreateServiceParams {
	params.PushFcmCredentialSid = &PushFcmCredentialSid
	return params
}
func (params *CreateServiceParams) SetTotpIssuer(TotpIssuer string) *CreateServiceParams {
	params.TotpIssuer = &TotpIssuer
	return params
}
func (params *CreateServiceParams) SetTotpTimeStep(TotpTimeStep int) *CreateServiceParams {
	params.TotpTimeStep = &TotpTimeStep
	return params
}
func (params *CreateServiceParams) SetTotpCodeLength(TotpCodeLength int) *CreateServiceParams {
	params.TotpCodeLength = &TotpCodeLength
	return params
}
func (params *CreateServiceParams) SetTotpSkew(TotpSkew int) *CreateServiceParams {
	params.TotpSkew = &TotpSkew
	return params
}
func (params *CreateServiceParams) SetDefaultTemplateSid(DefaultTemplateSid string) *CreateServiceParams {
	params.DefaultTemplateSid = &DefaultTemplateSid
	return params
}
func (params *CreateServiceParams) SetWhatsappMsgServiceSid(WhatsappMsgServiceSid string) *CreateServiceParams {
	params.WhatsappMsgServiceSid = &WhatsappMsgServiceSid
	return params
}
func (params *CreateServiceParams) SetWhatsappFrom(WhatsappFrom string) *CreateServiceParams {
	params.WhatsappFrom = &WhatsappFrom
	return params
}
func (params *CreateServiceParams) SetPasskeysRelyingPartyId(PasskeysRelyingPartyId string) *CreateServiceParams {
	params.PasskeysRelyingPartyId = &PasskeysRelyingPartyId
	return params
}
func (params *CreateServiceParams) SetPasskeysRelyingPartyName(PasskeysRelyingPartyName string) *CreateServiceParams {
	params.PasskeysRelyingPartyName = &PasskeysRelyingPartyName
	return params
}
func (params *CreateServiceParams) SetPasskeysRelyingPartyOrigins(PasskeysRelyingPartyOrigins string) *CreateServiceParams {
	params.PasskeysRelyingPartyOrigins = &PasskeysRelyingPartyOrigins
	return params
}
func (params *CreateServiceParams) SetPasskeysAuthenticatorAttachment(PasskeysAuthenticatorAttachment string) *CreateServiceParams {
	params.PasskeysAuthenticatorAttachment = &PasskeysAuthenticatorAttachment
	return params
}
func (params *CreateServiceParams) SetPasskeysDiscoverableCredentials(PasskeysDiscoverableCredentials string) *CreateServiceParams {
	params.PasskeysDiscoverableCredentials = &PasskeysDiscoverableCredentials
	return params
}
func (params *CreateServiceParams) SetPasskeysUserVerification(PasskeysUserVerification string) *CreateServiceParams {
	params.PasskeysUserVerification = &PasskeysUserVerification
	return params
}
func (params *CreateServiceParams) SetVerifyEventSubscriptionEnabled(VerifyEventSubscriptionEnabled bool) *CreateServiceParams {
	params.VerifyEventSubscriptionEnabled = &VerifyEventSubscriptionEnabled
	return params
}

// Create a new Verification Service.
func (c *ApiService) CreateService(params *CreateServiceParams) (*VerifyV2Service, error) {
	path := "/v2/Services"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.CodeLength != nil {
		data.Set("CodeLength", fmt.Sprint(*params.CodeLength))
	}
	if params != nil && params.LookupEnabled != nil {
		data.Set("LookupEnabled", fmt.Sprint(*params.LookupEnabled))
	}
	if params != nil && params.SkipSmsToLandlines != nil {
		data.Set("SkipSmsToLandlines", fmt.Sprint(*params.SkipSmsToLandlines))
	}
	if params != nil && params.DtmfInputRequired != nil {
		data.Set("DtmfInputRequired", fmt.Sprint(*params.DtmfInputRequired))
	}
	if params != nil && params.TtsName != nil {
		data.Set("TtsName", *params.TtsName)
	}
	if params != nil && params.Psd2Enabled != nil {
		data.Set("Psd2Enabled", fmt.Sprint(*params.Psd2Enabled))
	}
	if params != nil && params.DoNotShareWarningEnabled != nil {
		data.Set("DoNotShareWarningEnabled", fmt.Sprint(*params.DoNotShareWarningEnabled))
	}
	if params != nil && params.CustomCodeEnabled != nil {
		data.Set("CustomCodeEnabled", fmt.Sprint(*params.CustomCodeEnabled))
	}
	if params != nil && params.PushIncludeDate != nil {
		data.Set("Push.IncludeDate", fmt.Sprint(*params.PushIncludeDate))
	}
	if params != nil && params.PushApnCredentialSid != nil {
		data.Set("Push.ApnCredentialSid", *params.PushApnCredentialSid)
	}
	if params != nil && params.PushFcmCredentialSid != nil {
		data.Set("Push.FcmCredentialSid", *params.PushFcmCredentialSid)
	}
	if params != nil && params.TotpIssuer != nil {
		data.Set("Totp.Issuer", *params.TotpIssuer)
	}
	if params != nil && params.TotpTimeStep != nil {
		data.Set("Totp.TimeStep", fmt.Sprint(*params.TotpTimeStep))
	}
	if params != nil && params.TotpCodeLength != nil {
		data.Set("Totp.CodeLength", fmt.Sprint(*params.TotpCodeLength))
	}
	if params != nil && params.TotpSkew != nil {
		data.Set("Totp.Skew", fmt.Sprint(*params.TotpSkew))
	}
	if params != nil && params.DefaultTemplateSid != nil {
		data.Set("DefaultTemplateSid", *params.DefaultTemplateSid)
	}
	if params != nil && params.WhatsappMsgServiceSid != nil {
		data.Set("Whatsapp.MsgServiceSid", *params.WhatsappMsgServiceSid)
	}
	if params != nil && params.WhatsappFrom != nil {
		data.Set("Whatsapp.From", *params.WhatsappFrom)
	}
	if params != nil && params.PasskeysRelyingPartyId != nil {
		data.Set("Passkeys.RelyingParty.Id", *params.PasskeysRelyingPartyId)
	}
	if params != nil && params.PasskeysRelyingPartyName != nil {
		data.Set("Passkeys.RelyingParty.Name", *params.PasskeysRelyingPartyName)
	}
	if params != nil && params.PasskeysRelyingPartyOrigins != nil {
		data.Set("Passkeys.RelyingParty.Origins", *params.PasskeysRelyingPartyOrigins)
	}
	if params != nil && params.PasskeysAuthenticatorAttachment != nil {
		data.Set("Passkeys.AuthenticatorAttachment", *params.PasskeysAuthenticatorAttachment)
	}
	if params != nil && params.PasskeysDiscoverableCredentials != nil {
		data.Set("Passkeys.DiscoverableCredentials", *params.PasskeysDiscoverableCredentials)
	}
	if params != nil && params.PasskeysUserVerification != nil {
		data.Set("Passkeys.UserVerification", *params.PasskeysUserVerification)
	}
	if params != nil && params.VerifyEventSubscriptionEnabled != nil {
		data.Set("VerifyEventSubscriptionEnabled", fmt.Sprint(*params.VerifyEventSubscriptionEnabled))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Delete a specific Verification Service Instance.
func (c *ApiService) DeleteService(Sid string) error {
	path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Fetch specific Verification Service Instance.
func (c *ApiService) FetchService(Sid string) (*VerifyV2Service, error) {
	path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListService'
type ListServiceParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListServiceParams) SetPageSize(PageSize int) *ListServiceParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListServiceParams) SetLimit(Limit int) *ListServiceParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of Service records from the API. Request is executed immediately.
func (c *ApiService) PageService(params *ListServiceParams, pageToken, pageNumber string) (*ListServiceResponse, error) {
	path := "/v2/Services"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListServiceResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists Service records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListService(params *ListServiceParams) ([]VerifyV2Service, error) {
	response, errors := c.StreamService(params)

	records := make([]VerifyV2Service, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams Service records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamService(params *ListServiceParams) (chan VerifyV2Service, chan error) {
	if params == nil {
		params = &ListServiceParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan VerifyV2Service, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageService(params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamService(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamService(response *ListServiceResponse, params *ListServiceParams, recordChannel chan VerifyV2Service, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Services
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListServiceResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListServiceResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListServiceResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListServiceResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}

// Optional parameters for the method 'UpdateService'
type UpdateServiceParams struct {
	// A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.**
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive.
	CodeLength *int `json:"CodeLength,omitempty"`
	// Whether to perform a lookup with each verification started and return info about the phone number.
	LookupEnabled *bool `json:"LookupEnabled,omitempty"`
	// Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`.
	SkipSmsToLandlines *bool `json:"SkipSmsToLandlines,omitempty"`
	// Whether to ask the user to press a number before delivering the verify code in a phone call.
	DtmfInputRequired *bool `json:"DtmfInputRequired,omitempty"`
	// The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages.
	TtsName *string `json:"TtsName,omitempty"`
	// Whether to pass PSD2 transaction parameters when starting a verification.
	Psd2Enabled *bool `json:"Psd2Enabled,omitempty"`
	// Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.**
	DoNotShareWarningEnabled *bool `json:"DoNotShareWarningEnabled,omitempty"`
	// Whether to allow sending verifications with a custom code instead of a randomly generated one.
	CustomCodeEnabled *bool `json:"CustomCodeEnabled,omitempty"`
	// Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter.
	PushIncludeDate *bool `json:"Push.IncludeDate,omitempty"`
	// Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
	PushApnCredentialSid *string `json:"Push.ApnCredentialSid,omitempty"`
	// Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
	PushFcmCredentialSid *string `json:"Push.FcmCredentialSid,omitempty"`
	// Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI.
	TotpIssuer *string `json:"Totp.Issuer,omitempty"`
	// Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds
	TotpTimeStep *int `json:"Totp.TimeStep,omitempty"`
	// Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6
	TotpCodeLength *int `json:"Totp.CodeLength,omitempty"`
	// Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1
	TotpSkew *int `json:"Totp.Skew,omitempty"`
	// The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only.
	DefaultTemplateSid *string `json:"DefaultTemplateSid,omitempty"`
	// The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services) to associate with the Verification Service.
	WhatsappMsgServiceSid *string `json:"Whatsapp.MsgServiceSid,omitempty"`
	// The WhatsApp number to use as the sender of the verification messages. This number must be associated with the WhatsApp Message Service.
	WhatsappFrom *string `json:"Whatsapp.From,omitempty"`
	// The Relying Party ID for Passkeys. This is the domain of your application, e.g. `example.com`. It is used to identify your application when creating Passkeys.
	PasskeysRelyingPartyId *string `json:"Passkeys.RelyingParty.Id,omitempty"`
	// The Relying Party Name for Passkeys. This is the name of your application, e.g. `Example App`. It is used to identify your application when creating Passkeys.
	PasskeysRelyingPartyName *string `json:"Passkeys.RelyingParty.Name,omitempty"`
	// The Relying Party Origins for Passkeys. This is the origin of your application, e.g. `login.example.com,www.example.com`. It is used to identify your application when creating Passkeys, it can have multiple origins split by `,`.
	PasskeysRelyingPartyOrigins *string `json:"Passkeys.RelyingParty.Origins,omitempty"`
	// The Authenticator Attachment for Passkeys. This is the type of authenticator that will be used to create Passkeys. It can be empty or it can have the values `platform`, `cross-platform` or `any`.
	PasskeysAuthenticatorAttachment *string `json:"Passkeys.AuthenticatorAttachment,omitempty"`
	// Indicates whether credentials must be discoverable by the authenticator. It can be empty or it can have the values `required`, `preferred` or `discouraged`.
	PasskeysDiscoverableCredentials *string `json:"Passkeys.DiscoverableCredentials,omitempty"`
	// The User Verification for Passkeys. This is the type of user verification that will be used to create Passkeys. It can be empty or it can have the values `required`, `preferred` or `discouraged`.
	PasskeysUserVerification *string `json:"Passkeys.UserVerification,omitempty"`
	// Whether to allow verifications from the service to reach the stream-events sinks if configured
	VerifyEventSubscriptionEnabled *bool `json:"VerifyEventSubscriptionEnabled,omitempty"`
}

func (params *UpdateServiceParams) SetFriendlyName(FriendlyName string) *UpdateServiceParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *UpdateServiceParams) SetCodeLength(CodeLength int) *UpdateServiceParams {
	params.CodeLength = &CodeLength
	return params
}
func (params *UpdateServiceParams) SetLookupEnabled(LookupEnabled bool) *UpdateServiceParams {
	params.LookupEnabled = &LookupEnabled
	return params
}
func (params *UpdateServiceParams) SetSkipSmsToLandlines(SkipSmsToLandlines bool) *UpdateServiceParams {
	params.SkipSmsToLandlines = &SkipSmsToLandlines
	return params
}
func (params *UpdateServiceParams) SetDtmfInputRequired(DtmfInputRequired bool) *UpdateServiceParams {
	params.DtmfInputRequired = &DtmfInputRequired
	return params
}
func (params *UpdateServiceParams) SetTtsName(TtsName string) *UpdateServiceParams {
	params.TtsName = &TtsName
	return params
}
func (params *UpdateServiceParams) SetPsd2Enabled(Psd2Enabled bool) *UpdateServiceParams {
	params.Psd2Enabled = &Psd2Enabled
	return params
}
func (params *UpdateServiceParams) SetDoNotShareWarningEnabled(DoNotShareWarningEnabled bool) *UpdateServiceParams {
	params.DoNotShareWarningEnabled = &DoNotShareWarningEnabled
	return params
}
func (params *UpdateServiceParams) SetCustomCodeEnabled(CustomCodeEnabled bool) *UpdateServiceParams {
	params.CustomCodeEnabled = &CustomCodeEnabled
	return params
}
func (params *UpdateServiceParams) SetPushIncludeDate(PushIncludeDate bool) *UpdateServiceParams {
	params.PushIncludeDate = &PushIncludeDate
	return params
}
func (params *UpdateServiceParams) SetPushApnCredentialSid(PushApnCredentialSid string) *UpdateServiceParams {
	params.PushApnCredentialSid = &PushApnCredentialSid
	return params
}
func (params *UpdateServiceParams) SetPushFcmCredentialSid(PushFcmCredentialSid string) *UpdateServiceParams {
	params.PushFcmCredentialSid = &PushFcmCredentialSid
	return params
}
func (params *UpdateServiceParams) SetTotpIssuer(TotpIssuer string) *UpdateServiceParams {
	params.TotpIssuer = &TotpIssuer
	return params
}
func (params *UpdateServiceParams) SetTotpTimeStep(TotpTimeStep int) *UpdateServiceParams {
	params.TotpTimeStep = &TotpTimeStep
	return params
}
func (params *UpdateServiceParams) SetTotpCodeLength(TotpCodeLength int) *UpdateServiceParams {
	params.TotpCodeLength = &TotpCodeLength
	return params
}
func (params *UpdateServiceParams) SetTotpSkew(TotpSkew int) *UpdateServiceParams {
	params.TotpSkew = &TotpSkew
	return params
}
func (params *UpdateServiceParams) SetDefaultTemplateSid(DefaultTemplateSid string) *UpdateServiceParams {
	params.DefaultTemplateSid = &DefaultTemplateSid
	return params
}
func (params *UpdateServiceParams) SetWhatsappMsgServiceSid(WhatsappMsgServiceSid string) *UpdateServiceParams {
	params.WhatsappMsgServiceSid = &WhatsappMsgServiceSid
	return params
}
func (params *UpdateServiceParams) SetWhatsappFrom(WhatsappFrom string) *UpdateServiceParams {
	params.WhatsappFrom = &WhatsappFrom
	return params
}
func (params *UpdateServiceParams) SetPasskeysRelyingPartyId(PasskeysRelyingPartyId string) *UpdateServiceParams {
	params.PasskeysRelyingPartyId = &PasskeysRelyingPartyId
	return params
}
func (params *UpdateServiceParams) SetPasskeysRelyingPartyName(PasskeysRelyingPartyName string) *UpdateServiceParams {
	params.PasskeysRelyingPartyName = &PasskeysRelyingPartyName
	return params
}
func (params *UpdateServiceParams) SetPasskeysRelyingPartyOrigins(PasskeysRelyingPartyOrigins string) *UpdateServiceParams {
	params.PasskeysRelyingPartyOrigins = &PasskeysRelyingPartyOrigins
	return params
}
func (params *UpdateServiceParams) SetPasskeysAuthenticatorAttachment(PasskeysAuthenticatorAttachment string) *UpdateServiceParams {
	params.PasskeysAuthenticatorAttachment = &PasskeysAuthenticatorAttachment
	return params
}
func (params *UpdateServiceParams) SetPasskeysDiscoverableCredentials(PasskeysDiscoverableCredentials string) *UpdateServiceParams {
	params.PasskeysDiscoverableCredentials = &PasskeysDiscoverableCredentials
	return params
}
func (params *UpdateServiceParams) SetPasskeysUserVerification(PasskeysUserVerification string) *UpdateServiceParams {
	params.PasskeysUserVerification = &PasskeysUserVerification
	return params
}
func (params *UpdateServiceParams) SetVerifyEventSubscriptionEnabled(VerifyEventSubscriptionEnabled bool) *UpdateServiceParams {
	params.VerifyEventSubscriptionEnabled = &VerifyEventSubscriptionEnabled
	return params
}

// Update a specific Verification Service.
func (c *ApiService) UpdateService(Sid string, params *UpdateServiceParams) (*VerifyV2Service, error) {
	path := "/v2/Services/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}
	if params != nil && params.CodeLength != nil {
		data.Set("CodeLength", fmt.Sprint(*params.CodeLength))
	}
	if params != nil && params.LookupEnabled != nil {
		data.Set("LookupEnabled", fmt.Sprint(*params.LookupEnabled))
	}
	if params != nil && params.SkipSmsToLandlines != nil {
		data.Set("SkipSmsToLandlines", fmt.Sprint(*params.SkipSmsToLandlines))
	}
	if params != nil && params.DtmfInputRequired != nil {
		data.Set("DtmfInputRequired", fmt.Sprint(*params.DtmfInputRequired))
	}
	if params != nil && params.TtsName != nil {
		data.Set("TtsName", *params.TtsName)
	}
	if params != nil && params.Psd2Enabled != nil {
		data.Set("Psd2Enabled", fmt.Sprint(*params.Psd2Enabled))
	}
	if params != nil && params.DoNotShareWarningEnabled != nil {
		data.Set("DoNotShareWarningEnabled", fmt.Sprint(*params.DoNotShareWarningEnabled))
	}
	if params != nil && params.CustomCodeEnabled != nil {
		data.Set("CustomCodeEnabled", fmt.Sprint(*params.CustomCodeEnabled))
	}
	if params != nil && params.PushIncludeDate != nil {
		data.Set("Push.IncludeDate", fmt.Sprint(*params.PushIncludeDate))
	}
	if params != nil && params.PushApnCredentialSid != nil {
		data.Set("Push.ApnCredentialSid", *params.PushApnCredentialSid)
	}
	if params != nil && params.PushFcmCredentialSid != nil {
		data.Set("Push.FcmCredentialSid", *params.PushFcmCredentialSid)
	}
	if params != nil && params.TotpIssuer != nil {
		data.Set("Totp.Issuer", *params.TotpIssuer)
	}
	if params != nil && params.TotpTimeStep != nil {
		data.Set("Totp.TimeStep", fmt.Sprint(*params.TotpTimeStep))
	}
	if params != nil && params.TotpCodeLength != nil {
		data.Set("Totp.CodeLength", fmt.Sprint(*params.TotpCodeLength))
	}
	if params != nil && params.TotpSkew != nil {
		data.Set("Totp.Skew", fmt.Sprint(*params.TotpSkew))
	}
	if params != nil && params.DefaultTemplateSid != nil {
		data.Set("DefaultTemplateSid", *params.DefaultTemplateSid)
	}
	if params != nil && params.WhatsappMsgServiceSid != nil {
		data.Set("Whatsapp.MsgServiceSid", *params.WhatsappMsgServiceSid)
	}
	if params != nil && params.WhatsappFrom != nil {
		data.Set("Whatsapp.From", *params.WhatsappFrom)
	}
	if params != nil && params.PasskeysRelyingPartyId != nil {
		data.Set("Passkeys.RelyingParty.Id", *params.PasskeysRelyingPartyId)
	}
	if params != nil && params.PasskeysRelyingPartyName != nil {
		data.Set("Passkeys.RelyingParty.Name", *params.PasskeysRelyingPartyName)
	}
	if params != nil && params.PasskeysRelyingPartyOrigins != nil {
		data.Set("Passkeys.RelyingParty.Origins", *params.PasskeysRelyingPartyOrigins)
	}
	if params != nil && params.PasskeysAuthenticatorAttachment != nil {
		data.Set("Passkeys.AuthenticatorAttachment", *params.PasskeysAuthenticatorAttachment)
	}
	if params != nil && params.PasskeysDiscoverableCredentials != nil {
		data.Set("Passkeys.DiscoverableCredentials", *params.PasskeysDiscoverableCredentials)
	}
	if params != nil && params.PasskeysUserVerification != nil {
		data.Set("Passkeys.UserVerification", *params.PasskeysUserVerification)
	}
	if params != nil && params.VerifyEventSubscriptionEnabled != nil {
		data.Set("VerifyEventSubscriptionEnabled", fmt.Sprint(*params.VerifyEventSubscriptionEnabled))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2Service{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
