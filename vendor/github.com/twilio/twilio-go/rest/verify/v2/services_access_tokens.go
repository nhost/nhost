/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
)

// Optional parameters for the method 'CreateAccessToken'
type CreateAccessTokenParams struct {
	// The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
	Identity *string `json:"Identity,omitempty"`
	//
	FactorType *string `json:"FactorType,omitempty"`
	// The friendly name of the factor that is going to be created with this access token
	FactorFriendlyName *string `json:"FactorFriendlyName,omitempty"`
	// How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60.
	Ttl *int `json:"Ttl,omitempty"`
}

func (params *CreateAccessTokenParams) SetIdentity(Identity string) *CreateAccessTokenParams {
	params.Identity = &Identity
	return params
}
func (params *CreateAccessTokenParams) SetFactorType(FactorType string) *CreateAccessTokenParams {
	params.FactorType = &FactorType
	return params
}
func (params *CreateAccessTokenParams) SetFactorFriendlyName(FactorFriendlyName string) *CreateAccessTokenParams {
	params.FactorFriendlyName = &FactorFriendlyName
	return params
}
func (params *CreateAccessTokenParams) SetTtl(Ttl int) *CreateAccessTokenParams {
	params.Ttl = &Ttl
	return params
}

// Create a new enrollment Access Token for the Entity
func (c *ApiService) CreateAccessToken(ServiceSid string, params *CreateAccessTokenParams) (*VerifyV2AccessToken, error) {
	path := "/v2/Services/{ServiceSid}/AccessTokens"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.Identity != nil {
		data.Set("Identity", *params.Identity)
	}
	if params != nil && params.FactorType != nil {
		data.Set("FactorType", fmt.Sprint(*params.FactorType))
	}
	if params != nil && params.FactorFriendlyName != nil {
		data.Set("FactorFriendlyName", *params.FactorFriendlyName)
	}
	if params != nil && params.Ttl != nil {
		data.Set("Ttl", fmt.Sprint(*params.Ttl))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2AccessToken{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Fetch an Access Token for the Entity
func (c *ApiService) FetchAccessToken(ServiceSid string, Sid string) (*VerifyV2AccessToken, error) {
	path := "/v2/Services/{ServiceSid}/AccessTokens/{Sid}"
	path = strings.Replace(path, "{"+"ServiceSid"+"}", ServiceSid, -1)
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &VerifyV2AccessToken{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
