/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/url"
)

// Optional parameters for the method 'CreateTypingIndicator'
type CreateTypingIndicatorParams struct {
	// Shared channel identifier
	Channel *string `json:"channel,omitempty"`
	// Message SID that identifies the conversation thread for the typing indicator. Must be a valid Twilio Message SID (SM*) or Media SID (MM*) from an existing WhatsApp conversation.
	MessageId *string `json:"messageId,omitempty"`
}

func (params *CreateTypingIndicatorParams) SetChannel(Channel string) *CreateTypingIndicatorParams {
	params.Channel = &Channel
	return params
}
func (params *CreateTypingIndicatorParams) SetMessageId(MessageId string) *CreateTypingIndicatorParams {
	params.MessageId = &MessageId
	return params
}

// Send a typing indicator to notify the recipient that you are composing a message. Currently supported for whatsapp channel only. For WhatsApp, `messageId` is required.
func (c *ApiService) CreateTypingIndicator(params *CreateTypingIndicatorParams) (*CreateTypingIndicatorResponse, error) {
	path := "/v2/Indicators/Typing.json"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.Channel != nil {
		data.Set("channel", *params.Channel)
	}
	if params != nil && params.MessageId != nil {
		data.Set("messageId", *params.MessageId)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &CreateTypingIndicatorResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
