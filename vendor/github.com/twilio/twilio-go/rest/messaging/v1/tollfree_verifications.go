/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'CreateTollfreeVerification'
type CreateTollfreeVerificationParams struct {
	// The name of the business or organization using the Tollfree number.
	BusinessName *string `json:"BusinessName,omitempty"`
	// The website of the business or organization using the Tollfree number.
	BusinessWebsite *string `json:"BusinessWebsite,omitempty"`
	// The email address to receive the notification about the verification result. .
	NotificationEmail *string `json:"NotificationEmail,omitempty"`
	// The category of the use case for the Tollfree Number. List as many are applicable..
	UseCaseCategories *[]string `json:"UseCaseCategories,omitempty"`
	// Use this to further explain how messaging is used by the business or organization.
	UseCaseSummary *string `json:"UseCaseSummary,omitempty"`
	// An example of message content, i.e. a sample message.
	ProductionMessageSample *string `json:"ProductionMessageSample,omitempty"`
	// Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.
	OptInImageUrls *[]string `json:"OptInImageUrls,omitempty"`
	//
	OptInType *string `json:"OptInType,omitempty"`
	// Estimate monthly volume of messages from the Tollfree Number.
	MessageVolume *string `json:"MessageVolume,omitempty"`
	// The SID of the Phone Number associated with the Tollfree Verification.
	TollfreePhoneNumberSid *string `json:"TollfreePhoneNumberSid,omitempty"`
	// Customer's Profile Bundle BundleSid.
	CustomerProfileSid *string `json:"CustomerProfileSid,omitempty"`
	// The address of the business or organization using the Tollfree number.
	BusinessStreetAddress *string `json:"BusinessStreetAddress,omitempty"`
	// The address of the business or organization using the Tollfree number.
	BusinessStreetAddress2 *string `json:"BusinessStreetAddress2,omitempty"`
	// The city of the business or organization using the Tollfree number.
	BusinessCity *string `json:"BusinessCity,omitempty"`
	// The state/province/region of the business or organization using the Tollfree number.
	BusinessStateProvinceRegion *string `json:"BusinessStateProvinceRegion,omitempty"`
	// The postal code of the business or organization using the Tollfree number.
	BusinessPostalCode *string `json:"BusinessPostalCode,omitempty"`
	// The country of the business or organization using the Tollfree number.
	BusinessCountry *string `json:"BusinessCountry,omitempty"`
	// Additional information to be provided for verification.
	AdditionalInformation *string `json:"AdditionalInformation,omitempty"`
	// The first name of the contact for the business or organization using the Tollfree number.
	BusinessContactFirstName *string `json:"BusinessContactFirstName,omitempty"`
	// The last name of the contact for the business or organization using the Tollfree number.
	BusinessContactLastName *string `json:"BusinessContactLastName,omitempty"`
	// The email address of the contact for the business or organization using the Tollfree number.
	BusinessContactEmail *string `json:"BusinessContactEmail,omitempty"`
	// The E.164 formatted phone number of the contact for the business or organization using the Tollfree number.
	BusinessContactPhone *string `json:"BusinessContactPhone,omitempty"`
	// An optional external reference ID supplied by customer and echoed back on status retrieval.
	ExternalReferenceId *string `json:"ExternalReferenceId,omitempty"`
}

func (params *CreateTollfreeVerificationParams) SetBusinessName(BusinessName string) *CreateTollfreeVerificationParams {
	params.BusinessName = &BusinessName
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessWebsite(BusinessWebsite string) *CreateTollfreeVerificationParams {
	params.BusinessWebsite = &BusinessWebsite
	return params
}
func (params *CreateTollfreeVerificationParams) SetNotificationEmail(NotificationEmail string) *CreateTollfreeVerificationParams {
	params.NotificationEmail = &NotificationEmail
	return params
}
func (params *CreateTollfreeVerificationParams) SetUseCaseCategories(UseCaseCategories []string) *CreateTollfreeVerificationParams {
	params.UseCaseCategories = &UseCaseCategories
	return params
}
func (params *CreateTollfreeVerificationParams) SetUseCaseSummary(UseCaseSummary string) *CreateTollfreeVerificationParams {
	params.UseCaseSummary = &UseCaseSummary
	return params
}
func (params *CreateTollfreeVerificationParams) SetProductionMessageSample(ProductionMessageSample string) *CreateTollfreeVerificationParams {
	params.ProductionMessageSample = &ProductionMessageSample
	return params
}
func (params *CreateTollfreeVerificationParams) SetOptInImageUrls(OptInImageUrls []string) *CreateTollfreeVerificationParams {
	params.OptInImageUrls = &OptInImageUrls
	return params
}
func (params *CreateTollfreeVerificationParams) SetOptInType(OptInType string) *CreateTollfreeVerificationParams {
	params.OptInType = &OptInType
	return params
}
func (params *CreateTollfreeVerificationParams) SetMessageVolume(MessageVolume string) *CreateTollfreeVerificationParams {
	params.MessageVolume = &MessageVolume
	return params
}
func (params *CreateTollfreeVerificationParams) SetTollfreePhoneNumberSid(TollfreePhoneNumberSid string) *CreateTollfreeVerificationParams {
	params.TollfreePhoneNumberSid = &TollfreePhoneNumberSid
	return params
}
func (params *CreateTollfreeVerificationParams) SetCustomerProfileSid(CustomerProfileSid string) *CreateTollfreeVerificationParams {
	params.CustomerProfileSid = &CustomerProfileSid
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessStreetAddress(BusinessStreetAddress string) *CreateTollfreeVerificationParams {
	params.BusinessStreetAddress = &BusinessStreetAddress
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessStreetAddress2(BusinessStreetAddress2 string) *CreateTollfreeVerificationParams {
	params.BusinessStreetAddress2 = &BusinessStreetAddress2
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessCity(BusinessCity string) *CreateTollfreeVerificationParams {
	params.BusinessCity = &BusinessCity
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessStateProvinceRegion(BusinessStateProvinceRegion string) *CreateTollfreeVerificationParams {
	params.BusinessStateProvinceRegion = &BusinessStateProvinceRegion
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessPostalCode(BusinessPostalCode string) *CreateTollfreeVerificationParams {
	params.BusinessPostalCode = &BusinessPostalCode
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessCountry(BusinessCountry string) *CreateTollfreeVerificationParams {
	params.BusinessCountry = &BusinessCountry
	return params
}
func (params *CreateTollfreeVerificationParams) SetAdditionalInformation(AdditionalInformation string) *CreateTollfreeVerificationParams {
	params.AdditionalInformation = &AdditionalInformation
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessContactFirstName(BusinessContactFirstName string) *CreateTollfreeVerificationParams {
	params.BusinessContactFirstName = &BusinessContactFirstName
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessContactLastName(BusinessContactLastName string) *CreateTollfreeVerificationParams {
	params.BusinessContactLastName = &BusinessContactLastName
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessContactEmail(BusinessContactEmail string) *CreateTollfreeVerificationParams {
	params.BusinessContactEmail = &BusinessContactEmail
	return params
}
func (params *CreateTollfreeVerificationParams) SetBusinessContactPhone(BusinessContactPhone string) *CreateTollfreeVerificationParams {
	params.BusinessContactPhone = &BusinessContactPhone
	return params
}
func (params *CreateTollfreeVerificationParams) SetExternalReferenceId(ExternalReferenceId string) *CreateTollfreeVerificationParams {
	params.ExternalReferenceId = &ExternalReferenceId
	return params
}

//
func (c *ApiService) CreateTollfreeVerification(params *CreateTollfreeVerificationParams) (*MessagingV1TollfreeVerification, error) {
	path := "/v1/Tollfree/Verifications"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.BusinessName != nil {
		data.Set("BusinessName", *params.BusinessName)
	}
	if params != nil && params.BusinessWebsite != nil {
		data.Set("BusinessWebsite", *params.BusinessWebsite)
	}
	if params != nil && params.NotificationEmail != nil {
		data.Set("NotificationEmail", *params.NotificationEmail)
	}
	if params != nil && params.UseCaseCategories != nil {
		for _, item := range *params.UseCaseCategories {
			data.Add("UseCaseCategories", item)
		}
	}
	if params != nil && params.UseCaseSummary != nil {
		data.Set("UseCaseSummary", *params.UseCaseSummary)
	}
	if params != nil && params.ProductionMessageSample != nil {
		data.Set("ProductionMessageSample", *params.ProductionMessageSample)
	}
	if params != nil && params.OptInImageUrls != nil {
		for _, item := range *params.OptInImageUrls {
			data.Add("OptInImageUrls", item)
		}
	}
	if params != nil && params.OptInType != nil {
		data.Set("OptInType", fmt.Sprint(*params.OptInType))
	}
	if params != nil && params.MessageVolume != nil {
		data.Set("MessageVolume", *params.MessageVolume)
	}
	if params != nil && params.TollfreePhoneNumberSid != nil {
		data.Set("TollfreePhoneNumberSid", *params.TollfreePhoneNumberSid)
	}
	if params != nil && params.CustomerProfileSid != nil {
		data.Set("CustomerProfileSid", *params.CustomerProfileSid)
	}
	if params != nil && params.BusinessStreetAddress != nil {
		data.Set("BusinessStreetAddress", *params.BusinessStreetAddress)
	}
	if params != nil && params.BusinessStreetAddress2 != nil {
		data.Set("BusinessStreetAddress2", *params.BusinessStreetAddress2)
	}
	if params != nil && params.BusinessCity != nil {
		data.Set("BusinessCity", *params.BusinessCity)
	}
	if params != nil && params.BusinessStateProvinceRegion != nil {
		data.Set("BusinessStateProvinceRegion", *params.BusinessStateProvinceRegion)
	}
	if params != nil && params.BusinessPostalCode != nil {
		data.Set("BusinessPostalCode", *params.BusinessPostalCode)
	}
	if params != nil && params.BusinessCountry != nil {
		data.Set("BusinessCountry", *params.BusinessCountry)
	}
	if params != nil && params.AdditionalInformation != nil {
		data.Set("AdditionalInformation", *params.AdditionalInformation)
	}
	if params != nil && params.BusinessContactFirstName != nil {
		data.Set("BusinessContactFirstName", *params.BusinessContactFirstName)
	}
	if params != nil && params.BusinessContactLastName != nil {
		data.Set("BusinessContactLastName", *params.BusinessContactLastName)
	}
	if params != nil && params.BusinessContactEmail != nil {
		data.Set("BusinessContactEmail", *params.BusinessContactEmail)
	}
	if params != nil && params.BusinessContactPhone != nil {
		data.Set("BusinessContactPhone", *params.BusinessContactPhone)
	}
	if params != nil && params.ExternalReferenceId != nil {
		data.Set("ExternalReferenceId", *params.ExternalReferenceId)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MessagingV1TollfreeVerification{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

//
func (c *ApiService) DeleteTollfreeVerification(Sid string) error {
	path := "/v1/Tollfree/Verifications/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

//
func (c *ApiService) FetchTollfreeVerification(Sid string) (*MessagingV1TollfreeVerification, error) {
	path := "/v1/Tollfree/Verifications/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MessagingV1TollfreeVerification{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'ListTollfreeVerification'
type ListTollfreeVerificationParams struct {
	// The SID of the Phone Number associated with the Tollfree Verification.
	TollfreePhoneNumberSid *string `json:"TollfreePhoneNumberSid,omitempty"`
	// The compliance status of the Tollfree Verification record.
	Status *string `json:"Status,omitempty"`
	// Customer supplied reference id for the Tollfree Verification record.
	ExternalReferenceId *string `json:"ExternalReferenceId,omitempty"`
	// Whether to include Tollfree Verifications from sub accounts in list response.
	IncludeSubAccounts *bool `json:"IncludeSubAccounts,omitempty"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `json:"PageSize,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
}

func (params *ListTollfreeVerificationParams) SetTollfreePhoneNumberSid(TollfreePhoneNumberSid string) *ListTollfreeVerificationParams {
	params.TollfreePhoneNumberSid = &TollfreePhoneNumberSid
	return params
}
func (params *ListTollfreeVerificationParams) SetStatus(Status string) *ListTollfreeVerificationParams {
	params.Status = &Status
	return params
}
func (params *ListTollfreeVerificationParams) SetExternalReferenceId(ExternalReferenceId string) *ListTollfreeVerificationParams {
	params.ExternalReferenceId = &ExternalReferenceId
	return params
}
func (params *ListTollfreeVerificationParams) SetIncludeSubAccounts(IncludeSubAccounts bool) *ListTollfreeVerificationParams {
	params.IncludeSubAccounts = &IncludeSubAccounts
	return params
}
func (params *ListTollfreeVerificationParams) SetPageSize(PageSize int) *ListTollfreeVerificationParams {
	params.PageSize = &PageSize
	return params
}
func (params *ListTollfreeVerificationParams) SetLimit(Limit int) *ListTollfreeVerificationParams {
	params.Limit = &Limit
	return params
}

// Retrieve a single page of TollfreeVerification records from the API. Request is executed immediately.
func (c *ApiService) PageTollfreeVerification(params *ListTollfreeVerificationParams, pageToken, pageNumber string) (*ListTollfreeVerificationResponse, error) {
	path := "/v1/Tollfree/Verifications"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.TollfreePhoneNumberSid != nil {
		data.Set("TollfreePhoneNumberSid", *params.TollfreePhoneNumberSid)
	}
	if params != nil && params.Status != nil {
		data.Set("Status", fmt.Sprint(*params.Status))
	}
	if params != nil && params.ExternalReferenceId != nil {
		data.Set("ExternalReferenceId", *params.ExternalReferenceId)
	}
	if params != nil && params.IncludeSubAccounts != nil {
		data.Set("IncludeSubAccounts", fmt.Sprint(*params.IncludeSubAccounts))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTollfreeVerificationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists TollfreeVerification records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListTollfreeVerification(params *ListTollfreeVerificationParams) ([]MessagingV1TollfreeVerification, error) {
	response, errors := c.StreamTollfreeVerification(params)

	records := make([]MessagingV1TollfreeVerification, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams TollfreeVerification records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamTollfreeVerification(params *ListTollfreeVerificationParams) (chan MessagingV1TollfreeVerification, chan error) {
	if params == nil {
		params = &ListTollfreeVerificationParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan MessagingV1TollfreeVerification, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PageTollfreeVerification(params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamTollfreeVerification(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamTollfreeVerification(response *ListTollfreeVerificationResponse, params *ListTollfreeVerificationParams, recordChannel chan MessagingV1TollfreeVerification, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.Verifications
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListTollfreeVerificationResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListTollfreeVerificationResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListTollfreeVerificationResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListTollfreeVerificationResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}

// Optional parameters for the method 'UpdateTollfreeVerification'
type UpdateTollfreeVerificationParams struct {
	// The name of the business or organization using the Tollfree number.
	BusinessName *string `json:"BusinessName,omitempty"`
	// The website of the business or organization using the Tollfree number.
	BusinessWebsite *string `json:"BusinessWebsite,omitempty"`
	// The email address to receive the notification about the verification result. .
	NotificationEmail *string `json:"NotificationEmail,omitempty"`
	// The category of the use case for the Tollfree Number. List as many are applicable..
	UseCaseCategories *[]string `json:"UseCaseCategories,omitempty"`
	// Use this to further explain how messaging is used by the business or organization.
	UseCaseSummary *string `json:"UseCaseSummary,omitempty"`
	// An example of message content, i.e. a sample message.
	ProductionMessageSample *string `json:"ProductionMessageSample,omitempty"`
	// Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.
	OptInImageUrls *[]string `json:"OptInImageUrls,omitempty"`
	//
	OptInType *string `json:"OptInType,omitempty"`
	// Estimate monthly volume of messages from the Tollfree Number.
	MessageVolume *string `json:"MessageVolume,omitempty"`
	// The address of the business or organization using the Tollfree number.
	BusinessStreetAddress *string `json:"BusinessStreetAddress,omitempty"`
	// The address of the business or organization using the Tollfree number.
	BusinessStreetAddress2 *string `json:"BusinessStreetAddress2,omitempty"`
	// The city of the business or organization using the Tollfree number.
	BusinessCity *string `json:"BusinessCity,omitempty"`
	// The state/province/region of the business or organization using the Tollfree number.
	BusinessStateProvinceRegion *string `json:"BusinessStateProvinceRegion,omitempty"`
	// The postal code of the business or organization using the Tollfree number.
	BusinessPostalCode *string `json:"BusinessPostalCode,omitempty"`
	// The country of the business or organization using the Tollfree number.
	BusinessCountry *string `json:"BusinessCountry,omitempty"`
	// Additional information to be provided for verification.
	AdditionalInformation *string `json:"AdditionalInformation,omitempty"`
	// The first name of the contact for the business or organization using the Tollfree number.
	BusinessContactFirstName *string `json:"BusinessContactFirstName,omitempty"`
	// The last name of the contact for the business or organization using the Tollfree number.
	BusinessContactLastName *string `json:"BusinessContactLastName,omitempty"`
	// The email address of the contact for the business or organization using the Tollfree number.
	BusinessContactEmail *string `json:"BusinessContactEmail,omitempty"`
	// The E.164 formatted phone number of the contact for the business or organization using the Tollfree number.
	BusinessContactPhone *string `json:"BusinessContactPhone,omitempty"`
	// Describe why the verification is being edited. If the verification was rejected because of a technical issue, such as the website being down, and the issue has been resolved this parameter should be set to something similar to 'Website fixed'.
	EditReason *string `json:"EditReason,omitempty"`
}

func (params *UpdateTollfreeVerificationParams) SetBusinessName(BusinessName string) *UpdateTollfreeVerificationParams {
	params.BusinessName = &BusinessName
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessWebsite(BusinessWebsite string) *UpdateTollfreeVerificationParams {
	params.BusinessWebsite = &BusinessWebsite
	return params
}
func (params *UpdateTollfreeVerificationParams) SetNotificationEmail(NotificationEmail string) *UpdateTollfreeVerificationParams {
	params.NotificationEmail = &NotificationEmail
	return params
}
func (params *UpdateTollfreeVerificationParams) SetUseCaseCategories(UseCaseCategories []string) *UpdateTollfreeVerificationParams {
	params.UseCaseCategories = &UseCaseCategories
	return params
}
func (params *UpdateTollfreeVerificationParams) SetUseCaseSummary(UseCaseSummary string) *UpdateTollfreeVerificationParams {
	params.UseCaseSummary = &UseCaseSummary
	return params
}
func (params *UpdateTollfreeVerificationParams) SetProductionMessageSample(ProductionMessageSample string) *UpdateTollfreeVerificationParams {
	params.ProductionMessageSample = &ProductionMessageSample
	return params
}
func (params *UpdateTollfreeVerificationParams) SetOptInImageUrls(OptInImageUrls []string) *UpdateTollfreeVerificationParams {
	params.OptInImageUrls = &OptInImageUrls
	return params
}
func (params *UpdateTollfreeVerificationParams) SetOptInType(OptInType string) *UpdateTollfreeVerificationParams {
	params.OptInType = &OptInType
	return params
}
func (params *UpdateTollfreeVerificationParams) SetMessageVolume(MessageVolume string) *UpdateTollfreeVerificationParams {
	params.MessageVolume = &MessageVolume
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessStreetAddress(BusinessStreetAddress string) *UpdateTollfreeVerificationParams {
	params.BusinessStreetAddress = &BusinessStreetAddress
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessStreetAddress2(BusinessStreetAddress2 string) *UpdateTollfreeVerificationParams {
	params.BusinessStreetAddress2 = &BusinessStreetAddress2
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessCity(BusinessCity string) *UpdateTollfreeVerificationParams {
	params.BusinessCity = &BusinessCity
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessStateProvinceRegion(BusinessStateProvinceRegion string) *UpdateTollfreeVerificationParams {
	params.BusinessStateProvinceRegion = &BusinessStateProvinceRegion
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessPostalCode(BusinessPostalCode string) *UpdateTollfreeVerificationParams {
	params.BusinessPostalCode = &BusinessPostalCode
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessCountry(BusinessCountry string) *UpdateTollfreeVerificationParams {
	params.BusinessCountry = &BusinessCountry
	return params
}
func (params *UpdateTollfreeVerificationParams) SetAdditionalInformation(AdditionalInformation string) *UpdateTollfreeVerificationParams {
	params.AdditionalInformation = &AdditionalInformation
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessContactFirstName(BusinessContactFirstName string) *UpdateTollfreeVerificationParams {
	params.BusinessContactFirstName = &BusinessContactFirstName
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessContactLastName(BusinessContactLastName string) *UpdateTollfreeVerificationParams {
	params.BusinessContactLastName = &BusinessContactLastName
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessContactEmail(BusinessContactEmail string) *UpdateTollfreeVerificationParams {
	params.BusinessContactEmail = &BusinessContactEmail
	return params
}
func (params *UpdateTollfreeVerificationParams) SetBusinessContactPhone(BusinessContactPhone string) *UpdateTollfreeVerificationParams {
	params.BusinessContactPhone = &BusinessContactPhone
	return params
}
func (params *UpdateTollfreeVerificationParams) SetEditReason(EditReason string) *UpdateTollfreeVerificationParams {
	params.EditReason = &EditReason
	return params
}

//
func (c *ApiService) UpdateTollfreeVerification(Sid string, params *UpdateTollfreeVerificationParams) (*MessagingV1TollfreeVerification, error) {
	path := "/v1/Tollfree/Verifications/{Sid}"
	path = strings.Replace(path, "{"+"Sid"+"}", Sid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.BusinessName != nil {
		data.Set("BusinessName", *params.BusinessName)
	}
	if params != nil && params.BusinessWebsite != nil {
		data.Set("BusinessWebsite", *params.BusinessWebsite)
	}
	if params != nil && params.NotificationEmail != nil {
		data.Set("NotificationEmail", *params.NotificationEmail)
	}
	if params != nil && params.UseCaseCategories != nil {
		for _, item := range *params.UseCaseCategories {
			data.Add("UseCaseCategories", item)
		}
	}
	if params != nil && params.UseCaseSummary != nil {
		data.Set("UseCaseSummary", *params.UseCaseSummary)
	}
	if params != nil && params.ProductionMessageSample != nil {
		data.Set("ProductionMessageSample", *params.ProductionMessageSample)
	}
	if params != nil && params.OptInImageUrls != nil {
		for _, item := range *params.OptInImageUrls {
			data.Add("OptInImageUrls", item)
		}
	}
	if params != nil && params.OptInType != nil {
		data.Set("OptInType", fmt.Sprint(*params.OptInType))
	}
	if params != nil && params.MessageVolume != nil {
		data.Set("MessageVolume", *params.MessageVolume)
	}
	if params != nil && params.BusinessStreetAddress != nil {
		data.Set("BusinessStreetAddress", *params.BusinessStreetAddress)
	}
	if params != nil && params.BusinessStreetAddress2 != nil {
		data.Set("BusinessStreetAddress2", *params.BusinessStreetAddress2)
	}
	if params != nil && params.BusinessCity != nil {
		data.Set("BusinessCity", *params.BusinessCity)
	}
	if params != nil && params.BusinessStateProvinceRegion != nil {
		data.Set("BusinessStateProvinceRegion", *params.BusinessStateProvinceRegion)
	}
	if params != nil && params.BusinessPostalCode != nil {
		data.Set("BusinessPostalCode", *params.BusinessPostalCode)
	}
	if params != nil && params.BusinessCountry != nil {
		data.Set("BusinessCountry", *params.BusinessCountry)
	}
	if params != nil && params.AdditionalInformation != nil {
		data.Set("AdditionalInformation", *params.AdditionalInformation)
	}
	if params != nil && params.BusinessContactFirstName != nil {
		data.Set("BusinessContactFirstName", *params.BusinessContactFirstName)
	}
	if params != nil && params.BusinessContactLastName != nil {
		data.Set("BusinessContactLastName", *params.BusinessContactLastName)
	}
	if params != nil && params.BusinessContactEmail != nil {
		data.Set("BusinessContactEmail", *params.BusinessContactEmail)
	}
	if params != nil && params.BusinessContactPhone != nil {
		data.Set("BusinessContactPhone", *params.BusinessContactPhone)
	}
	if params != nil && params.EditReason != nil {
		data.Set("EditReason", *params.EditReason)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &MessagingV1TollfreeVerification{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
