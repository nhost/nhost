/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
)

// Optional parameters for the method 'CreateComplianceTollfreeInquiry'
type CreateComplianceTollfreeInquiryParams struct {
	// The Tollfree phone number to be verified
	TollfreePhoneNumber *string `json:"TollfreePhoneNumber,omitempty"`
	// The email address to receive the notification about the verification result.
	NotificationEmail *string `json:"NotificationEmail,omitempty"`
	// The name of the business or organization using the Tollfree number.
	BusinessName *string `json:"BusinessName,omitempty"`
	// The website of the business or organization using the Tollfree number.
	BusinessWebsite *string `json:"BusinessWebsite,omitempty"`
	// The category of the use case for the Tollfree Number. List as many are applicable..
	UseCaseCategories *[]string `json:"UseCaseCategories,omitempty"`
	// Use this to further explain how messaging is used by the business or organization.
	UseCaseSummary *string `json:"UseCaseSummary,omitempty"`
	// An example of message content, i.e. a sample message.
	ProductionMessageSample *string `json:"ProductionMessageSample,omitempty"`
	// Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.
	OptInImageUrls *[]string `json:"OptInImageUrls,omitempty"`
	//
	OptInType *string `json:"OptInType,omitempty"`
	// Estimate monthly volume of messages from the Tollfree Number.
	MessageVolume *string `json:"MessageVolume,omitempty"`
	// The address of the business or organization using the Tollfree number.
	BusinessStreetAddress *string `json:"BusinessStreetAddress,omitempty"`
	// The address of the business or organization using the Tollfree number.
	BusinessStreetAddress2 *string `json:"BusinessStreetAddress2,omitempty"`
	// The city of the business or organization using the Tollfree number.
	BusinessCity *string `json:"BusinessCity,omitempty"`
	// The state/province/region of the business or organization using the Tollfree number.
	BusinessStateProvinceRegion *string `json:"BusinessStateProvinceRegion,omitempty"`
	// The postal code of the business or organization using the Tollfree number.
	BusinessPostalCode *string `json:"BusinessPostalCode,omitempty"`
	// The country of the business or organization using the Tollfree number.
	BusinessCountry *string `json:"BusinessCountry,omitempty"`
	// Additional information to be provided for verification.
	AdditionalInformation *string `json:"AdditionalInformation,omitempty"`
	// The first name of the contact for the business or organization using the Tollfree number.
	BusinessContactFirstName *string `json:"BusinessContactFirstName,omitempty"`
	// The last name of the contact for the business or organization using the Tollfree number.
	BusinessContactLastName *string `json:"BusinessContactLastName,omitempty"`
	// The email address of the contact for the business or organization using the Tollfree number.
	BusinessContactEmail *string `json:"BusinessContactEmail,omitempty"`
	// The phone number of the contact for the business or organization using the Tollfree number.
	BusinessContactPhone *string `json:"BusinessContactPhone,omitempty"`
	// Theme id for styling the inquiry form.
	ThemeSetId *string `json:"ThemeSetId,omitempty"`
	// Skip the messaging use case screen of the inquiry form.
	SkipMessagingUseCase *bool `json:"SkipMessagingUseCase,omitempty"`
}

func (params *CreateComplianceTollfreeInquiryParams) SetTollfreePhoneNumber(TollfreePhoneNumber string) *CreateComplianceTollfreeInquiryParams {
	params.TollfreePhoneNumber = &TollfreePhoneNumber
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetNotificationEmail(NotificationEmail string) *CreateComplianceTollfreeInquiryParams {
	params.NotificationEmail = &NotificationEmail
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessName(BusinessName string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessName = &BusinessName
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessWebsite(BusinessWebsite string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessWebsite = &BusinessWebsite
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetUseCaseCategories(UseCaseCategories []string) *CreateComplianceTollfreeInquiryParams {
	params.UseCaseCategories = &UseCaseCategories
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetUseCaseSummary(UseCaseSummary string) *CreateComplianceTollfreeInquiryParams {
	params.UseCaseSummary = &UseCaseSummary
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetProductionMessageSample(ProductionMessageSample string) *CreateComplianceTollfreeInquiryParams {
	params.ProductionMessageSample = &ProductionMessageSample
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetOptInImageUrls(OptInImageUrls []string) *CreateComplianceTollfreeInquiryParams {
	params.OptInImageUrls = &OptInImageUrls
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetOptInType(OptInType string) *CreateComplianceTollfreeInquiryParams {
	params.OptInType = &OptInType
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetMessageVolume(MessageVolume string) *CreateComplianceTollfreeInquiryParams {
	params.MessageVolume = &MessageVolume
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessStreetAddress(BusinessStreetAddress string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessStreetAddress = &BusinessStreetAddress
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessStreetAddress2(BusinessStreetAddress2 string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessStreetAddress2 = &BusinessStreetAddress2
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessCity(BusinessCity string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessCity = &BusinessCity
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessStateProvinceRegion(BusinessStateProvinceRegion string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessStateProvinceRegion = &BusinessStateProvinceRegion
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessPostalCode(BusinessPostalCode string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessPostalCode = &BusinessPostalCode
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessCountry(BusinessCountry string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessCountry = &BusinessCountry
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetAdditionalInformation(AdditionalInformation string) *CreateComplianceTollfreeInquiryParams {
	params.AdditionalInformation = &AdditionalInformation
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessContactFirstName(BusinessContactFirstName string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessContactFirstName = &BusinessContactFirstName
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessContactLastName(BusinessContactLastName string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessContactLastName = &BusinessContactLastName
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessContactEmail(BusinessContactEmail string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessContactEmail = &BusinessContactEmail
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetBusinessContactPhone(BusinessContactPhone string) *CreateComplianceTollfreeInquiryParams {
	params.BusinessContactPhone = &BusinessContactPhone
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetThemeSetId(ThemeSetId string) *CreateComplianceTollfreeInquiryParams {
	params.ThemeSetId = &ThemeSetId
	return params
}
func (params *CreateComplianceTollfreeInquiryParams) SetSkipMessagingUseCase(SkipMessagingUseCase bool) *CreateComplianceTollfreeInquiryParams {
	params.SkipMessagingUseCase = &SkipMessagingUseCase
	return params
}

// Create a new Compliance Tollfree Verification Inquiry for the authenticated account. This is necessary to start a new embedded session.
func (c *ApiService) CreateComplianceTollfreeInquiry(params *CreateComplianceTollfreeInquiryParams) (*TrusthubV1ComplianceTollfreeInquiry, error) {
	path := "/v1/ComplianceInquiries/Tollfree/Initialize"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.TollfreePhoneNumber != nil {
		data.Set("TollfreePhoneNumber", *params.TollfreePhoneNumber)
	}
	if params != nil && params.NotificationEmail != nil {
		data.Set("NotificationEmail", *params.NotificationEmail)
	}
	if params != nil && params.BusinessName != nil {
		data.Set("BusinessName", *params.BusinessName)
	}
	if params != nil && params.BusinessWebsite != nil {
		data.Set("BusinessWebsite", *params.BusinessWebsite)
	}
	if params != nil && params.UseCaseCategories != nil {
		for _, item := range *params.UseCaseCategories {
			data.Add("UseCaseCategories", item)
		}
	}
	if params != nil && params.UseCaseSummary != nil {
		data.Set("UseCaseSummary", *params.UseCaseSummary)
	}
	if params != nil && params.ProductionMessageSample != nil {
		data.Set("ProductionMessageSample", *params.ProductionMessageSample)
	}
	if params != nil && params.OptInImageUrls != nil {
		for _, item := range *params.OptInImageUrls {
			data.Add("OptInImageUrls", item)
		}
	}
	if params != nil && params.OptInType != nil {
		data.Set("OptInType", fmt.Sprint(*params.OptInType))
	}
	if params != nil && params.MessageVolume != nil {
		data.Set("MessageVolume", *params.MessageVolume)
	}
	if params != nil && params.BusinessStreetAddress != nil {
		data.Set("BusinessStreetAddress", *params.BusinessStreetAddress)
	}
	if params != nil && params.BusinessStreetAddress2 != nil {
		data.Set("BusinessStreetAddress2", *params.BusinessStreetAddress2)
	}
	if params != nil && params.BusinessCity != nil {
		data.Set("BusinessCity", *params.BusinessCity)
	}
	if params != nil && params.BusinessStateProvinceRegion != nil {
		data.Set("BusinessStateProvinceRegion", *params.BusinessStateProvinceRegion)
	}
	if params != nil && params.BusinessPostalCode != nil {
		data.Set("BusinessPostalCode", *params.BusinessPostalCode)
	}
	if params != nil && params.BusinessCountry != nil {
		data.Set("BusinessCountry", *params.BusinessCountry)
	}
	if params != nil && params.AdditionalInformation != nil {
		data.Set("AdditionalInformation", *params.AdditionalInformation)
	}
	if params != nil && params.BusinessContactFirstName != nil {
		data.Set("BusinessContactFirstName", *params.BusinessContactFirstName)
	}
	if params != nil && params.BusinessContactLastName != nil {
		data.Set("BusinessContactLastName", *params.BusinessContactLastName)
	}
	if params != nil && params.BusinessContactEmail != nil {
		data.Set("BusinessContactEmail", *params.BusinessContactEmail)
	}
	if params != nil && params.BusinessContactPhone != nil {
		data.Set("BusinessContactPhone", *params.BusinessContactPhone)
	}
	if params != nil && params.ThemeSetId != nil {
		data.Set("ThemeSetId", *params.ThemeSetId)
	}
	if params != nil && params.SkipMessagingUseCase != nil {
		data.Set("SkipMessagingUseCase", fmt.Sprint(*params.SkipMessagingUseCase))
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1ComplianceTollfreeInquiry{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
