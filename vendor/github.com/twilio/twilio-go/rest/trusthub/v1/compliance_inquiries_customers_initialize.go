/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/url"
	"strings"
)

// Optional parameters for the method 'CreateComplianceInquiry'
type CreateComplianceInquiryParams struct {
	// The unique SID identifier of the Primary Customer Profile that should be used as a parent. Only necessary when creating a secondary Customer Profile.
	PrimaryProfileSid *string `json:"PrimaryProfileSid,omitempty"`
	// The email address that approval status updates will be sent to. If not specified, the email address associated with your primary customer profile will be used.
	NotificationEmail *string `json:"NotificationEmail,omitempty"`
	// Theme id for styling the inquiry form.
	ThemeSetId *string `json:"ThemeSetId,omitempty"`
}

func (params *CreateComplianceInquiryParams) SetPrimaryProfileSid(PrimaryProfileSid string) *CreateComplianceInquiryParams {
	params.PrimaryProfileSid = &PrimaryProfileSid
	return params
}
func (params *CreateComplianceInquiryParams) SetNotificationEmail(NotificationEmail string) *CreateComplianceInquiryParams {
	params.NotificationEmail = &NotificationEmail
	return params
}
func (params *CreateComplianceInquiryParams) SetThemeSetId(ThemeSetId string) *CreateComplianceInquiryParams {
	params.ThemeSetId = &ThemeSetId
	return params
}

// Create a new Compliance Inquiry for the authenticated account. This is necessary to start a new embedded session.
func (c *ApiService) CreateComplianceInquiry(params *CreateComplianceInquiryParams) (*TrusthubV1ComplianceInquiry, error) {
	path := "/v1/ComplianceInquiries/Customers/Initialize"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.PrimaryProfileSid != nil {
		data.Set("PrimaryProfileSid", *params.PrimaryProfileSid)
	}
	if params != nil && params.NotificationEmail != nil {
		data.Set("NotificationEmail", *params.NotificationEmail)
	}
	if params != nil && params.ThemeSetId != nil {
		data.Set("ThemeSetId", *params.ThemeSetId)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1ComplianceInquiry{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'UpdateComplianceInquiry'
type UpdateComplianceInquiryParams struct {
	// The unique SID identifier of the Primary Customer Profile that should be used as a parent. Only necessary when creating a secondary Customer Profile.
	PrimaryProfileSid *string `json:"PrimaryProfileSid,omitempty"`
	// Theme id for styling the inquiry form.
	ThemeSetId *string `json:"ThemeSetId,omitempty"`
}

func (params *UpdateComplianceInquiryParams) SetPrimaryProfileSid(PrimaryProfileSid string) *UpdateComplianceInquiryParams {
	params.PrimaryProfileSid = &PrimaryProfileSid
	return params
}
func (params *UpdateComplianceInquiryParams) SetThemeSetId(ThemeSetId string) *UpdateComplianceInquiryParams {
	params.ThemeSetId = &ThemeSetId
	return params
}

// Resume a specific Compliance Inquiry that has expired, or re-open a rejected Compliance Inquiry for editing.
func (c *ApiService) UpdateComplianceInquiry(CustomerId string, params *UpdateComplianceInquiryParams) (*TrusthubV1ComplianceInquiry, error) {
	path := "/v1/ComplianceInquiries/Customers/{CustomerId}/Initialize"
	path = strings.Replace(path, "{"+"CustomerId"+"}", CustomerId, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.PrimaryProfileSid != nil {
		data.Set("PrimaryProfileSid", *params.PrimaryProfileSid)
	}
	if params != nil && params.ThemeSetId != nil {
		data.Set("ThemeSetId", *params.ThemeSetId)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &TrusthubV1ComplianceInquiry{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
