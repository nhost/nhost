/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
)

// Optional parameters for the method 'CreateHostedNumbersHostedNumberOrder'
type CreateHostedNumbersHostedNumberOrderParams struct {
	// The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// Used to specify that the SMS capability will be hosted on Twilio's platform.
	SmsCapability *bool `json:"smsCapability,omitempty"`
	// This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to.
	AccountSid *string `json:"accountSid,omitempty"`
	// A 64 character string that is a human readable text that describes this resource.
	FriendlyName *string `json:"friendlyName,omitempty"`
	// Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID.
	UniqueName *string `json:"uniqueName,omitempty"`
	// Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to.
	CcEmails *[]string `json:"ccEmails,omitempty"`
	// The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource.
	SmsUrl *string `json:"smsUrl,omitempty"`
	// The HTTP method that should be used to request the SmsUrl. Must be either `GET` or `POST`.  This will be copied onto the IncomingPhoneNumber resource.
	SmsMethod *string `json:"smsMethod,omitempty"`
	// A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource.
	SmsFallbackUrl *string `json:"smsFallbackUrl,omitempty"`
	// The HTTP method that should be used to request the SmsFallbackUrl. Must be either `GET` or `POST`. This will be copied onto the IncomingPhoneNumber resource.
	SmsFallbackMethod *string `json:"smsFallbackMethod,omitempty"`
	// Optional. The Status Callback URL attached to the IncomingPhoneNumber resource.
	StatusCallbackUrl *string `json:"statusCallbackUrl,omitempty"`
	// Optional. The Status Callback Method attached to the IncomingPhoneNumber resource.
	StatusCallbackMethod *string `json:"statusCallbackMethod,omitempty"`
	// Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a `SmsApplicationSid` is present, Twilio will ignore all of the SMS urls above and use those set on the application.
	SmsApplicationSid *string `json:"smsApplicationSid,omitempty"`
	// Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number.
	AddressSid *string `json:"addressSid,omitempty"`
	// Optional. Email of the owner of this phone number that is being hosted.
	Email *string `json:"email,omitempty"`
	//
	VerificationType *string `json:"verificationType,omitempty"`
	// Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill.
	VerificationDocumentSid *string `json:"verificationDocumentSid,omitempty"`
}

func (params *CreateHostedNumbersHostedNumberOrderParams) SetPhoneNumber(PhoneNumber string) *CreateHostedNumbersHostedNumberOrderParams {
	params.PhoneNumber = &PhoneNumber
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetSmsCapability(SmsCapability bool) *CreateHostedNumbersHostedNumberOrderParams {
	params.SmsCapability = &SmsCapability
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetAccountSid(AccountSid string) *CreateHostedNumbersHostedNumberOrderParams {
	params.AccountSid = &AccountSid
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetFriendlyName(FriendlyName string) *CreateHostedNumbersHostedNumberOrderParams {
	params.FriendlyName = &FriendlyName
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetUniqueName(UniqueName string) *CreateHostedNumbersHostedNumberOrderParams {
	params.UniqueName = &UniqueName
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetCcEmails(CcEmails []string) *CreateHostedNumbersHostedNumberOrderParams {
	params.CcEmails = &CcEmails
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetSmsUrl(SmsUrl string) *CreateHostedNumbersHostedNumberOrderParams {
	params.SmsUrl = &SmsUrl
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetSmsMethod(SmsMethod string) *CreateHostedNumbersHostedNumberOrderParams {
	params.SmsMethod = &SmsMethod
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetSmsFallbackUrl(SmsFallbackUrl string) *CreateHostedNumbersHostedNumberOrderParams {
	params.SmsFallbackUrl = &SmsFallbackUrl
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetSmsFallbackMethod(SmsFallbackMethod string) *CreateHostedNumbersHostedNumberOrderParams {
	params.SmsFallbackMethod = &SmsFallbackMethod
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetStatusCallbackUrl(StatusCallbackUrl string) *CreateHostedNumbersHostedNumberOrderParams {
	params.StatusCallbackUrl = &StatusCallbackUrl
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetStatusCallbackMethod(StatusCallbackMethod string) *CreateHostedNumbersHostedNumberOrderParams {
	params.StatusCallbackMethod = &StatusCallbackMethod
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetSmsApplicationSid(SmsApplicationSid string) *CreateHostedNumbersHostedNumberOrderParams {
	params.SmsApplicationSid = &SmsApplicationSid
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetAddressSid(AddressSid string) *CreateHostedNumbersHostedNumberOrderParams {
	params.AddressSid = &AddressSid
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetEmail(Email string) *CreateHostedNumbersHostedNumberOrderParams {
	params.Email = &Email
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetVerificationType(VerificationType string) *CreateHostedNumbersHostedNumberOrderParams {
	params.VerificationType = &VerificationType
	return params
}
func (params *CreateHostedNumbersHostedNumberOrderParams) SetVerificationDocumentSid(VerificationDocumentSid string) *CreateHostedNumbersHostedNumberOrderParams {
	params.VerificationDocumentSid = &VerificationDocumentSid
	return params
}

// Host a phone number's capability on Twilio's platform.
func (c *ApiService) CreateHostedNumbersHostedNumberOrder(params *CreateHostedNumbersHostedNumberOrderParams) (*NumbersV3HostedNumberOrder, error) {
	path := "/v3/HostedNumbers/HostedNumberOrders"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.PhoneNumber != nil {
		data.Set("phoneNumber", *params.PhoneNumber)
	}
	if params != nil && params.SmsCapability != nil {
		data.Set("smsCapability", fmt.Sprint(*params.SmsCapability))
	}
	if params != nil && params.AccountSid != nil {
		data.Set("accountSid", *params.AccountSid)
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("friendlyName", *params.FriendlyName)
	}
	if params != nil && params.UniqueName != nil {
		data.Set("uniqueName", *params.UniqueName)
	}
	if params != nil && params.CcEmails != nil {
		for _, item := range *params.CcEmails {
			data.Add("ccEmails", item)
		}
	}
	if params != nil && params.SmsUrl != nil {
		data.Set("smsUrl", *params.SmsUrl)
	}
	if params != nil && params.SmsMethod != nil {
		data.Set("smsMethod", *params.SmsMethod)
	}
	if params != nil && params.SmsFallbackUrl != nil {
		data.Set("smsFallbackUrl", *params.SmsFallbackUrl)
	}
	if params != nil && params.SmsFallbackMethod != nil {
		data.Set("smsFallbackMethod", *params.SmsFallbackMethod)
	}
	if params != nil && params.StatusCallbackUrl != nil {
		data.Set("statusCallbackUrl", *params.StatusCallbackUrl)
	}
	if params != nil && params.StatusCallbackMethod != nil {
		data.Set("statusCallbackMethod", *params.StatusCallbackMethod)
	}
	if params != nil && params.SmsApplicationSid != nil {
		data.Set("smsApplicationSid", *params.SmsApplicationSid)
	}
	if params != nil && params.AddressSid != nil {
		data.Set("addressSid", *params.AddressSid)
	}
	if params != nil && params.Email != nil {
		data.Set("email", *params.Email)
	}
	if params != nil && params.VerificationType != nil {
		data.Set("verificationType", *params.VerificationType)
	}
	if params != nil && params.VerificationDocumentSid != nil {
		data.Set("verificationDocumentSid", *params.VerificationDocumentSid)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NumbersV3HostedNumberOrder{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
