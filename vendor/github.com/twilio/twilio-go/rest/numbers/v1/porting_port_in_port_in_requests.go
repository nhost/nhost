/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"time"

	"github.com/twilio/twilio-go/client"
)

// Optional parameters for the method 'ListPortInRequests'
type ListPortInRequestsParams struct {
	// Page start token, if null then it will start from the beginning
	Token *string `json:"Token,omitempty"`
	// Number of items per page
	Size *int `json:"Size,omitempty"`
	// Filter by Port in request SID, supports multiple values separated by comma
	PortInRequestSid *string `json:"PortInRequestSid,omitempty"`
	// Filter by Port In request status
	PortInRequestStatus *string `json:"PortInRequestStatus,omitempty"`
	// Find all created before a certain date
	CreatedBefore *time.Time `json:"CreatedBefore,omitempty"`
	// Find all created after a certain date
	CreatedAfter *time.Time `json:"CreatedAfter,omitempty"`
	// Max number of records to return.
	Limit *int `json:"limit,omitempty"`
	// Max number of records to return in a page
	PageSize *int `json:"PageSize,omitempty"`
}

func (params *ListPortInRequestsParams) SetToken(Token string) *ListPortInRequestsParams {
	params.Token = &Token
	return params
}
func (params *ListPortInRequestsParams) SetSize(Size int) *ListPortInRequestsParams {
	params.Size = &Size
	return params
}
func (params *ListPortInRequestsParams) SetPortInRequestSid(PortInRequestSid string) *ListPortInRequestsParams {
	params.PortInRequestSid = &PortInRequestSid
	return params
}
func (params *ListPortInRequestsParams) SetPortInRequestStatus(PortInRequestStatus string) *ListPortInRequestsParams {
	params.PortInRequestStatus = &PortInRequestStatus
	return params
}
func (params *ListPortInRequestsParams) SetCreatedBefore(CreatedBefore time.Time) *ListPortInRequestsParams {
	params.CreatedBefore = &CreatedBefore
	return params
}
func (params *ListPortInRequestsParams) SetCreatedAfter(CreatedAfter time.Time) *ListPortInRequestsParams {
	params.CreatedAfter = &CreatedAfter
	return params
}
func (params *ListPortInRequestsParams) SetLimit(Limit int) *ListPortInRequestsParams {
	params.Limit = &Limit
	return params
}
func (params *ListPortInRequestsParams) SetPageSize(PageSize int) *ListPortInRequestsParams {
	params.PageSize = &PageSize
	return params
}

// Retrieve a single page of PortInRequests records from the API. Request is executed immediately.
func (c *ApiService) PagePortInRequests(params *ListPortInRequestsParams, pageToken, pageNumber string) (*ListPortInRequestsResponse, error) {
	path := "/v1/Porting/PortIn/PortInRequests"

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.Token != nil {
		data.Set("Token", *params.Token)
	}
	if params != nil && params.Size != nil {
		data.Set("Size", fmt.Sprint(*params.Size))
	}
	if params != nil && params.PortInRequestSid != nil {
		data.Set("PortInRequestSid", *params.PortInRequestSid)
	}
	if params != nil && params.PortInRequestStatus != nil {
		data.Set("PortInRequestStatus", *params.PortInRequestStatus)
	}
	if params != nil && params.CreatedBefore != nil {
		data.Set("CreatedBefore", fmt.Sprint((*params.CreatedBefore).Format(time.RFC3339)))
	}
	if params != nil && params.CreatedAfter != nil {
		data.Set("CreatedAfter", fmt.Sprint((*params.CreatedAfter).Format(time.RFC3339)))
	}
	if params != nil && params.PageSize != nil {
		data.Set("PageSize", fmt.Sprint(*params.PageSize))
	}

	if pageToken != "" {
		data.Set("PageToken", pageToken)
	}
	if pageNumber != "" {
		data.Set("Page", pageNumber)
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListPortInRequestsResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Lists PortInRequests records from the API as a list. Unlike stream, this operation is eager and loads 'limit' records into memory before returning.
func (c *ApiService) ListPortInRequests(params *ListPortInRequestsParams) ([]NumbersV1PortInRequestList, error) {
	response, errors := c.StreamPortInRequests(params)

	records := make([]NumbersV1PortInRequestList, 0)
	for record := range response {
		records = append(records, record)
	}

	if err := <-errors; err != nil {
		return nil, err
	}

	return records, nil
}

// Streams PortInRequests records from the API as a channel stream. This operation lazily loads records as efficiently as possible until the limit is reached.
func (c *ApiService) StreamPortInRequests(params *ListPortInRequestsParams) (chan NumbersV1PortInRequestList, chan error) {
	if params == nil {
		params = &ListPortInRequestsParams{}
	}
	params.SetPageSize(client.ReadLimits(params.PageSize, params.Limit))

	recordChannel := make(chan NumbersV1PortInRequestList, 1)
	errorChannel := make(chan error, 1)

	response, err := c.PagePortInRequests(params, "", "")
	if err != nil {
		errorChannel <- err
		close(recordChannel)
		close(errorChannel)
	} else {
		go c.streamPortInRequests(response, params, recordChannel, errorChannel)
	}

	return recordChannel, errorChannel
}

func (c *ApiService) streamPortInRequests(response *ListPortInRequestsResponse, params *ListPortInRequestsParams, recordChannel chan NumbersV1PortInRequestList, errorChannel chan error) {
	curRecord := 1

	for response != nil {
		responseRecords := response.PortInRequests
		for item := range responseRecords {
			recordChannel <- responseRecords[item]
			curRecord += 1
			if params.Limit != nil && *params.Limit < curRecord {
				close(recordChannel)
				close(errorChannel)
				return
			}
		}

		record, err := client.GetNext(c.baseURL, response, c.getNextListPortInRequestsResponse)
		if err != nil {
			errorChannel <- err
			break
		} else if record == nil {
			break
		}

		response = record.(*ListPortInRequestsResponse)
	}

	close(recordChannel)
	close(errorChannel)
}

func (c *ApiService) getNextListPortInRequestsResponse(nextPageUrl string) (interface{}, error) {
	if nextPageUrl == "" {
		return nil, nil
	}
	resp, err := c.requestHandler.Get(nextPageUrl, nil, nil)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &ListPortInRequestsResponse{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}
	return ps, nil
}
