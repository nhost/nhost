/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
)

// Optional parameters for the method 'CreateBundleClone'
type CreateBundleCloneParams struct {
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) where the bundle needs to be cloned.
	TargetAccountSid *string `json:"TargetAccountSid,omitempty"`
	// If set to true, the cloned bundle will be in the DRAFT state, else it will be twilio-approved
	MoveToDraft *bool `json:"MoveToDraft,omitempty"`
	// The string that you assigned to describe the cloned bundle.
	FriendlyName *string `json:"FriendlyName,omitempty"`
}

func (params *CreateBundleCloneParams) SetTargetAccountSid(TargetAccountSid string) *CreateBundleCloneParams {
	params.TargetAccountSid = &TargetAccountSid
	return params
}
func (params *CreateBundleCloneParams) SetMoveToDraft(MoveToDraft bool) *CreateBundleCloneParams {
	params.MoveToDraft = &MoveToDraft
	return params
}
func (params *CreateBundleCloneParams) SetFriendlyName(FriendlyName string) *CreateBundleCloneParams {
	params.FriendlyName = &FriendlyName
	return params
}

// Creates a new clone of the Bundle in target Account. It will internally create clones of all the bundle items (identities and documents) of the original bundle
func (c *ApiService) CreateBundleClone(BundleSid string, params *CreateBundleCloneParams) (*NumbersV2BundleClone, error) {
	path := "/v2/RegulatoryCompliance/Bundles/{BundleSid}/Clones"
	path = strings.Replace(path, "{"+"BundleSid"+"}", BundleSid, -1)

	data := url.Values{}
	headers := map[string]interface{}{
		"Content-Type": "application/x-www-form-urlencoded",
	}

	if params != nil && params.TargetAccountSid != nil {
		data.Set("TargetAccountSid", *params.TargetAccountSid)
	}
	if params != nil && params.MoveToDraft != nil {
		data.Set("MoveToDraft", fmt.Sprint(*params.MoveToDraft))
	}
	if params != nil && params.FriendlyName != nil {
		data.Set("FriendlyName", *params.FriendlyName)
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &NumbersV2BundleClone{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
