export interface NormalizeDefaultValueOptions {
  /**
   * Determines whether or not arguments should be removed from default value
   * function string.
   */
  removeArgs?: boolean;
}

/**
 * Normalizes a default value string by removing apostrophes and type
 * definition and also function arguments if configured.
 *
 * @example
 * 'Test Value'::text -> Test Value
 * 'nextval('test_table_seq')' -> nextval()
 *
 * @param defaultValue - Default value to normalize
 * @param options - Options for normalizing default value
 * @returns Normalized default value and `true` if there was a match for custom
 * default value, `false` otherwise.
 */
export default function normalizeDefaultValue(
  defaultValue: string,
  { removeArgs }: NormalizeDefaultValueOptions = {},
) {
  if (!defaultValue) {
    return { normalizedDefaultValue: '', custom: false };
  }

  if (/^''::(\w|\s)+$/i.test(defaultValue)) {
    return { normalizedDefaultValue: '', custom: true };
  }

  // Note: We are extracting the actual default value from the ambiguous
  // default value returned by PostgreSQL.
  // e.g: 'default value'::text => default value
  const customDefaultValueRegExp = /^'((\w|\W)+)'::(\w|\s)+$/i;
  const [, match] = customDefaultValueRegExp.exec(defaultValue || '') || [];

  // Note: We are replacing ambiguous values generated by PostgreSQL if
  // requested.
  // e.g: nextval('test_column_seq') => nextval()
  const removeArgsRegExp = /\((\w|\W)+\)$/i;

  if (match) {
    return {
      normalizedDefaultValue: removeArgs
        ? match.replace(removeArgsRegExp, '()')
        : match,
      custom: true,
    };
  }

  return {
    normalizedDefaultValue: removeArgs
      ? defaultValue.replace(removeArgsRegExp, '()')
      : defaultValue,
    custom: false,
  };
}
