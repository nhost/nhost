openapi: 3.0.0
info:
  title: Hasura Remote Schema API
  description: API for managing remote schemas in Hasura
  version: 1.0.0

security:
  - adminSecret: []

paths:
  /v1/metadata:
    post:
      summary: Metadata API endpoint
      description: Endpoint for all metadata operations
      operationId: metadataOperation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ExportMetadata'
                - $ref: '#/components/schemas/RemoteSchemaOperation'
                - $ref: '#/components/schemas/RemoveRemoteSchemaOperation'
                - $ref: '#/components/schemas/ReloadRemoteSchemaOperation'
                - $ref: '#/components/schemas/IntrospectRemoteSchemaOperation'
      responses:
        '200':
          description: Operation executed successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      message:
                        type: string
                        example: success
                  - $ref: '#/components/schemas/ExportMetadataResponse'
                  - $ref: '#/components/schemas/IntrospectRemoteSchemaResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    adminSecret:
      type: apiKey
      in: header
      name: x-hasura-admin-secret

  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: internal_error
        message:
          type: string
          description: Detailed error message

    ExportMetadata:
      type: object
      required:
        - type
        - version
        - args
      properties:
        type:
          type: string
          enum: [export_metadata]
          description: Type of operation to export the current metadata from the server
        version:
          type: integer
          description: Version of the metadata to export
          example: 2
        args:
          type: object
          description: Arguments for the export metadata operation (usually empty object)
          default: {}

    ExportMetadataResponse:
      type: object
      description: The complete Hasura metadata as JSON
      properties:
        resource_version:
          type: integer
          description: Resource version number
          example: 161
        metadata:
          type: object
          description: Complete metadata configuration
          properties:
            version:
              type: integer
              description: Metadata version
              example: 3
            sources:
              type: array
              description: List of data sources
              items:
                type: object
                additionalProperties: true
            remote_schemas:
              type: array
              description: List of remote GraphQL schemas
              items:
                $ref: '#/components/schemas/RemoteSchemaInfo'
          additionalProperties: true

    RemoteSchemaInfo:
      type: object
      description: Information about a remote schema
      required:
        - name
        - definition
      properties:
        name:
          type: string
          description: Name of the remote schema
          example: asdf2
        definition:
          type: object
          description: Remote schema definition
          oneOf:
            # Using url
            - type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: URL of the GraphQL server
                  example: https://sharp-glowing-muskmelon.glitch.me/
                timeout_seconds:
                  type: integer
                  description: Timeout in seconds
                  example: 60
                forward_client_headers:
                  type: boolean
                  description: Forward client headers to the remote schema
                  default: false
                headers:
                  type: array
                  description: Headers to be sent with the request
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/RemoteSchemaHeaderWithValue'
                      - $ref: '#/components/schemas/RemoteSchemaHeaderWithEnv'
            # Using url_from_env
            - type: object
              required:
                - url_from_env
              properties:
                url_from_env:
                  type: string
                  description: Environment variable name containing the GraphQL server URL
                  example: REMOTE_SCHEMA_URL
                timeout_seconds:
                  type: integer
                  description: Timeout in seconds
                  example: 60
                forward_client_headers:
                  type: boolean
                  description: Forward client headers to the remote schema
                  default: false
                headers:
                  type: array
                  description: Headers to be sent with the request
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/RemoteSchemaHeaderWithValue'
                      - $ref: '#/components/schemas/RemoteSchemaHeaderWithEnv'
        comment:
          type: string
          description: Comment for the remote schema
          example: asd2

    RemoteSchemaHeaderWithValue:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: Name of the header
          example: X-Hasura-User-Id
        value:
          type: string
          description: Value of the header
          example: 123e4567-e89b-12d3-a456-426614174000

    RemoteSchemaHeaderWithEnv:
      type: object
      required:
        - name
        - value_from_env
      properties:
        name:
          type: string
          description: Name of the header
          example: X-Hasura-User-Id
        value_from_env:
          type: string
          description: Environment variable name to get the value from
          example: HASURA_USER_ID

    AddRemoteSchemaArgs:
      type: object
      required:
        - name
        - definition
      properties:
        name:
          type: string
          description: Name of the remote schema
          example: my_remote_schema
        definition:
          type: object
          required:
            - url
          properties:
            url:
              type: string
              description: URL of the GraphQL server
              example: https://my-graphql-service.com/graphql
            headers:
              type: array
              description: Headers to be sent with the request
              items:
                oneOf:
                  - $ref: '#/components/schemas/RemoteSchemaHeaderWithValue'
                  - $ref: '#/components/schemas/RemoteSchemaHeaderWithEnv'

            timeout_seconds:
              type: integer
              description: Timeout in seconds
              example: 60
            forward_client_headers:
              type: boolean
              description: Forward client headers to the remote schema
              default: false
        comment:
          type: string
          description: Comment for the remote schema
          example: External GraphQL service

    RemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [add_remote_schema, update_remote_schema]
          description: Type of operation to add or update a remote schema
        args:
          oneOf:
            - $ref: '#/components/schemas/AddRemoteSchemaArgs'
            - $ref: '#/components/schemas/UpdateRemoteSchemaArgs'

    UpdateRemoteSchemaArgs:
      $ref: '#/components/schemas/AddRemoteSchemaArgs'

    RemoveRemoteSchemaArgs:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the remote schema to remove
          example: my_remote_schema

    RemoveRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [remove_remote_schema]
          description: Type of operation to remove a remote schema
        args:
          $ref: '#/components/schemas/RemoveRemoteSchemaArgs'

    ReloadRemoteSchemaArgs:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the remote schema to reload
          example: my_remote_schema

    ReloadRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [reload_remote_schema]
          description: Type of operation to reload a remote schema
        args:
          $ref: '#/components/schemas/ReloadRemoteSchemaArgs'

    IntrospectRemoteSchemaArgs:
      $ref: '#/components/schemas/ReloadRemoteSchemaArgs'

    IntrospectRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [introspect_remote_schema]
          description: Type of operation to introspect a remote schema
        args:
          $ref: '#/components/schemas/IntrospectRemoteSchemaArgs'

    IntrospectRemoteSchemaResponse:
      type: object
      description: GraphQL schema introspection response for tree visualization
      required:
        - data
      properties:
        data:
          type: object
          required:
            - __schema
          properties:
            __schema:
              type: object
              description: GraphQL schema introspection data
              required:
                - types
              properties:
                queryType:
                  type: object
                  nullable: true
                  properties:
                    name:
                      type: string
                      example: Query
                  additionalProperties: true
                mutationType:
                  type: object
                  nullable: true
                  properties:
                    name:
                      type: string
                      example: Mutation
                  additionalProperties: true
                subscriptionType:
                  type: object
                  nullable: true
                  properties:
                    name:
                      type: string
                      example: Subscription
                  additionalProperties: true
                types:
                  type: array
                  description: All types in the GraphQL schema
                  items:
                    $ref: '#/components/schemas/GraphQLTypeForVisualization'
              additionalProperties: true
          additionalProperties: true
      additionalProperties: true

    GraphQLTypeForVisualization:
      type: object
      description: GraphQL type definition for tree visualization
      required:
        - kind
        - name
      properties:
        kind:
          type: string
          enum:
            [
              SCALAR,
              OBJECT,
              INTERFACE,
              UNION,
              ENUM,
              INPUT_OBJECT,
              LIST,
              NON_NULL,
            ]
          description: The kind of GraphQL type
        name:
          type: string
          nullable: true
          description: Name of the type (null for wrapper types like LIST/NON_NULL)
        description:
          type: string
          nullable: true
          description: Description of the type
        fields:
          type: array
          nullable: true
          description: Fields for OBJECT and INTERFACE types (basic info for tree visualization)
          items:
            type: object
            required:
              - name
              - type
            properties:
              name:
                type: string
                description: Name of the field
              description:
                type: string
                nullable: true
                description: Description of the field
              type:
                $ref: '#/components/schemas/GraphQLTypeForVisualization'
                description: Return type of the field
            additionalProperties: true
        interfaces:
          type: array
          nullable: true
          description: Interfaces implemented by OBJECT types
          items:
            $ref: '#/components/schemas/GraphQLTypeForVisualization'
        enumValues:
          type: array
          nullable: true
          description: Values for ENUM types
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Name of the enum value
              description:
                type: string
                nullable: true
                description: Description of the enum value
            additionalProperties: true
        possibleTypes:
          type: array
          nullable: true
          description: Possible types for UNION and INTERFACE types
          items:
            $ref: '#/components/schemas/GraphQLTypeForVisualization'
        ofType:
          $ref: '#/components/schemas/GraphQLTypeForVisualization'
          nullable: true
          description: Wrapped type for LIST and NON_NULL types
      additionalProperties: true
