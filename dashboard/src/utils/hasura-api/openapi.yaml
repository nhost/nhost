openapi: 3.0.0
info:
  title: Hasura API
  description: API for managing remote schemas and events in Hasura
  version: 1.0.0

security:
  - adminSecret: []

paths:
  /v1/metadata:
    post:
      summary: Metadata API endpoint
      description: Endpoint for all metadata operations
      operationId: metadataOperation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ExportMetadata'
                - $ref: '#/components/schemas/AddRemoteSchemaOperation'
                - $ref: '#/components/schemas/UpdateRemoteSchemaBulkOperation'
                - $ref: '#/components/schemas/RemoveRemoteSchemaOperation'
                - $ref: '#/components/schemas/ReloadRemoteSchemaOperation'
                - $ref: '#/components/schemas/IntrospectRemoteSchemaOperation'
                - $ref: '#/components/schemas/RemoteSchemaRemoteRelationshipOperation'
                - $ref: '#/components/schemas/DeleteRemoteSchemaRemoteRelationshipOperation'
                - $ref: '#/components/schemas/RemoteSchemaPermissionsBulkOperation'
                - $ref: '#/components/schemas/GetEventInvocationLogsOperation'
                - $ref: '#/components/schemas/GetEventLogsOperation'
                - $ref: '#/components/schemas/GetEventAndInvocationLogsByIdOperation'
                - $ref: '#/components/schemas/RedeliverEventOperation'
                - $ref: '#/components/schemas/CreateEventTriggerBulkOperation'
                - $ref: '#/components/schemas/DeleteEventTriggerBulkOperation'
      responses:
        '200':
          description: Operation executed successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      message:
                        type: string
                        example: success
                  - $ref: '#/components/schemas/ExportMetadataResponse'
                  - $ref: '#/components/schemas/IntrospectRemoteSchemaResponse'
                  - $ref: '#/components/schemas/GetEventInvocationLogsResponse'
                  - $ref: '#/components/schemas/GetEventLogsResponse'
                  - $ref: '#/components/schemas/GetEventAndInvocationLogsByIdResponse'
                  - type: array
                    description: List of success messages for bulk operations
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example: success

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /apis/migrate:
    post:
      summary: Execute a migration
      description: Executes a migration with the provided up and down steps
      operationId: executeMigration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationRequest'
      responses:
        '200':
          description: Migration executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: internal_error
                message: "{\n  \"error\": \"query execution failed\",\n  \"path\": \"$[0]\",\n  \"code\": \"postgres-error\",\n  \"internal\": {\n    \"arguments\": [],\n    \"error\": {\n      \"description\": null,\n      \"exec_status\": \"FatalError\",\n      \"hint\": null,\n      \"message\": \"syntax error at or near \\\":\\\"\",\n      \"status_code\": \"42601\"\n    },\n    \"prepared\": false,\n    \"statement\": \"CREATE TABLE asd ( id TEXT ):;\"\n  }\n}"

components:
  securitySchemes:
    adminSecret:
      type: apiKey
      in: header
      name: x-hasura-admin-secret

  schemas:
    RemoteSchemaPermissionsStepArgs:
      type: object
      required:
        - remote_schema
        - role
      properties:
        remote_schema:
          type: string
          description: Name of the remote schema
          example: my_remote_schema
        role:
          type: string
          description: Name of the role
          example: user
        definition:
          $ref: '#/components/schemas/RemoteSchemaPermissionsDefinition'

    AddRemoteSchemaPermissionsStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [add_remote_schema_permissions]
          description: Use to add permissions to a remote schema
        args:
          $ref: '#/components/schemas/RemoteSchemaPermissionsStepArgs'

    DropRemoteSchemaPermissionsStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [drop_remote_schema_permissions]
        args:
          $ref: '#/components/schemas/RemoteSchemaPermissionsStepArgs'

    AddRemoteSchemaStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [add_remote_schema]
        args:
          $ref: '#/components/schemas/AddRemoteSchemaArgs'

    UpdateRemoteSchemaStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [update_remote_schema]
        args:
          $ref: '#/components/schemas/RemoteSchemaInfo'

    RemoveRemoteSchemaStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [remove_remote_schema]
        args:
          $ref: '#/components/schemas/RemoveRemoteSchemaArgs'

    DeleteEventTriggerStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_delete_event_trigger]
        args:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              description: Name of the Event Trigger
              example: my_event_trigger
            source:
              type: string
              description: Name of the source database of the trigger
              default: default

    MigrationStep:
      oneOf:
        - $ref: '#/components/schemas/AddRemoteSchemaPermissionsStep'
        - $ref: '#/components/schemas/DropRemoteSchemaPermissionsStep'
        - $ref: '#/components/schemas/UpdateRemoteSchemaStep'
        - $ref: '#/components/schemas/RemoveRemoteSchemaStep'
        - $ref: '#/components/schemas/AddRemoteSchemaStep'
        - $ref: '#/components/schemas/CreateEventTriggerStep'
        - $ref: '#/components/schemas/DeleteEventTriggerStep'

    MigrationRequest:
      type: object
      required:
        - name
        - up
        - datasource
      properties:
        name:
          type: string
          description: Name of the migration
          example: save_remote_schema_permission
        up:
          type: array
          description: Steps to execute for the migration. Always provide a down migration as well when creating a migration that modifies the schema
          items:
            $ref: '#/components/schemas/MigrationStep'
        down:
          type: array
          description: Steps to execute to revert the migration. Always provide this when creating a migration that modifies the schema
          items:
            $ref: '#/components/schemas/MigrationStep'
        datasource:
          type: string
          description: The data source to use
          example: default
        skip_execution:
          type: boolean
          description: Whether to skip the execution of the migration
          default: false

    SuccessResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the created migration with a timestamp
          example: 1745093409829_my_migration

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: invalid-configuration
        error:
          type: string
          description: Object error message
          example: "Inconsistent object: environment variable 'asdf' not set"
        message:
          type: string
          description: The error message for the client
        internal:
          type: array
          description: Internal error details
          items:
            type: object
            additionalProperties: true
        path:
          type: string
          description: JSON path where the error occurred
          example: '$.args'

    ExportMetadata:
      type: object
      required:
        - type
        - version
        - args
      properties:
        type:
          type: string
          enum: [export_metadata]
          description: Type of operation to export the current metadata from the server
        version:
          type: integer
          description: Version of the metadata to export
          example: 2
        args:
          type: object
          description: Arguments for the export metadata operation (usually empty object)
          default: {}

    ExportMetadataResponse:
      type: object
      required:
        - resource_version
        - metadata
      description: The complete Hasura metadata as JSON
      properties:
        resource_version:
          type: integer
          description: Resource version number
          example: 161
        metadata:
          type: object
          description: Complete metadata configuration
          properties:
            version:
              type: integer
              description: Metadata version
              example: 3
            sources:
              type: array
              description: List of data sources
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the data source
                    example: default
                  kind:
                    type: string
                    description: Kind of the data source
                    example: postgres
                  tables:
                    type: array
                    description: List of tables in the data source
                    items:
                      type: object
                      required:
                        - table
                      properties:
                        table:
                          type: object
                          properties:
                            name:
                              type: string
                              description: Name of the table
                              example: users
                            schema:
                              type: string
                              description: Schema of the table
                              example: public
                          additionalProperties: true
                        event_triggers:
                          type: array
                          description: List of event triggers for the table
                          items:
                            type: object
                            $ref: '#/components/schemas/EventTrigger'
                additionalProperties: true
            remote_schemas:
              type: array
              description: List of remote GraphQL schemas
              items:
                $ref: '#/components/schemas/RemoteSchemaInfo'
          additionalProperties: true

    RemoteSchemaInfo:
      type: object
      description: Information about a remote schema
      required:
        - name
        - definition
      properties:
        name:
          type: string
          description: Name of the remote schema
          example: asdf2
        definition:
          $ref: '#/components/schemas/RemoteSchemaDefinition'
        comment:
          type: string
          description: Comment for the remote schema
          example: External GraphQL service
        remote_relationships:
          type: array
          description: Remote relationships for the remote schema
          items:
            type: object
            required:
              - type_name
              - relationships
            properties:
              type_name:
                type: string
                description: Name of the type in the remote schema
                example: User
              relationships:
                type: array
                description: List of relationships for this type
                items:
                  type: object
                  required:
                    - name
                    - definition
                  properties:
                    name:
                      type: string
                      description: Name of the relationship
                      example: user
                    definition:
                      type: object
                      description: Relationship definition
                      oneOf:
                        - type: object
                          required:
                            - to_remote_schema
                          properties:
                            to_remote_schema:
                              $ref: '#/components/schemas/ToRemoteSchemaRelationshipDefinition'
                        - type: object
                          required:
                            - to_source
                          properties:
                            to_source:
                              $ref: '#/components/schemas/ToSourceRelationshipDefinition'
        permissions:
          type: array
          description: Permissions for the remote schema
          items:
            type: object
            required:
              - role
              - definition
            properties:
              role:
                type: string
                description: Role name for the permission
                example: user
              definition:
                type: object
                description: Permission definition
                required:
                  - schema
                properties:
                  schema:
                    type: string
                    description: GraphQL schema definition for this role
                    example: 'schema { query: Query } type Query { hello: String }'

    RemoteSchemaDefinitionFromUrl:
      type: object
      description: Remote schema definition using direct URL
      required:
        - url
      properties:
        url:
          type: string
          description: URL of the GraphQL server
          example: https://sharp-glowing-muskmelon.glitch.me/
        timeout_seconds:
          type: integer
          description: Timeout in seconds
          example: 60
        forward_client_headers:
          type: boolean
          description: Forward client headers to the remote schema
          default: false
        headers:
          $ref: '#/components/schemas/Headers'
        customization:
          $ref: '#/components/schemas/RemoteSchemaCustomization'

    RemoteSchemaDefinitionFromEnv:
      type: object
      description: Remote schema definition using URL from environment variable
      required:
        - url_from_env
      properties:
        url_from_env:
          type: string
          description: Environment variable name containing the GraphQL server URL
          example: REMOTE_SCHEMA_URL
        timeout_seconds:
          type: integer
          description: Timeout in seconds
          example: 60
        forward_client_headers:
          type: boolean
          description: Forward client headers to the remote schema
          default: false
        headers:
          $ref: '#/components/schemas/Headers'
        customization:
          $ref: '#/components/schemas/RemoteSchemaCustomization'

    RemoteSchemaCustomization:
      type: object
      description: Customization options for the remote schema
      properties:
        root_fields_namespace:
          type: string
          description: Namespace for root fields
          example: your_field_name
        type_names:
          type: object
          description: Type name customization options
          properties:
            prefix:
              type: string
              description: Prefix to add to all type names
              example: your_type_name_prefix
            suffix:
              type: string
              description: Suffix to add to all type names
              example: your_type_name_suffix
            mapping:
              type: object
              description: Mapping of original type names to new type names
              additionalProperties:
                type: string
              example:
                some_type_name: some_new_type_name
        field_names:
          type: array
          description: Field name customization options
          items:
            type: object
            properties:
              parent_type:
                type: string
                description: Parent type name
                example: your_type_name
              prefix:
                type: string
                description: Prefix to add to field names
                example: your_field_name_prefix
              suffix:
                type: string
                description: Suffix to add to field names
                example: your_field_name_suffix
              mapping:
                type: object
                description: Mapping of original field names to new field names
                additionalProperties:
                  type: string
                example:
                  some_field_name: some_new_field_name

    RemoteSchemaDefinition:
      description: Remote schema definition - can use direct URL or environment variable
      oneOf:
        - $ref: '#/components/schemas/RemoteSchemaDefinitionFromUrl'
        - $ref: '#/components/schemas/RemoteSchemaDefinitionFromEnv'

    Headers:
      type: array
      description: Headers to be sent with the request
      items:
        oneOf:
          - $ref: '#/components/schemas/HeaderWithValue'
          - $ref: '#/components/schemas/HeaderWithEnv'

    HeaderWithValue:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: Name of the header
          example: X-Hasura-User-Id
        value:
          type: string
          description: Value of the header
          example: 123e4567-e89b-4444-4444-444444444000

    HeaderWithEnv:
      type: object
      required:
        - name
        - value_from_env
      properties:
        name:
          type: string
          description: Name of the header
          example: X-Hasura-User-Id
        value_from_env:
          type: string
          description: Name of the environment variable which holds the value of the header
          example: HASURA_USER_ID

    AddRemoteSchemaArgs:
      type: object
      required:
        - name
        - definition
      properties:
        name:
          type: string
          description: Name of the remote schema
          example: my_remote_schema
        definition:
          $ref: '#/components/schemas/RemoteSchemaDefinition'
        comment:
          type: string
          description: Comment for the remote schema
          example: External GraphQL service

    AddRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [add_remote_schema]
          description: Type of operation to add a remote schema
        args:
          $ref: '#/components/schemas/AddRemoteSchemaArgs'

    UpdateRemoteSchemaBulkOperation:
      type: object
      required:
        - type
        - source
        - resource_version
        - args
      properties:
        type:
          type: string
          enum: [bulk]
          description: Type of operation to update remote schemas
        source:
          type: string
          description: Source of the operation
          example: default
        resource_version:
          type: integer
          description: Resource version of the operation
          example: 1
        args:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRemoteSchemaStep'

    RemoveRemoteSchemaArgs:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the remote schema to remove
          example: my_remote_schema

    RemoveRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [remove_remote_schema]
          description: Type of operation to remove a remote schema
        args:
          $ref: '#/components/schemas/RemoveRemoteSchemaArgs'

    ReloadRemoteSchemaArgs:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the remote schema to reload
          example: my_remote_schema

    ReloadRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [reload_remote_schema]
          description: Type of operation to reload a remote schema
        args:
          $ref: '#/components/schemas/ReloadRemoteSchemaArgs'

    RemoteSchemaPermissionsDefinition:
      type: object
      description: Permission definition
      required:
        - schema
      properties:
        schema:
          type: string
          description: GraphQL schema definition for this role
          example: 'schema { query: Query } type Query { hello: String }'

    RemoteSchemaPermissionsBulkOperation:
      type: object
      required:
        - type
        - source
        - resource_version
        - args
      properties:
        type:
          type: string
          enum: [bulk]
          description: Type of operation to add or drop remote schema permissions
        args:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AddRemoteSchemaPermissionsStep'
              - $ref: '#/components/schemas/DropRemoteSchemaPermissionsStep'

        source:
          type: string
          description: Source of the operation
          example: default
        resource_version:
          type: integer
          description: Resource version of the operation
          example: 1

    CreateRemoteSchemaRemoteRelationshipArgs:
      type: object
      required:
        - name
        - remote_schema
        - type_name
        - definition
      properties:
        name:
          type: string
          description: Name of the relationship. This will be used as the field name in the source type
          example: relationship_name
        remote_schema:
          type: string
          description: Name of the source remote schema
          example: order-remote-schema
        type_name:
          type: string
          description: Name of the type in the remote schema
          example: Order
        definition:
          type: object
          description: Relationship definition
          oneOf:
            - type: object
              required:
                - to_remote_schema
              properties:
                to_remote_schema:
                  $ref: '#/components/schemas/ToRemoteSchemaRelationshipDefinition'
            - type: object
              required:
                - to_source
              properties:
                to_source:
                  $ref: '#/components/schemas/ToSourceRelationshipDefinition'

    ToRemoteSchemaRelationshipDefinition:
      type: object
      description: Definition for relationship to another remote schema
      required:
        - remote_schema
        - lhs_fields
        - remote_field
      properties:
        remote_schema:
          type: string
          description: Name of the target remote schema
          example: user-remote-schema
        lhs_fields:
          type: array
          description: Fields from the source type to use in the relationship
          items:
            type: string
          example: ['user_id']
        remote_field:
          type: object
          description: Remote field configuration
          additionalProperties:
            type: object
            properties:
              arguments:
                type: object
                description: Arguments to pass to the remote field
                additionalProperties:
                  type: string
                example:
                  id: '$user_id'
          example:
            user:
              arguments:
                id: '$user_id'

    ToSourceRelationshipDefinition:
      type: object
      description: Definition for relationship to a database source
      required:
        - source
        - table
        - relationship_type
        - field_mapping
      properties:
        source:
          type: string
          description: Name of the database source
          example: default
        table:
          type: object
          description: Target table information
          required:
            - name
            - schema
          properties:
            name:
              type: string
              description: Name of the table
              example: plans
            schema:
              type: string
              description: Schema name of the table
              example: public
        relationship_type:
          type: string
          enum: [object, array]
          description: Type of relationship - object for one-to-one, array for one-to-many
          example: array
        field_mapping:
          type: object
          description: Mapping from remote schema fields to database table columns
          additionalProperties:
            type: string
          example:
            Description: id
            Amount: updated_at

    UpdateRemoteSchemaRemoteRelationshipArgs:
      $ref: '#/components/schemas/CreateRemoteSchemaRemoteRelationshipArgs'

    RemoteSchemaRemoteRelationshipOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum:
            [
              create_remote_schema_remote_relationship,
              update_remote_schema_remote_relationship,
            ]
          description: Type of operation to create a remote schema relationship
        args:
          oneOf:
            - $ref: '#/components/schemas/CreateRemoteSchemaRemoteRelationshipArgs'
            - $ref: '#/components/schemas/UpdateRemoteSchemaRemoteRelationshipArgs'

    DeleteRemoteSchemaRemoteRelationshipArgs:
      type: object
      required:
        - name
        - remote_schema
        - type_name
      properties:
        name:
          type: string
          description: Name of the relationship to delete
          example: relationship_name
        remote_schema:
          type: string
          description: Name of the source remote schema
          example: order-remote-schema
        type_name:
          type: string
          description: Name of the type in the remote schema
          example: Order

    DeleteRemoteSchemaRemoteRelationshipOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [delete_remote_schema_remote_relationship]
          description: Type of operation to delete a remote schema relationship
        args:
          $ref: '#/components/schemas/DeleteRemoteSchemaRemoteRelationshipArgs'

    IntrospectRemoteSchemaArgs:
      $ref: '#/components/schemas/ReloadRemoteSchemaArgs'

    IntrospectRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [introspect_remote_schema]
          description: Type of operation to introspect a remote schema
        args:
          $ref: '#/components/schemas/IntrospectRemoteSchemaArgs'

    IntrospectRemoteSchemaResponse:
      type: object
      description: GraphQL schema introspection response for tree visualization
      required:
        - data
      properties:
        data:
          type: object
          required:
            - __schema
          properties:
            __schema:
              type: object
              description: GraphQL schema introspection data
              required:
                - types
              properties:
                queryType:
                  type: object
                  nullable: true
                  properties:
                    name:
                      type: string
                      example: Query
                  additionalProperties: true
                mutationType:
                  type: object
                  nullable: true
                  properties:
                    name:
                      type: string
                      example: Mutation
                  additionalProperties: true
                subscriptionType:
                  type: object
                  nullable: true
                  properties:
                    name:
                      type: string
                      example: Subscription
                  additionalProperties: true
                types:
                  type: array
                  description: All types in the GraphQL schema
                  items:
                    $ref: '#/components/schemas/GraphQLTypeForVisualization'
              additionalProperties: true
          additionalProperties: true
      additionalProperties: true

    GraphQLTypeForVisualization:
      type: object
      description: GraphQL type definition for tree visualization
      required:
        - kind
        - name
      properties:
        kind:
          type: string
          enum:
            [
              SCALAR,
              OBJECT,
              INTERFACE,
              UNION,
              ENUM,
              INPUT_OBJECT,
              LIST,
              NON_NULL,
            ]
          description: The kind of GraphQL type
        name:
          type: string
          nullable: true
          description: Name of the type (null for wrapper types like LIST/NON_NULL)
        description:
          type: string
          nullable: true
          description: Description of the type
        fields:
          type: array
          nullable: true
          description: Fields for OBJECT and INTERFACE types (basic info for tree visualization)
          items:
            type: object
            required:
              - name
              - type
            properties:
              name:
                type: string
                description: Name of the field
              description:
                type: string
                nullable: true
                description: Description of the field
              type:
                $ref: '#/components/schemas/GraphQLTypeForVisualization'
                description: Return type of the field
            additionalProperties: true
        interfaces:
          type: array
          nullable: true
          description: Interfaces implemented by OBJECT types
          items:
            $ref: '#/components/schemas/GraphQLTypeForVisualization'
        enumValues:
          type: array
          nullable: true
          description: Values for ENUM types
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Name of the enum value
              description:
                type: string
                nullable: true
                description: Description of the enum value
            additionalProperties: true
        possibleTypes:
          type: array
          nullable: true
          description: Possible types for UNION and INTERFACE types
          items:
            $ref: '#/components/schemas/GraphQLTypeForVisualization'
        ofType:
          $ref: '#/components/schemas/GraphQLTypeForVisualization'
          nullable: true
          description: Wrapped type for LIST and NON_NULL types
      additionalProperties: true

    EventTrigger:
      type: object
      description: Event trigger configuration for a table
      required:
        - name
        - definition
      properties:
        name:
          type: string
          description: Name of the event trigger
        definition:
          $ref: '#/components/schemas/EventTriggerDefinition'
        retry_conf:
          description: Retry configuration if event delivery fails
          $ref: '#/components/schemas/RetryConf'
        webhook:
          type: string
          description: Event Trigger Webhook URL. A String value which supports templating environment variables enclosed in {{ and }}.
          example: '{{SERVICE_URL}}/hooks'
        webhook_from_env:
          type: string
          description: Environment variable name of webhook (Deprecated in favour of WebhookURL)
          example: SERVICE_ENDPOINT
        headers:
          description: List of headers to be sent with the webhook
          $ref: '#/components/schemas/Headers'
        request_transform:
          description: Attaches a Request Transformation to the Event Trigger.
          $ref: '#/components/schemas/RequestTransformation'
        trigger_on_replication:
          type: boolean
          description: Specification for enabling/disabling the Event Trigger during logical replication
      additionalProperties: true

    EventTriggerDefinition:
      type: object
      description: Definition of database operations that trigger the webhook
      required:
        - enable_manual
      properties:
        enable_manual:
          type: boolean
          description: Allow manual invocation of the trigger from console/API
          default: false
        insert:
          $ref: '#/components/schemas/OperationSpec'
        delete:
          $ref: '#/components/schemas/OperationSpec'
        update:
          $ref: '#/components/schemas/OperationSpec'

    OperationSpec:
      type: object
      nullable: true
      description: Operation specification
      required:
        - columns
      properties:
        columns:
          description: List of columns or "*" to listen to changes
          $ref: '#/components/schemas/EventTriggerColumns'
        payload:
          description: List of columns or "*" to send as part of webhook payload
          $ref: '#/components/schemas/EventTriggerColumns'

    EventTriggerColumns:
      oneOf:
        - type: string
          enum: ['*']
          description: All columns
        - type: array
          description: List of column names
          items:
            type: string
            description: Column name

    RetryConf:
      type: object
      description: Retry configuration when delivery to the webhook fails
      properties:
        num_retries:
          type: integer
          description: Number of times to retry delivery
          default: 0
        interval_sec:
          type: integer
          description: Number of seconds to wait between retries
          default: 10
        timeout_sec:
          type: integer
          description: Number of seconds to wait for the webhook response before timing out
          default: 60

    RequestTransformation:
      type: object
      description: Request transformation
      properties:
        version:
          description: Sets the RequestTransformation schema version. Version 1 uses a String for the body field and Version 2 takes a BodyTransform.
          type: string
          enum: ['1', '2']
          default: '1'
        method:
          description: Change the request method to this value.
          type: string
          enum: [POST, GET, PUT, DELETE, PATCH]
        url:
          description: Change the request URL to this value.
          type: string
          example: '{{$base_url}}/something'
        content_type:
          description: Replace the Content-Type with this value.
          type: string
          enum: ['application/json', 'application/x-www-form-urlencoded']
          default: application/json
        request_headers:
          description: Request Header Transformation.
          $ref: '#/components/schemas/TransformHeaders'
        query_params:
          description: Replace the query params on the URL with this value. You can specify a dictionary of key/value pairs which is converted into a query string or directly give a query string.
          oneOf:
            - type: object
              description: Query params as key-value pairs
              additionalProperties:
                type: string
              example: '{ "search": "value" }'
            - type: string
              description: Query string that comes from Kriti template
              example: 'urlstringquery=hello&urlstringquery2=hello2 OR myuserid={{concat(["userId=","asd"])}}'
        template_engine:
          description: Template language to be used for this transformation.
          type: string
          enum: [Kriti]
          default: Kriti
        body:
          description: A template script for transforming the request body.
          oneOf:
            - type: string
            - $ref: '#/components/schemas/BodyTransform'

    ResponseTransformation:
      type: object
      properties:
        version:
          description: Sets the ResponseTransformation schema version. Version 1 uses a String for the body field and Version 2 takes a BodyTransform.
          type: string
          enum: ['1', '2']
          default: '1'
        body:
          description: A template script for transforming the response body.
          oneOf:
            - type: string
            - $ref: '#/components/schemas/BodyTransform'
        template_engine:
          description: Template language to be used for this transformation.
          type: string
          enum: [Kriti]
          default: Kriti

    TransformHeaders:
      type: object
      properties:
        add_headers:
          description: A map of Header Key Value pairs to be added to the request.
          type: object
          additionalProperties:
            type: string
          example: '{content-type: "application/x-www-form-urlencoded"}'
        remove_headers:
          description: Headers to be removed from the request.
          type: array
          example: ['content-type']
          items:
            description: Header key
            type: string

    BodyTransform:
      type: object
      description: Body transformation for version 2 transforms
      required:
        - action
      properties:
        action:
          description: The action to perform on the request body.
          type: string
          enum: [remove, transform, x_www_form_urlencoded]
        template:
          type: string
          description: The transformation template to be applied to the body. This is required if the action is transform.
        form_template:
          description: The key/value pairs to be used in a x-www-url-formencoded body. The values can be transfomation templates.
          type: object
          additionalProperties:
            type: string

    QualifiedTable:
      type: object
      description: Object with table name and schema
      required:
        - name
        - schema
      properties:
        name:
          type: string
          description: Name of the table
        schema:
          type: string
          description: Schema of the table

    GetEventInvocationLogsOperation:
      description: Operation used to fetch the invocation logs for a given event trigger.
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_get_event_invocation_logs]
        args:
          $ref: '#/components/schemas/GetEventInvocationLogsArgs'

    GetEventInvocationLogsArgs:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the event trigger
        source:
          type: string
          description: Name of the source database of the trigger
          default: default
        limit:
          type: integer
          description: Maximum number of invocation logs to be returned in one API call
          default: 100
        offset:
          type: integer
          default: 0

    GetEventInvocationLogsResponse:
      type: array
      description: List of invocation logs for the given event trigger
      items:
        $ref: '#/components/schemas/EventInvocationLogEntry'

    EventInvocationLogEntry:
      type: object
      description: Event invocation log entry containing request and response details
      required:
        - id
        - trigger_name
        - event_id
        - http_status
        - request
        - created_at
      properties:
        id:
          type: string
          description: Represents a UUID for invocation.
          example: d1de2b04-dbb9-4d21-bdaf-25c3dfef3d7b
        trigger_name:
          type: string
          description: Name of the event trigger
          example: mytrigger
        event_id:
          type: string
          description: Unique identifier for the event
          example: a7b67072-980d-4cfd-bbfa-a8ee749f453e
        http_status:
          type: integer
          description: HTTP status code of the webhook response
          example: 200
        request:
          type: object
          description: Details of the HTTP request sent to the webhook
          required:
            - headers
            - payload
            - version
          properties:
            headers:
              $ref: '#/components/schemas/EventInvocationLogEntryHeaders'
            payload:
              type: object
              description: The event payload sent to the webhook
              properties:
                created_at:
                  type: string
                  format: date-time
                  description: When the event was created
                delivery_info:
                  type: object
                  description: Contains information about message delivery retries.
                  properties:
                    current_retry:
                      type: integer
                      description: Represents the current retry number.
                    max_retries:
                      type: integer
                      description: Represents the maximum number of retries.
                event:
                  type: object
                  description: Represents an event and related data.
                  properties:
                    data:
                      type: object
                      description: Contains data related to the event.
                      properties:
                        new:
                          type: object
                          description: Object representing the new data associated with the event, with each key-value pair representing a column name and its value.
                        old:
                          type: object
                          nullable: true
                          description: Represents old data associated with the event or `null` if not applicable.
                    op:
                      type: string
                      enum: [INSERT, UPDATE, DELETE, MANUAL]
                      description: Represents the name of the operation.
                    session_variables:
                      type: object
                      description: Key-value pairs of session variables (i.e. "x-hasura-*" variables) and their values (NULL if no session variables found) (**Only available for Postgres**)
                      nullable: true
                      additionalProperties:
                        type: string
                    trace_context:
                      type: object
                      description: Contains trace context information.
                      properties:
                        sampling_state:
                          type: string
                        span_id:
                          type: string
                          description: Represents the span ID for tracing.
                        trace_id:
                          type: string
                          description: Represents the trace ID for tracing.
                id:
                  type: string
                  description: Event ID
                table:
                  $ref: '#/components/schemas/QualifiedTable'
                trigger:
                  type: object
                  description: Represents information about the trigger.
                  properties:
                    name:
                      type: string
                      description: Represents the name of the trigger.
              additionalProperties: true
            version:
              type: string
              description: Version of the event payload format
              example: '2'
        response:
          type: object
          description: Details of the HTTP response from the webhook
          properties:
            data:
              type: object
              description: Response data from the webhook
              properties:
                body:
                  type: string
                  description: Response body as string
                headers:
                  $ref: '#/components/schemas/EventInvocationLogEntryHeaders'
                status:
                  type: integer
                  description: HTTP status code
                message:
                  type: string
                  description: Error message
                  example: '{"message":"Connection failure: ...}'

            type:
              type: string
              description: Type of response
              example: webhook_response
            version:
              type: string
              description: Version of the response format
              example: '2'
        created_at:
          type: string
          format: date-time
          description: Represents a timestamp value for the invocation of the trigger.
          example: 2025-09-19T16:01:31.086239Z

    EventInvocationLogEntryHeaders:
      type: array
      description: HTTP headers sent with the webhook request
      items:
        type: object
        required:
          - name
          - value
        properties:
          name:
            type: string
            description: Header name
            example: Date
          value:
            type: string
            description: Header value
            example: 'Sun, 21 Sep 2025 16:13:25 GMT'

    GetEventLogsOperation:
      description: Operation used to fetch the event logs for a given event trigger. (Both pending and delivered)
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_get_event_logs]
        args:
          $ref: '#/components/schemas/GetEventLogsArgs'

    GetEventLogsArgs:
      allOf:
        - $ref: '#/components/schemas/GetEventInvocationLogsArgs'
        - type: object
          properties:
            status:
              description: Type of event logs to be fetched. If `status` is not provided then all types of status are included
              type: string
              enum: [pending, delivered]

    GetEventLogsResponse:
      type: array
      description: List of event logs for the given event trigger
      items:
        $ref: '#/components/schemas/EventLogEntry'

    EventLogEntry:
      type: object
      description: Event log entry containing payload and delivery details
      required:
        - id
        - schema_name
        - table_name
        - trigger_name
        - payload
        - delivered
        - error
        - tries
        - created_at
        - locked
        - next_retry_at
        - archived
      properties:
        id:
          type: string
          description: Unique identifier for the log entry
          example: 6301c9e1-b649-4861-9419-68b4cbf9382a
        schema_name:
          type: string
          description: Represents the schema name of the table.
          example: public
        table_name:
          type: string
          description: Represents the name of the table.
          example: mytable
        trigger_name:
          type: string
          description: Represents the name of the trigger.
          example: mytrigger
        payload:
          type: object
          properties:
            data:
              type: object
              properties:
                new:
                  type: object
                  description: Object representing the new data associated with the event, with each key-value pair representing a column name and its value.
                  additionalProperties: true
                old:
                  type: object
                  description: Represents old data associated with the event or null if not applicable.
                  additionalProperties: true
                  nullable: true
            op:
              description: Represents the name of the operation.
              type: string
              enum: [INSERT, UPDATE, DELETE, MANUAL]
            session_variables:
              type: object
              description: Key-value pairs of session variables (i.e. "x-hasura-*" variables) and their values (NULL if no session variables found)
              nullable: true
              additionalProperties:
                type: string
            trace_context:
              type: object
              description: Contains trace context information.
              additionalProperties:
                type: string

        delivered:
          type: boolean
        error:
          type: boolean
        tries:
          type: integer
        created_at:
          type: string
          format: date-time
          description: Represents a timestamp value for the creation of the log entry.
          example: 2025-09-19T16:01:31.086239Z
        next_retry_at:
          type: string
          format: date-time
          nullable: true

      additionalProperties: true

    GetEventAndInvocationLogsByIdOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_get_event_by_id]
        args:
          $ref: '#/components/schemas/GetEventAndInvocationLogsByIdArgs'

    GetEventAndInvocationLogsByIdArgs:
      type: object
      required:
        - event_id
      properties:
        event_id:
          type: string
          description: ID of the event
          example: 6301c9e1-b649-4861-9419-68b4cbf9382a
        source:
          type: string
          description: Name of the source database of the trigger
          default: default
        invocation_log_limit:
          type: integer
          description: Maximum number of invocation logs to be returned in one API call
          default: 100
        invocation_log_offset:
          type: integer
          description: Starting point from where the invocation logs need to be returned
          default: 0

    GetEventAndInvocationLogsByIdResponse:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EventLogEntry'
        invocations:
          type: array
          description: List of invocation logs for the given event id
          items:
            $ref: '#/components/schemas/EventInvocationLogEntry'

    RedeliverEventOperation:
      description: is used to redeliver an existing event. For example, if an event is marked as error ( say it did not succeed after retries), you can redeliver it using this API. Note that this will reset the count of retries so far. If the event fails to deliver, it will be retried automatically according to its `retry_conf`.
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_redeliver_event]
        args:
          $ref: '#/components/schemas/RedeliverEventArgs'

    RedeliverEventArgs:
      type: object
      required:
        - event_id
      properties:
        event_id:
          type: string
          description: UUID of the event
          example: 6301c9e1-b649-4861-9419-68b4cbf9382a

    CreateEventTriggerArgs:
      type: object
      required:
        - name
        - table
      properties:
        name:
          type: string
          description: Name of the Event Trigger
        table:
          description: Object with table name and schema
          $ref: '#/components/schemas/QualifiedTable'
        source:
          type: string
          description: Name of the source database of the table
          default: default
        webhook:
          type: string
          nullable: true
          description: Webhook URL. Supports template variables like {{ENV_VAR}}/some/path
          example: '{{SERVICE_URL}}/hooks'
        webhook_from_env:
          type: string
          nullable: true
          description: Environment variable containing the webhook URL
          example: SERVICE_ENDPOINT
        insert:
          description: Specification for the insert operation
          $ref: '#/components/schemas/OperationSpec'
        update:
          description: Specification for the update operation
          $ref: '#/components/schemas/OperationSpec'
        delete:
          description: Specification for the delete operation
          $ref: '#/components/schemas/OperationSpec'
        headers:
          description: List of headers to be sent with the webhook
          $ref: '#/components/schemas/Headers'
        retry_conf:
          description: Retry configuration if event delivery fails
          $ref: '#/components/schemas/RetryConf'
        replace:
          type: boolean
          description: If set to true, the Event Trigger is replaced with the new definition
        enable_manual:
          type: boolean
          description: If set to true, the Event Trigger can be invoked manually
        request_transform:
          description: Attaches a Request Transformation to the Event Trigger.
          $ref: '#/components/schemas/RequestTransformation'
        response_transform:
          description: Attaches a Response Transformation to the Event Trigger.
          $ref: '#/components/schemas/ResponseTransformation'
        trigger_on_replication:
          type: boolean
          description: Specification for enabling/disabling the Event Trigger during logical replication
          default: false
      additionalProperties: true

    CreateEventTriggerBulkOperation:
      type: object
      description: Create a new Event Trigger or replace an existing Event Trigger.
      required:
        - type
        - source
        - args
      properties:
        type:
          type: string
          enum: [bulk]
          description: Type of operation to create event triggers
        args:
          type: array
          items:
            $ref: '#/components/schemas/CreateEventTriggerStep'
        source:
          type: string
          description: Source of the operation
          example: default
        resource_version:
          type: integer
          description: Version of the resource that you are targeting for replacement
          example: 1

    CreateEventTriggerStep:
      description: Create a new Event Trigger or replace an existing Event Trigger.
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          description: Type of operation to create event triggers
          enum: [pg_create_event_trigger]
        args:
          $ref: '#/components/schemas/CreateEventTriggerArgs'

    DeleteEventTriggerBulkOperation:
      type: object
      required:
        - type
        - args
        - source
      properties:
        type:
          type: string
          enum: [bulk]
          description: Execute multiple operations in a single query
        source:
          type: string
          description: Source of the operation
          example: default
        resource_version:
          type: integer
          description: Resource version of the operation
          example: 1
        args:
          type: array
          items:
            $ref: '#/components/schemas/DeleteEventTriggerStep'
