import * as fs from 'fs';
import { defineConfig } from 'orval';
import * as path from 'path';

export default defineConfig({
  hasuraApi: {
    input: {
      target: 'openapi.yaml',
    },
    output: {
      mode: 'tags-split',
      target: 'generated',
      schemas: 'generated/schemas',
      client: 'fetch',
      prettier: true,
      override: {
        mutator: {
          path: './customFetch.ts',
          name: 'customFetch',
        },
      },
    },
    hooks: {
      /**
       * This hook is used to update the default.ts file to use the CustomFetchOptions type.
       * This is necessary because the default.ts file is generated by orval and does not have the CustomFetchOptions type.
       * This is a workaround to avoid having to manually update the default.ts file.
       *
       * @see https://github.com/orval-labs/orval/issues/1222#issuecomment-2683689088
       */
      afterAllFilesWrite: () => {
        const defaultTsPath = path.join(
          __dirname,
          'generated/default/default.ts',
        );

        if (fs.existsSync(defaultTsPath)) {
          let content = fs.readFileSync(defaultTsPath, 'utf8');

          // Add import for CustomFetchOptions if not already present
          if (!content.includes('CustomFetchOptions')) {
            const importIndex = content.indexOf(
              "import { customFetch } from '../../customFetch';",
            );
            if (importIndex !== -1) {
              content = content.replace(
                "import { customFetch } from '../../customFetch';",
                "import { customFetch } from '../../customFetch';\nimport type { CustomFetchOptions } from '../../customFetch';",
              );
            }
          }

          // Replace all occurrences of 'options?: RequestInit' with 'options?: CustomFetchOptions'
          content = content.replace(
            /options\?\s*:\s*RequestInit/g,
            'options?: CustomFetchOptions',
          );

          fs.writeFileSync(defaultTsPath, content, 'utf8');
          // eslint-disable-next-line no-console
          console.log('âœ… Updated default.ts to use CustomFetchOptions');
        }
      },
    },
  },
});
