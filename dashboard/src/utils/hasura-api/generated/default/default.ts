/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Hasura Remote Schema API
 * API for managing remote schemas in Hasura
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import type {
  ErrorResponse,
  MetadataOperation200,
  MetadataOperationBody,
  MigrationRequest,
  SuccessResponse,
} from '.././schemas';

import type { CustomFetchOptions } from '../../customFetch';
import { customFetch } from '../../customFetch';

/**
 * Endpoint for all metadata operations
 * @summary Metadata API endpoint
 */
export type metadataOperationResponse200 = {
  data: MetadataOperation200;
  status: 200;
};

export type metadataOperationResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type metadataOperationResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type metadataOperationResponseComposite =
  | metadataOperationResponse200
  | metadataOperationResponse400
  | metadataOperationResponse500;

export type metadataOperationResponse = metadataOperationResponseComposite & {
  headers: Headers;
};

export const getMetadataOperationUrl = () => {
  return `/v1/metadata`;
};

export const metadataOperation = async (
  metadataOperationBody: MetadataOperationBody,
  options?: CustomFetchOptions,
): Promise<metadataOperationResponse> => {
  return customFetch<metadataOperationResponse>(getMetadataOperationUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(metadataOperationBody),
  });
};

export const getExecuteQueryMutationOptions = <
  TError = PostgresErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof executeQuery>>,
    TError,
    { data: ExecuteQueryBody },
    TContext
  >;
  request?: SecondParameter<typeof hasuraMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof executeQuery>>,
  TError,
  { data: ExecuteQueryBody },
  TContext
> => {
  const mutationKey = ['executeQuery'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof executeQuery>>,
    { data: ExecuteQueryBody }
  > = (props) => {
    const { data } = props ?? {};

    return executeQuery(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ExecuteQueryMutationResult = NonNullable<
  Awaited<ReturnType<typeof executeQuery>>
>;
export type ExecuteQueryMutationBody = ExecuteQueryBody;
export type ExecuteQueryMutationError = PostgresErrorResponse | ErrorResponse;

/**
 * @summary Execute database operations. Do not use to modify the database schema, use /v1/migrate instead
 */
export const useExecuteQuery = <
  TError = PostgresErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof executeQuery>>,
    TError,
    { data: ExecuteQueryBody },
    TContext
  >;
  request?: SecondParameter<typeof hasuraMutator>;
}): UseMutationResult<
  Awaited<ReturnType<typeof executeQuery>>,
  TError,
  { data: ExecuteQueryBody },
  TContext
> => {
  const mutationOptions = getExecuteQueryMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Executes a migration with the provided up and down steps
 * @summary Execute a migration
 */
export const executeMigration = (
  migrationRequest: MigrationRequest,
  options?: CustomFetchOptions,
): Promise<executeMigrationResponse> => {
  return customFetch<executeMigrationResponse>(getExecuteMigrationUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(migrationRequest),
  });
};
