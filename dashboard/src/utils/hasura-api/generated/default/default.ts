/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Hasura API
 * API for managing database operations, migrations, and metadata permissions
 * OpenAPI spec version: 1.0.0
 */
import type {
  ErrorResponse,
  ExecuteQuery200,
  ExecuteQueryBody,
  MetadataOperation200,
  MetadataOperationBody,
  MigrationRequest,
  PostgresErrorResponse,
  SuccessResponse,
} from '.././schemas';

import type { CustomFetchOptions } from '../../customFetch';
import { customFetch } from '../../customFetch';

/**
 * Execute SQL queries and other database operations
 * @summary Execute database operations. Do not use to modify the database schema, use /v1/migrate instead
 */
export type executeQueryResponse200 = {
  data: ExecuteQuery200;
  status: 200;
};

export type executeQueryResponse400 = {
  data: PostgresErrorResponse;
  status: 400;
};

export type executeQueryResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type executeQueryResponseComposite =
  | executeQueryResponse200
  | executeQueryResponse400
  | executeQueryResponse500;

export type executeQueryResponse = executeQueryResponseComposite & {
  headers: Headers;
};

export const getExecuteQueryUrl = () => {
  return `/v2/query`;
};

export const executeQuery = async (
  executeQueryBody: ExecuteQueryBody,
  options?: CustomFetchOptions,
): Promise<executeQueryResponse> => {
  return customFetch<executeQueryResponse>(getExecuteQueryUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(executeQueryBody),
  });
};

/**
 * Executes a migration with the provided up and down steps
 * @summary Execute a database migration
 */
export type executeMigrationResponse200 = {
  data: SuccessResponse;
  status: 200;
};

export type executeMigrationResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type executeMigrationResponseComposite =
  | executeMigrationResponse200
  | executeMigrationResponse500;

export type executeMigrationResponse = executeMigrationResponseComposite & {
  headers: Headers;
};

export const getExecuteMigrationUrl = () => {
  return `/apis/migrate`;
};

export const executeMigration = async (
  migrationRequest: MigrationRequest,
  options?: CustomFetchOptions,
): Promise<executeMigrationResponse> => {
  return customFetch<executeMigrationResponse>(getExecuteMigrationUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(migrationRequest),
  });
};

/**
 * Endpoint for all metadata operations
 * @summary Metadata API endpoint
 */
export type metadataOperationResponse200 = {
  data: MetadataOperation200;
  status: 200;
};

export type metadataOperationResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type metadataOperationResponseComposite =
  | metadataOperationResponse200
  | metadataOperationResponse400;

export type metadataOperationResponse = metadataOperationResponseComposite & {
  headers: Headers;
};

export const getMetadataOperationUrl = () => {
  return `/v1/metadata`;
};

export const metadataOperation = async (
  metadataOperationBody: MetadataOperationBody,
  options?: CustomFetchOptions,
): Promise<metadataOperationResponse> => {
  return customFetch<metadataOperationResponse>(getMetadataOperationUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(metadataOperationBody),
  });
};
