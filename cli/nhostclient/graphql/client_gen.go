// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package graphql

import (
	"context"
	"time"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type AppSummaryFragment struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Subdomain string                    "json:\"subdomain\" graphql:\"subdomain\""
	Region    AppSummaryFragment_Region "json:\"region\" graphql:\"region\""
}

func (t *AppSummaryFragment) GetID() string {
	if t == nil {
		t = &AppSummaryFragment{}
	}
	return t.ID
}
func (t *AppSummaryFragment) GetName() string {
	if t == nil {
		t = &AppSummaryFragment{}
	}
	return t.Name
}
func (t *AppSummaryFragment) GetSubdomain() string {
	if t == nil {
		t = &AppSummaryFragment{}
	}
	return t.Subdomain
}
func (t *AppSummaryFragment) GetRegion() *AppSummaryFragment_Region {
	if t == nil {
		t = &AppSummaryFragment{}
	}
	return &t.Region
}

type AppSummaryFragment_Region struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *AppSummaryFragment_Region) GetName() string {
	if t == nil {
		t = &AppSummaryFragment_Region{}
	}
	return t.Name
}

type GetOrganizationsAndWorkspacesApps_Organizations_Apps_AppSummaryFragment_Region struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationsAndWorkspacesApps_Organizations_Apps_AppSummaryFragment_Region) GetName() string {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps_Organizations_Apps_AppSummaryFragment_Region{}
	}
	return t.Name
}

type GetOrganizationsAndWorkspacesApps_Organizations struct {
	Apps []*AppSummaryFragment "json:\"apps\" graphql:\"apps\""
	Name string                "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationsAndWorkspacesApps_Organizations) GetApps() []*AppSummaryFragment {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps_Organizations{}
	}
	return t.Apps
}
func (t *GetOrganizationsAndWorkspacesApps_Organizations) GetName() string {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps_Organizations{}
	}
	return t.Name
}

type GetOrganizationsAndWorkspacesApps_Workspaces_Apps_AppSummaryFragment_Region struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationsAndWorkspacesApps_Workspaces_Apps_AppSummaryFragment_Region) GetName() string {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps_Workspaces_Apps_AppSummaryFragment_Region{}
	}
	return t.Name
}

type GetOrganizationsAndWorkspacesApps_Workspaces struct {
	Apps []*AppSummaryFragment "json:\"apps\" graphql:\"apps\""
	Name string                "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationsAndWorkspacesApps_Workspaces) GetApps() []*AppSummaryFragment {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps_Workspaces{}
	}
	return t.Apps
}
func (t *GetOrganizationsAndWorkspacesApps_Workspaces) GetName() string {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps_Workspaces{}
	}
	return t.Name
}

type GetHasuraAdminSecret_App_Config_Hasura struct {
	AdminSecret string  "json:\"adminSecret\" graphql:\"adminSecret\""
	Version     *string "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetHasuraAdminSecret_App_Config_Hasura) GetAdminSecret() string {
	if t == nil {
		t = &GetHasuraAdminSecret_App_Config_Hasura{}
	}
	return t.AdminSecret
}
func (t *GetHasuraAdminSecret_App_Config_Hasura) GetVersion() *string {
	if t == nil {
		t = &GetHasuraAdminSecret_App_Config_Hasura{}
	}
	return t.Version
}

type GetHasuraAdminSecret_App_Config struct {
	Hasura GetHasuraAdminSecret_App_Config_Hasura "json:\"hasura\" graphql:\"hasura\""
}

func (t *GetHasuraAdminSecret_App_Config) GetHasura() *GetHasuraAdminSecret_App_Config_Hasura {
	if t == nil {
		t = &GetHasuraAdminSecret_App_Config{}
	}
	return &t.Hasura
}

type GetHasuraAdminSecret_App struct {
	Config *GetHasuraAdminSecret_App_Config "json:\"config,omitempty\" graphql:\"config\""
}

func (t *GetHasuraAdminSecret_App) GetConfig() *GetHasuraAdminSecret_App_Config {
	if t == nil {
		t = &GetHasuraAdminSecret_App{}
	}
	return t.Config
}

type ListDeployments_Deployments struct {
	CommitMessage       *string    "json:\"commitMessage,omitempty\" graphql:\"commitMessage\""
	CommitSha           string     "json:\"commitSHA\" graphql:\"commitSHA\""
	CommitUserName      *string    "json:\"commitUserName,omitempty\" graphql:\"commitUserName\""
	DeploymentEndedAt   *time.Time "json:\"deploymentEndedAt,omitempty\" graphql:\"deploymentEndedAt\""
	DeploymentStartedAt *time.Time "json:\"deploymentStartedAt,omitempty\" graphql:\"deploymentStartedAt\""
	DeploymentStatus    *string    "json:\"deploymentStatus,omitempty\" graphql:\"deploymentStatus\""
	ID                  string     "json:\"id\" graphql:\"id\""
}

func (t *ListDeployments_Deployments) GetCommitMessage() *string {
	if t == nil {
		t = &ListDeployments_Deployments{}
	}
	return t.CommitMessage
}
func (t *ListDeployments_Deployments) GetCommitSha() string {
	if t == nil {
		t = &ListDeployments_Deployments{}
	}
	return t.CommitSha
}
func (t *ListDeployments_Deployments) GetCommitUserName() *string {
	if t == nil {
		t = &ListDeployments_Deployments{}
	}
	return t.CommitUserName
}
func (t *ListDeployments_Deployments) GetDeploymentEndedAt() *time.Time {
	if t == nil {
		t = &ListDeployments_Deployments{}
	}
	return t.DeploymentEndedAt
}
func (t *ListDeployments_Deployments) GetDeploymentStartedAt() *time.Time {
	if t == nil {
		t = &ListDeployments_Deployments{}
	}
	return t.DeploymentStartedAt
}
func (t *ListDeployments_Deployments) GetDeploymentStatus() *string {
	if t == nil {
		t = &ListDeployments_Deployments{}
	}
	return t.DeploymentStatus
}
func (t *ListDeployments_Deployments) GetID() string {
	if t == nil {
		t = &ListDeployments_Deployments{}
	}
	return t.ID
}

type GetDeploymentLogs_DeploymentLogs struct {
	CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
	ID        string    "json:\"id\" graphql:\"id\""
	Message   string    "json:\"message\" graphql:\"message\""
}

func (t *GetDeploymentLogs_DeploymentLogs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDeploymentLogs_DeploymentLogs{}
	}
	return &t.CreatedAt
}
func (t *GetDeploymentLogs_DeploymentLogs) GetID() string {
	if t == nil {
		t = &GetDeploymentLogs_DeploymentLogs{}
	}
	return t.ID
}
func (t *GetDeploymentLogs_DeploymentLogs) GetMessage() string {
	if t == nil {
		t = &GetDeploymentLogs_DeploymentLogs{}
	}
	return t.Message
}

type GetDeploymentLogs_Deployment struct {
	DeploymentEndedAt *time.Time "json:\"deploymentEndedAt,omitempty\" graphql:\"deploymentEndedAt\""
	DeploymentStatus  *string    "json:\"deploymentStatus,omitempty\" graphql:\"deploymentStatus\""
}

func (t *GetDeploymentLogs_Deployment) GetDeploymentEndedAt() *time.Time {
	if t == nil {
		t = &GetDeploymentLogs_Deployment{}
	}
	return t.DeploymentEndedAt
}
func (t *GetDeploymentLogs_Deployment) GetDeploymentStatus() *string {
	if t == nil {
		t = &GetDeploymentLogs_Deployment{}
	}
	return t.DeploymentStatus
}

type InsertDeployment_InsertDeployment struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *InsertDeployment_InsertDeployment) GetID() string {
	if t == nil {
		t = &InsertDeployment_InsertDeployment{}
	}
	return t.ID
}

type DeleteRefreshToken_DeleteAuthRefreshTokens_Returning struct {
	Typename *string "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *DeleteRefreshToken_DeleteAuthRefreshTokens_Returning) GetTypename() *string {
	if t == nil {
		t = &DeleteRefreshToken_DeleteAuthRefreshTokens_Returning{}
	}
	return t.Typename
}

type DeleteRefreshToken_DeleteAuthRefreshTokens struct {
	AffectedRows int64                                                   "json:\"affected_rows\" graphql:\"affected_rows\""
	Returning    []*DeleteRefreshToken_DeleteAuthRefreshTokens_Returning "json:\"returning\" graphql:\"returning\""
}

func (t *DeleteRefreshToken_DeleteAuthRefreshTokens) GetAffectedRows() int64 {
	if t == nil {
		t = &DeleteRefreshToken_DeleteAuthRefreshTokens{}
	}
	return t.AffectedRows
}
func (t *DeleteRefreshToken_DeleteAuthRefreshTokens) GetReturning() []*DeleteRefreshToken_DeleteAuthRefreshTokens_Returning {
	if t == nil {
		t = &DeleteRefreshToken_DeleteAuthRefreshTokens{}
	}
	return t.Returning
}

type GetSecrets_AppSecrets struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetSecrets_AppSecrets) GetName() string {
	if t == nil {
		t = &GetSecrets_AppSecrets{}
	}
	return t.Name
}
func (t *GetSecrets_AppSecrets) GetValue() string {
	if t == nil {
		t = &GetSecrets_AppSecrets{}
	}
	return t.Value
}

type CreateSecret_InsertSecret struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateSecret_InsertSecret) GetName() string {
	if t == nil {
		t = &CreateSecret_InsertSecret{}
	}
	return t.Name
}
func (t *CreateSecret_InsertSecret) GetValue() string {
	if t == nil {
		t = &CreateSecret_InsertSecret{}
	}
	return t.Value
}

type DeleteSecret_DeleteSecret struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *DeleteSecret_DeleteSecret) GetName() string {
	if t == nil {
		t = &DeleteSecret_DeleteSecret{}
	}
	return t.Name
}

type UpdateSecret_UpdateSecret struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateSecret_UpdateSecret) GetName() string {
	if t == nil {
		t = &UpdateSecret_UpdateSecret{}
	}
	return t.Name
}
func (t *UpdateSecret_UpdateSecret) GetValue() string {
	if t == nil {
		t = &UpdateSecret_UpdateSecret{}
	}
	return t.Value
}

type UpdateRunServiceConfig_UpdateRunServiceConfig struct {
	Typename *string "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *UpdateRunServiceConfig_UpdateRunServiceConfig) GetTypename() *string {
	if t == nil {
		t = &UpdateRunServiceConfig_UpdateRunServiceConfig{}
	}
	return t.Typename
}

type ReplaceRunServiceConfig_ReplaceRunServiceConfig struct {
	Typename *string "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *ReplaceRunServiceConfig_ReplaceRunServiceConfig) GetTypename() *string {
	if t == nil {
		t = &ReplaceRunServiceConfig_ReplaceRunServiceConfig{}
	}
	return t.Typename
}

type GetRunServiceInfo_RunService struct {
	AppID string "json:\"appID\" graphql:\"appID\""
}

func (t *GetRunServiceInfo_RunService) GetAppID() string {
	if t == nil {
		t = &GetRunServiceInfo_RunService{}
	}
	return t.AppID
}

type GetSoftwareVersions_SoftwareVersions struct {
	Software SoftwareTypeEnum "json:\"software\" graphql:\"software\""
	Version  string           "json:\"version\" graphql:\"version\""
}

func (t *GetSoftwareVersions_SoftwareVersions) GetSoftware() *SoftwareTypeEnum {
	if t == nil {
		t = &GetSoftwareVersions_SoftwareVersions{}
	}
	return &t.Software
}
func (t *GetSoftwareVersions_SoftwareVersions) GetVersion() string {
	if t == nil {
		t = &GetSoftwareVersions_SoftwareVersions{}
	}
	return t.Version
}

type GetOrganizationsAndWorkspacesApps struct {
	Organizations []*GetOrganizationsAndWorkspacesApps_Organizations "json:\"organizations\" graphql:\"organizations\""
	Workspaces    []*GetOrganizationsAndWorkspacesApps_Workspaces    "json:\"workspaces\" graphql:\"workspaces\""
}

func (t *GetOrganizationsAndWorkspacesApps) GetOrganizations() []*GetOrganizationsAndWorkspacesApps_Organizations {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps{}
	}
	return t.Organizations
}
func (t *GetOrganizationsAndWorkspacesApps) GetWorkspaces() []*GetOrganizationsAndWorkspacesApps_Workspaces {
	if t == nil {
		t = &GetOrganizationsAndWorkspacesApps{}
	}
	return t.Workspaces
}

type GetHasuraAdminSecret struct {
	App *GetHasuraAdminSecret_App "json:\"app,omitempty\" graphql:\"app\""
}

func (t *GetHasuraAdminSecret) GetApp() *GetHasuraAdminSecret_App {
	if t == nil {
		t = &GetHasuraAdminSecret{}
	}
	return t.App
}

type GetConfigRawJSON struct {
	ConfigRawJSON string "json:\"configRawJSON\" graphql:\"configRawJSON\""
}

func (t *GetConfigRawJSON) GetConfigRawJSON() string {
	if t == nil {
		t = &GetConfigRawJSON{}
	}
	return t.ConfigRawJSON
}

type ReplaceConfigRawJSON struct {
	ReplaceConfigRawJSON string "json:\"replaceConfigRawJSON\" graphql:\"replaceConfigRawJSON\""
}

func (t *ReplaceConfigRawJSON) GetReplaceConfigRawJSON() string {
	if t == nil {
		t = &ReplaceConfigRawJSON{}
	}
	return t.ReplaceConfigRawJSON
}

type ListDeployments struct {
	Deployments []*ListDeployments_Deployments "json:\"deployments\" graphql:\"deployments\""
}

func (t *ListDeployments) GetDeployments() []*ListDeployments_Deployments {
	if t == nil {
		t = &ListDeployments{}
	}
	return t.Deployments
}

type GetDeploymentLogs struct {
	DeploymentLogs []*GetDeploymentLogs_DeploymentLogs "json:\"deploymentLogs\" graphql:\"deploymentLogs\""
	Deployment     *GetDeploymentLogs_Deployment       "json:\"deployment,omitempty\" graphql:\"deployment\""
}

func (t *GetDeploymentLogs) GetDeploymentLogs() []*GetDeploymentLogs_DeploymentLogs {
	if t == nil {
		t = &GetDeploymentLogs{}
	}
	return t.DeploymentLogs
}
func (t *GetDeploymentLogs) GetDeployment() *GetDeploymentLogs_Deployment {
	if t == nil {
		t = &GetDeploymentLogs{}
	}
	return t.Deployment
}

type InsertDeployment struct {
	InsertDeployment *InsertDeployment_InsertDeployment "json:\"insertDeployment,omitempty\" graphql:\"insertDeployment\""
}

func (t *InsertDeployment) GetInsertDeployment() *InsertDeployment_InsertDeployment {
	if t == nil {
		t = &InsertDeployment{}
	}
	return t.InsertDeployment
}

type DeleteRefreshToken struct {
	DeleteAuthRefreshTokens *DeleteRefreshToken_DeleteAuthRefreshTokens "json:\"deleteAuthRefreshTokens,omitempty\" graphql:\"deleteAuthRefreshTokens\""
}

func (t *DeleteRefreshToken) GetDeleteAuthRefreshTokens() *DeleteRefreshToken_DeleteAuthRefreshTokens {
	if t == nil {
		t = &DeleteRefreshToken{}
	}
	return t.DeleteAuthRefreshTokens
}

type GetSecrets struct {
	AppSecrets []*GetSecrets_AppSecrets "json:\"appSecrets\" graphql:\"appSecrets\""
}

func (t *GetSecrets) GetAppSecrets() []*GetSecrets_AppSecrets {
	if t == nil {
		t = &GetSecrets{}
	}
	return t.AppSecrets
}

type CreateSecret struct {
	InsertSecret CreateSecret_InsertSecret "json:\"insertSecret\" graphql:\"insertSecret\""
}

func (t *CreateSecret) GetInsertSecret() *CreateSecret_InsertSecret {
	if t == nil {
		t = &CreateSecret{}
	}
	return &t.InsertSecret
}

type DeleteSecret struct {
	DeleteSecret *DeleteSecret_DeleteSecret "json:\"deleteSecret,omitempty\" graphql:\"deleteSecret\""
}

func (t *DeleteSecret) GetDeleteSecret() *DeleteSecret_DeleteSecret {
	if t == nil {
		t = &DeleteSecret{}
	}
	return t.DeleteSecret
}

type UpdateSecret struct {
	UpdateSecret UpdateSecret_UpdateSecret "json:\"updateSecret\" graphql:\"updateSecret\""
}

func (t *UpdateSecret) GetUpdateSecret() *UpdateSecret_UpdateSecret {
	if t == nil {
		t = &UpdateSecret{}
	}
	return &t.UpdateSecret
}

type UpdateRunServiceConfig struct {
	UpdateRunServiceConfig UpdateRunServiceConfig_UpdateRunServiceConfig "json:\"updateRunServiceConfig\" graphql:\"updateRunServiceConfig\""
}

func (t *UpdateRunServiceConfig) GetUpdateRunServiceConfig() *UpdateRunServiceConfig_UpdateRunServiceConfig {
	if t == nil {
		t = &UpdateRunServiceConfig{}
	}
	return &t.UpdateRunServiceConfig
}

type ReplaceRunServiceConfig struct {
	ReplaceRunServiceConfig ReplaceRunServiceConfig_ReplaceRunServiceConfig "json:\"replaceRunServiceConfig\" graphql:\"replaceRunServiceConfig\""
}

func (t *ReplaceRunServiceConfig) GetReplaceRunServiceConfig() *ReplaceRunServiceConfig_ReplaceRunServiceConfig {
	if t == nil {
		t = &ReplaceRunServiceConfig{}
	}
	return &t.ReplaceRunServiceConfig
}

type GetRunServiceInfo struct {
	RunService *GetRunServiceInfo_RunService "json:\"runService,omitempty\" graphql:\"runService\""
}

func (t *GetRunServiceInfo) GetRunService() *GetRunServiceInfo_RunService {
	if t == nil {
		t = &GetRunServiceInfo{}
	}
	return t.RunService
}

type GetRunServiceConfigRawJSON struct {
	RunServiceConfigRawJSON string "json:\"runServiceConfigRawJSON\" graphql:\"runServiceConfigRawJSON\""
}

func (t *GetRunServiceConfigRawJSON) GetRunServiceConfigRawJSON() string {
	if t == nil {
		t = &GetRunServiceConfigRawJSON{}
	}
	return t.RunServiceConfigRawJSON
}

type GetSoftwareVersions struct {
	SoftwareVersions []*GetSoftwareVersions_SoftwareVersions "json:\"softwareVersions\" graphql:\"softwareVersions\""
}

func (t *GetSoftwareVersions) GetSoftwareVersions() []*GetSoftwareVersions_SoftwareVersions {
	if t == nil {
		t = &GetSoftwareVersions{}
	}
	return t.SoftwareVersions
}

const GetOrganizationsAndWorkspacesAppsDocument = `query GetOrganizationsAndWorkspacesApps {
	organizations {
		name
		apps {
			... AppSummaryFragment
		}
	}
	workspaces {
		name
		apps {
			... AppSummaryFragment
		}
	}
}
fragment AppSummaryFragment on apps {
	id
	name
	subdomain
	region {
		name
	}
}
`

func (c *Client) GetOrganizationsAndWorkspacesApps(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationsAndWorkspacesApps, error) {
	vars := map[string]any{}

	var res GetOrganizationsAndWorkspacesApps
	if err := c.Client.Post(ctx, "GetOrganizationsAndWorkspacesApps", GetOrganizationsAndWorkspacesAppsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHasuraAdminSecretDocument = `query GetHasuraAdminSecret ($appID: uuid!) {
	app(id: $appID) {
		config(resolve: true) {
			hasura {
				version
				adminSecret
			}
		}
	}
}
`

func (c *Client) GetHasuraAdminSecret(ctx context.Context, appID string, interceptors ...clientv2.RequestInterceptor) (*GetHasuraAdminSecret, error) {
	vars := map[string]any{
		"appID": appID,
	}

	var res GetHasuraAdminSecret
	if err := c.Client.Post(ctx, "GetHasuraAdminSecret", GetHasuraAdminSecretDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetConfigRawJSONDocument = `query GetConfigRawJSON ($appID: uuid!) {
	configRawJSON(appID: $appID, resolve: false)
}
`

func (c *Client) GetConfigRawJSON(ctx context.Context, appID string, interceptors ...clientv2.RequestInterceptor) (*GetConfigRawJSON, error) {
	vars := map[string]any{
		"appID": appID,
	}

	var res GetConfigRawJSON
	if err := c.Client.Post(ctx, "GetConfigRawJSON", GetConfigRawJSONDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ReplaceConfigRawJSONDocument = `mutation ReplaceConfigRawJSON ($appID: uuid!, $rawJSON: String!) {
	replaceConfigRawJSON(appID: $appID, rawJSON: $rawJSON)
}
`

func (c *Client) ReplaceConfigRawJSON(ctx context.Context, appID string, rawJSON string, interceptors ...clientv2.RequestInterceptor) (*ReplaceConfigRawJSON, error) {
	vars := map[string]any{
		"appID":   appID,
		"rawJSON": rawJSON,
	}

	var res ReplaceConfigRawJSON
	if err := c.Client.Post(ctx, "ReplaceConfigRawJSON", ReplaceConfigRawJSONDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListDeploymentsDocument = `query ListDeployments ($appID: uuid!) {
	deployments(where: {appId:{_eq:$appID}}, order_by: {deploymentStartedAt:desc}, limit: 10) {
		id
		deploymentStartedAt
		deploymentEndedAt
		deploymentStatus
		commitSHA
		commitMessage
		commitUserName
	}
}
`

func (c *Client) ListDeployments(ctx context.Context, appID string, interceptors ...clientv2.RequestInterceptor) (*ListDeployments, error) {
	vars := map[string]any{
		"appID": appID,
	}

	var res ListDeployments
	if err := c.Client.Post(ctx, "ListDeployments", ListDeploymentsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDeploymentLogsDocument = `query GetDeploymentLogs ($deploymentID: uuid!) {
	deploymentLogs(where: {deploymentId:{_eq:$deploymentID}}, order_by: {createdAt:asc}) {
		id
		createdAt
		message
	}
	deployment(id: $deploymentID) {
		deploymentEndedAt
		deploymentStatus
	}
}
`

func (c *Client) GetDeploymentLogs(ctx context.Context, deploymentID string, interceptors ...clientv2.RequestInterceptor) (*GetDeploymentLogs, error) {
	vars := map[string]any{
		"deploymentID": deploymentID,
	}

	var res GetDeploymentLogs
	if err := c.Client.Post(ctx, "GetDeploymentLogs", GetDeploymentLogsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const InsertDeploymentDocument = `mutation InsertDeployment ($object: deployments_insert_input!) {
	insertDeployment(object: $object) {
		id
	}
}
`

func (c *Client) InsertDeployment(ctx context.Context, object DeploymentsInsertInput, interceptors ...clientv2.RequestInterceptor) (*InsertDeployment, error) {
	vars := map[string]any{
		"object": object,
	}

	var res InsertDeployment
	if err := c.Client.Post(ctx, "InsertDeployment", InsertDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteRefreshTokenDocument = `mutation DeleteRefreshToken ($where: authRefreshTokens_bool_exp!) {
	deleteAuthRefreshTokens(where: $where) {
		affected_rows
		returning {
			__typename
		}
	}
}
`

func (c *Client) DeleteRefreshToken(ctx context.Context, where AuthRefreshTokensBoolExp, interceptors ...clientv2.RequestInterceptor) (*DeleteRefreshToken, error) {
	vars := map[string]any{
		"where": where,
	}

	var res DeleteRefreshToken
	if err := c.Client.Post(ctx, "DeleteRefreshToken", DeleteRefreshTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSecretsDocument = `query GetSecrets ($appID: uuid!) {
	appSecrets(appID: $appID) {
		name
		value
	}
}
`

func (c *Client) GetSecrets(ctx context.Context, appID string, interceptors ...clientv2.RequestInterceptor) (*GetSecrets, error) {
	vars := map[string]any{
		"appID": appID,
	}

	var res GetSecrets
	if err := c.Client.Post(ctx, "GetSecrets", GetSecretsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSecretDocument = `mutation CreateSecret ($appID: uuid!, $name: String!, $value: String!) {
	insertSecret(appID: $appID, secret: {name:$name,value:$value}) {
		name
		value
	}
}
`

func (c *Client) CreateSecret(ctx context.Context, appID string, name string, value string, interceptors ...clientv2.RequestInterceptor) (*CreateSecret, error) {
	vars := map[string]any{
		"appID": appID,
		"name":  name,
		"value": value,
	}

	var res CreateSecret
	if err := c.Client.Post(ctx, "CreateSecret", CreateSecretDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSecretDocument = `mutation DeleteSecret ($appID: uuid!, $name: String!) {
	deleteSecret(appID: $appID, key: $name) {
		name
	}
}
`

func (c *Client) DeleteSecret(ctx context.Context, appID string, name string, interceptors ...clientv2.RequestInterceptor) (*DeleteSecret, error) {
	vars := map[string]any{
		"appID": appID,
		"name":  name,
	}

	var res DeleteSecret
	if err := c.Client.Post(ctx, "DeleteSecret", DeleteSecretDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSecretDocument = `mutation UpdateSecret ($appID: uuid!, $name: String!, $value: String!) {
	updateSecret(appID: $appID, secret: {name:$name,value:$value}) {
		name
		value
	}
}
`

func (c *Client) UpdateSecret(ctx context.Context, appID string, name string, value string, interceptors ...clientv2.RequestInterceptor) (*UpdateSecret, error) {
	vars := map[string]any{
		"appID": appID,
		"name":  name,
		"value": value,
	}

	var res UpdateSecret
	if err := c.Client.Post(ctx, "UpdateSecret", UpdateSecretDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateRunServiceConfigDocument = `mutation UpdateRunServiceConfig ($appID: uuid!, $serviceID: uuid!, $config: ConfigRunServiceConfigUpdateInput!) {
	updateRunServiceConfig(appID: $appID, serviceID: $serviceID, config: $config) {
		__typename
	}
}
`

func (c *Client) UpdateRunServiceConfig(ctx context.Context, appID string, serviceID string, config ConfigRunServiceConfigUpdateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateRunServiceConfig, error) {
	vars := map[string]any{
		"appID":     appID,
		"serviceID": serviceID,
		"config":    config,
	}

	var res UpdateRunServiceConfig
	if err := c.Client.Post(ctx, "UpdateRunServiceConfig", UpdateRunServiceConfigDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ReplaceRunServiceConfigDocument = `mutation ReplaceRunServiceConfig ($appID: uuid!, $serviceID: uuid!, $config: ConfigRunServiceConfigInsertInput!) {
	replaceRunServiceConfig(appID: $appID, serviceID: $serviceID, config: $config) {
		__typename
	}
}
`

func (c *Client) ReplaceRunServiceConfig(ctx context.Context, appID string, serviceID string, config ConfigRunServiceConfigInsertInput, interceptors ...clientv2.RequestInterceptor) (*ReplaceRunServiceConfig, error) {
	vars := map[string]any{
		"appID":     appID,
		"serviceID": serviceID,
		"config":    config,
	}

	var res ReplaceRunServiceConfig
	if err := c.Client.Post(ctx, "ReplaceRunServiceConfig", ReplaceRunServiceConfigDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRunServiceInfoDocument = `query GetRunServiceInfo ($serviceID: uuid!) {
	runService(id: $serviceID) {
		appID
	}
}
`

func (c *Client) GetRunServiceInfo(ctx context.Context, serviceID string, interceptors ...clientv2.RequestInterceptor) (*GetRunServiceInfo, error) {
	vars := map[string]any{
		"serviceID": serviceID,
	}

	var res GetRunServiceInfo
	if err := c.Client.Post(ctx, "GetRunServiceInfo", GetRunServiceInfoDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRunServiceConfigRawJSONDocument = `query GetRunServiceConfigRawJSON ($appID: uuid!, $serviceID: uuid!, $resolve: Boolean!) {
	runServiceConfigRawJSON(appID: $appID, serviceID: $serviceID, resolve: $resolve)
}
`

func (c *Client) GetRunServiceConfigRawJSON(ctx context.Context, appID string, serviceID string, resolve bool, interceptors ...clientv2.RequestInterceptor) (*GetRunServiceConfigRawJSON, error) {
	vars := map[string]any{
		"appID":     appID,
		"serviceID": serviceID,
		"resolve":   resolve,
	}

	var res GetRunServiceConfigRawJSON
	if err := c.Client.Post(ctx, "GetRunServiceConfigRawJSON", GetRunServiceConfigRawJSONDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSoftwareVersionsDocument = `query GetSoftwareVersions {
	softwareVersions {
		software
		version
	}
}
`

func (c *Client) GetSoftwareVersions(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetSoftwareVersions, error) {
	vars := map[string]any{}

	var res GetSoftwareVersions
	if err := c.Client.Post(ctx, "GetSoftwareVersions", GetSoftwareVersionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetOrganizationsAndWorkspacesAppsDocument: "GetOrganizationsAndWorkspacesApps",
	GetHasuraAdminSecretDocument:              "GetHasuraAdminSecret",
	GetConfigRawJSONDocument:                  "GetConfigRawJSON",
	ReplaceConfigRawJSONDocument:              "ReplaceConfigRawJSON",
	ListDeploymentsDocument:                   "ListDeployments",
	GetDeploymentLogsDocument:                 "GetDeploymentLogs",
	InsertDeploymentDocument:                  "InsertDeployment",
	DeleteRefreshTokenDocument:                "DeleteRefreshToken",
	GetSecretsDocument:                        "GetSecrets",
	CreateSecretDocument:                      "CreateSecret",
	DeleteSecretDocument:                      "DeleteSecret",
	UpdateSecretDocument:                      "UpdateSecret",
	UpdateRunServiceConfigDocument:            "UpdateRunServiceConfig",
	ReplaceRunServiceConfigDocument:           "ReplaceRunServiceConfig",
	GetRunServiceInfoDocument:                 "GetRunServiceInfo",
	GetRunServiceConfigRawJSONDocument:        "GetRunServiceConfigRawJSON",
	GetSoftwareVersionsDocument:               "GetSoftwareVersions",
}
