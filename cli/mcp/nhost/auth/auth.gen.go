// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package auth

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	protocol "github.com/go-webauthn/webauthn/protocol"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes         = "BearerAuth.Scopes"
	BearerAuthElevatedScopes = "BearerAuthElevated.Scopes"
)

// Defines values for ErrorResponseError.
const (
	DefaultRoleMustBeInAllowedRoles ErrorResponseError = "default-role-must-be-in-allowed-roles"
	DisabledEndpoint                ErrorResponseError = "disabled-endpoint"
	DisabledUser                    ErrorResponseError = "disabled-user"
	EmailAlreadyInUse               ErrorResponseError = "email-already-in-use"
	EmailAlreadyVerified            ErrorResponseError = "email-already-verified"
	ForbiddenAnonymous              ErrorResponseError = "forbidden-anonymous"
	InternalServerError             ErrorResponseError = "internal-server-error"
	InvalidEmailPassword            ErrorResponseError = "invalid-email-password"
	InvalidPat                      ErrorResponseError = "invalid-pat"
	InvalidRefreshToken             ErrorResponseError = "invalid-refresh-token"
	InvalidRequest                  ErrorResponseError = "invalid-request"
	InvalidTicket                   ErrorResponseError = "invalid-ticket"
	LocaleNotAllowed                ErrorResponseError = "locale-not-allowed"
	PasswordInHibpDatabase          ErrorResponseError = "password-in-hibp-database"
	PasswordTooShort                ErrorResponseError = "password-too-short"
	RedirectToNotAllowed            ErrorResponseError = "redirectTo-not-allowed"
	RoleNotAllowed                  ErrorResponseError = "role-not-allowed"
	SignupDisabled                  ErrorResponseError = "signup-disabled"
	UnverifiedUser                  ErrorResponseError = "unverified-user"
	UserNotAnonymous                ErrorResponseError = "user-not-anonymous"
)

// Defines values for OKResponse.
const (
	OK OKResponse = "OK"
)

// Defines values for Provider.
const (
	Apple  Provider = "apple"
	Google Provider = "google"
)

// Defines values for UserDeanonymizeRequestSignInMethod.
const (
	EmailPassword UserDeanonymizeRequestSignInMethod = "email-password"
	Passwordless  UserDeanonymizeRequestSignInMethod = "passwordless"
)

// Defines values for TicketTypeQuery.
const (
	TicketTypeQueryEmailConfirmChange TicketTypeQuery = "emailConfirmChange"
	TicketTypeQueryEmailVerify        TicketTypeQuery = "emailVerify"
	TicketTypeQueryPasswordReset      TicketTypeQuery = "passwordReset"
	TicketTypeQuerySigninPasswordless TicketTypeQuery = "signinPasswordless"
)

// Defines values for GetVerifyParamsType.
const (
	GetVerifyParamsTypeEmailConfirmChange GetVerifyParamsType = "emailConfirmChange"
	GetVerifyParamsTypeEmailVerify        GetVerifyParamsType = "emailVerify"
	GetVerifyParamsTypePasswordReset      GetVerifyParamsType = "passwordReset"
	GetVerifyParamsTypeSigninPasswordless GetVerifyParamsType = "signinPasswordless"
)

// CreatePATRequest defines model for CreatePATRequest.
type CreatePATRequest struct {
	// ExpiresAt Expiration date of the PAT
	ExpiresAt time.Time               `json:"expiresAt"`
	Metadata  *map[string]interface{} `json:"metadata,omitempty"`
}

// CreatePATResponse defines model for CreatePATResponse.
type CreatePATResponse struct {
	// Id ID of the PAT
	Id string `json:"id"`

	// PersonalAccessToken PAT
	PersonalAccessToken string `json:"personalAccessToken"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error code that identifies the application error
	Error ErrorResponseError `json:"error"`

	// Message Human friendly error message
	Message string `json:"message"`

	// Status HTTP status error code
	Status int `json:"status"`
}

// ErrorResponseError Error code that identifies the application error
type ErrorResponseError string

// JWK defines model for JWK.
type JWK struct {
	Alg string `json:"alg"`
	E   string `json:"e"`
	Kid string `json:"kid"`
	Kty string `json:"kty"`
	N   string `json:"n"`
	Use string `json:"use"`
}

// JWKSet defines model for JWKSet.
type JWKSet struct {
	Keys []JWK `json:"keys"`
}

// LinkIdTokenRequest defines model for LinkIdTokenRequest.
type LinkIdTokenRequest struct {
	// IdToken Apple ID token
	IdToken string `json:"idToken"`

	// Nonce Nonce used during sign in process
	Nonce    *string  `json:"nonce,omitempty"`
	Provider Provider `json:"provider"`
}

// MFAChallengePayload defines model for MFAChallengePayload.
type MFAChallengePayload struct {
	Ticket string `json:"ticket"`
}

// OKResponse defines model for OKResponse.
type OKResponse string

// OptionsRedirectTo defines model for OptionsRedirectTo.
type OptionsRedirectTo struct {
	RedirectTo *string `json:"redirectTo,omitempty"`
}

// Provider defines model for Provider.
type Provider string

// RefreshTokenRequest defines model for RefreshTokenRequest.
type RefreshTokenRequest struct {
	// RefreshToken Refresh Token
	RefreshToken string `json:"refreshToken"`
}

// Session defines model for Session.
type Session struct {
	AccessToken          string `json:"accessToken"`
	AccessTokenExpiresIn int64  `json:"accessTokenExpiresIn"`

	// RefreshToken Refresh token during authentication or when refreshing the JWT
	RefreshToken string `json:"refreshToken"`

	// RefreshTokenId Refresh token id
	RefreshTokenId string `json:"refreshTokenId"`
	User           *User  `json:"user,omitempty"`
}

// SessionPayload defines model for SessionPayload.
type SessionPayload struct {
	Session *Session `json:"session,omitempty"`
}

// SignInEmailPasswordRequest defines model for SignInEmailPasswordRequest.
type SignInEmailPasswordRequest struct {
	// Email A valid email
	Email openapi_types.Email `json:"email"`

	// Password A password of minimum 3 characters
	Password string `json:"password"`
}

// SignInEmailPasswordResponse defines model for SignInEmailPasswordResponse.
type SignInEmailPasswordResponse struct {
	Mfa     *MFAChallengePayload `json:"mfa,omitempty"`
	Session *Session             `json:"session,omitempty"`
}

// SignInIdTokenRequest defines model for SignInIdTokenRequest.
type SignInIdTokenRequest struct {
	// IdToken Apple ID token
	IdToken string `json:"idToken"`

	// Nonce Nonce used during sign in process
	Nonce    *string        `json:"nonce,omitempty"`
	Options  *SignUpOptions `json:"options,omitempty"`
	Provider Provider       `json:"provider"`
}

// SignInOTPEmailRequest defines model for SignInOTPEmailRequest.
type SignInOTPEmailRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`
}

// SignInOTPEmailVerifyRequest defines model for SignInOTPEmailVerifyRequest.
type SignInOTPEmailVerifyRequest struct {
	// Email A valid email
	Email openapi_types.Email `json:"email"`

	// Otp One time password
	Otp string `json:"otp"`
}

// SignInOTPEmailVerifyResponse defines model for SignInOTPEmailVerifyResponse.
type SignInOTPEmailVerifyResponse struct {
	Session *Session `json:"session,omitempty"`
}

// SignInPATRequest defines model for SignInPATRequest.
type SignInPATRequest struct {
	// PersonalAccessToken PAT
	PersonalAccessToken string `json:"personalAccessToken"`
}

// SignInPasswordlessEmailRequest defines model for SignInPasswordlessEmailRequest.
type SignInPasswordlessEmailRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`
}

// SignInWebauthnRequest defines model for SignInWebauthnRequest.
type SignInWebauthnRequest struct {
	// Email A valid email
	Email *openapi_types.Email `json:"email,omitempty"`
}

// SignInWebauthnResponse defines model for SignInWebauthnResponse.
type SignInWebauthnResponse = protocol.PublicKeyCredentialRequestOptions

// SignInWebauthnVerifyRequest defines model for SignInWebauthnVerifyRequest.
type SignInWebauthnVerifyRequest struct {
	Credential protocol.CredentialAssertionResponse `json:"credential"`

	// Email A valid email. Deprecated, no longer used
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Email                *openapi_types.Email   `json:"email,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SignUpEmailPasswordRequest defines model for SignUpEmailPasswordRequest.
type SignUpEmailPasswordRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`

	// Password A password of minimum 3 characters
	Password string `json:"password"`
}

// SignUpOptions defines model for SignUpOptions.
type SignUpOptions struct {
	AllowedRoles *[]string `json:"allowedRoles,omitempty"`
	DefaultRole  *string   `json:"defaultRole,omitempty"`
	DisplayName  *string   `json:"displayName,omitempty"`

	// Locale A two-characters locale
	Locale     *string                 `json:"locale,omitempty"`
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	RedirectTo *string                 `json:"redirectTo,omitempty"`
}

// SignUpWebauthnRequest defines model for SignUpWebauthnRequest.
type SignUpWebauthnRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`
}

// SignUpWebauthnResponse defines model for SignUpWebauthnResponse.
type SignUpWebauthnResponse = protocol.PublicKeyCredentialCreationOptions

// SignUpWebauthnVerifyRequest defines model for SignUpWebauthnVerifyRequest.
type SignUpWebauthnVerifyRequest struct {
	Credential *protocol.CredentialCreationResponse `json:"credential,omitempty"`
	Options    *struct {
		AllowedRoles *[]string `json:"allowedRoles,omitempty"`
		DefaultRole  *string   `json:"defaultRole,omitempty"`
		DisplayName  *string   `json:"displayName,omitempty"`

		// Locale A two-characters locale
		Locale     *string                 `json:"locale,omitempty"`
		Metadata   *map[string]interface{} `json:"metadata,omitempty"`
		Nickname   *string                 `json:"nickname,omitempty"`
		RedirectTo *string                 `json:"redirectTo,omitempty"`
	} `json:"options,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// User defines model for User.
type User struct {
	AvatarUrl   string    `json:"avatarUrl"`
	CreatedAt   time.Time `json:"createdAt"`
	DefaultRole string    `json:"defaultRole"`
	DisplayName string    `json:"displayName"`

	// Email A valid email
	Email         *openapi_types.Email `json:"email,omitempty"`
	EmailVerified bool                 `json:"emailVerified"`

	// Id Id of the user
	Id          string `json:"id"`
	IsAnonymous bool   `json:"isAnonymous"`

	// Locale A two-characters locale
	Locale              string                 `json:"locale"`
	Metadata            map[string]interface{} `json:"metadata"`
	PhoneNumber         *string                `json:"phoneNumber,omitempty"`
	PhoneNumberVerified bool                   `json:"phoneNumberVerified"`
	Roles               []string               `json:"roles"`
}

// UserDeanonymizeRequest defines model for UserDeanonymizeRequest.
type UserDeanonymizeRequest struct {
	// Connection Deprecated, will be ignored
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Connection *string `json:"connection,omitempty"`

	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *SignUpOptions      `json:"options,omitempty"`

	// Password A password of minimum 3 characters
	Password *string `json:"password,omitempty"`

	// SignInMethod Which sign-in method to use
	SignInMethod UserDeanonymizeRequestSignInMethod `json:"signInMethod"`
}

// UserDeanonymizeRequestSignInMethod Which sign-in method to use
type UserDeanonymizeRequestSignInMethod string

// UserEmailChangeRequest defines model for UserEmailChangeRequest.
type UserEmailChangeRequest struct {
	// NewEmail A valid email
	NewEmail openapi_types.Email `json:"newEmail"`
	Options  *OptionsRedirectTo  `json:"options,omitempty"`
}

// UserEmailSendVerificationEmailRequest defines model for UserEmailSendVerificationEmailRequest.
type UserEmailSendVerificationEmailRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *OptionsRedirectTo  `json:"options,omitempty"`
}

// UserPasswordRequest defines model for UserPasswordRequest.
type UserPasswordRequest struct {
	// NewPassword A password of minimum 3 characters
	NewPassword string `json:"newPassword"`

	// Ticket Ticket to reset the password, required if the user is not authenticated
	Ticket *string `json:"ticket,omitempty"`
}

// UserPasswordResetRequest defines model for UserPasswordResetRequest.
type UserPasswordResetRequest struct {
	// Email A valid email
	Email   openapi_types.Email `json:"email"`
	Options *OptionsRedirectTo  `json:"options,omitempty"`
}

// RedirectToQuery Target URL for the redirect
type RedirectToQuery = string

// TicketQuery Ticket
type TicketQuery = string

// TicketTypeQuery Type of the ticket
type TicketTypeQuery string

// GetVerifyParams defines parameters for GetVerify.
type GetVerifyParams struct {
	// Ticket Ticket
	Ticket TicketQuery `form:"ticket" json:"ticket"`

	// Type Type of the ticket. Deprecated, no longer used
	Type *GetVerifyParamsType `form:"type,omitempty" json:"type,omitempty"`

	// RedirectTo Target URL for the redirect
	RedirectTo RedirectToQuery `form:"redirectTo" json:"redirectTo"`
}

// GetVerifyParamsType defines parameters for GetVerify.
type GetVerifyParamsType string

// PostLinkIdtokenJSONRequestBody defines body for PostLinkIdtoken for application/json ContentType.
type PostLinkIdtokenJSONRequestBody = LinkIdTokenRequest

// PostPatJSONRequestBody defines body for PostPat for application/json ContentType.
type PostPatJSONRequestBody = CreatePATRequest

// PostSigninEmailPasswordJSONRequestBody defines body for PostSigninEmailPassword for application/json ContentType.
type PostSigninEmailPasswordJSONRequestBody = SignInEmailPasswordRequest

// PostSigninIdtokenJSONRequestBody defines body for PostSigninIdtoken for application/json ContentType.
type PostSigninIdtokenJSONRequestBody = SignInIdTokenRequest

// PostSigninOtpEmailJSONRequestBody defines body for PostSigninOtpEmail for application/json ContentType.
type PostSigninOtpEmailJSONRequestBody = SignInOTPEmailRequest

// PostSigninOtpEmailVerifyJSONRequestBody defines body for PostSigninOtpEmailVerify for application/json ContentType.
type PostSigninOtpEmailVerifyJSONRequestBody = SignInOTPEmailVerifyRequest

// PostSigninPasswordlessEmailJSONRequestBody defines body for PostSigninPasswordlessEmail for application/json ContentType.
type PostSigninPasswordlessEmailJSONRequestBody = SignInPasswordlessEmailRequest

// PostSigninPatJSONRequestBody defines body for PostSigninPat for application/json ContentType.
type PostSigninPatJSONRequestBody = SignInPATRequest

// PostSigninWebauthnJSONRequestBody defines body for PostSigninWebauthn for application/json ContentType.
type PostSigninWebauthnJSONRequestBody = SignInWebauthnRequest

// PostSigninWebauthnVerifyJSONRequestBody defines body for PostSigninWebauthnVerify for application/json ContentType.
type PostSigninWebauthnVerifyJSONRequestBody = SignInWebauthnVerifyRequest

// PostSignupEmailPasswordJSONRequestBody defines body for PostSignupEmailPassword for application/json ContentType.
type PostSignupEmailPasswordJSONRequestBody = SignUpEmailPasswordRequest

// PostSignupWebauthnJSONRequestBody defines body for PostSignupWebauthn for application/json ContentType.
type PostSignupWebauthnJSONRequestBody = SignUpWebauthnRequest

// PostSignupWebauthnVerifyJSONRequestBody defines body for PostSignupWebauthnVerify for application/json ContentType.
type PostSignupWebauthnVerifyJSONRequestBody = SignUpWebauthnVerifyRequest

// PostTokenJSONRequestBody defines body for PostToken for application/json ContentType.
type PostTokenJSONRequestBody = RefreshTokenRequest

// PostUserDeanonymizeJSONRequestBody defines body for PostUserDeanonymize for application/json ContentType.
type PostUserDeanonymizeJSONRequestBody = UserDeanonymizeRequest

// PostUserEmailChangeJSONRequestBody defines body for PostUserEmailChange for application/json ContentType.
type PostUserEmailChangeJSONRequestBody = UserEmailChangeRequest

// PostUserEmailSendVerificationEmailJSONRequestBody defines body for PostUserEmailSendVerificationEmail for application/json ContentType.
type PostUserEmailSendVerificationEmailJSONRequestBody = UserEmailSendVerificationEmailRequest

// PostUserPasswordJSONRequestBody defines body for PostUserPassword for application/json ContentType.
type PostUserPasswordJSONRequestBody = UserPasswordRequest

// PostUserPasswordResetJSONRequestBody defines body for PostUserPasswordReset for application/json ContentType.
type PostUserPasswordResetJSONRequestBody = UserPasswordResetRequest

// Getter for additional properties for SignInWebauthnVerifyRequest. Returns the specified
// element and whether it was found
func (a SignInWebauthnVerifyRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SignInWebauthnVerifyRequest
func (a *SignInWebauthnVerifyRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SignInWebauthnVerifyRequest to handle AdditionalProperties
func (a *SignInWebauthnVerifyRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["credential"]; found {
		err = json.Unmarshal(raw, &a.Credential)
		if err != nil {
			return fmt.Errorf("error reading 'credential': %w", err)
		}
		delete(object, "credential")
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &a.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
		delete(object, "email")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SignInWebauthnVerifyRequest to handle AdditionalProperties
func (a SignInWebauthnVerifyRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["credential"], err = json.Marshal(a.Credential)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'credential': %w", err)
	}

	if a.Email != nil {
		object["email"], err = json.Marshal(a.Email)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'email': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SignUpWebauthnVerifyRequest. Returns the specified
// element and whether it was found
func (a SignUpWebauthnVerifyRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SignUpWebauthnVerifyRequest
func (a *SignUpWebauthnVerifyRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SignUpWebauthnVerifyRequest to handle AdditionalProperties
func (a *SignUpWebauthnVerifyRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["credential"]; found {
		err = json.Unmarshal(raw, &a.Credential)
		if err != nil {
			return fmt.Errorf("error reading 'credential': %w", err)
		}
		delete(object, "credential")
	}

	if raw, found := object["options"]; found {
		err = json.Unmarshal(raw, &a.Options)
		if err != nil {
			return fmt.Errorf("error reading 'options': %w", err)
		}
		delete(object, "options")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SignUpWebauthnVerifyRequest to handle AdditionalProperties
func (a SignUpWebauthnVerifyRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Credential != nil {
		object["credential"], err = json.Marshal(a.Credential)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'credential': %w", err)
		}
	}

	if a.Options != nil {
		object["options"], err = json.Marshal(a.Options)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'options': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetWellKnownJwksJson request
	GetWellKnownJwksJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealthz request
	GetHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadHealthz request
	HeadHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLinkIdtokenWithBody request with any body
	PostLinkIdtokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLinkIdtoken(ctx context.Context, body PostLinkIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatWithBody request with any body
	PostPatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPat(ctx context.Context, body PostPatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninEmailPasswordWithBody request with any body
	PostSigninEmailPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninEmailPassword(ctx context.Context, body PostSigninEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninIdtokenWithBody request with any body
	PostSigninIdtokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninIdtoken(ctx context.Context, body PostSigninIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninOtpEmailWithBody request with any body
	PostSigninOtpEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninOtpEmail(ctx context.Context, body PostSigninOtpEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninOtpEmailVerifyWithBody request with any body
	PostSigninOtpEmailVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninOtpEmailVerify(ctx context.Context, body PostSigninOtpEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninPasswordlessEmailWithBody request with any body
	PostSigninPasswordlessEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninPasswordlessEmail(ctx context.Context, body PostSigninPasswordlessEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninPatWithBody request with any body
	PostSigninPatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninPat(ctx context.Context, body PostSigninPatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninWebauthnWithBody request with any body
	PostSigninWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninWebauthn(ctx context.Context, body PostSigninWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSigninWebauthnVerifyWithBody request with any body
	PostSigninWebauthnVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSigninWebauthnVerify(ctx context.Context, body PostSigninWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSignupEmailPasswordWithBody request with any body
	PostSignupEmailPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSignupEmailPassword(ctx context.Context, body PostSignupEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSignupWebauthnWithBody request with any body
	PostSignupWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSignupWebauthn(ctx context.Context, body PostSignupWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSignupWebauthnVerifyWithBody request with any body
	PostSignupWebauthnVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSignupWebauthnVerify(ctx context.Context, body PostSignupWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTokenWithBody request with any body
	PostTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostToken(ctx context.Context, body PostTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserDeanonymizeWithBody request with any body
	PostUserDeanonymizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserDeanonymize(ctx context.Context, body PostUserDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserEmailChangeWithBody request with any body
	PostUserEmailChangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserEmailChange(ctx context.Context, body PostUserEmailChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserEmailSendVerificationEmailWithBody request with any body
	PostUserEmailSendVerificationEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserEmailSendVerificationEmail(ctx context.Context, body PostUserEmailSendVerificationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserPasswordWithBody request with any body
	PostUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserPassword(ctx context.Context, body PostUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserPasswordResetWithBody request with any body
	PostUserPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserPasswordReset(ctx context.Context, body PostUserPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVerify request
	GetVerify(ctx context.Context, params *GetVerifyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetWellKnownJwksJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWellKnownJwksJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadHealthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadHealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinkIdtokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinkIdtokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinkIdtoken(ctx context.Context, body PostLinkIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinkIdtokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPat(ctx context.Context, body PostPatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninEmailPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninEmailPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninEmailPassword(ctx context.Context, body PostSigninEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninEmailPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninIdtokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninIdtokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninIdtoken(ctx context.Context, body PostSigninIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninIdtokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninOtpEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninOtpEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninOtpEmail(ctx context.Context, body PostSigninOtpEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninOtpEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninOtpEmailVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninOtpEmailVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninOtpEmailVerify(ctx context.Context, body PostSigninOtpEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninOtpEmailVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninPasswordlessEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninPasswordlessEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninPasswordlessEmail(ctx context.Context, body PostSigninPasswordlessEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninPasswordlessEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninPatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninPatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninPat(ctx context.Context, body PostSigninPatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninPatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninWebauthnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninWebauthn(ctx context.Context, body PostSigninWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninWebauthnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninWebauthnVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninWebauthnVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSigninWebauthnVerify(ctx context.Context, body PostSigninWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSigninWebauthnVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignupEmailPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignupEmailPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignupEmailPassword(ctx context.Context, body PostSignupEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignupEmailPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignupWebauthnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignupWebauthnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignupWebauthn(ctx context.Context, body PostSignupWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignupWebauthnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignupWebauthnVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignupWebauthnVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignupWebauthnVerify(ctx context.Context, body PostSignupWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignupWebauthnVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostToken(ctx context.Context, body PostTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserDeanonymizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserDeanonymizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserDeanonymize(ctx context.Context, body PostUserDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserDeanonymizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserEmailChangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserEmailChangeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserEmailChange(ctx context.Context, body PostUserEmailChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserEmailChangeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserEmailSendVerificationEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserEmailSendVerificationEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserEmailSendVerificationEmail(ctx context.Context, body PostUserEmailSendVerificationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserEmailSendVerificationEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserPassword(ctx context.Context, body PostUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserPasswordResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserPasswordReset(ctx context.Context, body PostUserPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserPasswordResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVerify(ctx context.Context, params *GetVerifyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVerifyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetWellKnownJwksJsonRequest generates requests for GetWellKnownJwksJson
func NewGetWellKnownJwksJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/.well-known/jwks.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthzRequest generates requests for GetHealthz
func NewGetHealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadHealthzRequest generates requests for HeadHealthz
func NewHeadHealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLinkIdtokenRequest calls the generic PostLinkIdtoken builder with application/json body
func NewPostLinkIdtokenRequest(server string, body PostLinkIdtokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLinkIdtokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLinkIdtokenRequestWithBody generates requests for PostLinkIdtoken with any type of body
func NewPostLinkIdtokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/link/idtoken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPatRequest calls the generic PostPat builder with application/json body
func NewPostPatRequest(server string, body PostPatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPatRequestWithBody generates requests for PostPat with any type of body
func NewPostPatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninEmailPasswordRequest calls the generic PostSigninEmailPassword builder with application/json body
func NewPostSigninEmailPasswordRequest(server string, body PostSigninEmailPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninEmailPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninEmailPasswordRequestWithBody generates requests for PostSigninEmailPassword with any type of body
func NewPostSigninEmailPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/email-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninIdtokenRequest calls the generic PostSigninIdtoken builder with application/json body
func NewPostSigninIdtokenRequest(server string, body PostSigninIdtokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninIdtokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninIdtokenRequestWithBody generates requests for PostSigninIdtoken with any type of body
func NewPostSigninIdtokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/idtoken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninOtpEmailRequest calls the generic PostSigninOtpEmail builder with application/json body
func NewPostSigninOtpEmailRequest(server string, body PostSigninOtpEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninOtpEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninOtpEmailRequestWithBody generates requests for PostSigninOtpEmail with any type of body
func NewPostSigninOtpEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/otp/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninOtpEmailVerifyRequest calls the generic PostSigninOtpEmailVerify builder with application/json body
func NewPostSigninOtpEmailVerifyRequest(server string, body PostSigninOtpEmailVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninOtpEmailVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninOtpEmailVerifyRequestWithBody generates requests for PostSigninOtpEmailVerify with any type of body
func NewPostSigninOtpEmailVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/otp/email/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninPasswordlessEmailRequest calls the generic PostSigninPasswordlessEmail builder with application/json body
func NewPostSigninPasswordlessEmailRequest(server string, body PostSigninPasswordlessEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninPasswordlessEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninPasswordlessEmailRequestWithBody generates requests for PostSigninPasswordlessEmail with any type of body
func NewPostSigninPasswordlessEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/passwordless/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninPatRequest calls the generic PostSigninPat builder with application/json body
func NewPostSigninPatRequest(server string, body PostSigninPatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninPatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninPatRequestWithBody generates requests for PostSigninPat with any type of body
func NewPostSigninPatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/pat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninWebauthnRequest calls the generic PostSigninWebauthn builder with application/json body
func NewPostSigninWebauthnRequest(server string, body PostSigninWebauthnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninWebauthnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninWebauthnRequestWithBody generates requests for PostSigninWebauthn with any type of body
func NewPostSigninWebauthnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/webauthn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSigninWebauthnVerifyRequest calls the generic PostSigninWebauthnVerify builder with application/json body
func NewPostSigninWebauthnVerifyRequest(server string, body PostSigninWebauthnVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSigninWebauthnVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSigninWebauthnVerifyRequestWithBody generates requests for PostSigninWebauthnVerify with any type of body
func NewPostSigninWebauthnVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin/webauthn/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSignupEmailPasswordRequest calls the generic PostSignupEmailPassword builder with application/json body
func NewPostSignupEmailPasswordRequest(server string, body PostSignupEmailPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSignupEmailPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSignupEmailPasswordRequestWithBody generates requests for PostSignupEmailPassword with any type of body
func NewPostSignupEmailPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signup/email-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSignupWebauthnRequest calls the generic PostSignupWebauthn builder with application/json body
func NewPostSignupWebauthnRequest(server string, body PostSignupWebauthnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSignupWebauthnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSignupWebauthnRequestWithBody generates requests for PostSignupWebauthn with any type of body
func NewPostSignupWebauthnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signup/webauthn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSignupWebauthnVerifyRequest calls the generic PostSignupWebauthnVerify builder with application/json body
func NewPostSignupWebauthnVerifyRequest(server string, body PostSignupWebauthnVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSignupWebauthnVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSignupWebauthnVerifyRequestWithBody generates requests for PostSignupWebauthnVerify with any type of body
func NewPostSignupWebauthnVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signup/webauthn/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTokenRequest calls the generic PostToken builder with application/json body
func NewPostTokenRequest(server string, body PostTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTokenRequestWithBody generates requests for PostToken with any type of body
func NewPostTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserDeanonymizeRequest calls the generic PostUserDeanonymize builder with application/json body
func NewPostUserDeanonymizeRequest(server string, body PostUserDeanonymizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserDeanonymizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserDeanonymizeRequestWithBody generates requests for PostUserDeanonymize with any type of body
func NewPostUserDeanonymizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/deanonymize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserEmailChangeRequest calls the generic PostUserEmailChange builder with application/json body
func NewPostUserEmailChangeRequest(server string, body PostUserEmailChangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserEmailChangeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserEmailChangeRequestWithBody generates requests for PostUserEmailChange with any type of body
func NewPostUserEmailChangeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/email/change")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserEmailSendVerificationEmailRequest calls the generic PostUserEmailSendVerificationEmail builder with application/json body
func NewPostUserEmailSendVerificationEmailRequest(server string, body PostUserEmailSendVerificationEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserEmailSendVerificationEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserEmailSendVerificationEmailRequestWithBody generates requests for PostUserEmailSendVerificationEmail with any type of body
func NewPostUserEmailSendVerificationEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/email/send-verification-email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserPasswordRequest calls the generic PostUserPassword builder with application/json body
func NewPostUserPasswordRequest(server string, body PostUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserPasswordRequestWithBody generates requests for PostUserPassword with any type of body
func NewPostUserPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserPasswordResetRequest calls the generic PostUserPasswordReset builder with application/json body
func NewPostUserPasswordResetRequest(server string, body PostUserPasswordResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserPasswordResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserPasswordResetRequestWithBody generates requests for PostUserPasswordReset with any type of body
func NewPostUserPasswordResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/password/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVerifyRequest generates requests for GetVerify
func NewGetVerifyRequest(server string, params *GetVerifyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ticket", runtime.ParamLocationQuery, params.Ticket); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirectTo", runtime.ParamLocationQuery, params.RedirectTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWellKnownJwksJsonWithResponse request
	GetWellKnownJwksJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownJwksJsonR, error)

	// GetHealthzWithResponse request
	GetHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthzR, error)

	// HeadHealthzWithResponse request
	HeadHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadHealthzR, error)

	// PostLinkIdtokenWithBodyWithResponse request with any body
	PostLinkIdtokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinkIdtokenR, error)

	PostLinkIdtokenWithResponse(ctx context.Context, body PostLinkIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinkIdtokenR, error)

	// PostPatWithBodyWithResponse request with any body
	PostPatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatR, error)

	PostPatWithResponse(ctx context.Context, body PostPatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatR, error)

	// PostSigninEmailPasswordWithBodyWithResponse request with any body
	PostSigninEmailPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninEmailPasswordR, error)

	PostSigninEmailPasswordWithResponse(ctx context.Context, body PostSigninEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninEmailPasswordR, error)

	// PostSigninIdtokenWithBodyWithResponse request with any body
	PostSigninIdtokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninIdtokenR, error)

	PostSigninIdtokenWithResponse(ctx context.Context, body PostSigninIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninIdtokenR, error)

	// PostSigninOtpEmailWithBodyWithResponse request with any body
	PostSigninOtpEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailR, error)

	PostSigninOtpEmailWithResponse(ctx context.Context, body PostSigninOtpEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailR, error)

	// PostSigninOtpEmailVerifyWithBodyWithResponse request with any body
	PostSigninOtpEmailVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailVerifyR, error)

	PostSigninOtpEmailVerifyWithResponse(ctx context.Context, body PostSigninOtpEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailVerifyR, error)

	// PostSigninPasswordlessEmailWithBodyWithResponse request with any body
	PostSigninPasswordlessEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninPasswordlessEmailR, error)

	PostSigninPasswordlessEmailWithResponse(ctx context.Context, body PostSigninPasswordlessEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninPasswordlessEmailR, error)

	// PostSigninPatWithBodyWithResponse request with any body
	PostSigninPatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninPatR, error)

	PostSigninPatWithResponse(ctx context.Context, body PostSigninPatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninPatR, error)

	// PostSigninWebauthnWithBodyWithResponse request with any body
	PostSigninWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninWebauthnR, error)

	PostSigninWebauthnWithResponse(ctx context.Context, body PostSigninWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninWebauthnR, error)

	// PostSigninWebauthnVerifyWithBodyWithResponse request with any body
	PostSigninWebauthnVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninWebauthnVerifyR, error)

	PostSigninWebauthnVerifyWithResponse(ctx context.Context, body PostSigninWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninWebauthnVerifyR, error)

	// PostSignupEmailPasswordWithBodyWithResponse request with any body
	PostSignupEmailPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignupEmailPasswordR, error)

	PostSignupEmailPasswordWithResponse(ctx context.Context, body PostSignupEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignupEmailPasswordR, error)

	// PostSignupWebauthnWithBodyWithResponse request with any body
	PostSignupWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignupWebauthnR, error)

	PostSignupWebauthnWithResponse(ctx context.Context, body PostSignupWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignupWebauthnR, error)

	// PostSignupWebauthnVerifyWithBodyWithResponse request with any body
	PostSignupWebauthnVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignupWebauthnVerifyR, error)

	PostSignupWebauthnVerifyWithResponse(ctx context.Context, body PostSignupWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignupWebauthnVerifyR, error)

	// PostTokenWithBodyWithResponse request with any body
	PostTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTokenR, error)

	PostTokenWithResponse(ctx context.Context, body PostTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTokenR, error)

	// PostUserDeanonymizeWithBodyWithResponse request with any body
	PostUserDeanonymizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserDeanonymizeR, error)

	PostUserDeanonymizeWithResponse(ctx context.Context, body PostUserDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserDeanonymizeR, error)

	// PostUserEmailChangeWithBodyWithResponse request with any body
	PostUserEmailChangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserEmailChangeR, error)

	PostUserEmailChangeWithResponse(ctx context.Context, body PostUserEmailChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserEmailChangeR, error)

	// PostUserEmailSendVerificationEmailWithBodyWithResponse request with any body
	PostUserEmailSendVerificationEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserEmailSendVerificationEmailR, error)

	PostUserEmailSendVerificationEmailWithResponse(ctx context.Context, body PostUserEmailSendVerificationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserEmailSendVerificationEmailR, error)

	// PostUserPasswordWithBodyWithResponse request with any body
	PostUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserPasswordR, error)

	PostUserPasswordWithResponse(ctx context.Context, body PostUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserPasswordR, error)

	// PostUserPasswordResetWithBodyWithResponse request with any body
	PostUserPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserPasswordResetR, error)

	PostUserPasswordResetWithResponse(ctx context.Context, body PostUserPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserPasswordResetR, error)

	// GetVerifyWithResponse request
	GetVerifyWithResponse(ctx context.Context, params *GetVerifyParams, reqEditors ...RequestEditorFn) (*GetVerifyR, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionR, error)
}

type GetWellKnownJwksJsonR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWKSet
}

// Status returns HTTPResponse.Status
func (r GetWellKnownJwksJsonR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWellKnownJwksJsonR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthzR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r GetHealthzR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthzR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadHealthzR struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadHealthzR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadHealthzR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLinkIdtokenR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostLinkIdtokenR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLinkIdtokenR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePATResponse
}

// Status returns HTTPResponse.Status
func (r PostPatR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninEmailPasswordR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignInEmailPasswordResponse
}

// Status returns HTTPResponse.Status
func (r PostSigninEmailPasswordR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninEmailPasswordR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninIdtokenR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionPayload
}

// Status returns HTTPResponse.Status
func (r PostSigninIdtokenR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninIdtokenR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninOtpEmailR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostSigninOtpEmailR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninOtpEmailR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninOtpEmailVerifyR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignInOTPEmailVerifyResponse
}

// Status returns HTTPResponse.Status
func (r PostSigninOtpEmailVerifyR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninOtpEmailVerifyR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninPasswordlessEmailR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostSigninPasswordlessEmailR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninPasswordlessEmailR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninPatR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionPayload
}

// Status returns HTTPResponse.Status
func (r PostSigninPatR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninPatR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninWebauthnR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignInWebauthnResponse
}

// Status returns HTTPResponse.Status
func (r PostSigninWebauthnR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninWebauthnR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSigninWebauthnVerifyR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionPayload
}

// Status returns HTTPResponse.Status
func (r PostSigninWebauthnVerifyR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSigninWebauthnVerifyR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSignupEmailPasswordR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionPayload
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSignupEmailPasswordR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSignupEmailPasswordR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSignupWebauthnR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignUpWebauthnResponse
}

// Status returns HTTPResponse.Status
func (r PostSignupWebauthnR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSignupWebauthnR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSignupWebauthnVerifyR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionPayload
}

// Status returns HTTPResponse.Status
func (r PostSignupWebauthnVerifyR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSignupWebauthnVerifyR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTokenR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
}

// Status returns HTTPResponse.Status
func (r PostTokenR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTokenR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserDeanonymizeR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostUserDeanonymizeR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserDeanonymizeR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserEmailChangeR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostUserEmailChangeR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserEmailChangeR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserEmailSendVerificationEmailR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostUserEmailSendVerificationEmailR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserEmailSendVerificationEmailR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserPasswordR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostUserPasswordR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserPasswordR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserPasswordResetR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OKResponse
}

// Status returns HTTPResponse.Status
func (r PostUserPasswordResetR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserPasswordResetR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVerifyR struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVerifyR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVerifyR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVersionR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWellKnownJwksJsonWithResponse request returning *GetWellKnownJwksJsonR
func (c *ClientWithResponses) GetWellKnownJwksJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownJwksJsonR, error) {
	rsp, err := c.GetWellKnownJwksJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWellKnownJwksJsonR(rsp)
}

// GetHealthzWithResponse request returning *GetHealthzR
func (c *ClientWithResponses) GetHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthzR, error) {
	rsp, err := c.GetHealthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthzR(rsp)
}

// HeadHealthzWithResponse request returning *HeadHealthzR
func (c *ClientWithResponses) HeadHealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadHealthzR, error) {
	rsp, err := c.HeadHealthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadHealthzR(rsp)
}

// PostLinkIdtokenWithBodyWithResponse request with arbitrary body returning *PostLinkIdtokenR
func (c *ClientWithResponses) PostLinkIdtokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinkIdtokenR, error) {
	rsp, err := c.PostLinkIdtokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinkIdtokenR(rsp)
}

func (c *ClientWithResponses) PostLinkIdtokenWithResponse(ctx context.Context, body PostLinkIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinkIdtokenR, error) {
	rsp, err := c.PostLinkIdtoken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinkIdtokenR(rsp)
}

// PostPatWithBodyWithResponse request with arbitrary body returning *PostPatR
func (c *ClientWithResponses) PostPatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatR, error) {
	rsp, err := c.PostPatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatR(rsp)
}

func (c *ClientWithResponses) PostPatWithResponse(ctx context.Context, body PostPatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatR, error) {
	rsp, err := c.PostPat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatR(rsp)
}

// PostSigninEmailPasswordWithBodyWithResponse request with arbitrary body returning *PostSigninEmailPasswordR
func (c *ClientWithResponses) PostSigninEmailPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninEmailPasswordR, error) {
	rsp, err := c.PostSigninEmailPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninEmailPasswordR(rsp)
}

func (c *ClientWithResponses) PostSigninEmailPasswordWithResponse(ctx context.Context, body PostSigninEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninEmailPasswordR, error) {
	rsp, err := c.PostSigninEmailPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninEmailPasswordR(rsp)
}

// PostSigninIdtokenWithBodyWithResponse request with arbitrary body returning *PostSigninIdtokenR
func (c *ClientWithResponses) PostSigninIdtokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninIdtokenR, error) {
	rsp, err := c.PostSigninIdtokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninIdtokenR(rsp)
}

func (c *ClientWithResponses) PostSigninIdtokenWithResponse(ctx context.Context, body PostSigninIdtokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninIdtokenR, error) {
	rsp, err := c.PostSigninIdtoken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninIdtokenR(rsp)
}

// PostSigninOtpEmailWithBodyWithResponse request with arbitrary body returning *PostSigninOtpEmailR
func (c *ClientWithResponses) PostSigninOtpEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailR, error) {
	rsp, err := c.PostSigninOtpEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninOtpEmailR(rsp)
}

func (c *ClientWithResponses) PostSigninOtpEmailWithResponse(ctx context.Context, body PostSigninOtpEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailR, error) {
	rsp, err := c.PostSigninOtpEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninOtpEmailR(rsp)
}

// PostSigninOtpEmailVerifyWithBodyWithResponse request with arbitrary body returning *PostSigninOtpEmailVerifyR
func (c *ClientWithResponses) PostSigninOtpEmailVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailVerifyR, error) {
	rsp, err := c.PostSigninOtpEmailVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninOtpEmailVerifyR(rsp)
}

func (c *ClientWithResponses) PostSigninOtpEmailVerifyWithResponse(ctx context.Context, body PostSigninOtpEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninOtpEmailVerifyR, error) {
	rsp, err := c.PostSigninOtpEmailVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninOtpEmailVerifyR(rsp)
}

// PostSigninPasswordlessEmailWithBodyWithResponse request with arbitrary body returning *PostSigninPasswordlessEmailR
func (c *ClientWithResponses) PostSigninPasswordlessEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninPasswordlessEmailR, error) {
	rsp, err := c.PostSigninPasswordlessEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninPasswordlessEmailR(rsp)
}

func (c *ClientWithResponses) PostSigninPasswordlessEmailWithResponse(ctx context.Context, body PostSigninPasswordlessEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninPasswordlessEmailR, error) {
	rsp, err := c.PostSigninPasswordlessEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninPasswordlessEmailR(rsp)
}

// PostSigninPatWithBodyWithResponse request with arbitrary body returning *PostSigninPatR
func (c *ClientWithResponses) PostSigninPatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninPatR, error) {
	rsp, err := c.PostSigninPatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninPatR(rsp)
}

func (c *ClientWithResponses) PostSigninPatWithResponse(ctx context.Context, body PostSigninPatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninPatR, error) {
	rsp, err := c.PostSigninPat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninPatR(rsp)
}

// PostSigninWebauthnWithBodyWithResponse request with arbitrary body returning *PostSigninWebauthnR
func (c *ClientWithResponses) PostSigninWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninWebauthnR, error) {
	rsp, err := c.PostSigninWebauthnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninWebauthnR(rsp)
}

func (c *ClientWithResponses) PostSigninWebauthnWithResponse(ctx context.Context, body PostSigninWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninWebauthnR, error) {
	rsp, err := c.PostSigninWebauthn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninWebauthnR(rsp)
}

// PostSigninWebauthnVerifyWithBodyWithResponse request with arbitrary body returning *PostSigninWebauthnVerifyR
func (c *ClientWithResponses) PostSigninWebauthnVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSigninWebauthnVerifyR, error) {
	rsp, err := c.PostSigninWebauthnVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninWebauthnVerifyR(rsp)
}

func (c *ClientWithResponses) PostSigninWebauthnVerifyWithResponse(ctx context.Context, body PostSigninWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSigninWebauthnVerifyR, error) {
	rsp, err := c.PostSigninWebauthnVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSigninWebauthnVerifyR(rsp)
}

// PostSignupEmailPasswordWithBodyWithResponse request with arbitrary body returning *PostSignupEmailPasswordR
func (c *ClientWithResponses) PostSignupEmailPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignupEmailPasswordR, error) {
	rsp, err := c.PostSignupEmailPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignupEmailPasswordR(rsp)
}

func (c *ClientWithResponses) PostSignupEmailPasswordWithResponse(ctx context.Context, body PostSignupEmailPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignupEmailPasswordR, error) {
	rsp, err := c.PostSignupEmailPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignupEmailPasswordR(rsp)
}

// PostSignupWebauthnWithBodyWithResponse request with arbitrary body returning *PostSignupWebauthnR
func (c *ClientWithResponses) PostSignupWebauthnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignupWebauthnR, error) {
	rsp, err := c.PostSignupWebauthnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignupWebauthnR(rsp)
}

func (c *ClientWithResponses) PostSignupWebauthnWithResponse(ctx context.Context, body PostSignupWebauthnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignupWebauthnR, error) {
	rsp, err := c.PostSignupWebauthn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignupWebauthnR(rsp)
}

// PostSignupWebauthnVerifyWithBodyWithResponse request with arbitrary body returning *PostSignupWebauthnVerifyR
func (c *ClientWithResponses) PostSignupWebauthnVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignupWebauthnVerifyR, error) {
	rsp, err := c.PostSignupWebauthnVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignupWebauthnVerifyR(rsp)
}

func (c *ClientWithResponses) PostSignupWebauthnVerifyWithResponse(ctx context.Context, body PostSignupWebauthnVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignupWebauthnVerifyR, error) {
	rsp, err := c.PostSignupWebauthnVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignupWebauthnVerifyR(rsp)
}

// PostTokenWithBodyWithResponse request with arbitrary body returning *PostTokenR
func (c *ClientWithResponses) PostTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTokenR, error) {
	rsp, err := c.PostTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTokenR(rsp)
}

func (c *ClientWithResponses) PostTokenWithResponse(ctx context.Context, body PostTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTokenR, error) {
	rsp, err := c.PostToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTokenR(rsp)
}

// PostUserDeanonymizeWithBodyWithResponse request with arbitrary body returning *PostUserDeanonymizeR
func (c *ClientWithResponses) PostUserDeanonymizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserDeanonymizeR, error) {
	rsp, err := c.PostUserDeanonymizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserDeanonymizeR(rsp)
}

func (c *ClientWithResponses) PostUserDeanonymizeWithResponse(ctx context.Context, body PostUserDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserDeanonymizeR, error) {
	rsp, err := c.PostUserDeanonymize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserDeanonymizeR(rsp)
}

// PostUserEmailChangeWithBodyWithResponse request with arbitrary body returning *PostUserEmailChangeR
func (c *ClientWithResponses) PostUserEmailChangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserEmailChangeR, error) {
	rsp, err := c.PostUserEmailChangeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserEmailChangeR(rsp)
}

func (c *ClientWithResponses) PostUserEmailChangeWithResponse(ctx context.Context, body PostUserEmailChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserEmailChangeR, error) {
	rsp, err := c.PostUserEmailChange(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserEmailChangeR(rsp)
}

// PostUserEmailSendVerificationEmailWithBodyWithResponse request with arbitrary body returning *PostUserEmailSendVerificationEmailR
func (c *ClientWithResponses) PostUserEmailSendVerificationEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserEmailSendVerificationEmailR, error) {
	rsp, err := c.PostUserEmailSendVerificationEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserEmailSendVerificationEmailR(rsp)
}

func (c *ClientWithResponses) PostUserEmailSendVerificationEmailWithResponse(ctx context.Context, body PostUserEmailSendVerificationEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserEmailSendVerificationEmailR, error) {
	rsp, err := c.PostUserEmailSendVerificationEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserEmailSendVerificationEmailR(rsp)
}

// PostUserPasswordWithBodyWithResponse request with arbitrary body returning *PostUserPasswordR
func (c *ClientWithResponses) PostUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserPasswordR, error) {
	rsp, err := c.PostUserPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserPasswordR(rsp)
}

func (c *ClientWithResponses) PostUserPasswordWithResponse(ctx context.Context, body PostUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserPasswordR, error) {
	rsp, err := c.PostUserPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserPasswordR(rsp)
}

// PostUserPasswordResetWithBodyWithResponse request with arbitrary body returning *PostUserPasswordResetR
func (c *ClientWithResponses) PostUserPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserPasswordResetR, error) {
	rsp, err := c.PostUserPasswordResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserPasswordResetR(rsp)
}

func (c *ClientWithResponses) PostUserPasswordResetWithResponse(ctx context.Context, body PostUserPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserPasswordResetR, error) {
	rsp, err := c.PostUserPasswordReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserPasswordResetR(rsp)
}

// GetVerifyWithResponse request returning *GetVerifyR
func (c *ClientWithResponses) GetVerifyWithResponse(ctx context.Context, params *GetVerifyParams, reqEditors ...RequestEditorFn) (*GetVerifyR, error) {
	rsp, err := c.GetVerify(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVerifyR(rsp)
}

// GetVersionWithResponse request returning *GetVersionR
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionR, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionR(rsp)
}

// ParseGetWellKnownJwksJsonR parses an HTTP response from a GetWellKnownJwksJsonWithResponse call
func ParseGetWellKnownJwksJsonR(rsp *http.Response) (*GetWellKnownJwksJsonR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWellKnownJwksJsonR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWKSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHealthzR parses an HTTP response from a GetHealthzWithResponse call
func ParseGetHealthzR(rsp *http.Response) (*GetHealthzR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthzR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadHealthzR parses an HTTP response from a HeadHealthzWithResponse call
func ParseHeadHealthzR(rsp *http.Response) (*HeadHealthzR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadHealthzR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostLinkIdtokenR parses an HTTP response from a PostLinkIdtokenWithResponse call
func ParsePostLinkIdtokenR(rsp *http.Response) (*PostLinkIdtokenR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLinkIdtokenR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPatR parses an HTTP response from a PostPatWithResponse call
func ParsePostPatR(rsp *http.Response) (*PostPatR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePATResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninEmailPasswordR parses an HTTP response from a PostSigninEmailPasswordWithResponse call
func ParsePostSigninEmailPasswordR(rsp *http.Response) (*PostSigninEmailPasswordR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninEmailPasswordR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignInEmailPasswordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninIdtokenR parses an HTTP response from a PostSigninIdtokenWithResponse call
func ParsePostSigninIdtokenR(rsp *http.Response) (*PostSigninIdtokenR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninIdtokenR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninOtpEmailR parses an HTTP response from a PostSigninOtpEmailWithResponse call
func ParsePostSigninOtpEmailR(rsp *http.Response) (*PostSigninOtpEmailR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninOtpEmailR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninOtpEmailVerifyR parses an HTTP response from a PostSigninOtpEmailVerifyWithResponse call
func ParsePostSigninOtpEmailVerifyR(rsp *http.Response) (*PostSigninOtpEmailVerifyR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninOtpEmailVerifyR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignInOTPEmailVerifyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninPasswordlessEmailR parses an HTTP response from a PostSigninPasswordlessEmailWithResponse call
func ParsePostSigninPasswordlessEmailR(rsp *http.Response) (*PostSigninPasswordlessEmailR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninPasswordlessEmailR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninPatR parses an HTTP response from a PostSigninPatWithResponse call
func ParsePostSigninPatR(rsp *http.Response) (*PostSigninPatR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninPatR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninWebauthnR parses an HTTP response from a PostSigninWebauthnWithResponse call
func ParsePostSigninWebauthnR(rsp *http.Response) (*PostSigninWebauthnR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninWebauthnR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignInWebauthnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSigninWebauthnVerifyR parses an HTTP response from a PostSigninWebauthnVerifyWithResponse call
func ParsePostSigninWebauthnVerifyR(rsp *http.Response) (*PostSigninWebauthnVerifyR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSigninWebauthnVerifyR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSignupEmailPasswordR parses an HTTP response from a PostSignupEmailPasswordWithResponse call
func ParsePostSignupEmailPasswordR(rsp *http.Response) (*PostSignupEmailPasswordR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSignupEmailPasswordR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePostSignupWebauthnR parses an HTTP response from a PostSignupWebauthnWithResponse call
func ParsePostSignupWebauthnR(rsp *http.Response) (*PostSignupWebauthnR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSignupWebauthnR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignUpWebauthnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSignupWebauthnVerifyR parses an HTTP response from a PostSignupWebauthnVerifyWithResponse call
func ParsePostSignupWebauthnVerifyR(rsp *http.Response) (*PostSignupWebauthnVerifyR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSignupWebauthnVerifyR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTokenR parses an HTTP response from a PostTokenWithResponse call
func ParsePostTokenR(rsp *http.Response) (*PostTokenR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTokenR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserDeanonymizeR parses an HTTP response from a PostUserDeanonymizeWithResponse call
func ParsePostUserDeanonymizeR(rsp *http.Response) (*PostUserDeanonymizeR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserDeanonymizeR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserEmailChangeR parses an HTTP response from a PostUserEmailChangeWithResponse call
func ParsePostUserEmailChangeR(rsp *http.Response) (*PostUserEmailChangeR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserEmailChangeR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserEmailSendVerificationEmailR parses an HTTP response from a PostUserEmailSendVerificationEmailWithResponse call
func ParsePostUserEmailSendVerificationEmailR(rsp *http.Response) (*PostUserEmailSendVerificationEmailR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserEmailSendVerificationEmailR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserPasswordR parses an HTTP response from a PostUserPasswordWithResponse call
func ParsePostUserPasswordR(rsp *http.Response) (*PostUserPasswordR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserPasswordR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserPasswordResetR parses an HTTP response from a PostUserPasswordResetWithResponse call
func ParsePostUserPasswordResetR(rsp *http.Response) (*PostUserPasswordResetR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserPasswordResetR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OKResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVerifyR parses an HTTP response from a GetVerifyWithResponse call
func ParseGetVerifyR(rsp *http.Response) (*GetVerifyR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVerifyR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVersionR parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionR(rsp *http.Response) (*GetVersionR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
