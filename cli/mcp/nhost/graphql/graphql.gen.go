// Package graphql provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package graphql

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	AdminSecretScopes = "adminSecret.Scopes"
)

// Defines values for BulkRequestType.
const (
	Bulk BulkRequestType = "bulk"
)

// Defines values for BulkRunSqlOperationType.
const (
	BulkRunSqlOperationTypeRunSql BulkRunSqlOperationType = "run_sql"
)

// Defines values for CommandOkResponseResultType.
const (
	CommandOk CommandOkResponseResultType = "CommandOk"
)

// Defines values for ExportMetadataType.
const (
	ExportMetadataTypeExportMetadata ExportMetadataType = "export_metadata"
)

// Defines values for PgCreateArrayRelationshipType.
const (
	PgCreateArrayRelationshipTypePgCreateArrayRelationship PgCreateArrayRelationshipType = "pg_create_array_relationship"
)

// Defines values for PgCreateDeletePermissionType.
const (
	PgCreateDeletePermissionTypePgCreateDeletePermission PgCreateDeletePermissionType = "pg_create_delete_permission"
)

// Defines values for PgCreateInsertPermissionType.
const (
	PgCreateInsertPermissionTypePgCreateInsertPermission PgCreateInsertPermissionType = "pg_create_insert_permission"
)

// Defines values for PgCreateObjectRelationshipType.
const (
	PgCreateObjectRelationshipTypePgCreateObjectRelationship PgCreateObjectRelationshipType = "pg_create_object_relationship"
)

// Defines values for PgCreateSelectPermissionType.
const (
	PgCreateSelectPermissionTypePgCreateSelectPermission PgCreateSelectPermissionType = "pg_create_select_permission"
)

// Defines values for PgCreateUpdatePermissionType.
const (
	PgCreateUpdatePermissionTypePgCreateUpdatePermission PgCreateUpdatePermissionType = "pg_create_update_permission"
)

// Defines values for PgDropDeletePermissionType.
const (
	PgDropDeletePermissionTypePgDropDeletePermission PgDropDeletePermissionType = "pg_drop_delete_permission"
)

// Defines values for PgDropInsertPermissionType.
const (
	PgDropInsertPermissionTypePgDropInsertPermission PgDropInsertPermissionType = "pg_drop_insert_permission"
)

// Defines values for PgDropRelationshipType.
const (
	PgDropRelationshipTypePgDropRelationship PgDropRelationshipType = "pg_drop_relationship"
)

// Defines values for PgDropSelectPermissionType.
const (
	PgDropSelectPermissionTypePgDropSelectPermission PgDropSelectPermissionType = "pg_drop_select_permission"
)

// Defines values for PgDropUpdatePermissionType.
const (
	PgDropUpdatePermissionTypePgDropUpdatePermission PgDropUpdatePermissionType = "pg_drop_update_permission"
)

// Defines values for PgSuggestRelationshipsType.
const (
	PgSuggestRelationshipsTypePgSuggestRelationships PgSuggestRelationshipsType = "pg_suggest_relationships"
)

// Defines values for ReloadRemoteSchemaOperationType.
const (
	ReloadRemoteSchema ReloadRemoteSchemaOperationType = "reload_remote_schema"
)

// Defines values for RemoteSchemaOperationType.
const (
	AddRemoteSchema RemoteSchemaOperationType = "add_remote_schema"
)

// Defines values for RemoveRemoteSchemaOperationType.
const (
	RemoveRemoteSchema RemoveRemoteSchemaOperationType = "remove_remote_schema"
)

// Defines values for RunSqlRequestType.
const (
	RunSqlRequestTypeRunSql RunSqlRequestType = "run_sql"
)

// Defines values for SqlMigrationStepType.
const (
	RunSql SqlMigrationStepType = "run_sql"
)

// Defines values for TrackTableStepType.
const (
	PgTrackTable TrackTableStepType = "pg_track_table"
)

// Defines values for TuplesOkResponseResultType.
const (
	TuplesOk TuplesOkResponseResultType = "TuplesOk"
)

// AddRemoteSchemaArgs defines model for AddRemoteSchemaArgs.
type AddRemoteSchemaArgs struct {
	// Comment Comment for the remote schema
	Comment    *string `json:"comment,omitempty"`
	Definition struct {
		// ForwardClientHeaders Forward client headers to the remote schema
		ForwardClientHeaders *bool `json:"forward_client_headers,omitempty"`

		// Headers Headers to be sent with the request
		Headers *[]struct {
			// Name Name of the header
			Name string `json:"name"`

			// Value Value of the header or from env var
			Value string `json:"value"`

			// ValueFromEnv Environment variable name to get the value from
			ValueFromEnv *string `json:"value_from_env,omitempty"`
		} `json:"headers,omitempty"`

		// TimeoutSeconds Timeout in seconds
		TimeoutSeconds *int `json:"timeout_seconds,omitempty"`

		// Url URL of the GraphQL server
		Url string `json:"url"`
	} `json:"definition"`

	// Name Name of the remote schema
	Name string `json:"name"`
}

// BoolExp Boolean expression for filtering rows
type BoolExp = map[string]interface{}

// BulkRequest defines model for BulkRequest.
type BulkRequest struct {
	// Args Array of operations to execute
	Args []BulkRequest_Args_Item `json:"args"`

	// Source The data source name
	Source string `json:"source"`

	// Type Type of operation to execute multiple operations in a batch
	Type BulkRequestType `json:"type"`
}

// BulkRequest_Args_Item defines model for BulkRequest.args.Item.
type BulkRequest_Args_Item struct {
	union json.RawMessage
}

// BulkRequestType Type of operation to execute multiple operations in a batch
type BulkRequestType string

// BulkRunSqlOperation defines model for BulkRunSqlOperation.
type BulkRunSqlOperation struct {
	Args struct {
		// Cascade Whether to cascade the operation
		Cascade *bool `json:"cascade,omitempty"`

		// ReadOnly Whether the operation is read-only
		ReadOnly *bool `json:"read_only,omitempty"`

		// Source The data source name
		Source string `json:"source"`

		// Sql SQL statement to execute
		Sql string `json:"sql"`
	} `json:"args"`

	// Type Type of operation to execute SQL queries
	Type BulkRunSqlOperationType `json:"type"`
}

// BulkRunSqlOperationType Type of operation to execute SQL queries
type BulkRunSqlOperationType string

// ColumnPresets Column preset values
type ColumnPresets = map[string]interface{}

// CommandOkResponse defines model for CommandOkResponse.
type CommandOkResponse struct {
	// Result Number of rows affected
	Result int `json:"result"`

	// ResultType Indicates a successful command that doesn't return rows
	ResultType CommandOkResponseResultType `json:"result_type"`
}

// CommandOkResponseResultType Indicates a successful command that doesn't return rows
type CommandOkResponseResultType string

// CreateArrayRelationshipArgs defines model for CreateArrayRelationshipArgs.
type CreateArrayRelationshipArgs struct {
	// Comment Comment for the relationship
	Comment *string `json:"comment,omitempty"`

	// Name Name of the relationship
	Name string `json:"name"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
	Using  struct {
		ForeignKeyConstraintOn struct {
			// Column Column with the foreign key constraint
			Column string          `json:"column"`
			Table  TableIdentifier `json:"table"`
		} `json:"foreign_key_constraint_on"`
	} `json:"using"`
}

// CreateObjectRelationshipArgs defines model for CreateObjectRelationshipArgs.
type CreateObjectRelationshipArgs struct {
	// Comment Comment for the relationship
	Comment *string `json:"comment,omitempty"`

	// Name Name of the relationship
	Name string `json:"name"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
	Using  struct {
		// ForeignKeyConstraintOn Column with the foreign key constraint
		ForeignKeyConstraintOn string `json:"foreign_key_constraint_on"`
	} `json:"using"`
}

// DeletePermissionArgs defines model for DeletePermissionArgs.
type DeletePermissionArgs struct {
	// Comment Comment for the permission
	Comment    *string `json:"comment,omitempty"`
	Permission struct {
		// Filter Boolean expression for filtering rows
		Filter BoolExp `json:"filter"`
	} `json:"permission"`

	// Role Role name for the permission
	Role RolePermission `json:"role"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
}

// DropPermissionArgs defines model for DropPermissionArgs.
type DropPermissionArgs struct {
	// Role Role name for the permission
	Role RolePermission `json:"role"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
}

// DropRelationshipArgs defines model for DropRelationshipArgs.
type DropRelationshipArgs struct {
	// Relationship Name of the relationship to drop
	Relationship string `json:"relationship"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Message Detailed error message
	Message *string `json:"message,omitempty"`
}

// ExportMetadata defines model for ExportMetadata.
type ExportMetadata struct {
	// Type Type of operation to export the current metadata from the server
	Type ExportMetadataType `json:"type"`
}

// ExportMetadataType Type of operation to export the current metadata from the server
type ExportMetadataType string

// InsertPermissionArgs defines model for InsertPermissionArgs.
type InsertPermissionArgs struct {
	// Comment Comment for the permission
	Comment    *string `json:"comment,omitempty"`
	Permission struct {
		// BackendOnly When set to true, the permission is only applied from trusted backends
		BackendOnly *bool `json:"backend_only,omitempty"`

		// Check Boolean expression for filtering rows
		Check BoolExp `json:"check"`

		// Columns List of columns to allow inserting into
		Columns *[]string `json:"columns,omitempty"`

		// Set Column preset values
		Set *ColumnPresets `json:"set,omitempty"`
	} `json:"permission"`

	// Role Role name for the permission
	Role RolePermission `json:"role"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
}

// MigrationRequest defines model for MigrationRequest.
type MigrationRequest struct {
	// Datasource The data source to use
	Datasource string `json:"datasource"`

	// Down Steps to execute to revert the migration. Always provide this when creating a migration that modifies the database
	Down *[]MigrationStep `json:"down,omitempty"`

	// Name Name of the migration
	Name string `json:"name"`

	// Up Steps to execute for the migration. Always provide a down migration as well when creating a migration that modifies the database
	Up []MigrationStep `json:"up"`
}

// MigrationStep defines model for MigrationStep.
type MigrationStep struct {
	union json.RawMessage
}

// PgCreateArrayRelationship defines model for PgCreateArrayRelationship.
type PgCreateArrayRelationship struct {
	Args CreateArrayRelationshipArgs `json:"args"`

	// Type Type of operation to create an array relationship
	Type PgCreateArrayRelationshipType `json:"type"`
}

// PgCreateArrayRelationshipType Type of operation to create an array relationship
type PgCreateArrayRelationshipType string

// PgCreateDeletePermission defines model for PgCreateDeletePermission.
type PgCreateDeletePermission struct {
	Args DeletePermissionArgs `json:"args"`

	// Type Type of operation
	Type PgCreateDeletePermissionType `json:"type"`
}

// PgCreateDeletePermissionType Type of operation
type PgCreateDeletePermissionType string

// PgCreateInsertPermission defines model for PgCreateInsertPermission.
type PgCreateInsertPermission struct {
	Args InsertPermissionArgs `json:"args"`

	// Type Type of operation
	Type PgCreateInsertPermissionType `json:"type"`
}

// PgCreateInsertPermissionType Type of operation
type PgCreateInsertPermissionType string

// PgCreateObjectRelationship defines model for PgCreateObjectRelationship.
type PgCreateObjectRelationship struct {
	Args CreateObjectRelationshipArgs `json:"args"`

	// Type Type of operation to create an object relationship
	Type PgCreateObjectRelationshipType `json:"type"`
}

// PgCreateObjectRelationshipType Type of operation to create an object relationship
type PgCreateObjectRelationshipType string

// PgCreateSelectPermission defines model for PgCreateSelectPermission.
type PgCreateSelectPermission struct {
	Args SelectPermissionArgs `json:"args"`

	// Type Type of operation
	Type PgCreateSelectPermissionType `json:"type"`
}

// PgCreateSelectPermissionType Type of operation
type PgCreateSelectPermissionType string

// PgCreateUpdatePermission defines model for PgCreateUpdatePermission.
type PgCreateUpdatePermission struct {
	Args UpdatePermissionArgs `json:"args"`

	// Type Type of operation
	Type PgCreateUpdatePermissionType `json:"type"`
}

// PgCreateUpdatePermissionType Type of operation
type PgCreateUpdatePermissionType string

// PgDropDeletePermission defines model for PgDropDeletePermission.
type PgDropDeletePermission struct {
	Args DropPermissionArgs `json:"args"`

	// Type Type of operation
	Type PgDropDeletePermissionType `json:"type"`
}

// PgDropDeletePermissionType Type of operation
type PgDropDeletePermissionType string

// PgDropInsertPermission defines model for PgDropInsertPermission.
type PgDropInsertPermission struct {
	Args DropPermissionArgs `json:"args"`

	// Type Type of operation
	Type PgDropInsertPermissionType `json:"type"`
}

// PgDropInsertPermissionType Type of operation
type PgDropInsertPermissionType string

// PgDropRelationship defines model for PgDropRelationship.
type PgDropRelationship struct {
	Args DropRelationshipArgs `json:"args"`

	// Type Type of operation to drop a relationship (both object and array)
	Type PgDropRelationshipType `json:"type"`
}

// PgDropRelationshipType Type of operation to drop a relationship (both object and array)
type PgDropRelationshipType string

// PgDropSelectPermission defines model for PgDropSelectPermission.
type PgDropSelectPermission struct {
	Args DropPermissionArgs `json:"args"`

	// Type Type of operation
	Type PgDropSelectPermissionType `json:"type"`
}

// PgDropSelectPermissionType Type of operation
type PgDropSelectPermissionType string

// PgDropUpdatePermission defines model for PgDropUpdatePermission.
type PgDropUpdatePermission struct {
	Args DropPermissionArgs `json:"args"`

	// Type Type of operation
	Type PgDropUpdatePermissionType `json:"type"`
}

// PgDropUpdatePermissionType Type of operation
type PgDropUpdatePermissionType string

// PgSuggestRelationships defines model for PgSuggestRelationships.
type PgSuggestRelationships struct {
	// Args Suggest relationships based on foreign key constraints
	Args PgSuggestRelationshipsArgs `json:"args"`

	// Type Type of operation to suggest relationships based on foreign key constraints
	Type PgSuggestRelationshipsType `json:"type"`
}

// PgSuggestRelationshipsType Type of operation to suggest relationships based on foreign key constraints
type PgSuggestRelationshipsType string

// PgSuggestRelationshipsArgs Suggest relationships based on foreign key constraints
type PgSuggestRelationshipsArgs struct {
	// Schema Schema name to suggest relationships for (defaults to public)
	Schema *string `json:"schema,omitempty"`

	// Source Name of the source database
	Source string `json:"source"`
}

// PostgresErrorResponse defines model for PostgresErrorResponse.
type PostgresErrorResponse struct {
	// Code Error code
	Code string `json:"code"`

	// Error Error message
	Error    string `json:"error"`
	Internal *struct {
		// Arguments Arguments related to the error
		Arguments *[]string `json:"arguments,omitempty"`
		Error     *struct {
			// Description Detailed error description
			Description *string `json:"description"`

			// ExecStatus Execution status
			ExecStatus *string `json:"exec_status,omitempty"`

			// Hint Hint for resolving the error
			Hint *string `json:"hint"`

			// Message Error message
			Message *string `json:"message,omitempty"`

			// StatusCode PostgreSQL error code
			StatusCode *string `json:"status_code,omitempty"`
		} `json:"error,omitempty"`

		// Prepared Whether the statement was prepared
		Prepared *bool `json:"prepared,omitempty"`

		// Statement The SQL statement that caused the error
		Statement *string `json:"statement,omitempty"`
	} `json:"internal,omitempty"`

	// Path Path to the error in the request
	Path *string `json:"path,omitempty"`
}

// ReloadRemoteSchemaArgs defines model for ReloadRemoteSchemaArgs.
type ReloadRemoteSchemaArgs struct {
	// Name Name of the remote schema to reload
	Name string `json:"name"`
}

// ReloadRemoteSchemaOperation defines model for ReloadRemoteSchemaOperation.
type ReloadRemoteSchemaOperation struct {
	Args ReloadRemoteSchemaArgs `json:"args"`

	// Type Type of operation to reload a remote schema
	Type ReloadRemoteSchemaOperationType `json:"type"`
}

// ReloadRemoteSchemaOperationType Type of operation to reload a remote schema
type ReloadRemoteSchemaOperationType string

// RemoteSchemaOperation defines model for RemoteSchemaOperation.
type RemoteSchemaOperation struct {
	Args AddRemoteSchemaArgs `json:"args"`

	// Type Type of operation to add a remote schema
	Type RemoteSchemaOperationType `json:"type"`
}

// RemoteSchemaOperationType Type of operation to add a remote schema
type RemoteSchemaOperationType string

// RemoveRemoteSchemaArgs defines model for RemoveRemoteSchemaArgs.
type RemoveRemoteSchemaArgs struct {
	// Name Name of the remote schema to remove
	Name string `json:"name"`
}

// RemoveRemoteSchemaOperation defines model for RemoveRemoteSchemaOperation.
type RemoveRemoteSchemaOperation struct {
	Args RemoveRemoteSchemaArgs `json:"args"`

	// Type Type of operation to remove a remote schema
	Type RemoveRemoteSchemaOperationType `json:"type"`
}

// RemoveRemoteSchemaOperationType Type of operation to remove a remote schema
type RemoveRemoteSchemaOperationType string

// RolePermission Role name for the permission
type RolePermission = string

// RunSqlRequest defines model for RunSqlRequest.
type RunSqlRequest struct {
	Args struct {
		// Cascade Whether to cascade the operation
		Cascade *bool `json:"cascade,omitempty"`

		// ReadOnly Whether the operation is read-only
		ReadOnly *bool `json:"read_only,omitempty"`

		// Source The data source name
		Source string `json:"source"`

		// Sql SQL statement to execute
		Sql string `json:"sql"`
	} `json:"args"`

	// Type Type of operation to execute SQL queries
	Type RunSqlRequestType `json:"type"`
}

// RunSqlRequestType Type of operation to execute SQL queries
type RunSqlRequestType string

// SelectPermissionArgs defines model for SelectPermissionArgs.
type SelectPermissionArgs struct {
	// Comment Comment for the permission
	Comment    *string `json:"comment,omitempty"`
	Permission struct {
		// AllowAggregations Allow aggregate queries
		AllowAggregations *bool `json:"allow_aggregations,omitempty"`

		// Columns List of columns to allow selecting
		Columns *[]string `json:"columns,omitempty"`

		// Filter Boolean expression for filtering rows
		Filter BoolExp `json:"filter"`

		// Limit Maximum number of rows that can be returned
		Limit *int `json:"limit,omitempty"`
	} `json:"permission"`

	// Role Role name for the permission
	Role RolePermission `json:"role"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
}

// SqlMigrationArgs defines model for SqlMigrationArgs.
type SqlMigrationArgs struct {
	// Cascade Whether to cascade the operation. Set to true when modifying the database schema
	Cascade *bool `json:"cascade,omitempty"`

	// ReadOnly Whether the operation is read-only
	ReadOnly *bool `json:"read_only,omitempty"`

	// Source The data source name
	Source string `json:"source"`

	// Sql SQL statement to execute
	Sql string `json:"sql"`
}

// SqlMigrationStep defines model for SqlMigrationStep.
type SqlMigrationStep struct {
	Args SqlMigrationArgs `json:"args"`

	// Type Use to run SQL against the database behind the GraphQL service
	Type SqlMigrationStepType `json:"type"`
}

// SqlMigrationStepType Use to run SQL against the database behind the GraphQL service
type SqlMigrationStepType string

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Name The name of the created migration with a timestamp
	Name *string `json:"name,omitempty"`
}

// TableIdentifier defines model for TableIdentifier.
type TableIdentifier struct {
	// Name Table name
	Name string `json:"name"`

	// Schema Schema name
	Schema string `json:"schema"`
}

// TrackTableArgs defines model for TrackTableArgs.
type TrackTableArgs struct {
	// Source The data source name
	Source string `json:"source"`
	Table  struct {
		// Name Name of the table
		Name string `json:"name"`

		// Schema Schema of the table
		Schema string `json:"schema"`
	} `json:"table"`
}

// TrackTableStep defines model for TrackTableStep.
type TrackTableStep struct {
	Args TrackTableArgs `json:"args"`

	// Type Use after creating a table with run_sql to track it. You can provide this in the same query as the run_sql step
	Type TrackTableStepType `json:"type"`
}

// TrackTableStepType Use after creating a table with run_sql to track it. You can provide this in the same query as the run_sql step
type TrackTableStepType string

// TuplesOkResponse defines model for TuplesOkResponse.
type TuplesOkResponse struct {
	// Result The result set, with the first row containing column names
	Result [][]string `json:"result"`

	// ResultType Indicates a successful query that returns rows
	ResultType TuplesOkResponseResultType `json:"result_type"`
}

// TuplesOkResponseResultType Indicates a successful query that returns rows
type TuplesOkResponseResultType string

// UpdatePermissionArgs defines model for UpdatePermissionArgs.
type UpdatePermissionArgs struct {
	// Comment Comment for the permission
	Comment    *string `json:"comment,omitempty"`
	Permission struct {
		// Check Boolean expression for filtering rows
		Check BoolExp `json:"check"`

		// Columns List of columns to allow updating
		Columns *[]string `json:"columns,omitempty"`

		// Filter Boolean expression for filtering rows
		Filter BoolExp `json:"filter"`

		// Set Column preset values
		Set *ColumnPresets `json:"set,omitempty"`
	} `json:"permission"`

	// Role Role name for the permission
	Role RolePermission `json:"role"`

	// Source Name of the source database
	Source string          `json:"source"`
	Table  TableIdentifier `json:"table"`
}

// MetadataOperationJSONBody defines parameters for MetadataOperation.
type MetadataOperationJSONBody struct {
	union json.RawMessage
}

// ExecuteQueryJSONBody defines parameters for ExecuteQuery.
type ExecuteQueryJSONBody struct {
	union json.RawMessage
}

// ExecuteMigrationJSONRequestBody defines body for ExecuteMigration for application/json ContentType.
type ExecuteMigrationJSONRequestBody = MigrationRequest

// MetadataOperationJSONRequestBody defines body for MetadataOperation for application/json ContentType.
type MetadataOperationJSONRequestBody MetadataOperationJSONBody

// ExecuteQueryJSONRequestBody defines body for ExecuteQuery for application/json ContentType.
type ExecuteQueryJSONRequestBody ExecuteQueryJSONBody

// AsBulkRunSqlOperation returns the union data inside the BulkRequest_Args_Item as a BulkRunSqlOperation
func (t BulkRequest_Args_Item) AsBulkRunSqlOperation() (BulkRunSqlOperation, error) {
	var body BulkRunSqlOperation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBulkRunSqlOperation overwrites any union data inside the BulkRequest_Args_Item as the provided BulkRunSqlOperation
func (t *BulkRequest_Args_Item) FromBulkRunSqlOperation(v BulkRunSqlOperation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBulkRunSqlOperation performs a merge with any union data inside the BulkRequest_Args_Item, using the provided BulkRunSqlOperation
func (t *BulkRequest_Args_Item) MergeBulkRunSqlOperation(v BulkRunSqlOperation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BulkRequest_Args_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BulkRequest_Args_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSqlMigrationStep returns the union data inside the MigrationStep as a SqlMigrationStep
func (t MigrationStep) AsSqlMigrationStep() (SqlMigrationStep, error) {
	var body SqlMigrationStep
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSqlMigrationStep overwrites any union data inside the MigrationStep as the provided SqlMigrationStep
func (t *MigrationStep) FromSqlMigrationStep(v SqlMigrationStep) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSqlMigrationStep performs a merge with any union data inside the MigrationStep, using the provided SqlMigrationStep
func (t *MigrationStep) MergeSqlMigrationStep(v SqlMigrationStep) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrackTableStep returns the union data inside the MigrationStep as a TrackTableStep
func (t MigrationStep) AsTrackTableStep() (TrackTableStep, error) {
	var body TrackTableStep
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackTableStep overwrites any union data inside the MigrationStep as the provided TrackTableStep
func (t *MigrationStep) FromTrackTableStep(v TrackTableStep) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackTableStep performs a merge with any union data inside the MigrationStep, using the provided TrackTableStep
func (t *MigrationStep) MergeTrackTableStep(v TrackTableStep) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MigrationStep) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MigrationStep) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ExecuteMigrationWithBody request with any body
	ExecuteMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteMigration(ctx context.Context, body ExecuteMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataOperationWithBody request with any body
	MetadataOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataOperation(ctx context.Context, body MetadataOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteQueryWithBody request with any body
	ExecuteQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteQuery(ctx context.Context, body ExecuteQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ExecuteMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteMigrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteMigration(ctx context.Context, body ExecuteMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteMigrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataOperation(ctx context.Context, body MetadataOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteQuery(ctx context.Context, body ExecuteQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewExecuteMigrationRequest calls the generic ExecuteMigration builder with application/json body
func NewExecuteMigrationRequest(server string, body ExecuteMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteMigrationRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteMigrationRequestWithBody generates requests for ExecuteMigration with any type of body
func NewExecuteMigrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apis/migrate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetadataOperationRequest calls the generic MetadataOperation builder with application/json body
func NewMetadataOperationRequest(server string, body MetadataOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetadataOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewMetadataOperationRequestWithBody generates requests for MetadataOperation with any type of body
func NewMetadataOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteQueryRequest calls the generic ExecuteQuery builder with application/json body
func NewExecuteQueryRequest(server string, body ExecuteQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteQueryRequestWithBody generates requests for ExecuteQuery with any type of body
func NewExecuteQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ExecuteMigrationWithBodyWithResponse request with any body
	ExecuteMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteMigrationR, error)

	ExecuteMigrationWithResponse(ctx context.Context, body ExecuteMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteMigrationR, error)

	// MetadataOperationWithBodyWithResponse request with any body
	MetadataOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataOperationR, error)

	MetadataOperationWithResponse(ctx context.Context, body MetadataOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataOperationR, error)

	// ExecuteQueryWithBodyWithResponse request with any body
	ExecuteQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteQueryR, error)

	ExecuteQueryWithResponse(ctx context.Context, body ExecuteQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteQueryR, error)
}

type ExecuteMigrationR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ExecuteMigrationR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteMigrationR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataOperationR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MetadataOperationR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataOperationR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteQueryR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *PostgresErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ExecuteQueryR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteQueryR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ExecuteMigrationWithBodyWithResponse request with arbitrary body returning *ExecuteMigrationR
func (c *ClientWithResponses) ExecuteMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteMigrationR, error) {
	rsp, err := c.ExecuteMigrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteMigrationR(rsp)
}

func (c *ClientWithResponses) ExecuteMigrationWithResponse(ctx context.Context, body ExecuteMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteMigrationR, error) {
	rsp, err := c.ExecuteMigration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteMigrationR(rsp)
}

// MetadataOperationWithBodyWithResponse request with arbitrary body returning *MetadataOperationR
func (c *ClientWithResponses) MetadataOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataOperationR, error) {
	rsp, err := c.MetadataOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataOperationR(rsp)
}

func (c *ClientWithResponses) MetadataOperationWithResponse(ctx context.Context, body MetadataOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataOperationR, error) {
	rsp, err := c.MetadataOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataOperationR(rsp)
}

// ExecuteQueryWithBodyWithResponse request with arbitrary body returning *ExecuteQueryR
func (c *ClientWithResponses) ExecuteQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteQueryR, error) {
	rsp, err := c.ExecuteQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteQueryR(rsp)
}

func (c *ClientWithResponses) ExecuteQueryWithResponse(ctx context.Context, body ExecuteQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteQueryR, error) {
	rsp, err := c.ExecuteQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteQueryR(rsp)
}

// ParseExecuteMigrationR parses an HTTP response from a ExecuteMigrationWithResponse call
func ParseExecuteMigrationR(rsp *http.Response) (*ExecuteMigrationR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteMigrationR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMetadataOperationR parses an HTTP response from a MetadataOperationWithResponse call
func ParseMetadataOperationR(rsp *http.Response) (*MetadataOperationR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataOperationR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseExecuteQueryR parses an HTTP response from a ExecuteQueryWithResponse call
func ParseExecuteQueryR(rsp *http.Response) (*ExecuteQueryR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteQueryR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PostgresErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
