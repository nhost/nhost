openapi: 3.0.0
info:
  title: Hasura API
  description: API for managing database operations, migrations, and metadata permissions
  version: 1.0.0

security:
  - adminSecret: []

paths:
  /v2/query:
    post:
      summary: Execute database operations. Do not use to modify the database schema, use /apis/migrate instead
      description: Execute SQL queries and other database operations
      operationId: executeQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RunSqlRequest'
                - $ref: '#/components/schemas/BulkRequest'
      responses:
        '200':
          description: Operation executed successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TuplesOkResponse'
                  - $ref: '#/components/schemas/CommandOkResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /apis/migrate:
    post:
      summary: Execute a database migration
      description: Executes a migration with the provided up and down steps
      operationId: executeMigration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationRequest'
      responses:
        '200':
          description: Migration executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: internal_error
                message: "{\n  \"error\": \"query execution failed\",\n  \"path\": \"$[0]\",\n  \"code\": \"postgres-error\",\n  \"internal\": {\n    \"arguments\": [],\n    \"error\": {\n      \"description\": null,\n      \"exec_status\": \"FatalError\",\n      \"hint\": null,\n      \"message\": \"syntax error at or near \\\":\\\"\",\n      \"status_code\": \"42601\"\n    },\n    \"prepared\": false,\n    \"statement\": \"CREATE TABLE asd ( id TEXT ):;\"\n  }\n}"

  /v1/metadata:
    post:
      summary: Metadata API endpoint
      description: Endpoint for all metadata operations
      operationId: metadataOperation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PgCreateInsertPermission'
                - $ref: '#/components/schemas/PgDropInsertPermission'
                - $ref: '#/components/schemas/PgCreateSelectPermission'
                - $ref: '#/components/schemas/PgDropSelectPermission'
                - $ref: '#/components/schemas/PgCreateUpdatePermission'
                - $ref: '#/components/schemas/PgDropUpdatePermission'
                - $ref: '#/components/schemas/PgCreateDeletePermission'
                - $ref: '#/components/schemas/PgDropDeletePermission'
                - $ref: '#/components/schemas/PgCreateObjectRelationship'
                - $ref: '#/components/schemas/PgCreateArrayRelationship'
                - $ref: '#/components/schemas/PgDropRelationship'
                - $ref: '#/components/schemas/PgSuggestRelationships'
                - $ref: '#/components/schemas/ExportMetadata'
                - $ref: '#/components/schemas/RemoteSchemaOperation'
                - $ref: '#/components/schemas/RemoveRemoteSchemaOperation'
                - $ref: '#/components/schemas/ReloadRemoteSchemaOperation'
      responses:
        '200':
          description: Operation executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    adminSecret:
      type: apiKey
      in: header
      name: x-hasura-admin-secret

  schemas:
    RunSqlRequest:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [run_sql]
          description: Type of operation to execute SQL queries
        args:
          type: object
          required:
            - source
            - sql
          properties:
            source:
              type: string
              description: The data source name
              example: default
            sql:
              type: string
              description: SQL statement to execute
              example: "SELECT column_name, table_name, is_generated, is_identity, identity_generation FROM information_schema.columns where table_schema = 'public';"
            cascade:
              type: boolean
              description: Whether to cascade the operation
              default: false
            read_only:
              type: boolean
              description: Whether the operation is read-only
              default: true

    BulkRequest:
      type: object
      required:
        - type
        - source
        - args
      properties:
        type:
          type: string
          enum: [bulk]
          description: Type of operation to execute multiple operations in a batch
        source:
          type: string
          description: The data source name
          example: default
        args:
          type: array
          description: Array of operations to execute
          items:
            oneOf:
              - $ref: '#/components/schemas/BulkRunSqlOperation'
              # Add other operation types as needed

    BulkRunSqlOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [run_sql]
          description: Type of operation to execute SQL queries
        args:
          type: object
          required:
            - source
            - sql
          properties:
            source:
              type: string
              description: The data source name
              example: default
            sql:
              type: string
              description: SQL statement to execute
              example: "CREATE TABLE test (id SERIAL PRIMARY KEY, name TEXT);"
            cascade:
              type: boolean
              description: Whether to cascade the operation
              default: false
            read_only:
              type: boolean
              description: Whether the operation is read-only
              default: false

    TuplesOkResponse:
      type: object
      required:
        - result_type
        - result
      properties:
        result_type:
          type: string
          enum: [TuplesOk]
          description: Indicates a successful query that returns rows
        result:
          type: array
          description: The result set, with the first row containing column names
          items:
            type: array
            items:
              type: string
          example: [
            ["column_name", "table_name", "is_generated", "is_identity", "identity_generation"],
            ["updated_at", "notes", "NEVER", "NO", "NULL"],
            ["manager", "departments", "NEVER", "NO", "NULL"]
          ]

    CommandOkResponse:
      type: object
      required:
        - result_type
        - result
      properties:
        result_type:
          type: string
          enum: [CommandOk]
          description: Indicates a successful command that doesn't return rows
        result:
          type: integer
          description: Number of rows affected
          example: 1

    PostgresErrorResponse:
      type: object
      required:
        - error
        - code
      properties:
        error:
          type: string
          description: Error message
          example: query execution failed
        path:
          type: string
          description: Path to the error in the request
          example: $[0]
        code:
          type: string
          description: Error code
          example: postgres-error
        internal:
          type: object
          properties:
            arguments:
              type: array
              description: Arguments related to the error
              items:
                type: string
            error:
              type: object
              properties:
                description:
                  type: string
                  nullable: true
                  description: Detailed error description
                exec_status:
                  type: string
                  description: Execution status
                  example: FatalError
                hint:
                  type: string
                  nullable: true
                  description: Hint for resolving the error
                message:
                  type: string
                  description: Error message
                  example: 'syntax error at or near "wrong"'
                status_code:
                  type: string
                  description: PostgreSQL error code
                  example: '42601'
            prepared:
              type: boolean
              description: Whether the statement was prepared
            statement:
              type: string
              description: The SQL statement that caused the error
              example: 'wrong;'

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: internal_error
        message:
          type: string
          description: Detailed error message

    SqlMigrationArgs:
      type: object
      required:
        - source
        - sql
      properties:
        source:
          type: string
          description: The data source name
          example: default
        sql:
          type: string
          description: SQL statement to execute
          example: CREATE TABLE employees (id TEXT);
        cascade:
          type: boolean
          description: Whether to cascade the operation. Set to true when modifying the database schema
          default: false
        read_only:
          type: boolean
          description: Whether the operation is read-only
          default: false

    SqlMigrationStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [run_sql]
          description: Use to run SQL against the database behind the GraphQL service
        args:
          $ref: '#/components/schemas/SqlMigrationArgs'

    TrackTableArgs:
      type: object
      required:
        - table
        - source
      properties:
        table:
          type: object
          required:
            - name
            - schema
          properties:
            name:
              type: string
              description: Name of the table
              example: employees
            schema:
              type: string
              description: Schema of the table
              example: public
        source:
          type: string
          description: The data source name
          example: default

    TrackTableStep:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_track_table]
          description: Use after creating a table with run_sql to track it. You can provide this in the same query as the run_sql step
        args:
          $ref: '#/components/schemas/TrackTableArgs'

    MigrationStep:
      oneOf:
        - $ref: '#/components/schemas/SqlMigrationStep'
        - $ref: '#/components/schemas/TrackTableStep'

    MigrationRequest:
      type: object
      required:
        - name
        - up
        - datasource
      properties:
        name:
          type: string
          description: Name of the migration
          example: my_migration
        up:
          type: array
          description: Steps to execute for the migration. Always provide a down migration as well when creating a migration that modifies the database
          items:
            $ref: '#/components/schemas/MigrationStep'
        down:
          type: array
          description: Steps to execute to revert the migration. Always provide this when creating a migration that modifies the database
          items:
            $ref: '#/components/schemas/MigrationStep'
        datasource:
          type: string
          description: The data source to use
          example: default

    SuccessResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the created migration with a timestamp
          example: 1745093409829_my_migration

    TableIdentifier:
      type: object
      required:
        - schema
        - name
      properties:
        schema:
          type: string
          description: Schema name
          example: public
        name:
          type: string
          description: Table name
          example: employees

    RolePermission:
      type: string
      description: Role name for the permission
      example: user

    BoolExp:
      type: object
      description: Boolean expression for filtering rows
      example:
        user_id:
          _eq: "X-Hasura-User-Id"

    ColumnPresets:
      type: object
      description: Column preset values
      example:
        user_id: "X-Hasura-User-Id"

    InsertPermissionArgs:
      type: object
      required:
        - table
        - role
        - permission
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        role:
          $ref: '#/components/schemas/RolePermission'
        permission:
          type: object
          required:
            - check
          properties:
            check:
              $ref: '#/components/schemas/BoolExp'
            set:
              $ref: '#/components/schemas/ColumnPresets'
            columns:
              type: array
              items:
                type: string
              description: List of columns to allow inserting into
              example: ["name", "email", "user_id"]
            backend_only:
              type: boolean
              description: When set to true, the permission is only applied from trusted backends
              default: false
        comment:
          type: string
          description: Comment for the permission
          example: Allow users to insert their own data
        source:
          type: string
          description: Name of the source database
          example: default

    SelectPermissionArgs:
      type: object
      required:
        - table
        - role
        - permission
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        role:
          $ref: '#/components/schemas/RolePermission'
        permission:
          type: object
          required:
            - filter
          properties:
            filter:
              $ref: '#/components/schemas/BoolExp'
            columns:
              type: array
              items:
                type: string
              description: List of columns to allow selecting
              example: ["id", "name", "email", "user_id"]
            limit:
              type: integer
              description: Maximum number of rows that can be returned
              example: 100
            allow_aggregations:
              type: boolean
              description: Allow aggregate queries
              default: false
        comment:
          type: string
          description: Comment for the permission
          example: Allow users to view their own data
        source:
          type: string
          description: Name of the source database
          example: default

    UpdatePermissionArgs:
      type: object
      required:
        - table
        - role
        - permission
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        role:
          $ref: '#/components/schemas/RolePermission'
        permission:
          type: object
          required:
            - filter
            - check
          properties:
            filter:
              $ref: '#/components/schemas/BoolExp'
            check:
              $ref: '#/components/schemas/BoolExp'
            set:
              $ref: '#/components/schemas/ColumnPresets'
            columns:
              type: array
              items:
                type: string
              description: List of columns to allow updating
              example: ["name", "email"]
        comment:
          type: string
          description: Comment for the permission
          example: Allow users to update their own data
        source:
          type: string
          description: Name of the source database
          example: default

    DeletePermissionArgs:
      type: object
      required:
        - table
        - role
        - permission
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        role:
          $ref: '#/components/schemas/RolePermission'
        permission:
          type: object
          required:
            - filter
          properties:
            filter:
              $ref: '#/components/schemas/BoolExp'
        comment:
          type: string
          description: Comment for the permission
          example: Allow users to delete their own data
        source:
          type: string
          description: Name of the source database
          example: default

    DropPermissionArgs:
      type: object
      required:
        - table
        - role
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        role:
          $ref: '#/components/schemas/RolePermission'
        source:
          type: string
          description: Name of the source database
          example: default

    PgCreateInsertPermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_create_insert_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/InsertPermissionArgs'

    PgDropInsertPermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_drop_insert_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/DropPermissionArgs'

    PgCreateSelectPermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_create_select_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/SelectPermissionArgs'

    PgDropSelectPermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_drop_select_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/DropPermissionArgs'

    PgCreateUpdatePermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_create_update_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/UpdatePermissionArgs'

    PgDropUpdatePermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_drop_update_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/DropPermissionArgs'

    PgCreateDeletePermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_create_delete_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/DeletePermissionArgs'

    PgDropDeletePermission:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_drop_delete_permission]
          description: Type of operation
        args:
          $ref: '#/components/schemas/DropPermissionArgs'

    CreateObjectRelationshipArgs:
      type: object
      required:
        - table
        - name
        - using
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        name:
          type: string
          description: Name of the relationship
          example: author
        using:
          type: object
          required:
            - foreign_key_constraint_on
          properties:
            foreign_key_constraint_on:
              type: string
              description: Column with the foreign key constraint
              example: author_id
        comment:
          type: string
          description: Comment for the relationship
          example: Relates to the author of this post
        source:
          type: string
          description: Name of the source database
          example: default

    PgCreateObjectRelationship:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_create_object_relationship]
          description: Type of operation to create an object relationship
        args:
          $ref: '#/components/schemas/CreateObjectRelationshipArgs'

    CreateArrayRelationshipArgs:
      type: object
      required:
        - table
        - name
        - using
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        name:
          type: string
          description: Name of the relationship
          example: posts
        using:
          type: object
          required:
            - foreign_key_constraint_on
          properties:
            foreign_key_constraint_on:
              type: object
              required:
                - table
                - column
              properties:
                table:
                  $ref: '#/components/schemas/TableIdentifier'
                column:
                  type: string
                  description: Column with the foreign key constraint
                  example: author_id
        comment:
          type: string
          description: Comment for the relationship
          example: Posts written by this author
        source:
          type: string
          description: Name of the source database
          example: default

    PgCreateArrayRelationship:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_create_array_relationship]
          description: Type of operation to create an array relationship
        args:
          $ref: '#/components/schemas/CreateArrayRelationshipArgs'

    DropRelationshipArgs:
      type: object
      required:
        - table
        - relationship
        - source
      properties:
        table:
          $ref: '#/components/schemas/TableIdentifier'
        relationship:
          type: string
          description: Name of the relationship to drop
          example: posts
        source:
          type: string
          description: Name of the source database
          example: default

    PgDropRelationship:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_drop_relationship]
          description: Type of operation to drop a relationship (both object and array)
        args:
          $ref: '#/components/schemas/DropRelationshipArgs'

    PgSuggestRelationshipsArgs:
      type: object
      description: Suggest relationships based on foreign key constraints
      required:
        - source
      properties:
        source:
          type: string
          description: Name of the source database
          example: default
        schema:
          type: string
          description: Schema name to suggest relationships for (defaults to public)
          example: public

    PgSuggestRelationshipsResponse:
      type: object
      properties:
        object_relationships:
          type: array
          items:
            type: object
            properties:
              table:
                $ref: '#/components/schemas/TableIdentifier'
              name:
                type: string
                description: Suggested name for the relationship
              using:
                type: object
                properties:
                  foreign_key_constraint_on:
                    type: string
                    description: Column with the foreign key constraint
        array_relationships:
          type: array
          items:
            type: object
            properties:
              table:
                $ref: '#/components/schemas/TableIdentifier'
              name:
                type: string
                description: Suggested name for the relationship
              using:
                type: object
                properties:
                  foreign_key_constraint_on:
                    type: object
                    properties:
                      table:
                        $ref: '#/components/schemas/TableIdentifier'
                      column:
                        type: string
                        description: Column with the foreign key constraint

    PgSuggestRelationships:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [pg_suggest_relationships]
          description: Type of operation to suggest relationships based on foreign key constraints
        args:
          $ref: '#/components/schemas/PgSuggestRelationshipsArgs'

    ExportMetadata:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [export_metadata]
          description: Type of operation to export the current metadata from the server

    ExportMetadataResponse:
      type: object
      description: The complete Hasura metadata as JSON
      properties:
        version:
          type: integer
          description: Metadata version
          example: 3
        sources:
          type: array
          description: List of data sources
          items:
            type: object
        metadata:
          type: object
          description: Complete metadata configuration
          additionalProperties: true

    AddRemoteSchemaArgs:
      type: object
      required:
        - name
        - definition
      properties:
        name:
          type: string
          description: Name of the remote schema
          example: my_remote_schema
        definition:
          type: object
          required:
            - url
          properties:
            url:
              type: string
              description: URL of the GraphQL server
              example: https://my-graphql-service.com/graphql
            headers:
              type: array
              description: Headers to be sent with the request
              items:
                type: object
                required:
                  - name
                  - value
                properties:
                  name:
                    type: string
                    description: Name of the header
                    example: Authorization
                  value:
                    type: string
                    description: Value of the header or from env var
                    example: Bearer ${AUTH_TOKEN}
                  value_from_env:
                    type: string
                    description: Environment variable name to get the value from
                    example: AUTH_TOKEN
            timeout_seconds:
              type: integer
              description: Timeout in seconds
              example: 60
            forward_client_headers:
              type: boolean
              description: Forward client headers to the remote schema
              default: false
        comment:
          type: string
          description: Comment for the remote schema
          example: External GraphQL service

    RemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [add_remote_schema]
          description: Type of operation to add a remote schema
        args:
          $ref: '#/components/schemas/AddRemoteSchemaArgs'

    RemoveRemoteSchemaArgs:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the remote schema to remove
          example: my_remote_schema

    RemoveRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [remove_remote_schema]
          description: Type of operation to remove a remote schema
        args:
          $ref: '#/components/schemas/RemoveRemoteSchemaArgs'

    ReloadRemoteSchemaArgs:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the remote schema to reload
          example: my_remote_schema

    ReloadRemoteSchemaOperation:
      type: object
      required:
        - type
        - args
      properties:
        type:
          type: string
          enum: [reload_remote_schema]
          description: Type of operation to reload a remote schema
        args:
          $ref: '#/components/schemas/ReloadRemoteSchemaArgs'
