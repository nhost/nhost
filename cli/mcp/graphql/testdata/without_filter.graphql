scalar Boolean

scalar ConfigEmail

scalar ConfigHasuraAPIs

scalar ConfigInt32

scalar ConfigLocale

scalar ConfigPort

scalar ConfigRunServiceName

scalar ConfigUint

scalar ConfigUint32

scalar ConfigUint8

scalar ConfigUrl

scalar ConfigUserRole

scalar Float

scalar Int

scalar String

scalar Timestamp

scalar bigint

scalar bpchar

scalar bytea

scalar citext

scalar float64

scalar jsonb

scalar map

scalar smallint

scalar timestamp

scalar timestamptz

scalar uuid

type BackupPresignedURL {
  expires_at: Timestamp!
  url: String!
}

type BackupResult {
  backupID: uuid!
  size: bigint!
}

type BackupResultsItem {
  appID: uuid!
  backupID: uuid!
  error: String!
  size: bigint!
  success: Boolean!
}

type ConfigAI {
  autoEmbeddings: ConfigAIAutoEmbeddings
  openai: ConfigAIOpenai!
  resources: ConfigAIResources!
  version: String
  webhookSecret: String!
}

type ConfigAIAutoEmbeddings {
  synchPeriodMinutes: ConfigUint32
}

type ConfigAIOpenai {
  apiKey: String!
  organization: String
}

type ConfigAIResources {
  compute: ConfigComputeResources!
}

type ConfigAppConfig {
  appID: uuid!
  config: ConfigConfig!
}

type ConfigAppSecrets {
  appID: uuid!
  secrets: [ConfigEnvironmentVariable!]!
}

type ConfigAppSystemConfig {
  appID: uuid!
  systemConfig: ConfigSystemConfig!
}

type ConfigAuth {
  elevatedPrivileges: ConfigAuthElevatedPrivileges
  method: ConfigAuthMethod
  misc: ConfigAuthMisc
  rateLimit: ConfigAuthRateLimit
  redirections: ConfigAuthRedirections
  """Resources for the service"""
resources: ConfigResources
  session: ConfigAuthSession
  signUp: ConfigAuthSignUp
  totp: ConfigAuthTotp
  user: ConfigAuthUser
  """Version of auth, you can see available versions in the URL below:
https://hub.docker.com/r/nhost/hasura-auth/tags

Releases:

https://github.com/nhost/hasura-auth/releases"""
version: String
}

type ConfigAuthElevatedPrivileges {
  mode: String
}

type ConfigAuthMethod {
  anonymous: ConfigAuthMethodAnonymous
  emailPassword: ConfigAuthMethodEmailPassword
  emailPasswordless: ConfigAuthMethodEmailPasswordless
  oauth: ConfigAuthMethodOauth
  otp: ConfigAuthMethodOtp
  smsPasswordless: ConfigAuthMethodSmsPasswordless
  webauthn: ConfigAuthMethodWebauthn
}

type ConfigAuthMethodAnonymous {
  enabled: Boolean
}

type ConfigAuthMethodEmailPassword {
  emailVerificationRequired: Boolean
  """Disabling email+password sign in is not implmented yet
enabled: bool | *true"""
hibpEnabled: Boolean
  passwordMinLength: ConfigUint8
}

type ConfigAuthMethodEmailPasswordless {
  enabled: Boolean
}

type ConfigAuthMethodOauth {
  apple: ConfigAuthMethodOauthApple
  azuread: ConfigAuthMethodOauthAzuread
  bitbucket: ConfigStandardOauthProvider
  discord: ConfigStandardOauthProviderWithScope
  facebook: ConfigStandardOauthProviderWithScope
  github: ConfigStandardOauthProviderWithScope
  gitlab: ConfigStandardOauthProviderWithScope
  google: ConfigStandardOauthProviderWithScope
  linkedin: ConfigStandardOauthProviderWithScope
  spotify: ConfigStandardOauthProviderWithScope
  strava: ConfigStandardOauthProviderWithScope
  twitch: ConfigStandardOauthProviderWithScope
  twitter: ConfigAuthMethodOauthTwitter
  windowslive: ConfigStandardOauthProviderWithScope
  workos: ConfigAuthMethodOauthWorkos
}

type ConfigAuthMethodOauthApple {
  audience: String
  clientId: String
  enabled: Boolean
  keyId: String
  privateKey: String
  scope: [String!]
  teamId: String
}

type ConfigAuthMethodOauthAzuread {
  clientId: String
  clientSecret: String
  enabled: Boolean
  tenant: String
}

type ConfigAuthMethodOauthTwitter {
  consumerKey: String
  consumerSecret: String
  enabled: Boolean
}

type ConfigAuthMethodOauthWorkos {
  clientId: String
  clientSecret: String
  connection: String
  enabled: Boolean
  organization: String
}

type ConfigAuthMethodOtp {
  email: ConfigAuthMethodOtpEmail
}

type ConfigAuthMethodOtpEmail {
  enabled: Boolean
}

type ConfigAuthMethodSmsPasswordless {
  enabled: Boolean
}

type ConfigAuthMethodWebauthn {
  attestation: ConfigAuthMethodWebauthnAttestation
  enabled: Boolean
  relyingParty: ConfigAuthMethodWebauthnRelyingParty
}

type ConfigAuthMethodWebauthnAttestation {
  timeout: ConfigUint32
}

type ConfigAuthMethodWebauthnRelyingParty {
  id: String
  name: String
  origins: [ConfigUrl!]
}

type ConfigAuthMisc {
  concealErrors: Boolean
}

type ConfigAuthRateLimit {
  bruteForce: ConfigRateLimit
  emails: ConfigRateLimit
  global: ConfigRateLimit
  signups: ConfigRateLimit
  sms: ConfigRateLimit
}

type ConfigAuthRedirections {
  """AUTH_ACCESS_CONTROL_ALLOWED_REDIRECT_URLS"""
allowedUrls: [String!]
  """AUTH_CLIENT_URL"""
clientUrl: ConfigUrl
}

type ConfigAuthSession {
  accessToken: ConfigAuthSessionAccessToken
  refreshToken: ConfigAuthSessionRefreshToken
}

type ConfigAuthSessionAccessToken {
  """AUTH_JWT_CUSTOM_CLAIMS"""
customClaims: [ConfigAuthsessionaccessTokenCustomClaims!]
  """AUTH_ACCESS_TOKEN_EXPIRES_IN"""
expiresIn: ConfigUint32
}

type ConfigAuthSessionRefreshToken {
  """AUTH_REFRESH_TOKEN_EXPIRES_IN"""
expiresIn: ConfigUint32
}

type ConfigAuthSignUp {
  """AUTH_DISABLE_NEW_USERS"""
disableNewUsers: Boolean
  """Inverse of AUTH_DISABLE_SIGNUP"""
enabled: Boolean
  turnstile: ConfigAuthSignUpTurnstile
}

type ConfigAuthSignUpTurnstile {
  secretKey: String!
}

type ConfigAuthTotp {
  enabled: Boolean
  issuer: String
}

type ConfigAuthUser {
  email: ConfigAuthUserEmail
  emailDomains: ConfigAuthUserEmailDomains
  gravatar: ConfigAuthUserGravatar
  locale: ConfigAuthUserLocale
  roles: ConfigAuthUserRoles
}

type ConfigAuthUserEmail {
  """AUTH_ACCESS_CONTROL_ALLOWED_EMAILS"""
allowed: [ConfigEmail!]
  """AUTH_ACCESS_CONTROL_BLOCKED_EMAILS"""
blocked: [ConfigEmail!]
}

type ConfigAuthUserEmailDomains {
  """AUTH_ACCESS_CONTROL_ALLOWED_EMAIL_DOMAINS"""
allowed: [String!]
  """AUTH_ACCESS_CONTROL_BLOCKED_EMAIL_DOMAINS"""
blocked: [String!]
}

type ConfigAuthUserGravatar {
  default: String
  """AUTH_GRAVATAR_ENABLED"""
enabled: Boolean
  rating: String
}

type ConfigAuthUserLocale {
  """AUTH_LOCALE_ALLOWED_LOCALES"""
allowed: [ConfigLocale!]
  """AUTH_LOCALE_DEFAULT"""
default: ConfigLocale
}

type ConfigAuthUserRoles {
  """AUTH_USER_DEFAULT_ALLOWED_ROLES"""
allowed: [ConfigUserRole!]
  """AUTH_USER_DEFAULT_ROLE"""
default: ConfigUserRole
}

type ConfigAuthsessionaccessTokenCustomClaims {
  key: String!
  value: String!
}

type ConfigAutoscaler {
  maxReplicas: ConfigUint8!
}

type ConfigClaimMap {
  claim: String!
  default: String
  path: String
  value: String
}

type ConfigComputeResources {
  """milicpus, 1000 milicpus = 1 cpu"""
cpu: ConfigUint32!
  """MiB: 128MiB to 30GiB"""
memory: ConfigUint32!
}

type ConfigConfig {
  """Configuration for graphite service"""
ai: ConfigAI
  """Configuration for auth service"""
auth: ConfigAuth
  """Configuration for functions service"""
functions: ConfigFunctions
  """Global configuration that applies to all services"""
global: ConfigGlobal
  """Advanced configuration for GraphQL"""
graphql: ConfigGraphql
  """Configuration for hasura"""
hasura: ConfigHasura!
  """Configuration for observability service"""
observability: ConfigObservability!
  """Configuration for postgres service"""
postgres: ConfigPostgres!
  """Configuration for third party providers like SMTP, SMS, etc."""
provider: ConfigProvider
  """Configuration for storage service"""
storage: ConfigStorage
}

type ConfigEnvironmentVariable {
  name: String!
  """Value of the environment variable"""
value: String!
}

type ConfigFunctions {
  node: ConfigFunctionsNode
  rateLimit: ConfigRateLimit
  resources: ConfigFunctionsResources
}

type ConfigFunctionsNode {
  version: Int
}

type ConfigFunctionsResources {
  networking: ConfigNetworking
}

type ConfigGlobal {
  """User-defined environment variables that are spread over all services"""
environment: [ConfigGlobalEnvironmentVariable!]
}

type ConfigGlobalEnvironmentVariable {
  name: String!
  """Value of the environment variable"""
value: String!
}

type ConfigGrafana {
  adminPassword: String!
  alerting: ConfigGrafanaAlerting
  contacts: ConfigGrafanaContacts
  smtp: ConfigGrafanaSmtp
}

type ConfigGrafanaAlerting {
  enabled: Boolean
}

type ConfigGrafanaContacts {
  discord: [ConfigGrafanacontactsDiscord!]
  emails: [String!]
  pagerduty: [ConfigGrafanacontactsPagerduty!]
  slack: [ConfigGrafanacontactsSlack!]
  webhook: [ConfigGrafanacontactsWebhook!]
}

type ConfigGrafanaSmtp {
  host: String!
  password: String!
  port: ConfigPort!
  sender: String!
  user: String!
}

type ConfigGrafanacontactsDiscord {
  avatarUrl: String!
  url: String!
}

type ConfigGrafanacontactsPagerduty {
  class: String!
  component: String!
  group: String!
  integrationKey: String!
  severity: String!
}

type ConfigGrafanacontactsSlack {
  endpointURL: String!
  iconEmoji: String!
  iconURL: String!
  mentionChannel: String!
  mentionGroups: [String!]!
  mentionUsers: [String!]!
  recipient: String!
  token: String!
  url: String!
  username: String!
}

type ConfigGrafanacontactsWebhook {
  authorizationCredentials: String!
  authorizationScheme: String!
  httpMethod: String!
  maxAlerts: Int!
  password: String!
  url: String!
  username: String!
}

type ConfigGraphql {
  security: ConfigGraphqlSecurity
}

type ConfigGraphqlSecurity {
  forbidAminSecret: Boolean
  maxDepthQueries: ConfigUint
}

type ConfigHasura {
  """Admin secret"""
adminSecret: String!
  authHook: ConfigHasuraAuthHook
  events: ConfigHasuraEvents
  """JWT Secrets configuration"""
jwtSecrets: [ConfigJWTSecret!]
  logs: ConfigHasuraLogs
  rateLimit: ConfigRateLimit
  """Resources for the service"""
resources: ConfigResources
  """Configuration for hasura services
Reference: https://hasura.io/docs/latest/deployment/graphql-engine-flags/reference/"""
settings: ConfigHasuraSettings
  """Version of hasura, you can see available versions in the URL below:
https://hub.docker.com/r/hasura/graphql-engine/tags"""
version: String
  """Webhook secret"""
webhookSecret: String!
}

type ConfigHasuraAuthHook {
  mode: String
  """HASURA_GRAPHQL_AUTH_HOOK_SEND_REQUEST_BODY"""
sendRequestBody: Boolean
  """HASURA_GRAPHQL_AUTH_HOOK"""
url: String!
}

type ConfigHasuraEvents {
  """HASURA_GRAPHQL_EVENTS_HTTP_POOL_SIZE"""
httpPoolSize: ConfigUint32
}

type ConfigHasuraLogs {
  level: String
}

type ConfigHasuraSettings {
  """HASURA_GRAPHQL_CORS_DOMAIN"""
corsDomain: [ConfigUrl!]
  """HASURA_GRAPHQL_DEV_MODE"""
devMode: Boolean
  """HASURA_GRAPHQL_ENABLE_ALLOWLIST"""
enableAllowList: Boolean
  """HASURA_GRAPHQL_ENABLE_CONSOLE"""
enableConsole: Boolean
  """HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS"""
enableRemoteSchemaPermissions: Boolean
  """HASURA_GRAPHQL_ENABLED_APIS"""
enabledAPIs: [ConfigHasuraAPIs!]
  """HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS"""
inferFunctionPermissions: Boolean
  """HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL"""
liveQueriesMultiplexedRefetchInterval: ConfigUint32
  """HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES"""
stringifyNumericTypes: Boolean
}

type ConfigHealthCheck {
  initialDelaySeconds: Int
  port: ConfigPort!
  probePeriodSeconds: Int
}

type ConfigIngress {
  fqdn: [String!]
  tls: ConfigIngressTls
}

type ConfigIngressTls {
  clientCA: String
}

type ConfigInsertConfigResponse {
  config: ConfigConfig!
  secrets: [ConfigEnvironmentVariable!]!
  systemConfig: ConfigSystemConfig!
}

type ConfigJWTSecret {
  allowed_skew: ConfigUint32
  audience: String
  claims_format: String
  claims_map: [ConfigClaimMap!]
  claims_namespace: String
  claims_namespace_path: String
  header: String
  issuer: String
  jwk_url: ConfigUrl
  key: String
  kid: String
  signingKey: String
  type: String
}

type ConfigNetworking {
  ingresses: [ConfigIngress!]
}

type ConfigObservability {
  grafana: ConfigGrafana!
}

type ConfigPostgres {
  pitr: ConfigPostgresPitr
  """Resources for the service"""
resources: ConfigPostgresResources!
  settings: ConfigPostgresSettings
  """Version of postgres, you can see available versions in the URL below:
https://hub.docker.com/r/nhost/postgres/tags"""
version: String
}

type ConfigPostgresPitr {
  retention: ConfigUint8
}

type ConfigPostgresResources {
  compute: ConfigResourcesCompute
  enablePublicAccess: Boolean
  replicas: Int
  storage: ConfigPostgresResourcesStorage!
}

type ConfigPostgresResourcesStorage {
  capacity: ConfigUint32!
}

type ConfigPostgresSettings {
  archiveTimeout: ConfigInt32
  checkpointCompletionTarget: Float
  defaultStatisticsTarget: ConfigInt32
  effectiveCacheSize: String
  effectiveIOConcurrency: ConfigInt32
  hugePages: String
  jit: String
  maintenanceWorkMem: String
  maxConnections: ConfigInt32
  maxParallelMaintenanceWorkers: ConfigInt32
  maxParallelWorkers: ConfigInt32
  maxParallelWorkersPerGather: ConfigInt32
  maxReplicationSlots: ConfigInt32
  maxWalSenders: ConfigInt32
  maxWalSize: String
  maxWorkerProcesses: ConfigInt32
  minWalSize: String
  randomPageCost: Float
  sharedBuffers: String
  walBuffers: String
  walLevel: String
  workMem: String
}

type ConfigProvider {
  sms: ConfigSms
  smtp: ConfigSmtp
}

type ConfigRateLimit {
  interval: String!
  limit: ConfigUint32!
}

type ConfigResources {
  autoscaler: ConfigAutoscaler
  compute: ConfigResourcesCompute
  networking: ConfigNetworking
  """Number of replicas for a service"""
replicas: ConfigUint8
}

type ConfigResourcesCompute {
  """milicpus, 1000 milicpus = 1 cpu"""
cpu: ConfigUint32!
  """MiB: 128MiB to 30GiB"""
memory: ConfigUint32!
}

type ConfigRunServiceConfig {
  command: [String!]
  environment: [ConfigEnvironmentVariable!]
  healthCheck: ConfigHealthCheck
  image: ConfigRunServiceImage!
  name: ConfigRunServiceName!
  ports: [ConfigRunServicePort!]
  resources: ConfigRunServiceResources!
}

type ConfigRunServiceConfigWithID {
  config: ConfigRunServiceConfig!
  serviceID: uuid!
}

type ConfigRunServiceImage {
  image: String!
  """content of "auths", i.e., { "auths": $THIS }"""
pullCredentials: String
}

type ConfigRunServicePort {
  ingresses: [ConfigIngress!]
  port: ConfigPort!
  publish: Boolean
  rateLimit: ConfigRateLimit
  type: String!
}

type ConfigRunServiceResources {
  autoscaler: ConfigAutoscaler
  compute: ConfigComputeResources!
  """Number of replicas for a service"""
replicas: ConfigUint8!
  storage: [ConfigRunServiceResourcesStorage!]
}

type ConfigRunServiceResourcesStorage {
  """GiB"""
capacity: ConfigUint32!
  """name of the volume, changing it will cause data loss"""
name: ConfigRunServiceName!
  path: String!
}

type ConfigSms {
  accountSid: String!
  authToken: String!
  messagingServiceId: String!
  provider: String
}

type ConfigSmtp {
  host: String!
  method: String!
  password: String!
  port: ConfigPort!
  secure: Boolean!
  sender: String!
  user: String!
}

type ConfigStandardOauthProvider {
  clientId: String
  clientSecret: String
  enabled: Boolean
}

type ConfigStandardOauthProviderWithScope {
  audience: String
  clientId: String
  clientSecret: String
  enabled: Boolean
  scope: [String!]
}

type ConfigStorage {
  antivirus: ConfigStorageAntivirus
  rateLimit: ConfigRateLimit
  """Networking (custom domains at the moment) are not allowed as we need to do further
configurations in the CDN. We will enable it again in the future."""
resources: ConfigResources
  """Version of storage service, you can see available versions in the URL below:
https://hub.docker.com/r/nhost/hasura-storage/tags

Releases:

https://github.com/nhost/hasura-storage/releases"""
version: String
}

type ConfigStorageAntivirus {
  server: String
}

type ConfigSystemConfig {
  auth: ConfigSystemConfigAuth
  graphql: ConfigSystemConfigGraphql
  persistentVolumesEncrypted: Boolean
  postgres: ConfigSystemConfigPostgres!
}

type ConfigSystemConfigAuth {
  email: ConfigSystemConfigAuthEmail
}

type ConfigSystemConfigAuthEmail {
  templates: ConfigSystemConfigAuthEmailTemplates
}

type ConfigSystemConfigAuthEmailTemplates {
  s3Key: String
}

type ConfigSystemConfigGraphql {
  """manually enable graphi on a per-service basis
by default it follows the plan"""
featureAdvancedGraphql: Boolean
}

type ConfigSystemConfigPostgres {
  connectionString: ConfigSystemConfigPostgresConnectionString!
  database: String!
  disk: ConfigSystemConfigPostgresDisk
  enabled: Boolean
  majorVersion: String
}

type ConfigSystemConfigPostgresConnectionString {
  auth: String!
  backup: String!
  hasura: String!
  storage: String!
}

type ConfigSystemConfigPostgresDisk {
  iops: ConfigUint32
  tput: ConfigUint32
}

type ContainerError {
  lastError: LastError!
  name: String!
}

type InsertRunServiceConfigResponse {
  config: ConfigRunServiceConfig!
  serviceID: uuid!
}

type InvoiceItem {
  Amount: float64!
  Description: String!
}

type InvoiceSummary {
  AmountDue: float64!
  PeriodEnd: Timestamp!
  items: [InvoiceItem!]!
}

type LastError {
  exitCode: Int!
  message: String!
  reason: String!
}

type Log {
  log: String!
  service: String!
  timestamp: Timestamp!
}

type Metrics {
  value: float64!
}

type PiTRBaseBackup {
  LSNHigh: bigint!
  LSNLow: bigint!
  date: Timestamp!
  name: String!
  timeline: Int!
}

type PostOrganizationRequestResponse {
  ClientSecret: String
  Slug: String!
  Status: CheckoutStatus!
}

type ProjectStatusResponse {
  services: [ServiceStatus!]!
}

type ReplicaStatus {
  date: Timestamp!
  errors: [ContainerError!]!
  ready: Boolean!
}

type ServiceStatus {
  name: String!
  replicas: [ReplicaStatus!]!
  state: ServiceState!
}

type StatsLiveApps {
  appID: [uuid!]!
  count: Int!
}

type UsageSummary {
  Egress: float64!
  FunctionsInvocations: float64!
  ID: uuid!
  LambdaUsageSeconds: float64!
  PostgresVolumeUsage: float64!
  TotalRequests: float64!
}

type VerifySubscriptionsResponse {
  AppsWithInvalidSubscriptions: [uuid!]!
  OrganizationsWithInvalidSubscriptions: [uuid!]!
  SubscriptionsWithoutCustomer: [String!]!
}

type announcements {
  content: String!
  createdAt: timestamptz!
  expiresAt: timestamptz
  href: String!
  id: uuid!
  """An array relationship"""
read(distinct_on: [announcements_read_select_column!], limit: Int, offset: Int, order_by: [announcements_read_order_by!], where: announcements_read_bool_exp): [announcements_read!]!
  """An aggregate relationship"""
read_aggregate(distinct_on: [announcements_read_select_column!], limit: Int, offset: Int, order_by: [announcements_read_order_by!], where: announcements_read_bool_exp): announcements_read_aggregate!
  updatedAt: timestamptz!
}

type announcements_aggregate {
  aggregate: announcements_aggregate_fields
  nodes: [announcements!]!
}

type announcements_aggregate_fields {
  count(columns: [announcements_select_column!], distinct: Boolean): Int!
  max: announcements_max_fields
  min: announcements_min_fields
}

type announcements_max_fields {
  content: String
  createdAt: timestamptz
  expiresAt: timestamptz
  href: String
  id: uuid
  updatedAt: timestamptz
}

type announcements_min_fields {
  content: String
  createdAt: timestamptz
  expiresAt: timestamptz
  href: String
  id: uuid
  updatedAt: timestamptz
}

type announcements_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [announcements!]!
}

type announcements_read {
  announcementID: uuid!
  createdAt: timestamptz!
  id: uuid!
  userID: uuid!
}

type announcements_read_aggregate {
  aggregate: announcements_read_aggregate_fields
  nodes: [announcements_read!]!
}

type announcements_read_aggregate_fields {
  count(columns: [announcements_read_select_column!], distinct: Boolean): Int!
  max: announcements_read_max_fields
  min: announcements_read_min_fields
}

type announcements_read_max_fields {
  announcementID: uuid
  createdAt: timestamptz
  id: uuid
  userID: uuid
}

type announcements_read_min_fields {
  announcementID: uuid
  createdAt: timestamptz
  id: uuid
  userID: uuid
}

type announcements_read_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [announcements_read!]!
}

type appStateHistory {
  """An object relationship"""
app: apps!
  appId: uuid!
  """An object relationship"""
appState: appStates!
  createdAt: timestamptz!
  id: uuid!
  message: String
  stateId: Int!
}

type appStateHistory_aggregate {
  aggregate: appStateHistory_aggregate_fields
  nodes: [appStateHistory!]!
}

type appStateHistory_aggregate_fields {
  avg: appStateHistory_avg_fields
  count(columns: [appStateHistory_select_column!], distinct: Boolean): Int!
  max: appStateHistory_max_fields
  min: appStateHistory_min_fields
  stddev: appStateHistory_stddev_fields
  stddev_pop: appStateHistory_stddev_pop_fields
  stddev_samp: appStateHistory_stddev_samp_fields
  sum: appStateHistory_sum_fields
  var_pop: appStateHistory_var_pop_fields
  var_samp: appStateHistory_var_samp_fields
  variance: appStateHistory_variance_fields
}

type appStateHistory_avg_fields {
  stateId: Float
}

type appStateHistory_max_fields {
  appId: uuid
  createdAt: timestamptz
  id: uuid
  message: String
  stateId: Int
}

type appStateHistory_min_fields {
  appId: uuid
  createdAt: timestamptz
  id: uuid
  message: String
  stateId: Int
}

type appStateHistory_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [appStateHistory!]!
}

type appStateHistory_stddev_fields {
  stateId: Float
}

type appStateHistory_stddev_pop_fields {
  stateId: Float
}

type appStateHistory_stddev_samp_fields {
  stateId: Float
}

type appStateHistory_sum_fields {
  stateId: Int
}

type appStateHistory_var_pop_fields {
  stateId: Float
}

type appStateHistory_var_samp_fields {
  stateId: Float
}

type appStateHistory_variance_fields {
  stateId: Float
}

type appStates {
  """An array relationship"""
appStates(distinct_on: [appStateHistory_select_column!], limit: Int, offset: Int, order_by: [appStateHistory_order_by!], where: appStateHistory_bool_exp): [appStateHistory!]!
  """An aggregate relationship"""
appStates_aggregate(distinct_on: [appStateHistory_select_column!], limit: Int, offset: Int, order_by: [appStateHistory_order_by!], where: appStateHistory_bool_exp): appStateHistory_aggregate!
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """An aggregate relationship"""
apps_aggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  id: Int!
  name: String!
}

type appStates_aggregate {
  aggregate: appStates_aggregate_fields
  nodes: [appStates!]!
}

type appStates_aggregate_fields {
  avg: appStates_avg_fields
  count(columns: [appStates_select_column!], distinct: Boolean): Int!
  max: appStates_max_fields
  min: appStates_min_fields
  stddev: appStates_stddev_fields
  stddev_pop: appStates_stddev_pop_fields
  stddev_samp: appStates_stddev_samp_fields
  sum: appStates_sum_fields
  var_pop: appStates_var_pop_fields
  var_samp: appStates_var_samp_fields
  variance: appStates_variance_fields
}

type appStates_avg_fields {
  id: Float
}

type appStates_max_fields {
  id: Int
  name: String
}

type appStates_min_fields {
  id: Int
  name: String
}

type appStates_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [appStates!]!
}

type appStates_stddev_fields {
  id: Float
}

type appStates_stddev_pop_fields {
  id: Float
}

type appStates_stddev_samp_fields {
  id: Float
}

type appStates_sum_fields {
  id: Int
}

type appStates_var_pop_fields {
  id: Float
}

type appStates_var_samp_fields {
  id: Float
}

type appStates_variance_fields {
  id: Float
}

type apps {
  appSecrets: [ConfigEnvironmentVariable!]!
  """An array relationship"""
appStates(distinct_on: [appStateHistory_select_column!], limit: Int, offset: Int, order_by: [appStateHistory_order_by!], where: appStateHistory_bool_exp): [appStateHistory!]!
  """An aggregate relationship"""
appStates_aggregate(distinct_on: [appStateHistory_select_column!], limit: Int, offset: Int, order_by: [appStateHistory_order_by!], where: appStateHistory_bool_exp): appStateHistory_aggregate!
  automaticDeploys: Boolean!
  """An array relationship"""
backups(distinct_on: [backups_select_column!], limit: Int, offset: Int, order_by: [backups_order_by!], where: backups_bool_exp): [backups!]!
  """An aggregate relationship"""
backups_aggregate(distinct_on: [backups_select_column!], limit: Int, offset: Int, order_by: [backups_order_by!], where: backups_bool_exp): backups_aggregate!
  """An object relationship"""
billingDedicatedCompute: billing_dedicated_compute
  """An object relationship"""
billingSubscriptions: billing_subscriptions
  config(resolve: Boolean!): ConfigConfig
  createdAt: timestamptz!
  """An object relationship"""
creator: users
  creatorUserId: uuid
  currentState: Int
  """An array relationship"""
deployments(distinct_on: [deployments_select_column!], limit: Int, offset: Int, order_by: [deployments_order_by!], where: deployments_bool_exp): [deployments!]!
  """An aggregate relationship"""
deployments_aggregate(distinct_on: [deployments_select_column!], limit: Int, offset: Int, order_by: [deployments_order_by!], where: deployments_bool_exp): deployments_aggregate!
  """An object relationship"""
desiredAppState: appStates!
  desiredState: Int!
  """An array relationship"""
featureFlags(distinct_on: [featureFlags_select_column!], limit: Int, offset: Int, order_by: [featureFlags_order_by!], where: featureFlags_bool_exp): [featureFlags!]!
  """An aggregate relationship"""
featureFlags_aggregate(distinct_on: [featureFlags_select_column!], limit: Int, offset: Int, order_by: [featureFlags_order_by!], where: featureFlags_bool_exp): featureFlags_aggregate!
  """An object relationship"""
githubRepository: githubRepositories
  githubRepositoryId: uuid
  id: uuid!
  isLocked: Boolean
  isLockedReason: String
  """An object relationship"""
legacyPlan: plans
  legacyPlanID: uuid
  legacyStripeSubscriptionId: String
  metadataFunctions(path: String): jsonb!
  mimirConfigEnc: String
  mimirSecretsEnc: String
  mimirSystemConfigEnc: String
  name: String!
  nhostBaseFolder: String!
  """An object relationship"""
organization: organizations
  organizationID: uuid
  """An object relationship"""
region: regions!
  regionId: uuid!
  repositoryProductionBranch: String!
  """An array relationship"""
runServices(distinct_on: [run_service_select_column!], limit: Int, offset: Int, order_by: [run_service_order_by!], where: run_service_bool_exp): [run_service!]!
  """An aggregate relationship"""
runServices_aggregate(distinct_on: [run_service_select_column!], limit: Int, offset: Int, order_by: [run_service_order_by!], where: run_service_bool_exp): run_service_aggregate!
  slug: String!
  stateMatch: Boolean
  subdomain: String!
  systemConfig: ConfigSystemConfig
  updatedAt: timestamptz!
  """An object relationship"""
workspace: workspaces
  workspaceId: uuid
}

type apps_aggregate {
  aggregate: apps_aggregate_fields
  nodes: [apps!]!
}

type apps_aggregate_fields {
  avg: apps_avg_fields
  count(columns: [apps_select_column!], distinct: Boolean): Int!
  max: apps_max_fields
  min: apps_min_fields
  stddev: apps_stddev_fields
  stddev_pop: apps_stddev_pop_fields
  stddev_samp: apps_stddev_samp_fields
  sum: apps_sum_fields
  var_pop: apps_var_pop_fields
  var_samp: apps_var_samp_fields
  variance: apps_variance_fields
}

type apps_avg_fields {
  currentState: Float
  desiredState: Float
}

type apps_max_fields {
  createdAt: timestamptz
  creatorUserId: uuid
  currentState: Int
  desiredState: Int
  githubRepositoryId: uuid
  id: uuid
  isLockedReason: String
  legacyPlanID: uuid
  legacyStripeSubscriptionId: String
  mimirConfigEnc: String
  mimirSecretsEnc: String
  mimirSystemConfigEnc: String
  name: String
  nhostBaseFolder: String
  organizationID: uuid
  regionId: uuid
  repositoryProductionBranch: String
  slug: String
  subdomain: String
  updatedAt: timestamptz
  workspaceId: uuid
}

type apps_min_fields {
  createdAt: timestamptz
  creatorUserId: uuid
  currentState: Int
  desiredState: Int
  githubRepositoryId: uuid
  id: uuid
  isLockedReason: String
  legacyPlanID: uuid
  legacyStripeSubscriptionId: String
  mimirConfigEnc: String
  mimirSecretsEnc: String
  mimirSystemConfigEnc: String
  name: String
  nhostBaseFolder: String
  organizationID: uuid
  regionId: uuid
  repositoryProductionBranch: String
  slug: String
  subdomain: String
  updatedAt: timestamptz
  workspaceId: uuid
}

type apps_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [apps!]!
}

type apps_stddev_fields {
  currentState: Float
  desiredState: Float
}

type apps_stddev_pop_fields {
  currentState: Float
  desiredState: Float
}

type apps_stddev_samp_fields {
  currentState: Float
  desiredState: Float
}

type apps_sum_fields {
  currentState: Int
  desiredState: Int
}

type apps_var_pop_fields {
  currentState: Float
  desiredState: Float
}

type apps_var_samp_fields {
  currentState: Float
  desiredState: Float
}

type apps_variance_fields {
  currentState: Float
  desiredState: Float
}

type authProviderRequests {
  id: uuid!
  options(path: String): jsonb
}

type authProviderRequests_aggregate {
  aggregate: authProviderRequests_aggregate_fields
  nodes: [authProviderRequests!]!
}

type authProviderRequests_aggregate_fields {
  count(columns: [authProviderRequests_select_column!], distinct: Boolean): Int!
  max: authProviderRequests_max_fields
  min: authProviderRequests_min_fields
}

type authProviderRequests_max_fields {
  id: uuid
}

type authProviderRequests_min_fields {
  id: uuid
}

type authProviderRequests_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authProviderRequests!]!
}

type authProviders {
  id: String!
  """An array relationship"""
userProviders(distinct_on: [authUserProviders_select_column!], limit: Int, offset: Int, order_by: [authUserProviders_order_by!], where: authUserProviders_bool_exp): [authUserProviders!]!
  """An aggregate relationship"""
userProviders_aggregate(distinct_on: [authUserProviders_select_column!], limit: Int, offset: Int, order_by: [authUserProviders_order_by!], where: authUserProviders_bool_exp): authUserProviders_aggregate!
}

type authProviders_aggregate {
  aggregate: authProviders_aggregate_fields
  nodes: [authProviders!]!
}

type authProviders_aggregate_fields {
  count(columns: [authProviders_select_column!], distinct: Boolean): Int!
  max: authProviders_max_fields
  min: authProviders_min_fields
}

type authProviders_max_fields {
  id: String
}

type authProviders_min_fields {
  id: String
}

type authProviders_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authProviders!]!
}

type authRefreshTokenTypes {
  comment: String
  """An array relationship"""
refreshTokens(distinct_on: [authRefreshTokens_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokens_order_by!], where: authRefreshTokens_bool_exp): [authRefreshTokens!]!
  """An aggregate relationship"""
refreshTokens_aggregate(distinct_on: [authRefreshTokens_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokens_order_by!], where: authRefreshTokens_bool_exp): authRefreshTokens_aggregate!
  value: String!
}

type authRefreshTokenTypes_aggregate {
  aggregate: authRefreshTokenTypes_aggregate_fields
  nodes: [authRefreshTokenTypes!]!
}

type authRefreshTokenTypes_aggregate_fields {
  count(columns: [authRefreshTokenTypes_select_column!], distinct: Boolean): Int!
  max: authRefreshTokenTypes_max_fields
  min: authRefreshTokenTypes_min_fields
}

type authRefreshTokenTypes_max_fields {
  comment: String
  value: String
}

type authRefreshTokenTypes_min_fields {
  comment: String
  value: String
}

type authRefreshTokenTypes_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authRefreshTokenTypes!]!
}

type authRefreshTokens {
  createdAt: timestamptz!
  expiresAt: timestamptz!
  id: uuid!
  metadata(path: String): jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum!
  """An object relationship"""
user: users!
  userId: uuid!
}

type authRefreshTokens_aggregate {
  aggregate: authRefreshTokens_aggregate_fields
  nodes: [authRefreshTokens!]!
}

type authRefreshTokens_aggregate_fields {
  count(columns: [authRefreshTokens_select_column!], distinct: Boolean): Int!
  max: authRefreshTokens_max_fields
  min: authRefreshTokens_min_fields
}

type authRefreshTokens_max_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  refreshTokenHash: String
  userId: uuid
}

type authRefreshTokens_min_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  refreshTokenHash: String
  userId: uuid
}

type authRefreshTokens_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authRefreshTokens!]!
}

type authRoles {
  role: String!
  """An array relationship"""
userRoles(distinct_on: [authUserRoles_select_column!], limit: Int, offset: Int, order_by: [authUserRoles_order_by!], where: authUserRoles_bool_exp): [authUserRoles!]!
  """An aggregate relationship"""
userRoles_aggregate(distinct_on: [authUserRoles_select_column!], limit: Int, offset: Int, order_by: [authUserRoles_order_by!], where: authUserRoles_bool_exp): authUserRoles_aggregate!
  """An array relationship"""
usersByDefaultRole(distinct_on: [users_select_column!], limit: Int, offset: Int, order_by: [users_order_by!], where: users_bool_exp): [users!]!
  """An aggregate relationship"""
usersByDefaultRole_aggregate(distinct_on: [users_select_column!], limit: Int, offset: Int, order_by: [users_order_by!], where: users_bool_exp): users_aggregate!
}

type authRoles_aggregate {
  aggregate: authRoles_aggregate_fields
  nodes: [authRoles!]!
}

type authRoles_aggregate_fields {
  count(columns: [authRoles_select_column!], distinct: Boolean): Int!
  max: authRoles_max_fields
  min: authRoles_min_fields
}

type authRoles_max_fields {
  role: String
}

type authRoles_min_fields {
  role: String
}

type authRoles_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authRoles!]!
}

type authUserProviders {
  accessToken: String!
  createdAt: timestamptz!
  id: uuid!
  """An object relationship"""
provider: authProviders!
  providerId: String!
  providerUserId: String!
  refreshToken: String
  updatedAt: timestamptz!
  """An object relationship"""
user: users!
  userId: uuid!
}

type authUserProviders_aggregate {
  aggregate: authUserProviders_aggregate_fields
  nodes: [authUserProviders!]!
}

type authUserProviders_aggregate_fields {
  count(columns: [authUserProviders_select_column!], distinct: Boolean): Int!
  max: authUserProviders_max_fields
  min: authUserProviders_min_fields
}

type authUserProviders_max_fields {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

type authUserProviders_min_fields {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

type authUserProviders_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authUserProviders!]!
}

type authUserRoles {
  createdAt: timestamptz!
  id: uuid!
  role: String!
  """An object relationship"""
roleByRole: authRoles!
  """An object relationship"""
user: users!
  userId: uuid!
}

type authUserRoles_aggregate {
  aggregate: authUserRoles_aggregate_fields
  nodes: [authUserRoles!]!
}

type authUserRoles_aggregate_fields {
  count(columns: [authUserRoles_select_column!], distinct: Boolean): Int!
  max: authUserRoles_max_fields
  min: authUserRoles_min_fields
}

type authUserRoles_max_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

type authUserRoles_min_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

type authUserRoles_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authUserRoles!]!
}

type authUserSecurityKeys {
  counter: bigint!
  credentialId: String!
  credentialPublicKey: bytea
  id: uuid!
  nickname: String
  transports: String!
  """An object relationship"""
user: users!
  userId: uuid!
}

type authUserSecurityKeys_aggregate {
  aggregate: authUserSecurityKeys_aggregate_fields
  nodes: [authUserSecurityKeys!]!
}

type authUserSecurityKeys_aggregate_fields {
  avg: authUserSecurityKeys_avg_fields
  count(columns: [authUserSecurityKeys_select_column!], distinct: Boolean): Int!
  max: authUserSecurityKeys_max_fields
  min: authUserSecurityKeys_min_fields
  stddev: authUserSecurityKeys_stddev_fields
  stddev_pop: authUserSecurityKeys_stddev_pop_fields
  stddev_samp: authUserSecurityKeys_stddev_samp_fields
  sum: authUserSecurityKeys_sum_fields
  var_pop: authUserSecurityKeys_var_pop_fields
  var_samp: authUserSecurityKeys_var_samp_fields
  variance: authUserSecurityKeys_variance_fields
}

type authUserSecurityKeys_avg_fields {
  counter: Float
}

type authUserSecurityKeys_max_fields {
  counter: bigint
  credentialId: String
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

type authUserSecurityKeys_min_fields {
  counter: bigint
  credentialId: String
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

type authUserSecurityKeys_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [authUserSecurityKeys!]!
}

type authUserSecurityKeys_stddev_fields {
  counter: Float
}

type authUserSecurityKeys_stddev_pop_fields {
  counter: Float
}

type authUserSecurityKeys_stddev_samp_fields {
  counter: Float
}

type authUserSecurityKeys_sum_fields {
  counter: bigint
}

type authUserSecurityKeys_var_pop_fields {
  counter: Float
}

type authUserSecurityKeys_var_samp_fields {
  counter: Float
}

type authUserSecurityKeys_variance_fields {
  counter: Float
}

type auth_migrations {
  executed_at: timestamp
  hash: String!
  id: Int!
  name: String!
}

type auth_migrations_aggregate {
  aggregate: auth_migrations_aggregate_fields
  nodes: [auth_migrations!]!
}

type auth_migrations_aggregate_fields {
  avg: auth_migrations_avg_fields
  count(columns: [auth_migrations_select_column!], distinct: Boolean): Int!
  max: auth_migrations_max_fields
  min: auth_migrations_min_fields
  stddev: auth_migrations_stddev_fields
  stddev_pop: auth_migrations_stddev_pop_fields
  stddev_samp: auth_migrations_stddev_samp_fields
  sum: auth_migrations_sum_fields
  var_pop: auth_migrations_var_pop_fields
  var_samp: auth_migrations_var_samp_fields
  variance: auth_migrations_variance_fields
}

type auth_migrations_avg_fields {
  id: Float
}

type auth_migrations_max_fields {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

type auth_migrations_min_fields {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

type auth_migrations_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [auth_migrations!]!
}

type auth_migrations_stddev_fields {
  id: Float
}

type auth_migrations_stddev_pop_fields {
  id: Float
}

type auth_migrations_stddev_samp_fields {
  id: Float
}

type auth_migrations_sum_fields {
  id: Int
}

type auth_migrations_var_pop_fields {
  id: Float
}

type auth_migrations_var_samp_fields {
  id: Float
}

type auth_migrations_variance_fields {
  id: Float
}

type backups {
  """An object relationship"""
app: apps!
  appId: uuid!
  completedAt: timestamptz
  createdAt: timestamptz!
  expiresAt: timestamptz
  id: uuid!
  size: bigint!
}

type backups_aggregate {
  aggregate: backups_aggregate_fields
  nodes: [backups!]!
}

type backups_aggregate_fields {
  avg: backups_avg_fields
  count(columns: [backups_select_column!], distinct: Boolean): Int!
  max: backups_max_fields
  min: backups_min_fields
  stddev: backups_stddev_fields
  stddev_pop: backups_stddev_pop_fields
  stddev_samp: backups_stddev_samp_fields
  sum: backups_sum_fields
  var_pop: backups_var_pop_fields
  var_samp: backups_var_samp_fields
  variance: backups_variance_fields
}

type backups_avg_fields {
  size: Float
}

type backups_max_fields {
  appId: uuid
  completedAt: timestamptz
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  size: bigint
}

type backups_min_fields {
  appId: uuid
  completedAt: timestamptz
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  size: bigint
}

type backups_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [backups!]!
}

type backups_stddev_fields {
  size: Float
}

type backups_stddev_pop_fields {
  size: Float
}

type backups_stddev_samp_fields {
  size: Float
}

type backups_sum_fields {
  size: bigint
}

type backups_var_pop_fields {
  size: Float
}

type backups_var_samp_fields {
  size: Float
}

type backups_variance_fields {
  size: Float
}

type billing_dedicated_compute {
  """An object relationship"""
app: apps
  appID: uuid!
  createdAt: timestamptz!
  id: uuid!
  organizationID: uuid
  totalMillicores: Int!
  updatedAt: timestamptz!
}

type billing_dedicated_compute_aggregate {
  aggregate: billing_dedicated_compute_aggregate_fields
  nodes: [billing_dedicated_compute!]!
}

type billing_dedicated_compute_aggregate_fields {
  avg: billing_dedicated_compute_avg_fields
  count(columns: [billing_dedicated_compute_select_column!], distinct: Boolean): Int!
  max: billing_dedicated_compute_max_fields
  min: billing_dedicated_compute_min_fields
  stddev: billing_dedicated_compute_stddev_fields
  stddev_pop: billing_dedicated_compute_stddev_pop_fields
  stddev_samp: billing_dedicated_compute_stddev_samp_fields
  sum: billing_dedicated_compute_sum_fields
  var_pop: billing_dedicated_compute_var_pop_fields
  var_samp: billing_dedicated_compute_var_samp_fields
  variance: billing_dedicated_compute_variance_fields
}

type billing_dedicated_compute_avg_fields {
  totalMillicores: Float
}

type billing_dedicated_compute_max_fields {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  totalMillicores: Int
  updatedAt: timestamptz
}

type billing_dedicated_compute_min_fields {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  totalMillicores: Int
  updatedAt: timestamptz
}

type billing_dedicated_compute_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_dedicated_compute!]!
}

type billing_dedicated_compute_stddev_fields {
  totalMillicores: Float
}

type billing_dedicated_compute_stddev_pop_fields {
  totalMillicores: Float
}

type billing_dedicated_compute_stddev_samp_fields {
  totalMillicores: Float
}

type billing_dedicated_compute_sum_fields {
  totalMillicores: Int
}

type billing_dedicated_compute_var_pop_fields {
  totalMillicores: Float
}

type billing_dedicated_compute_var_samp_fields {
  totalMillicores: Float
}

type billing_dedicated_compute_variance_fields {
  totalMillicores: Float
}

type billing_report_resource_type {
  comment: String!
  value: String!
}

type billing_report_resource_type_aggregate {
  aggregate: billing_report_resource_type_aggregate_fields
  nodes: [billing_report_resource_type!]!
}

type billing_report_resource_type_aggregate_fields {
  count(columns: [billing_report_resource_type_select_column!], distinct: Boolean): Int!
  max: billing_report_resource_type_max_fields
  min: billing_report_resource_type_min_fields
}

type billing_report_resource_type_max_fields {
  comment: String
  value: String
}

type billing_report_resource_type_min_fields {
  comment: String
  value: String
}

type billing_report_resource_type_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_report_resource_type!]!
}

type billing_report_type {
  comment: String
  value: String!
}

type billing_report_type_aggregate {
  aggregate: billing_report_type_aggregate_fields
  nodes: [billing_report_type!]!
}

type billing_report_type_aggregate_fields {
  count(columns: [billing_report_type_select_column!], distinct: Boolean): Int!
  max: billing_report_type_max_fields
  min: billing_report_type_min_fields
}

type billing_report_type_max_fields {
  comment: String
  value: String
}

type billing_report_type_min_fields {
  comment: String
  value: String
}

type billing_report_type_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_report_type!]!
}

type billing_reports {
  appID: uuid!
  createdAt: timestamptz!
  id: uuid!
  organizationID: uuid
  pending: Boolean!
  reportEnds: timestamptz!
  reportStarts: timestamptz!
  stripeSubscriptionID: String!
  type: billing_report_type_enum!
  updatedAt: timestamptz!
  value: Int!
}

type billing_reports_aggregate {
  aggregate: billing_reports_aggregate_fields
  nodes: [billing_reports!]!
}

type billing_reports_aggregate_fields {
  avg: billing_reports_avg_fields
  count(columns: [billing_reports_select_column!], distinct: Boolean): Int!
  max: billing_reports_max_fields
  min: billing_reports_min_fields
  stddev: billing_reports_stddev_fields
  stddev_pop: billing_reports_stddev_pop_fields
  stddev_samp: billing_reports_stddev_samp_fields
  sum: billing_reports_sum_fields
  var_pop: billing_reports_var_pop_fields
  var_samp: billing_reports_var_samp_fields
  variance: billing_reports_variance_fields
}

type billing_reports_avg_fields {
  value: Float
}

type billing_reports_max_fields {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  reportEnds: timestamptz
  reportStarts: timestamptz
  stripeSubscriptionID: String
  updatedAt: timestamptz
  value: Int
}

type billing_reports_min_fields {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  reportEnds: timestamptz
  reportStarts: timestamptz
  stripeSubscriptionID: String
  updatedAt: timestamptz
  value: Int
}

type billing_reports_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_reports!]!
}

type billing_reports_resources {
  app_ids: [uuid!]!
  created_at: timestamptz!
  id: uuid!
  organization_id: uuid!
  pending: Boolean!
  report_ends: timestamptz!
  report_starts: timestamptz!
  stripeSubscriptionID: String!
  type: billing_report_resource_type_enum!
  updated_at: timestamptz!
  value: Int!
}

type billing_reports_resources_aggregate {
  aggregate: billing_reports_resources_aggregate_fields
  nodes: [billing_reports_resources!]!
}

type billing_reports_resources_aggregate_fields {
  avg: billing_reports_resources_avg_fields
  count(columns: [billing_reports_resources_select_column!], distinct: Boolean): Int!
  max: billing_reports_resources_max_fields
  min: billing_reports_resources_min_fields
  stddev: billing_reports_resources_stddev_fields
  stddev_pop: billing_reports_resources_stddev_pop_fields
  stddev_samp: billing_reports_resources_stddev_samp_fields
  sum: billing_reports_resources_sum_fields
  var_pop: billing_reports_resources_var_pop_fields
  var_samp: billing_reports_resources_var_samp_fields
  variance: billing_reports_resources_variance_fields
}

type billing_reports_resources_avg_fields {
  value: Float
}

type billing_reports_resources_max_fields {
  app_ids: [uuid!]
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  report_ends: timestamptz
  report_starts: timestamptz
  stripeSubscriptionID: String
  updated_at: timestamptz
  value: Int
}

type billing_reports_resources_min_fields {
  app_ids: [uuid!]
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  report_ends: timestamptz
  report_starts: timestamptz
  stripeSubscriptionID: String
  updated_at: timestamptz
  value: Int
}

type billing_reports_resources_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_reports_resources!]!
}

type billing_reports_resources_stddev_fields {
  value: Float
}

type billing_reports_resources_stddev_pop_fields {
  value: Float
}

type billing_reports_resources_stddev_samp_fields {
  value: Float
}

type billing_reports_resources_sum_fields {
  value: Int
}

type billing_reports_resources_var_pop_fields {
  value: Float
}

type billing_reports_resources_var_samp_fields {
  value: Float
}

type billing_reports_resources_variance_fields {
  value: Float
}

type billing_reports_stddev_fields {
  value: Float
}

type billing_reports_stddev_pop_fields {
  value: Float
}

type billing_reports_stddev_samp_fields {
  value: Float
}

type billing_reports_sum_fields {
  value: Int
}

type billing_reports_var_pop_fields {
  value: Float
}

type billing_reports_var_samp_fields {
  value: Float
}

type billing_reports_variance_fields {
  value: Float
}

type billing_resources {
  appID: uuid!
  createdAt: timestamptz!
  customDomains: Int!
  functionsAmount: Int!
  id: uuid!
  organizationID: uuid
  persistentVolume: Int!
  pitr: Int!
  updatedAt: timestamptz!
}

type billing_resources_aggregate {
  aggregate: billing_resources_aggregate_fields
  nodes: [billing_resources!]!
}

type billing_resources_aggregate_fields {
  avg: billing_resources_avg_fields
  count(columns: [billing_resources_select_column!], distinct: Boolean): Int!
  max: billing_resources_max_fields
  min: billing_resources_min_fields
  stddev: billing_resources_stddev_fields
  stddev_pop: billing_resources_stddev_pop_fields
  stddev_samp: billing_resources_stddev_samp_fields
  sum: billing_resources_sum_fields
  var_pop: billing_resources_var_pop_fields
  var_samp: billing_resources_var_samp_fields
  variance: billing_resources_variance_fields
}

type billing_resources_avg_fields {
  customDomains: Float
  functionsAmount: Float
  persistentVolume: Float
  pitr: Float
}

type billing_resources_max_fields {
  appID: uuid
  createdAt: timestamptz
  customDomains: Int
  functionsAmount: Int
  id: uuid
  organizationID: uuid
  persistentVolume: Int
  pitr: Int
  updatedAt: timestamptz
}

type billing_resources_min_fields {
  appID: uuid
  createdAt: timestamptz
  customDomains: Int
  functionsAmount: Int
  id: uuid
  organizationID: uuid
  persistentVolume: Int
  pitr: Int
  updatedAt: timestamptz
}

type billing_resources_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_resources!]!
}

type billing_resources_stddev_fields {
  customDomains: Float
  functionsAmount: Float
  persistentVolume: Float
  pitr: Float
}

type billing_resources_stddev_pop_fields {
  customDomains: Float
  functionsAmount: Float
  persistentVolume: Float
  pitr: Float
}

type billing_resources_stddev_samp_fields {
  customDomains: Float
  functionsAmount: Float
  persistentVolume: Float
  pitr: Float
}

type billing_resources_sum_fields {
  customDomains: Int
  functionsAmount: Int
  persistentVolume: Int
  pitr: Int
}

type billing_resources_var_pop_fields {
  customDomains: Float
  functionsAmount: Float
  persistentVolume: Float
  pitr: Float
}

type billing_resources_var_samp_fields {
  customDomains: Float
  functionsAmount: Float
  persistentVolume: Float
  pitr: Float
}

type billing_resources_variance_fields {
  customDomains: Float
  functionsAmount: Float
  persistentVolume: Float
  pitr: Float
}

type billing_subscription_items {
  created_at: timestamptz!
  custom_domains: String!
  dedicated_compute: String!
  egress: String!
  functions_amount: String!
  functions_usage_seconds: String!
  id: uuid!
  persistent_volume: String!
  pitr: String!
  subscription: String!
  updated_at: timestamptz!
}

type billing_subscription_items_aggregate {
  aggregate: billing_subscription_items_aggregate_fields
  nodes: [billing_subscription_items!]!
}

type billing_subscription_items_aggregate_fields {
  count(columns: [billing_subscription_items_select_column!], distinct: Boolean): Int!
  max: billing_subscription_items_max_fields
  min: billing_subscription_items_min_fields
}

type billing_subscription_items_max_fields {
  created_at: timestamptz
  custom_domains: String
  dedicated_compute: String
  egress: String
  functions_amount: String
  functions_usage_seconds: String
  id: uuid
  persistent_volume: String
  pitr: String
  subscription: String
  updated_at: timestamptz
}

type billing_subscription_items_min_fields {
  created_at: timestamptz
  custom_domains: String
  dedicated_compute: String
  egress: String
  functions_amount: String
  functions_usage_seconds: String
  id: uuid
  persistent_volume: String
  pitr: String
  subscription: String
  updated_at: timestamptz
}

type billing_subscription_items_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_subscription_items!]!
}

type billing_subscriptions {
  """An object relationship"""
app: apps
  appID: uuid!
  createdAt: timestamptz!
  customDomains: String
  dedicatedCompute: String
  egress: String
  functions: String
  functionsAmount: String
  id: uuid!
  persistentVolume: String
  """An array relationship"""
reports(distinct_on: [billing_reports_select_column!], limit: Int, offset: Int, order_by: [billing_reports_order_by!], where: billing_reports_bool_exp): [billing_reports!]!
  """An aggregate relationship"""
reports_aggregate(distinct_on: [billing_reports_select_column!], limit: Int, offset: Int, order_by: [billing_reports_order_by!], where: billing_reports_bool_exp): billing_reports_aggregate!
  """An object relationship"""
resources: billing_resources
  updatedAt: timestamptz!
}

type billing_subscriptions_aggregate {
  aggregate: billing_subscriptions_aggregate_fields
  nodes: [billing_subscriptions!]!
}

type billing_subscriptions_aggregate_fields {
  count(columns: [billing_subscriptions_select_column!], distinct: Boolean): Int!
  max: billing_subscriptions_max_fields
  min: billing_subscriptions_min_fields
}

type billing_subscriptions_max_fields {
  appID: uuid
  createdAt: timestamptz
  customDomains: String
  dedicatedCompute: String
  egress: String
  functions: String
  functionsAmount: String
  id: uuid
  persistentVolume: String
  updatedAt: timestamptz
}

type billing_subscriptions_min_fields {
  appID: uuid
  createdAt: timestamptz
  customDomains: String
  dedicatedCompute: String
  egress: String
  functions: String
  functionsAmount: String
  id: uuid
  persistentVolume: String
  updatedAt: timestamptz
}

type billing_subscriptions_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [billing_subscriptions!]!
}

type buckets {
  cacheControl: String
  createdAt: timestamptz!
  downloadExpiration: Int!
  """An array relationship"""
files(distinct_on: [files_select_column!], limit: Int, offset: Int, order_by: [files_order_by!], where: files_bool_exp): [files!]!
  """An aggregate relationship"""
files_aggregate(distinct_on: [files_select_column!], limit: Int, offset: Int, order_by: [files_order_by!], where: files_bool_exp): files_aggregate!
  id: String!
  maxUploadFileSize: Int!
  minUploadFileSize: Int!
  presignedUrlsEnabled: Boolean!
  updatedAt: timestamptz!
}

type buckets_aggregate {
  aggregate: buckets_aggregate_fields
  nodes: [buckets!]!
}

type buckets_aggregate_fields {
  avg: buckets_avg_fields
  count(columns: [buckets_select_column!], distinct: Boolean): Int!
  max: buckets_max_fields
  min: buckets_min_fields
  stddev: buckets_stddev_fields
  stddev_pop: buckets_stddev_pop_fields
  stddev_samp: buckets_stddev_samp_fields
  sum: buckets_sum_fields
  var_pop: buckets_var_pop_fields
  var_samp: buckets_var_samp_fields
  variance: buckets_variance_fields
}

type buckets_avg_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

type buckets_max_fields {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  updatedAt: timestamptz
}

type buckets_min_fields {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  updatedAt: timestamptz
}

type buckets_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [buckets!]!
}

type buckets_stddev_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

type buckets_stddev_pop_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

type buckets_stddev_samp_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

type buckets_sum_fields {
  downloadExpiration: Int
  maxUploadFileSize: Int
  minUploadFileSize: Int
}

type buckets_var_pop_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

type buckets_var_samp_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

type buckets_variance_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

type cliTokens {
  createdAt: timestamptz!
  id: uuid!
  token: uuid!
  updatedAt: timestamptz!
  """An object relationship"""
user: users!
  userId: uuid!
}

type cliTokens_aggregate {
  aggregate: cliTokens_aggregate_fields
  nodes: [cliTokens!]!
}

type cliTokens_aggregate_fields {
  count(columns: [cliTokens_select_column!], distinct: Boolean): Int!
  max: cliTokens_max_fields
  min: cliTokens_min_fields
}

type cliTokens_max_fields {
  createdAt: timestamptz
  id: uuid
  token: uuid
  updatedAt: timestamptz
  userId: uuid
}

type cliTokens_min_fields {
  createdAt: timestamptz
  id: uuid
  token: uuid
  updatedAt: timestamptz
  userId: uuid
}

type cliTokens_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [cliTokens!]!
}

type continents {
  """Continent code"""
code: bpchar!
  """An array relationship"""
countries(distinct_on: [countries_select_column!], limit: Int, offset: Int, order_by: [countries_order_by!], where: countries_bool_exp): [countries!]!
  """An aggregate relationship"""
countries_aggregate(distinct_on: [countries_select_column!], limit: Int, offset: Int, order_by: [countries_order_by!], where: countries_bool_exp): countries_aggregate!
  """Continent name"""
name: String
}

type continents_aggregate {
  aggregate: continents_aggregate_fields
  nodes: [continents!]!
}

type continents_aggregate_fields {
  count(columns: [continents_select_column!], distinct: Boolean): Int!
  max: continents_max_fields
  min: continents_min_fields
}

type continents_max_fields {
  """Continent code"""
code: bpchar
  """Continent name"""
name: String
}

type continents_min_fields {
  """Continent code"""
code: bpchar
  """Continent name"""
name: String
}

type continents_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [continents!]!
}

type countries {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
code: bpchar!
  """An object relationship"""
continent: continents!
  continentCode: bpchar!
  emojiFlag: String
  """Full English country name"""
fullName: String
  """Three-letter country code (ISO 3166-1 alpha-3)"""
iso3: bpchar
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: smallint
  """An array relationship"""
locations(distinct_on: [regions_select_column!], limit: Int, offset: Int, order_by: [regions_order_by!], where: regions_bool_exp): [regions!]!
  """An aggregate relationship"""
locations_aggregate(distinct_on: [regions_select_column!], limit: Int, offset: Int, order_by: [regions_order_by!], where: regions_bool_exp): regions_aggregate!
  """English country name"""
name: String!
  """An array relationship"""
workspaces(distinct_on: [workspaces_select_column!], limit: Int, offset: Int, order_by: [workspaces_order_by!], where: workspaces_bool_exp): [workspaces!]!
  """An aggregate relationship"""
workspaces_aggregate(distinct_on: [workspaces_select_column!], limit: Int, offset: Int, order_by: [workspaces_order_by!], where: workspaces_bool_exp): workspaces_aggregate!
}

type countries_aggregate {
  aggregate: countries_aggregate_fields
  nodes: [countries!]!
}

type countries_aggregate_fields {
  avg: countries_avg_fields
  count(columns: [countries_select_column!], distinct: Boolean): Int!
  max: countries_max_fields
  min: countries_min_fields
  stddev: countries_stddev_fields
  stddev_pop: countries_stddev_pop_fields
  stddev_samp: countries_stddev_samp_fields
  sum: countries_sum_fields
  var_pop: countries_var_pop_fields
  var_samp: countries_var_samp_fields
  variance: countries_variance_fields
}

type countries_avg_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: Float
}

type countries_max_fields {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
code: bpchar
  continentCode: bpchar
  emojiFlag: String
  """Full English country name"""
fullName: String
  """Three-letter country code (ISO 3166-1 alpha-3)"""
iso3: bpchar
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: smallint
  """English country name"""
name: String
}

type countries_min_fields {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
code: bpchar
  continentCode: bpchar
  emojiFlag: String
  """Full English country name"""
fullName: String
  """Three-letter country code (ISO 3166-1 alpha-3)"""
iso3: bpchar
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: smallint
  """English country name"""
name: String
}

type countries_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [countries!]!
}

type countries_stddev_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: Float
}

type countries_stddev_pop_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: Float
}

type countries_stddev_samp_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: Float
}

type countries_sum_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: smallint
}

type countries_var_pop_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: Float
}

type countries_var_samp_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: Float
}

type countries_variance_fields {
  """Three-letter country code (ISO 3166-1 numeric)"""
isoNumber: Float
}

type deploymentLogs {
  createdAt: timestamptz!
  """An object relationship"""
deployment: deployments!
  deploymentId: uuid!
  id: uuid!
  message: String!
}

type deploymentLogs_aggregate {
  aggregate: deploymentLogs_aggregate_fields
  nodes: [deploymentLogs!]!
}

type deploymentLogs_aggregate_fields {
  count(columns: [deploymentLogs_select_column!], distinct: Boolean): Int!
  max: deploymentLogs_max_fields
  min: deploymentLogs_min_fields
}

type deploymentLogs_max_fields {
  createdAt: timestamptz
  deploymentId: uuid
  id: uuid
  message: String
}

type deploymentLogs_min_fields {
  createdAt: timestamptz
  deploymentId: uuid
  id: uuid
  message: String
}

type deploymentLogs_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [deploymentLogs!]!
}

type deployments {
  """An object relationship"""
app: apps!
  appId: uuid!
  commitMessage: String
  commitSHA: String!
  commitUserAvatarUrl: String
  commitUserName: String
  deploymentEndedAt: timestamptz
  """An array relationship"""
deploymentLogs(distinct_on: [deploymentLogs_select_column!], limit: Int, offset: Int, order_by: [deploymentLogs_order_by!], where: deploymentLogs_bool_exp): [deploymentLogs!]!
  """An aggregate relationship"""
deploymentLogs_aggregate(distinct_on: [deploymentLogs_select_column!], limit: Int, offset: Int, order_by: [deploymentLogs_order_by!], where: deploymentLogs_bool_exp): deploymentLogs_aggregate!
  deploymentStartedAt: timestamptz
  deploymentStatus: String
  functionsEndedAt: timestamptz
  functionsStartedAt: timestamptz
  functionsStatus: String
  id: uuid!
  metadataEndedAt: timestamptz
  metadataStartedAt: timestamptz
  metadataStatus: String
  migrationsEndedAt: timestamptz
  migrationsStartedAt: timestamptz
  migrationsStatus: String
}

type deployments_aggregate {
  aggregate: deployments_aggregate_fields
  nodes: [deployments!]!
}

type deployments_aggregate_fields {
  count(columns: [deployments_select_column!], distinct: Boolean): Int!
  max: deployments_max_fields
  min: deployments_min_fields
}

type deployments_max_fields {
  appId: uuid
  commitMessage: String
  commitSHA: String
  commitUserAvatarUrl: String
  commitUserName: String
  deploymentEndedAt: timestamptz
  deploymentStartedAt: timestamptz
  deploymentStatus: String
  functionsEndedAt: timestamptz
  functionsStartedAt: timestamptz
  functionsStatus: String
  id: uuid
  metadataEndedAt: timestamptz
  metadataStartedAt: timestamptz
  metadataStatus: String
  migrationsEndedAt: timestamptz
  migrationsStartedAt: timestamptz
  migrationsStatus: String
}

type deployments_min_fields {
  appId: uuid
  commitMessage: String
  commitSHA: String
  commitUserAvatarUrl: String
  commitUserName: String
  deploymentEndedAt: timestamptz
  deploymentStartedAt: timestamptz
  deploymentStatus: String
  functionsEndedAt: timestamptz
  functionsStartedAt: timestamptz
  functionsStatus: String
  id: uuid
  metadataEndedAt: timestamptz
  metadataStartedAt: timestamptz
  metadataStatus: String
  migrationsEndedAt: timestamptz
  migrationsStartedAt: timestamptz
  migrationsStatus: String
}

type deployments_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [deployments!]!
}

type featureFlags {
  """An object relationship"""
app: apps!
  appId: uuid!
  description: String!
  id: uuid!
  name: String!
  value: String!
}

type featureFlags_aggregate {
  aggregate: featureFlags_aggregate_fields
  nodes: [featureFlags!]!
}

type featureFlags_aggregate_fields {
  count(columns: [featureFlags_select_column!], distinct: Boolean): Int!
  max: featureFlags_max_fields
  min: featureFlags_min_fields
}

type featureFlags_max_fields {
  appId: uuid
  description: String
  id: uuid
  name: String
  value: String
}

type featureFlags_min_fields {
  appId: uuid
  description: String
  id: uuid
  name: String
  value: String
}

type featureFlags_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [featureFlags!]!
}

type files {
  """An object relationship"""
bucket: buckets!
  bucketId: String!
  createdAt: timestamptz!
  etag: String
  id: uuid!
  isUploaded: Boolean
  metadata(path: String): jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz!
  uploadedByUserId: uuid
}

type files_aggregate {
  aggregate: files_aggregate_fields
  nodes: [files!]!
}

type files_aggregate_fields {
  avg: files_avg_fields
  count(columns: [files_select_column!], distinct: Boolean): Int!
  max: files_max_fields
  min: files_min_fields
  stddev: files_stddev_fields
  stddev_pop: files_stddev_pop_fields
  stddev_samp: files_stddev_samp_fields
  sum: files_sum_fields
  var_pop: files_var_pop_fields
  var_samp: files_var_samp_fields
  variance: files_variance_fields
}

type files_avg_fields {
  size: Float
}

type files_max_fields {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

type files_min_fields {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

type files_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [files!]!
}

type files_stddev_fields {
  size: Float
}

type files_stddev_pop_fields {
  size: Float
}

type files_stddev_samp_fields {
  size: Float
}

type files_sum_fields {
  size: Int
}

type files_var_pop_fields {
  size: Float
}

type files_var_samp_fields {
  size: Float
}

type files_variance_fields {
  size: Float
}

type githubAppInstallations {
  accountAvatarUrl: String
  accountLogin: String
  accountNodeId: String
  accountType: String
  createdAt: timestamptz!
  externalGithubAppInstallationId: Int
  githubData(path: String): jsonb
  """An array relationship"""
githubRepositories(distinct_on: [githubRepositories_select_column!], limit: Int, offset: Int, order_by: [githubRepositories_order_by!], where: githubRepositories_bool_exp): [githubRepositories!]!
  """An aggregate relationship"""
githubRepositories_aggregate(distinct_on: [githubRepositories_select_column!], limit: Int, offset: Int, order_by: [githubRepositories_order_by!], where: githubRepositories_bool_exp): githubRepositories_aggregate!
  id: uuid!
  updatedAt: timestamptz!
  """An object relationship"""
user: users
  userId: uuid
}

type githubAppInstallations_aggregate {
  aggregate: githubAppInstallations_aggregate_fields
  nodes: [githubAppInstallations!]!
}

type githubAppInstallations_aggregate_fields {
  avg: githubAppInstallations_avg_fields
  count(columns: [githubAppInstallations_select_column!], distinct: Boolean): Int!
  max: githubAppInstallations_max_fields
  min: githubAppInstallations_min_fields
  stddev: githubAppInstallations_stddev_fields
  stddev_pop: githubAppInstallations_stddev_pop_fields
  stddev_samp: githubAppInstallations_stddev_samp_fields
  sum: githubAppInstallations_sum_fields
  var_pop: githubAppInstallations_var_pop_fields
  var_samp: githubAppInstallations_var_samp_fields
  variance: githubAppInstallations_variance_fields
}

type githubAppInstallations_avg_fields {
  externalGithubAppInstallationId: Float
}

type githubAppInstallations_max_fields {
  accountAvatarUrl: String
  accountLogin: String
  accountNodeId: String
  accountType: String
  createdAt: timestamptz
  externalGithubAppInstallationId: Int
  id: uuid
  updatedAt: timestamptz
  userId: uuid
}

type githubAppInstallations_min_fields {
  accountAvatarUrl: String
  accountLogin: String
  accountNodeId: String
  accountType: String
  createdAt: timestamptz
  externalGithubAppInstallationId: Int
  id: uuid
  updatedAt: timestamptz
  userId: uuid
}

type githubAppInstallations_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [githubAppInstallations!]!
}

type githubAppInstallations_stddev_fields {
  externalGithubAppInstallationId: Float
}

type githubAppInstallations_stddev_pop_fields {
  externalGithubAppInstallationId: Float
}

type githubAppInstallations_stddev_samp_fields {
  externalGithubAppInstallationId: Float
}

type githubAppInstallations_sum_fields {
  externalGithubAppInstallationId: Int
}

type githubAppInstallations_var_pop_fields {
  externalGithubAppInstallationId: Float
}

type githubAppInstallations_var_samp_fields {
  externalGithubAppInstallationId: Float
}

type githubAppInstallations_variance_fields {
  externalGithubAppInstallationId: Float
}

type githubRepositories {
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """An aggregate relationship"""
apps_aggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  createdAt: timestamptz!
  externalGithubAppRepositoryNodeId: String!
  fullName: String!
  """An object relationship"""
githubAppInstallation: githubAppInstallations!
  githubAppInstallationId: uuid!
  id: uuid!
  name: String!
  private: Boolean!
  updatedAt: timestamptz!
}

type githubRepositories_aggregate {
  aggregate: githubRepositories_aggregate_fields
  nodes: [githubRepositories!]!
}

type githubRepositories_aggregate_fields {
  count(columns: [githubRepositories_select_column!], distinct: Boolean): Int!
  max: githubRepositories_max_fields
  min: githubRepositories_min_fields
}

type githubRepositories_max_fields {
  createdAt: timestamptz
  externalGithubAppRepositoryNodeId: String
  fullName: String
  githubAppInstallationId: uuid
  id: uuid
  name: String
  updatedAt: timestamptz
}

type githubRepositories_min_fields {
  createdAt: timestamptz
  externalGithubAppRepositoryNodeId: String
  fullName: String
  githubAppInstallationId: uuid
  id: uuid
  name: String
  updatedAt: timestamptz
}

type githubRepositories_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [githubRepositories!]!
}

type organization_costs_thresholds {
  comment: String
  value: String!
}

type organization_costs_thresholds_aggregate {
  aggregate: organization_costs_thresholds_aggregate_fields
  nodes: [organization_costs_thresholds!]!
}

type organization_costs_thresholds_aggregate_fields {
  count(columns: [organization_costs_thresholds_select_column!], distinct: Boolean): Int!
  max: organization_costs_thresholds_max_fields
  min: organization_costs_thresholds_min_fields
}

type organization_costs_thresholds_max_fields {
  comment: String
  value: String
}

type organization_costs_thresholds_min_fields {
  comment: String
  value: String
}

type organization_costs_thresholds_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [organization_costs_thresholds!]!
}

type organization_member_invites {
  createdAt: timestamptz!
  email: citext!
  id: uuid!
  """An object relationship"""
organization: organizations!
  organizationID: uuid!
  role: organization_members_role_enum!
  updateAt: timestamptz!
  """An object relationship"""
user: users
}

type organization_member_invites_aggregate {
  aggregate: organization_member_invites_aggregate_fields
  nodes: [organization_member_invites!]!
}

type organization_member_invites_aggregate_fields {
  count(columns: [organization_member_invites_select_column!], distinct: Boolean): Int!
  max: organization_member_invites_max_fields
  min: organization_member_invites_min_fields
}

type organization_member_invites_max_fields {
  createdAt: timestamptz
  email: citext
  id: uuid
  organizationID: uuid
  updateAt: timestamptz
}

type organization_member_invites_min_fields {
  createdAt: timestamptz
  email: citext
  id: uuid
  organizationID: uuid
  updateAt: timestamptz
}

type organization_member_invites_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [organization_member_invites!]!
}

type organization_members {
  createdAt: timestamptz!
  id: uuid!
  """An object relationship"""
organization: organizations!
  organizatonID: uuid!
  role: organization_members_role_enum!
  updatedAt: timestamptz!
  """An object relationship"""
user: users!
  userID: uuid!
}

type organization_members_aggregate {
  aggregate: organization_members_aggregate_fields
  nodes: [organization_members!]!
}

type organization_members_aggregate_fields {
  count(columns: [organization_members_select_column!], distinct: Boolean): Int!
  max: organization_members_max_fields
  min: organization_members_min_fields
}

type organization_members_max_fields {
  createdAt: timestamptz
  id: uuid
  organizatonID: uuid
  updatedAt: timestamptz
  userID: uuid
}

type organization_members_min_fields {
  createdAt: timestamptz
  id: uuid
  organizatonID: uuid
  updatedAt: timestamptz
  userID: uuid
}

type organization_members_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [organization_members!]!
}

type organization_members_role {
  comment: String!
  value: String!
}

type organization_members_role_aggregate {
  aggregate: organization_members_role_aggregate_fields
  nodes: [organization_members_role!]!
}

type organization_members_role_aggregate_fields {
  count(columns: [organization_members_role_select_column!], distinct: Boolean): Int!
  max: organization_members_role_max_fields
  min: organization_members_role_min_fields
}

type organization_members_role_max_fields {
  comment: String
  value: String
}

type organization_members_role_min_fields {
  comment: String
  value: String
}

type organization_members_role_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [organization_members_role!]!
}

type organization_new_request {
  createdAt: timestamptz!
  id: uuid!
  name: String!
  """An object relationship"""
plan: plans!
  planID: uuid!
  sessionID: String!
  slug: String!
  """An object relationship"""
user: users!
  userID: uuid!
}

type organization_new_request_aggregate {
  aggregate: organization_new_request_aggregate_fields
  nodes: [organization_new_request!]!
}

type organization_new_request_aggregate_fields {
  count(columns: [organization_new_request_select_column!], distinct: Boolean): Int!
  max: organization_new_request_max_fields
  min: organization_new_request_min_fields
}

type organization_new_request_max_fields {
  createdAt: timestamptz
  id: uuid
  name: String
  planID: uuid
  sessionID: String
  slug: String
  userID: uuid
}

type organization_new_request_min_fields {
  createdAt: timestamptz
  id: uuid
  name: String
  planID: uuid
  sessionID: String
  slug: String
  userID: uuid
}

type organization_new_request_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [organization_new_request!]!
}

type organization_status {
  comment: String!
  value: String!
}

type organization_status_aggregate {
  aggregate: organization_status_aggregate_fields
  nodes: [organization_status!]!
}

type organization_status_aggregate_fields {
  count(columns: [organization_status_select_column!], distinct: Boolean): Int!
  max: organization_status_max_fields
  min: organization_status_min_fields
}

type organization_status_max_fields {
  comment: String
  value: String
}

type organization_status_min_fields {
  comment: String
  value: String
}

type organization_status_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [organization_status!]!
}

type organizations {
  """An array relationship"""
allowedPrivateRegions(distinct_on: [regions_allowed_organization_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_organization_order_by!], where: regions_allowed_organization_bool_exp): [regions_allowed_organization!]!
  """An aggregate relationship"""
allowedPrivateRegions_aggregate(distinct_on: [regions_allowed_organization_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_organization_order_by!], where: regions_allowed_organization_bool_exp): regions_allowed_organization_aggregate!
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """An aggregate relationship"""
apps_aggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  createdAt: timestamptz!
  current_threshold: organization_costs_thresholds_enum!
  id: uuid!
  """An array relationship"""
invites(distinct_on: [organization_member_invites_select_column!], limit: Int, offset: Int, order_by: [organization_member_invites_order_by!], where: organization_member_invites_bool_exp): [organization_member_invites!]!
  """An aggregate relationship"""
invites_aggregate(distinct_on: [organization_member_invites_select_column!], limit: Int, offset: Int, order_by: [organization_member_invites_order_by!], where: organization_member_invites_bool_exp): organization_member_invites_aggregate!
  """An array relationship"""
members(distinct_on: [organization_members_select_column!], limit: Int, offset: Int, order_by: [organization_members_order_by!], where: organization_members_bool_exp): [organization_members!]!
  """An aggregate relationship"""
members_aggregate(distinct_on: [organization_members_select_column!], limit: Int, offset: Int, order_by: [organization_members_order_by!], where: organization_members_bool_exp): organization_members_aggregate!
  name: String!
  """An object relationship"""
plan: plans!
  planID: uuid!
  slug: String!
  status: organization_status_enum!
  status_comment: String
  stripeCustomerID: String
  stripeSubscriptionID: String
  threshold: Int!
  updatedAt: timestamptz!
}

type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

type organizations_aggregate_fields {
  avg: organizations_avg_fields
  count(columns: [organizations_select_column!], distinct: Boolean): Int!
  max: organizations_max_fields
  min: organizations_min_fields
  stddev: organizations_stddev_fields
  stddev_pop: organizations_stddev_pop_fields
  stddev_samp: organizations_stddev_samp_fields
  sum: organizations_sum_fields
  var_pop: organizations_var_pop_fields
  var_samp: organizations_var_samp_fields
  variance: organizations_variance_fields
}

type organizations_avg_fields {
  threshold: Float
}

type organizations_max_fields {
  createdAt: timestamptz
  id: uuid
  name: String
  planID: uuid
  slug: String
  status_comment: String
  stripeCustomerID: String
  stripeSubscriptionID: String
  threshold: Int
  updatedAt: timestamptz
}

type organizations_min_fields {
  createdAt: timestamptz
  id: uuid
  name: String
  planID: uuid
  slug: String
  status_comment: String
  stripeCustomerID: String
  stripeSubscriptionID: String
  threshold: Int
  updatedAt: timestamptz
}

type organizations_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [organizations!]!
}

type organizations_stddev_fields {
  threshold: Float
}

type organizations_stddev_pop_fields {
  threshold: Float
}

type organizations_stddev_samp_fields {
  threshold: Float
}

type organizations_sum_fields {
  threshold: Int
}

type organizations_var_pop_fields {
  threshold: Float
}

type organizations_var_samp_fields {
  threshold: Float
}

type organizations_variance_fields {
  threshold: Float
}

type paymentMethods {
  addedByUserId: uuid!
  cardBrand: String!
  cardExpMonth: Int!
  cardExpYear: Int!
  cardLast4: String!
  createdAt: timestamptz!
  id: uuid!
  isDefault: Boolean!
  stripePaymentMethodId: String!
  """An object relationship"""
user: users!
  """An object relationship"""
workspace: workspaces!
  workspaceId: uuid!
}

type paymentMethods_aggregate {
  aggregate: paymentMethods_aggregate_fields
  nodes: [paymentMethods!]!
}

type paymentMethods_aggregate_fields {
  avg: paymentMethods_avg_fields
  count(columns: [paymentMethods_select_column!], distinct: Boolean): Int!
  max: paymentMethods_max_fields
  min: paymentMethods_min_fields
  stddev: paymentMethods_stddev_fields
  stddev_pop: paymentMethods_stddev_pop_fields
  stddev_samp: paymentMethods_stddev_samp_fields
  sum: paymentMethods_sum_fields
  var_pop: paymentMethods_var_pop_fields
  var_samp: paymentMethods_var_samp_fields
  variance: paymentMethods_variance_fields
}

type paymentMethods_avg_fields {
  cardExpMonth: Float
  cardExpYear: Float
}

type paymentMethods_max_fields {
  addedByUserId: uuid
  cardBrand: String
  cardExpMonth: Int
  cardExpYear: Int
  cardLast4: String
  createdAt: timestamptz
  id: uuid
  stripePaymentMethodId: String
  workspaceId: uuid
}

type paymentMethods_min_fields {
  addedByUserId: uuid
  cardBrand: String
  cardExpMonth: Int
  cardExpYear: Int
  cardLast4: String
  createdAt: timestamptz
  id: uuid
  stripePaymentMethodId: String
  workspaceId: uuid
}

type paymentMethods_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [paymentMethods!]!
}

type paymentMethods_stddev_fields {
  cardExpMonth: Float
  cardExpYear: Float
}

type paymentMethods_stddev_pop_fields {
  cardExpMonth: Float
  cardExpYear: Float
}

type paymentMethods_stddev_samp_fields {
  cardExpMonth: Float
  cardExpYear: Float
}

type paymentMethods_sum_fields {
  cardExpMonth: Int
  cardExpYear: Int
}

type paymentMethods_var_pop_fields {
  cardExpMonth: Float
  cardExpYear: Float
}

type paymentMethods_var_samp_fields {
  cardExpMonth: Float
  cardExpYear: Float
}

type paymentMethods_variance_fields {
  cardExpMonth: Float
  cardExpYear: Float
}

type plans {
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """An aggregate relationship"""
apps_aggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  createdAt: timestamptz!
  deprecated: Boolean!
  featureAdvancedGraphql: Boolean!
  featureBackupEnabled: Boolean!
  featureBackupRetentionDays: Int!
  featureCustomDomainsEnabled: Boolean!
  featureCustomEmailTemplatesEnabled: Boolean!
  featureCustomResources: Boolean!
  """Weather or not to deploy email templates for git deployments"""
featureDeployEmailTemplates: Boolean!
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Int!
  featureMaxDbSize: Int!
  featureMaxFilesSize: Int
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Int!
  id: uuid!
  individual: Boolean!
  isDefault: Boolean!
  isFree: Boolean!
  isPublic: Boolean!
  name: String!
  """An array relationship"""
organizations(distinct_on: [organizations_select_column!], limit: Int, offset: Int, order_by: [organizations_order_by!], where: organizations_bool_exp): [organizations!]!
  """An aggregate relationship"""
organizations_aggregate(distinct_on: [organizations_select_column!], limit: Int, offset: Int, order_by: [organizations_order_by!], where: organizations_bool_exp): organizations_aggregate!
  price: Int!
  sort: Int!
  stripePriceIDCustomDomains: String!
  stripePriceIDDedicatedCompute: String!
  stripePriceIDEgressUsageMB: String!
  stripePriceIDFunctionsAmount: String!
  stripePriceIDFunctionsUsageSeconds: String!
  stripePriceIDPersistentVolumesGB: String!
  stripePriceId: String!
  stripe_price_id_pitr: String!
  upatedAt: timestamptz!
}

type plans_aggregate {
  aggregate: plans_aggregate_fields
  nodes: [plans!]!
}

type plans_aggregate_fields {
  avg: plans_avg_fields
  count(columns: [plans_select_column!], distinct: Boolean): Int!
  max: plans_max_fields
  min: plans_min_fields
  stddev: plans_stddev_fields
  stddev_pop: plans_stddev_pop_fields
  stddev_samp: plans_stddev_samp_fields
  sum: plans_sum_fields
  var_pop: plans_var_pop_fields
  var_samp: plans_var_samp_fields
  variance: plans_variance_fields
}

type plans_avg_fields {
  featureBackupRetentionDays: Float
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Float
  featureMaxDbSize: Float
  featureMaxFilesSize: Float
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Float
  price: Float
  sort: Float
}

type plans_max_fields {
  createdAt: timestamptz
  featureBackupRetentionDays: Int
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Int
  featureMaxDbSize: Int
  featureMaxFilesSize: Int
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Int
  id: uuid
  name: String
  price: Int
  sort: Int
  stripePriceIDCustomDomains: String
  stripePriceIDDedicatedCompute: String
  stripePriceIDEgressUsageMB: String
  stripePriceIDFunctionsAmount: String
  stripePriceIDFunctionsUsageSeconds: String
  stripePriceIDPersistentVolumesGB: String
  stripePriceId: String
  stripe_price_id_pitr: String
  upatedAt: timestamptz
}

type plans_min_fields {
  createdAt: timestamptz
  featureBackupRetentionDays: Int
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Int
  featureMaxDbSize: Int
  featureMaxFilesSize: Int
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Int
  id: uuid
  name: String
  price: Int
  sort: Int
  stripePriceIDCustomDomains: String
  stripePriceIDDedicatedCompute: String
  stripePriceIDEgressUsageMB: String
  stripePriceIDFunctionsAmount: String
  stripePriceIDFunctionsUsageSeconds: String
  stripePriceIDPersistentVolumesGB: String
  stripePriceId: String
  stripe_price_id_pitr: String
  upatedAt: timestamptz
}

type plans_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [plans!]!
}

type plans_stddev_fields {
  featureBackupRetentionDays: Float
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Float
  featureMaxDbSize: Float
  featureMaxFilesSize: Float
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Float
  price: Float
  sort: Float
}

type plans_stddev_pop_fields {
  featureBackupRetentionDays: Float
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Float
  featureMaxDbSize: Float
  featureMaxFilesSize: Float
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Float
  price: Float
  sort: Float
}

type plans_stddev_samp_fields {
  featureBackupRetentionDays: Float
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Float
  featureMaxDbSize: Float
  featureMaxFilesSize: Float
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Float
  price: Float
  sort: Float
}

type plans_sum_fields {
  featureBackupRetentionDays: Int
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Int
  featureMaxDbSize: Int
  featureMaxFilesSize: Int
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Int
  price: Int
  sort: Int
}

type plans_var_pop_fields {
  featureBackupRetentionDays: Float
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Float
  featureMaxDbSize: Float
  featureMaxFilesSize: Float
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Float
  price: Float
  sort: Float
}

type plans_var_samp_fields {
  featureBackupRetentionDays: Float
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Float
  featureMaxDbSize: Float
  featureMaxFilesSize: Float
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Float
  price: Float
  sort: Float
}

type plans_variance_fields {
  featureBackupRetentionDays: Float
  """Function execution timeout in seconds"""
featureFunctionExecutionTimeout: Float
  featureMaxDbSize: Float
  featureMaxFilesSize: Float
  """Max number of functions to deploy per git deployment"""
featureMaxNumberOfFunctionsPerDeployment: Float
  price: Float
  sort: Float
}

type region_type {
  comment: String!
  """An array relationship"""
regions(distinct_on: [regions_select_column!], limit: Int, offset: Int, order_by: [regions_order_by!], where: regions_bool_exp): [regions!]!
  """An aggregate relationship"""
regions_aggregate(distinct_on: [regions_select_column!], limit: Int, offset: Int, order_by: [regions_order_by!], where: regions_bool_exp): regions_aggregate!
  type: String!
}

type region_type_aggregate {
  aggregate: region_type_aggregate_fields
  nodes: [region_type!]!
}

type region_type_aggregate_fields {
  count(columns: [region_type_select_column!], distinct: Boolean): Int!
  max: region_type_max_fields
  min: region_type_min_fields
}

type region_type_max_fields {
  comment: String
  type: String
}

type region_type_min_fields {
  comment: String
  type: String
}

type region_type_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [region_type!]!
}

type regions {
  active: Boolean!
  """An array relationship"""
allowedOrganizations(distinct_on: [regions_allowed_organization_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_organization_order_by!], where: regions_allowed_organization_bool_exp): [regions_allowed_organization!]!
  """An aggregate relationship"""
allowedOrganizations_aggregate(distinct_on: [regions_allowed_organization_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_organization_order_by!], where: regions_allowed_organization_bool_exp): regions_allowed_organization_aggregate!
  """An object relationship"""
allowedWorkspaces: regions_allowed_workspace
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """An aggregate relationship"""
apps_aggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  awsName: String!
  city: String!
  """An object relationship"""
country: countries!
  countryCode: String!
  createdAt: timestamptz!
  description: String
  domain: String!
  id: uuid!
  isGdprCompliant: Boolean!
  name: String!
  """An object relationship"""
region_type: region_type!
  """An array relationship"""
regions_allowed_workspaces(distinct_on: [regions_allowed_workspace_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_workspace_order_by!], where: regions_allowed_workspace_bool_exp): [regions_allowed_workspace!]!
  """An aggregate relationship"""
regions_allowed_workspaces_aggregate(distinct_on: [regions_allowed_workspace_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_workspace_order_by!], where: regions_allowed_workspace_bool_exp): regions_allowed_workspace_aggregate!
  type: region_type_enum!
  updatedAt: timestamptz!
}

type regions_aggregate {
  aggregate: regions_aggregate_fields
  nodes: [regions!]!
}

type regions_aggregate_fields {
  count(columns: [regions_select_column!], distinct: Boolean): Int!
  max: regions_max_fields
  min: regions_min_fields
}

type regions_allowed_organization {
  createdAt: timestamptz!
  description: String!
  id: uuid!
  """An object relationship"""
organization: organizations!
  organizationID: uuid!
  """An object relationship"""
region: regions!
  regionID: uuid!
  updatedAt: timestamptz!
}

type regions_allowed_organization_aggregate {
  aggregate: regions_allowed_organization_aggregate_fields
  nodes: [regions_allowed_organization!]!
}

type regions_allowed_organization_aggregate_fields {
  count(columns: [regions_allowed_organization_select_column!], distinct: Boolean): Int!
  max: regions_allowed_organization_max_fields
  min: regions_allowed_organization_min_fields
}

type regions_allowed_organization_max_fields {
  createdAt: timestamptz
  description: String
  id: uuid
  organizationID: uuid
  regionID: uuid
  updatedAt: timestamptz
}

type regions_allowed_organization_min_fields {
  createdAt: timestamptz
  description: String
  id: uuid
  organizationID: uuid
  regionID: uuid
  updatedAt: timestamptz
}

type regions_allowed_organization_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [regions_allowed_organization!]!
}

type regions_allowed_workspace {
  created_at: timestamptz!
  description: String!
  id: uuid!
  """An object relationship"""
region: regions
  region_id: uuid!
  updated_at: timestamptz!
  """An object relationship"""
workspace: workspaces
  workspace_id: uuid!
}

type regions_allowed_workspace_aggregate {
  aggregate: regions_allowed_workspace_aggregate_fields
  nodes: [regions_allowed_workspace!]!
}

type regions_allowed_workspace_aggregate_fields {
  count(columns: [regions_allowed_workspace_select_column!], distinct: Boolean): Int!
  max: regions_allowed_workspace_max_fields
  min: regions_allowed_workspace_min_fields
}

type regions_allowed_workspace_max_fields {
  created_at: timestamptz
  description: String
  id: uuid
  region_id: uuid
  updated_at: timestamptz
  workspace_id: uuid
}

type regions_allowed_workspace_min_fields {
  created_at: timestamptz
  description: String
  id: uuid
  region_id: uuid
  updated_at: timestamptz
  workspace_id: uuid
}

type regions_allowed_workspace_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [regions_allowed_workspace!]!
}

type regions_max_fields {
  awsName: String
  city: String
  countryCode: String
  createdAt: timestamptz
  description: String
  domain: String
  id: uuid
  name: String
  updatedAt: timestamptz
}

type regions_min_fields {
  awsName: String
  city: String
  countryCode: String
  createdAt: timestamptz
  description: String
  domain: String
  id: uuid
  name: String
  updatedAt: timestamptz
}

type regions_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [regions!]!
}

type run_service {
  """An object relationship"""
app: apps!
  appID: uuid!
  config(resolve: Boolean!): ConfigRunServiceConfig
  createdAt: timestamptz!
  id: uuid!
  mimirConfigEnc: String
  subdomain: String!
  updatedAt: timestamptz!
}

type run_service_aggregate {
  aggregate: run_service_aggregate_fields
  nodes: [run_service!]!
}

type run_service_aggregate_fields {
  count(columns: [run_service_select_column!], distinct: Boolean): Int!
  max: run_service_max_fields
  min: run_service_min_fields
}

type run_service_max_fields {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  mimirConfigEnc: String
  subdomain: String
  updatedAt: timestamptz
}

type run_service_min_fields {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  mimirConfigEnc: String
  subdomain: String
  updatedAt: timestamptz
}

type run_service_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [run_service!]!
}

type software_type {
  comment: String!
  """An array relationship"""
software_versions(distinct_on: [software_versions_select_column!], limit: Int, offset: Int, order_by: [software_versions_order_by!], where: software_versions_bool_exp): [software_versions!]!
  """An aggregate relationship"""
software_versions_aggregate(distinct_on: [software_versions_select_column!], limit: Int, offset: Int, order_by: [software_versions_order_by!], where: software_versions_bool_exp): software_versions_aggregate!
  type: String!
}

type software_type_aggregate {
  aggregate: software_type_aggregate_fields
  nodes: [software_type!]!
}

type software_type_aggregate_fields {
  count(columns: [software_type_select_column!], distinct: Boolean): Int!
  max: software_type_max_fields
  min: software_type_min_fields
}

type software_type_max_fields {
  comment: String
  type: String
}

type software_type_min_fields {
  comment: String
  type: String
}

type software_type_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [software_type!]!
}

type software_versions {
  id: uuid!
  software: software_type_enum!
  """An object relationship"""
softwareType: software_type!
  version: String!
}

type software_versions_aggregate {
  aggregate: software_versions_aggregate_fields
  nodes: [software_versions!]!
}

type software_versions_aggregate_fields {
  count(columns: [software_versions_select_column!], distinct: Boolean): Int!
  max: software_versions_max_fields
  min: software_versions_min_fields
}

type software_versions_max_fields {
  id: uuid
  version: String
}

type software_versions_min_fields {
  id: uuid
  version: String
}

type software_versions_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [software_versions!]!
}

type users {
  activeMfaType: String
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """An aggregate relationship"""
apps_aggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  avatarUrl: String!
  """An array relationship"""
cliTokens(distinct_on: [cliTokens_select_column!], limit: Int, offset: Int, order_by: [cliTokens_order_by!], where: cliTokens_bool_exp): [cliTokens!]!
  """An aggregate relationship"""
cliTokens_aggregate(distinct_on: [cliTokens_select_column!], limit: Int, offset: Int, order_by: [cliTokens_order_by!], where: cliTokens_bool_exp): cliTokens_aggregate!
  createdAt: timestamptz!
  """An array relationship"""
creatorOfWorkspaces(distinct_on: [workspaces_select_column!], limit: Int, offset: Int, order_by: [workspaces_order_by!], where: workspaces_bool_exp): [workspaces!]!
  """An aggregate relationship"""
creatorOfWorkspaces_aggregate(distinct_on: [workspaces_select_column!], limit: Int, offset: Int, order_by: [workspaces_order_by!], where: workspaces_bool_exp): workspaces_aggregate!
  currentChallenge: String
  defaultRole: String!
  """An object relationship"""
defaultRoleByRole: authRoles!
  disabled: Boolean!
  displayName: String!
  email: citext
  emailVerified: Boolean!
  """An array relationship"""
github_app_installations(distinct_on: [githubAppInstallations_select_column!], limit: Int, offset: Int, order_by: [githubAppInstallations_order_by!], where: githubAppInstallations_bool_exp): [githubAppInstallations!]!
  """An aggregate relationship"""
github_app_installations_aggregate(distinct_on: [githubAppInstallations_select_column!], limit: Int, offset: Int, order_by: [githubAppInstallations_order_by!], where: githubAppInstallations_bool_exp): githubAppInstallations_aggregate!
  id: uuid!
  isAnonymous: Boolean!
  lastSeen: timestamptz
  locale: String!
  metadata(path: String): jsonb
  newEmail: citext
  """An array relationship"""
organizationMembership(distinct_on: [organization_members_select_column!], limit: Int, offset: Int, order_by: [organization_members_order_by!], where: organization_members_bool_exp): [organization_members!]!
  """An aggregate relationship"""
organizationMembership_aggregate(distinct_on: [organization_members_select_column!], limit: Int, offset: Int, order_by: [organization_members_order_by!], where: organization_members_bool_exp): organization_members_aggregate!
  otpHash: String
  otpHashExpiresAt: timestamptz!
  otpMethodLastUsed: String
  passwordHash: String
  """An array relationship"""
payment_methods(distinct_on: [paymentMethods_select_column!], limit: Int, offset: Int, order_by: [paymentMethods_order_by!], where: paymentMethods_bool_exp): [paymentMethods!]!
  """An aggregate relationship"""
payment_methods_aggregate(distinct_on: [paymentMethods_select_column!], limit: Int, offset: Int, order_by: [paymentMethods_order_by!], where: paymentMethods_bool_exp): paymentMethods_aggregate!
  phoneNumber: String
  phoneNumberVerified: Boolean!
  """An array relationship"""
refreshTokens(distinct_on: [authRefreshTokens_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokens_order_by!], where: authRefreshTokens_bool_exp): [authRefreshTokens!]!
  """An aggregate relationship"""
refreshTokens_aggregate(distinct_on: [authRefreshTokens_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokens_order_by!], where: authRefreshTokens_bool_exp): authRefreshTokens_aggregate!
  """An object relationship"""
role: authRoles!
  """An array relationship"""
roles(distinct_on: [authUserRoles_select_column!], limit: Int, offset: Int, order_by: [authUserRoles_order_by!], where: authUserRoles_bool_exp): [authUserRoles!]!
  """An aggregate relationship"""
roles_aggregate(distinct_on: [authUserRoles_select_column!], limit: Int, offset: Int, order_by: [authUserRoles_order_by!], where: authUserRoles_bool_exp): authUserRoles_aggregate!
  """An array relationship"""
securityKeys(distinct_on: [authUserSecurityKeys_select_column!], limit: Int, offset: Int, order_by: [authUserSecurityKeys_order_by!], where: authUserSecurityKeys_bool_exp): [authUserSecurityKeys!]!
  """An aggregate relationship"""
securityKeys_aggregate(distinct_on: [authUserSecurityKeys_select_column!], limit: Int, offset: Int, order_by: [authUserSecurityKeys_order_by!], where: authUserSecurityKeys_bool_exp): authUserSecurityKeys_aggregate!
  ticket: String
  ticketExpiresAt: timestamptz!
  totpSecret: String
  updatedAt: timestamptz!
  """An array relationship"""
userProviders(distinct_on: [authUserProviders_select_column!], limit: Int, offset: Int, order_by: [authUserProviders_order_by!], where: authUserProviders_bool_exp): [authUserProviders!]!
  """An aggregate relationship"""
userProviders_aggregate(distinct_on: [authUserProviders_select_column!], limit: Int, offset: Int, order_by: [authUserProviders_order_by!], where: authUserProviders_bool_exp): authUserProviders_aggregate!
  """An array relationship"""
workspaceMemberInvitesByInvitedByUserId(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): [workspaceMemberInvites!]!
  """An aggregate relationship"""
workspaceMemberInvitesByInvitedByUserId_aggregate(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): workspaceMemberInvites_aggregate!
  """An array relationship"""
workspaceMembers(distinct_on: [workspaceMembers_select_column!], limit: Int, offset: Int, order_by: [workspaceMembers_order_by!], where: workspaceMembers_bool_exp): [workspaceMembers!]!
  """An aggregate relationship"""
workspaceMembers_aggregate(distinct_on: [workspaceMembers_select_column!], limit: Int, offset: Int, order_by: [workspaceMembers_order_by!], where: workspaceMembers_bool_exp): workspaceMembers_aggregate!
  """An array relationship"""
workspace_member_invites(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): [workspaceMemberInvites!]!
  """An aggregate relationship"""
workspace_member_invites_aggregate(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): workspaceMemberInvites_aggregate!
}

type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

type users_max_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

type users_min_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

type users_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [users!]!
}

type virus {
  createdAt: timestamptz!
  """An object relationship"""
file: files!
  fileId: uuid!
  filename: String!
  id: uuid!
  updatedAt: timestamptz!
  userSession(path: String): jsonb!
  virus: String!
}

type virus_aggregate {
  aggregate: virus_aggregate_fields
  nodes: [virus!]!
}

type virus_aggregate_fields {
  count(columns: [virus_select_column!], distinct: Boolean): Int!
  max: virus_max_fields
  min: virus_min_fields
}

type virus_max_fields {
  createdAt: timestamptz
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  virus: String
}

type virus_min_fields {
  createdAt: timestamptz
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  virus: String
}

type virus_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [virus!]!
}

type workspaceMemberInvites {
  createdAt: timestamptz!
  email: citext!
  id: uuid!
  """An object relationship"""
invitedByUser: users!
  invitedByUserId: uuid!
  isAccepted: Boolean
  """owner or member"""
memberType: String!
  updatedAt: timestamptz!
  """An object relationship"""
userByEmail: users
  """An object relationship"""
workspace: workspaces!
  workspaceId: uuid!
}

type workspaceMemberInvites_aggregate {
  aggregate: workspaceMemberInvites_aggregate_fields
  nodes: [workspaceMemberInvites!]!
}

type workspaceMemberInvites_aggregate_fields {
  count(columns: [workspaceMemberInvites_select_column!], distinct: Boolean): Int!
  max: workspaceMemberInvites_max_fields
  min: workspaceMemberInvites_min_fields
}

type workspaceMemberInvites_max_fields {
  createdAt: timestamptz
  email: citext
  id: uuid
  invitedByUserId: uuid
  """owner or member"""
memberType: String
  updatedAt: timestamptz
  workspaceId: uuid
}

type workspaceMemberInvites_min_fields {
  createdAt: timestamptz
  email: citext
  id: uuid
  invitedByUserId: uuid
  """owner or member"""
memberType: String
  updatedAt: timestamptz
  workspaceId: uuid
}

type workspaceMemberInvites_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [workspaceMemberInvites!]!
}

type workspaceMembers {
  createdAt: timestamptz!
  id: uuid!
  """owner or member"""
type: String!
  updatedAt: timestamptz!
  """An object relationship"""
user: users!
  userId: uuid!
  """An object relationship"""
workspace: workspaces!
  workspaceId: uuid!
}

type workspaceMembers_aggregate {
  aggregate: workspaceMembers_aggregate_fields
  nodes: [workspaceMembers!]!
}

type workspaceMembers_aggregate_fields {
  count(columns: [workspaceMembers_select_column!], distinct: Boolean): Int!
  max: workspaceMembers_max_fields
  min: workspaceMembers_min_fields
}

type workspaceMembers_max_fields {
  createdAt: timestamptz
  id: uuid
  """owner or member"""
type: String
  updatedAt: timestamptz
  userId: uuid
  workspaceId: uuid
}

type workspaceMembers_min_fields {
  createdAt: timestamptz
  id: uuid
  """owner or member"""
type: String
  updatedAt: timestamptz
  userId: uuid
  workspaceId: uuid
}

type workspaceMembers_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [workspaceMembers!]!
}

type workspaces {
  """City, district, suburb, town, or village."""
addressCity: String!
  """An object relationship"""
addressCountry: countries
  """Two-letter country code (ISO 3166-1 alpha-2)."""
addressCountryCode: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
addressLine1: String!
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
addressLine2: String!
  """ZIP or postal code."""
addressPostalCode: String!
  """State, county, province, or region."""
addressState: String!
  """An object relationship"""
allowedPrivateRegions: regions_allowed_workspace
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """An aggregate relationship"""
apps_aggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  companyName: String!
  createdAt: timestamptz!
  """An object relationship"""
creatorUser: users
  creatorUserId: uuid
  email: String!
  id: uuid!
  name: String!
  """An object relationship"""
paymentMethod: paymentMethods
  """An array relationship"""
paymentMethods(distinct_on: [paymentMethods_select_column!], limit: Int, offset: Int, order_by: [paymentMethods_order_by!], where: paymentMethods_bool_exp): [paymentMethods!]!
  """An aggregate relationship"""
paymentMethods_aggregate(distinct_on: [paymentMethods_select_column!], limit: Int, offset: Int, order_by: [paymentMethods_order_by!], where: paymentMethods_bool_exp): paymentMethods_aggregate!
  """An array relationship"""
regions_allowed_workspaces(distinct_on: [regions_allowed_workspace_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_workspace_order_by!], where: regions_allowed_workspace_bool_exp): [regions_allowed_workspace!]!
  """An aggregate relationship"""
regions_allowed_workspaces_aggregate(distinct_on: [regions_allowed_workspace_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_workspace_order_by!], where: regions_allowed_workspace_bool_exp): regions_allowed_workspace_aggregate!
  slug: String!
  stripeCustomerId: String
  taxIdType: String!
  taxIdValue: String!
  updatedAt: timestamptz!
  """An array relationship"""
workspaceMemberInvites(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): [workspaceMemberInvites!]!
  """An aggregate relationship"""
workspaceMemberInvites_aggregate(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): workspaceMemberInvites_aggregate!
  """An array relationship"""
workspaceMembers(distinct_on: [workspaceMembers_select_column!], limit: Int, offset: Int, order_by: [workspaceMembers_order_by!], where: workspaceMembers_bool_exp): [workspaceMembers!]!
  """An aggregate relationship"""
workspaceMembers_aggregate(distinct_on: [workspaceMembers_select_column!], limit: Int, offset: Int, order_by: [workspaceMembers_order_by!], where: workspaceMembers_bool_exp): workspaceMembers_aggregate!
}

type workspaces_aggregate {
  aggregate: workspaces_aggregate_fields
  nodes: [workspaces!]!
}

type workspaces_aggregate_fields {
  count(columns: [workspaces_select_column!], distinct: Boolean): Int!
  max: workspaces_max_fields
  min: workspaces_min_fields
}

type workspaces_max_fields {
  """City, district, suburb, town, or village."""
addressCity: String
  """Two-letter country code (ISO 3166-1 alpha-2)."""
addressCountryCode: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
addressLine1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
addressLine2: String
  """ZIP or postal code."""
addressPostalCode: String
  """State, county, province, or region."""
addressState: String
  companyName: String
  createdAt: timestamptz
  creatorUserId: uuid
  email: String
  id: uuid
  name: String
  slug: String
  stripeCustomerId: String
  taxIdType: String
  taxIdValue: String
  updatedAt: timestamptz
}

type workspaces_min_fields {
  """City, district, suburb, town, or village."""
addressCity: String
  """Two-letter country code (ISO 3166-1 alpha-2)."""
addressCountryCode: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
addressLine1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
addressLine2: String
  """ZIP or postal code."""
addressPostalCode: String
  """State, county, province, or region."""
addressState: String
  companyName: String
  createdAt: timestamptz
  creatorUserId: uuid
  email: String
  id: uuid
  name: String
  slug: String
  stripeCustomerId: String
  taxIdType: String
  taxIdValue: String
  updatedAt: timestamptz
}

type workspaces_mutation_response {
  """number of rows affected by the mutation"""
affected_rows: Int!
  """data from the rows affected by the mutation"""
returning: [workspaces!]!
}

input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

input ConfigAIAutoEmbeddingsComparisonExp {
  _and: [ConfigAIAutoEmbeddingsComparisonExp!]
  _not: ConfigAIAutoEmbeddingsComparisonExp
  _or: [ConfigAIAutoEmbeddingsComparisonExp!]
  synchPeriodMinutes: ConfigUint32ComparisonExp
}

input ConfigAIAutoEmbeddingsInsertInput {
  synchPeriodMinutes: ConfigUint32
}

input ConfigAIAutoEmbeddingsUpdateInput {
  synchPeriodMinutes: ConfigUint32
}

input ConfigAIComparisonExp {
  _and: [ConfigAIComparisonExp!]
  _not: ConfigAIComparisonExp
  _or: [ConfigAIComparisonExp!]
  autoEmbeddings: ConfigAIAutoEmbeddingsComparisonExp
  openai: ConfigAIOpenaiComparisonExp
  resources: ConfigAIResourcesComparisonExp
  version: ConfigStringComparisonExp
  webhookSecret: ConfigStringComparisonExp
}

input ConfigAIInsertInput {
  autoEmbeddings: ConfigAIAutoEmbeddingsInsertInput
  openai: ConfigAIOpenaiInsertInput!
  resources: ConfigAIResourcesInsertInput!
  version: String
  webhookSecret: String!
}

input ConfigAIOpenaiComparisonExp {
  _and: [ConfigAIOpenaiComparisonExp!]
  _not: ConfigAIOpenaiComparisonExp
  _or: [ConfigAIOpenaiComparisonExp!]
  apiKey: ConfigStringComparisonExp
  organization: ConfigStringComparisonExp
}

input ConfigAIOpenaiInsertInput {
  apiKey: String!
  organization: String
}

input ConfigAIOpenaiUpdateInput {
  apiKey: String
  organization: String
}

input ConfigAIResourcesComparisonExp {
  _and: [ConfigAIResourcesComparisonExp!]
  _not: ConfigAIResourcesComparisonExp
  _or: [ConfigAIResourcesComparisonExp!]
  compute: ConfigComputeResourcesComparisonExp
}

input ConfigAIResourcesInsertInput {
  compute: ConfigComputeResourcesInsertInput!
}

input ConfigAIResourcesUpdateInput {
  compute: ConfigComputeResourcesUpdateInput
}

input ConfigAIUpdateInput {
  autoEmbeddings: ConfigAIAutoEmbeddingsUpdateInput
  openai: ConfigAIOpenaiUpdateInput
  resources: ConfigAIResourcesUpdateInput
  version: String
  webhookSecret: String
}

input ConfigAuthComparisonExp {
  _and: [ConfigAuthComparisonExp!]
  _not: ConfigAuthComparisonExp
  _or: [ConfigAuthComparisonExp!]
  elevatedPrivileges: ConfigAuthElevatedPrivilegesComparisonExp
  method: ConfigAuthMethodComparisonExp
  misc: ConfigAuthMiscComparisonExp
  rateLimit: ConfigAuthRateLimitComparisonExp
  redirections: ConfigAuthRedirectionsComparisonExp
  resources: ConfigResourcesComparisonExp
  session: ConfigAuthSessionComparisonExp
  signUp: ConfigAuthSignUpComparisonExp
  totp: ConfigAuthTotpComparisonExp
  user: ConfigAuthUserComparisonExp
  version: ConfigStringComparisonExp
}

input ConfigAuthElevatedPrivilegesComparisonExp {
  _and: [ConfigAuthElevatedPrivilegesComparisonExp!]
  _not: ConfigAuthElevatedPrivilegesComparisonExp
  _or: [ConfigAuthElevatedPrivilegesComparisonExp!]
  mode: ConfigStringComparisonExp
}

input ConfigAuthElevatedPrivilegesInsertInput {
  mode: String
}

input ConfigAuthElevatedPrivilegesUpdateInput {
  mode: String
}

input ConfigAuthInsertInput {
  elevatedPrivileges: ConfigAuthElevatedPrivilegesInsertInput
  method: ConfigAuthMethodInsertInput
  misc: ConfigAuthMiscInsertInput
  rateLimit: ConfigAuthRateLimitInsertInput
  redirections: ConfigAuthRedirectionsInsertInput
  resources: ConfigResourcesInsertInput
  session: ConfigAuthSessionInsertInput
  signUp: ConfigAuthSignUpInsertInput
  totp: ConfigAuthTotpInsertInput
  user: ConfigAuthUserInsertInput
  version: String
}

input ConfigAuthMethodAnonymousComparisonExp {
  _and: [ConfigAuthMethodAnonymousComparisonExp!]
  _not: ConfigAuthMethodAnonymousComparisonExp
  _or: [ConfigAuthMethodAnonymousComparisonExp!]
  enabled: ConfigBooleanComparisonExp
}

input ConfigAuthMethodAnonymousInsertInput {
  enabled: Boolean
}

input ConfigAuthMethodAnonymousUpdateInput {
  enabled: Boolean
}

input ConfigAuthMethodComparisonExp {
  _and: [ConfigAuthMethodComparisonExp!]
  _not: ConfigAuthMethodComparisonExp
  _or: [ConfigAuthMethodComparisonExp!]
  anonymous: ConfigAuthMethodAnonymousComparisonExp
  emailPassword: ConfigAuthMethodEmailPasswordComparisonExp
  emailPasswordless: ConfigAuthMethodEmailPasswordlessComparisonExp
  oauth: ConfigAuthMethodOauthComparisonExp
  otp: ConfigAuthMethodOtpComparisonExp
  smsPasswordless: ConfigAuthMethodSmsPasswordlessComparisonExp
  webauthn: ConfigAuthMethodWebauthnComparisonExp
}

input ConfigAuthMethodEmailPasswordComparisonExp {
  _and: [ConfigAuthMethodEmailPasswordComparisonExp!]
  _not: ConfigAuthMethodEmailPasswordComparisonExp
  _or: [ConfigAuthMethodEmailPasswordComparisonExp!]
  emailVerificationRequired: ConfigBooleanComparisonExp
  hibpEnabled: ConfigBooleanComparisonExp
  passwordMinLength: ConfigUint8ComparisonExp
}

input ConfigAuthMethodEmailPasswordInsertInput {
  emailVerificationRequired: Boolean
  hibpEnabled: Boolean
  passwordMinLength: ConfigUint8
}

input ConfigAuthMethodEmailPasswordUpdateInput {
  emailVerificationRequired: Boolean
  hibpEnabled: Boolean
  passwordMinLength: ConfigUint8
}

input ConfigAuthMethodEmailPasswordlessComparisonExp {
  _and: [ConfigAuthMethodEmailPasswordlessComparisonExp!]
  _not: ConfigAuthMethodEmailPasswordlessComparisonExp
  _or: [ConfigAuthMethodEmailPasswordlessComparisonExp!]
  enabled: ConfigBooleanComparisonExp
}

input ConfigAuthMethodEmailPasswordlessInsertInput {
  enabled: Boolean
}

input ConfigAuthMethodEmailPasswordlessUpdateInput {
  enabled: Boolean
}

input ConfigAuthMethodInsertInput {
  anonymous: ConfigAuthMethodAnonymousInsertInput
  emailPassword: ConfigAuthMethodEmailPasswordInsertInput
  emailPasswordless: ConfigAuthMethodEmailPasswordlessInsertInput
  oauth: ConfigAuthMethodOauthInsertInput
  otp: ConfigAuthMethodOtpInsertInput
  smsPasswordless: ConfigAuthMethodSmsPasswordlessInsertInput
  webauthn: ConfigAuthMethodWebauthnInsertInput
}

input ConfigAuthMethodOauthAppleComparisonExp {
  _and: [ConfigAuthMethodOauthAppleComparisonExp!]
  _not: ConfigAuthMethodOauthAppleComparisonExp
  _or: [ConfigAuthMethodOauthAppleComparisonExp!]
  audience: ConfigStringComparisonExp
  clientId: ConfigStringComparisonExp
  enabled: ConfigBooleanComparisonExp
  keyId: ConfigStringComparisonExp
  privateKey: ConfigStringComparisonExp
  scope: ConfigStringComparisonExp
  teamId: ConfigStringComparisonExp
}

input ConfigAuthMethodOauthAppleInsertInput {
  audience: String
  clientId: String
  enabled: Boolean
  keyId: String
  privateKey: String
  scope: [String!]
  teamId: String
}

input ConfigAuthMethodOauthAppleUpdateInput {
  audience: String
  clientId: String
  enabled: Boolean
  keyId: String
  privateKey: String
  scope: [String!]
  teamId: String
}

input ConfigAuthMethodOauthAzureadComparisonExp {
  _and: [ConfigAuthMethodOauthAzureadComparisonExp!]
  _not: ConfigAuthMethodOauthAzureadComparisonExp
  _or: [ConfigAuthMethodOauthAzureadComparisonExp!]
  clientId: ConfigStringComparisonExp
  clientSecret: ConfigStringComparisonExp
  enabled: ConfigBooleanComparisonExp
  tenant: ConfigStringComparisonExp
}

input ConfigAuthMethodOauthAzureadInsertInput {
  clientId: String
  clientSecret: String
  enabled: Boolean
  tenant: String
}

input ConfigAuthMethodOauthAzureadUpdateInput {
  clientId: String
  clientSecret: String
  enabled: Boolean
  tenant: String
}

input ConfigAuthMethodOauthComparisonExp {
  _and: [ConfigAuthMethodOauthComparisonExp!]
  _not: ConfigAuthMethodOauthComparisonExp
  _or: [ConfigAuthMethodOauthComparisonExp!]
  apple: ConfigAuthMethodOauthAppleComparisonExp
  azuread: ConfigAuthMethodOauthAzureadComparisonExp
  bitbucket: ConfigStandardOauthProviderComparisonExp
  discord: ConfigStandardOauthProviderWithScopeComparisonExp
  facebook: ConfigStandardOauthProviderWithScopeComparisonExp
  github: ConfigStandardOauthProviderWithScopeComparisonExp
  gitlab: ConfigStandardOauthProviderWithScopeComparisonExp
  google: ConfigStandardOauthProviderWithScopeComparisonExp
  linkedin: ConfigStandardOauthProviderWithScopeComparisonExp
  spotify: ConfigStandardOauthProviderWithScopeComparisonExp
  strava: ConfigStandardOauthProviderWithScopeComparisonExp
  twitch: ConfigStandardOauthProviderWithScopeComparisonExp
  twitter: ConfigAuthMethodOauthTwitterComparisonExp
  windowslive: ConfigStandardOauthProviderWithScopeComparisonExp
  workos: ConfigAuthMethodOauthWorkosComparisonExp
}

input ConfigAuthMethodOauthInsertInput {
  apple: ConfigAuthMethodOauthAppleInsertInput
  azuread: ConfigAuthMethodOauthAzureadInsertInput
  bitbucket: ConfigStandardOauthProviderInsertInput
  discord: ConfigStandardOauthProviderWithScopeInsertInput
  facebook: ConfigStandardOauthProviderWithScopeInsertInput
  github: ConfigStandardOauthProviderWithScopeInsertInput
  gitlab: ConfigStandardOauthProviderWithScopeInsertInput
  google: ConfigStandardOauthProviderWithScopeInsertInput
  linkedin: ConfigStandardOauthProviderWithScopeInsertInput
  spotify: ConfigStandardOauthProviderWithScopeInsertInput
  strava: ConfigStandardOauthProviderWithScopeInsertInput
  twitch: ConfigStandardOauthProviderWithScopeInsertInput
  twitter: ConfigAuthMethodOauthTwitterInsertInput
  windowslive: ConfigStandardOauthProviderWithScopeInsertInput
  workos: ConfigAuthMethodOauthWorkosInsertInput
}

input ConfigAuthMethodOauthTwitterComparisonExp {
  _and: [ConfigAuthMethodOauthTwitterComparisonExp!]
  _not: ConfigAuthMethodOauthTwitterComparisonExp
  _or: [ConfigAuthMethodOauthTwitterComparisonExp!]
  consumerKey: ConfigStringComparisonExp
  consumerSecret: ConfigStringComparisonExp
  enabled: ConfigBooleanComparisonExp
}

input ConfigAuthMethodOauthTwitterInsertInput {
  consumerKey: String
  consumerSecret: String
  enabled: Boolean
}

input ConfigAuthMethodOauthTwitterUpdateInput {
  consumerKey: String
  consumerSecret: String
  enabled: Boolean
}

input ConfigAuthMethodOauthUpdateInput {
  apple: ConfigAuthMethodOauthAppleUpdateInput
  azuread: ConfigAuthMethodOauthAzureadUpdateInput
  bitbucket: ConfigStandardOauthProviderUpdateInput
  discord: ConfigStandardOauthProviderWithScopeUpdateInput
  facebook: ConfigStandardOauthProviderWithScopeUpdateInput
  github: ConfigStandardOauthProviderWithScopeUpdateInput
  gitlab: ConfigStandardOauthProviderWithScopeUpdateInput
  google: ConfigStandardOauthProviderWithScopeUpdateInput
  linkedin: ConfigStandardOauthProviderWithScopeUpdateInput
  spotify: ConfigStandardOauthProviderWithScopeUpdateInput
  strava: ConfigStandardOauthProviderWithScopeUpdateInput
  twitch: ConfigStandardOauthProviderWithScopeUpdateInput
  twitter: ConfigAuthMethodOauthTwitterUpdateInput
  windowslive: ConfigStandardOauthProviderWithScopeUpdateInput
  workos: ConfigAuthMethodOauthWorkosUpdateInput
}

input ConfigAuthMethodOauthWorkosComparisonExp {
  _and: [ConfigAuthMethodOauthWorkosComparisonExp!]
  _not: ConfigAuthMethodOauthWorkosComparisonExp
  _or: [ConfigAuthMethodOauthWorkosComparisonExp!]
  clientId: ConfigStringComparisonExp
  clientSecret: ConfigStringComparisonExp
  connection: ConfigStringComparisonExp
  enabled: ConfigBooleanComparisonExp
  organization: ConfigStringComparisonExp
}

input ConfigAuthMethodOauthWorkosInsertInput {
  clientId: String
  clientSecret: String
  connection: String
  enabled: Boolean
  organization: String
}

input ConfigAuthMethodOauthWorkosUpdateInput {
  clientId: String
  clientSecret: String
  connection: String
  enabled: Boolean
  organization: String
}

input ConfigAuthMethodOtpComparisonExp {
  _and: [ConfigAuthMethodOtpComparisonExp!]
  _not: ConfigAuthMethodOtpComparisonExp
  _or: [ConfigAuthMethodOtpComparisonExp!]
  email: ConfigAuthMethodOtpEmailComparisonExp
}

input ConfigAuthMethodOtpEmailComparisonExp {
  _and: [ConfigAuthMethodOtpEmailComparisonExp!]
  _not: ConfigAuthMethodOtpEmailComparisonExp
  _or: [ConfigAuthMethodOtpEmailComparisonExp!]
  enabled: ConfigBooleanComparisonExp
}

input ConfigAuthMethodOtpEmailInsertInput {
  enabled: Boolean
}

input ConfigAuthMethodOtpEmailUpdateInput {
  enabled: Boolean
}

input ConfigAuthMethodOtpInsertInput {
  email: ConfigAuthMethodOtpEmailInsertInput
}

input ConfigAuthMethodOtpUpdateInput {
  email: ConfigAuthMethodOtpEmailUpdateInput
}

input ConfigAuthMethodSmsPasswordlessComparisonExp {
  _and: [ConfigAuthMethodSmsPasswordlessComparisonExp!]
  _not: ConfigAuthMethodSmsPasswordlessComparisonExp
  _or: [ConfigAuthMethodSmsPasswordlessComparisonExp!]
  enabled: ConfigBooleanComparisonExp
}

input ConfigAuthMethodSmsPasswordlessInsertInput {
  enabled: Boolean
}

input ConfigAuthMethodSmsPasswordlessUpdateInput {
  enabled: Boolean
}

input ConfigAuthMethodUpdateInput {
  anonymous: ConfigAuthMethodAnonymousUpdateInput
  emailPassword: ConfigAuthMethodEmailPasswordUpdateInput
  emailPasswordless: ConfigAuthMethodEmailPasswordlessUpdateInput
  oauth: ConfigAuthMethodOauthUpdateInput
  otp: ConfigAuthMethodOtpUpdateInput
  smsPasswordless: ConfigAuthMethodSmsPasswordlessUpdateInput
  webauthn: ConfigAuthMethodWebauthnUpdateInput
}

input ConfigAuthMethodWebauthnAttestationComparisonExp {
  _and: [ConfigAuthMethodWebauthnAttestationComparisonExp!]
  _not: ConfigAuthMethodWebauthnAttestationComparisonExp
  _or: [ConfigAuthMethodWebauthnAttestationComparisonExp!]
  timeout: ConfigUint32ComparisonExp
}

input ConfigAuthMethodWebauthnAttestationInsertInput {
  timeout: ConfigUint32
}

input ConfigAuthMethodWebauthnAttestationUpdateInput {
  timeout: ConfigUint32
}

input ConfigAuthMethodWebauthnComparisonExp {
  _and: [ConfigAuthMethodWebauthnComparisonExp!]
  _not: ConfigAuthMethodWebauthnComparisonExp
  _or: [ConfigAuthMethodWebauthnComparisonExp!]
  attestation: ConfigAuthMethodWebauthnAttestationComparisonExp
  enabled: ConfigBooleanComparisonExp
  relyingParty: ConfigAuthMethodWebauthnRelyingPartyComparisonExp
}

input ConfigAuthMethodWebauthnInsertInput {
  attestation: ConfigAuthMethodWebauthnAttestationInsertInput
  enabled: Boolean
  relyingParty: ConfigAuthMethodWebauthnRelyingPartyInsertInput
}

input ConfigAuthMethodWebauthnRelyingPartyComparisonExp {
  _and: [ConfigAuthMethodWebauthnRelyingPartyComparisonExp!]
  _not: ConfigAuthMethodWebauthnRelyingPartyComparisonExp
  _or: [ConfigAuthMethodWebauthnRelyingPartyComparisonExp!]
  id: ConfigStringComparisonExp
  name: ConfigStringComparisonExp
  origins: ConfigUrlComparisonExp
}

input ConfigAuthMethodWebauthnRelyingPartyInsertInput {
  id: String
  name: String
  origins: [ConfigUrl!]
}

input ConfigAuthMethodWebauthnRelyingPartyUpdateInput {
  id: String
  name: String
  origins: [ConfigUrl!]
}

input ConfigAuthMethodWebauthnUpdateInput {
  attestation: ConfigAuthMethodWebauthnAttestationUpdateInput
  enabled: Boolean
  relyingParty: ConfigAuthMethodWebauthnRelyingPartyUpdateInput
}

input ConfigAuthMiscComparisonExp {
  _and: [ConfigAuthMiscComparisonExp!]
  _not: ConfigAuthMiscComparisonExp
  _or: [ConfigAuthMiscComparisonExp!]
  concealErrors: ConfigBooleanComparisonExp
}

input ConfigAuthMiscInsertInput {
  concealErrors: Boolean
}

input ConfigAuthMiscUpdateInput {
  concealErrors: Boolean
}

input ConfigAuthRateLimitComparisonExp {
  _and: [ConfigAuthRateLimitComparisonExp!]
  _not: ConfigAuthRateLimitComparisonExp
  _or: [ConfigAuthRateLimitComparisonExp!]
  bruteForce: ConfigRateLimitComparisonExp
  emails: ConfigRateLimitComparisonExp
  global: ConfigRateLimitComparisonExp
  signups: ConfigRateLimitComparisonExp
  sms: ConfigRateLimitComparisonExp
}

input ConfigAuthRateLimitInsertInput {
  bruteForce: ConfigRateLimitInsertInput
  emails: ConfigRateLimitInsertInput
  global: ConfigRateLimitInsertInput
  signups: ConfigRateLimitInsertInput
  sms: ConfigRateLimitInsertInput
}

input ConfigAuthRateLimitUpdateInput {
  bruteForce: ConfigRateLimitUpdateInput
  emails: ConfigRateLimitUpdateInput
  global: ConfigRateLimitUpdateInput
  signups: ConfigRateLimitUpdateInput
  sms: ConfigRateLimitUpdateInput
}

input ConfigAuthRedirectionsComparisonExp {
  _and: [ConfigAuthRedirectionsComparisonExp!]
  _not: ConfigAuthRedirectionsComparisonExp
  _or: [ConfigAuthRedirectionsComparisonExp!]
  allowedUrls: ConfigStringComparisonExp
  clientUrl: ConfigUrlComparisonExp
}

input ConfigAuthRedirectionsInsertInput {
  allowedUrls: [String!]
  clientUrl: ConfigUrl
}

input ConfigAuthRedirectionsUpdateInput {
  allowedUrls: [String!]
  clientUrl: ConfigUrl
}

input ConfigAuthSessionAccessTokenComparisonExp {
  _and: [ConfigAuthSessionAccessTokenComparisonExp!]
  _not: ConfigAuthSessionAccessTokenComparisonExp
  _or: [ConfigAuthSessionAccessTokenComparisonExp!]
  customClaims: ConfigAuthsessionaccessTokenCustomClaimsComparisonExp
  expiresIn: ConfigUint32ComparisonExp
}

input ConfigAuthSessionAccessTokenInsertInput {
  customClaims: [ConfigAuthsessionaccessTokenCustomClaimsInsertInput!]
  expiresIn: ConfigUint32
}

input ConfigAuthSessionAccessTokenUpdateInput {
  customClaims: [ConfigAuthsessionaccessTokenCustomClaimsUpdateInput!]
  expiresIn: ConfigUint32
}

input ConfigAuthSessionComparisonExp {
  _and: [ConfigAuthSessionComparisonExp!]
  _not: ConfigAuthSessionComparisonExp
  _or: [ConfigAuthSessionComparisonExp!]
  accessToken: ConfigAuthSessionAccessTokenComparisonExp
  refreshToken: ConfigAuthSessionRefreshTokenComparisonExp
}

input ConfigAuthSessionInsertInput {
  accessToken: ConfigAuthSessionAccessTokenInsertInput
  refreshToken: ConfigAuthSessionRefreshTokenInsertInput
}

input ConfigAuthSessionRefreshTokenComparisonExp {
  _and: [ConfigAuthSessionRefreshTokenComparisonExp!]
  _not: ConfigAuthSessionRefreshTokenComparisonExp
  _or: [ConfigAuthSessionRefreshTokenComparisonExp!]
  expiresIn: ConfigUint32ComparisonExp
}

input ConfigAuthSessionRefreshTokenInsertInput {
  expiresIn: ConfigUint32
}

input ConfigAuthSessionRefreshTokenUpdateInput {
  expiresIn: ConfigUint32
}

input ConfigAuthSessionUpdateInput {
  accessToken: ConfigAuthSessionAccessTokenUpdateInput
  refreshToken: ConfigAuthSessionRefreshTokenUpdateInput
}

input ConfigAuthSignUpComparisonExp {
  _and: [ConfigAuthSignUpComparisonExp!]
  _not: ConfigAuthSignUpComparisonExp
  _or: [ConfigAuthSignUpComparisonExp!]
  disableNewUsers: ConfigBooleanComparisonExp
  enabled: ConfigBooleanComparisonExp
  turnstile: ConfigAuthSignUpTurnstileComparisonExp
}

input ConfigAuthSignUpInsertInput {
  disableNewUsers: Boolean
  enabled: Boolean
  turnstile: ConfigAuthSignUpTurnstileInsertInput
}

input ConfigAuthSignUpTurnstileComparisonExp {
  _and: [ConfigAuthSignUpTurnstileComparisonExp!]
  _not: ConfigAuthSignUpTurnstileComparisonExp
  _or: [ConfigAuthSignUpTurnstileComparisonExp!]
  secretKey: ConfigStringComparisonExp
}

input ConfigAuthSignUpTurnstileInsertInput {
  secretKey: String!
}

input ConfigAuthSignUpTurnstileUpdateInput {
  secretKey: String
}

input ConfigAuthSignUpUpdateInput {
  disableNewUsers: Boolean
  enabled: Boolean
  turnstile: ConfigAuthSignUpTurnstileUpdateInput
}

input ConfigAuthTotpComparisonExp {
  _and: [ConfigAuthTotpComparisonExp!]
  _not: ConfigAuthTotpComparisonExp
  _or: [ConfigAuthTotpComparisonExp!]
  enabled: ConfigBooleanComparisonExp
  issuer: ConfigStringComparisonExp
}

input ConfigAuthTotpInsertInput {
  enabled: Boolean
  issuer: String
}

input ConfigAuthTotpUpdateInput {
  enabled: Boolean
  issuer: String
}

input ConfigAuthUpdateInput {
  elevatedPrivileges: ConfigAuthElevatedPrivilegesUpdateInput
  method: ConfigAuthMethodUpdateInput
  misc: ConfigAuthMiscUpdateInput
  rateLimit: ConfigAuthRateLimitUpdateInput
  redirections: ConfigAuthRedirectionsUpdateInput
  resources: ConfigResourcesUpdateInput
  session: ConfigAuthSessionUpdateInput
  signUp: ConfigAuthSignUpUpdateInput
  totp: ConfigAuthTotpUpdateInput
  user: ConfigAuthUserUpdateInput
  version: String
}

input ConfigAuthUserComparisonExp {
  _and: [ConfigAuthUserComparisonExp!]
  _not: ConfigAuthUserComparisonExp
  _or: [ConfigAuthUserComparisonExp!]
  email: ConfigAuthUserEmailComparisonExp
  emailDomains: ConfigAuthUserEmailDomainsComparisonExp
  gravatar: ConfigAuthUserGravatarComparisonExp
  locale: ConfigAuthUserLocaleComparisonExp
  roles: ConfigAuthUserRolesComparisonExp
}

input ConfigAuthUserEmailComparisonExp {
  _and: [ConfigAuthUserEmailComparisonExp!]
  _not: ConfigAuthUserEmailComparisonExp
  _or: [ConfigAuthUserEmailComparisonExp!]
  allowed: ConfigEmailComparisonExp
  blocked: ConfigEmailComparisonExp
}

input ConfigAuthUserEmailDomainsComparisonExp {
  _and: [ConfigAuthUserEmailDomainsComparisonExp!]
  _not: ConfigAuthUserEmailDomainsComparisonExp
  _or: [ConfigAuthUserEmailDomainsComparisonExp!]
  allowed: ConfigStringComparisonExp
  blocked: ConfigStringComparisonExp
}

input ConfigAuthUserEmailDomainsInsertInput {
  allowed: [String!]
  blocked: [String!]
}

input ConfigAuthUserEmailDomainsUpdateInput {
  allowed: [String!]
  blocked: [String!]
}

input ConfigAuthUserEmailInsertInput {
  allowed: [ConfigEmail!]
  blocked: [ConfigEmail!]
}

input ConfigAuthUserEmailUpdateInput {
  allowed: [ConfigEmail!]
  blocked: [ConfigEmail!]
}

input ConfigAuthUserGravatarComparisonExp {
  _and: [ConfigAuthUserGravatarComparisonExp!]
  _not: ConfigAuthUserGravatarComparisonExp
  _or: [ConfigAuthUserGravatarComparisonExp!]
  default: ConfigStringComparisonExp
  enabled: ConfigBooleanComparisonExp
  rating: ConfigStringComparisonExp
}

input ConfigAuthUserGravatarInsertInput {
  default: String
  enabled: Boolean
  rating: String
}

input ConfigAuthUserGravatarUpdateInput {
  default: String
  enabled: Boolean
  rating: String
}

input ConfigAuthUserInsertInput {
  email: ConfigAuthUserEmailInsertInput
  emailDomains: ConfigAuthUserEmailDomainsInsertInput
  gravatar: ConfigAuthUserGravatarInsertInput
  locale: ConfigAuthUserLocaleInsertInput
  roles: ConfigAuthUserRolesInsertInput
}

input ConfigAuthUserLocaleComparisonExp {
  _and: [ConfigAuthUserLocaleComparisonExp!]
  _not: ConfigAuthUserLocaleComparisonExp
  _or: [ConfigAuthUserLocaleComparisonExp!]
  allowed: ConfigLocaleComparisonExp
  default: ConfigLocaleComparisonExp
}

input ConfigAuthUserLocaleInsertInput {
  allowed: [ConfigLocale!]
  default: ConfigLocale
}

input ConfigAuthUserLocaleUpdateInput {
  allowed: [ConfigLocale!]
  default: ConfigLocale
}

input ConfigAuthUserRolesComparisonExp {
  _and: [ConfigAuthUserRolesComparisonExp!]
  _not: ConfigAuthUserRolesComparisonExp
  _or: [ConfigAuthUserRolesComparisonExp!]
  allowed: ConfigUserRoleComparisonExp
  default: ConfigUserRoleComparisonExp
}

input ConfigAuthUserRolesInsertInput {
  allowed: [ConfigUserRole!]
  default: ConfigUserRole
}

input ConfigAuthUserRolesUpdateInput {
  allowed: [ConfigUserRole!]
  default: ConfigUserRole
}

input ConfigAuthUserUpdateInput {
  email: ConfigAuthUserEmailUpdateInput
  emailDomains: ConfigAuthUserEmailDomainsUpdateInput
  gravatar: ConfigAuthUserGravatarUpdateInput
  locale: ConfigAuthUserLocaleUpdateInput
  roles: ConfigAuthUserRolesUpdateInput
}

input ConfigAuthsessionaccessTokenCustomClaimsComparisonExp {
  _and: [ConfigAuthsessionaccessTokenCustomClaimsComparisonExp!]
  _not: ConfigAuthsessionaccessTokenCustomClaimsComparisonExp
  _or: [ConfigAuthsessionaccessTokenCustomClaimsComparisonExp!]
  key: ConfigStringComparisonExp
  value: ConfigStringComparisonExp
}

input ConfigAuthsessionaccessTokenCustomClaimsInsertInput {
  key: String!
  value: String!
}

input ConfigAuthsessionaccessTokenCustomClaimsUpdateInput {
  key: String
  value: String
}

input ConfigAutoscalerComparisonExp {
  _and: [ConfigAutoscalerComparisonExp!]
  _not: ConfigAutoscalerComparisonExp
  _or: [ConfigAutoscalerComparisonExp!]
  maxReplicas: ConfigUint8ComparisonExp
}

input ConfigAutoscalerInsertInput {
  maxReplicas: ConfigUint8!
}

input ConfigAutoscalerUpdateInput {
  maxReplicas: ConfigUint8
}

input ConfigBooleanComparisonExp {
  _eq: Boolean
  _in: [Boolean!]
  _neq: Boolean
  _nin: [Boolean!]
}

input ConfigClaimMapComparisonExp {
  _and: [ConfigClaimMapComparisonExp!]
  _not: ConfigClaimMapComparisonExp
  _or: [ConfigClaimMapComparisonExp!]
  claim: ConfigStringComparisonExp
  default: ConfigStringComparisonExp
  path: ConfigStringComparisonExp
  value: ConfigStringComparisonExp
}

input ConfigClaimMapInsertInput {
  claim: String!
  default: String
  path: String
  value: String
}

input ConfigClaimMapUpdateInput {
  claim: String
  default: String
  path: String
  value: String
}

input ConfigComputeResourcesComparisonExp {
  _and: [ConfigComputeResourcesComparisonExp!]
  _not: ConfigComputeResourcesComparisonExp
  _or: [ConfigComputeResourcesComparisonExp!]
  cpu: ConfigUint32ComparisonExp
  memory: ConfigUint32ComparisonExp
}

input ConfigComputeResourcesInsertInput {
  cpu: ConfigUint32!
  memory: ConfigUint32!
}

input ConfigComputeResourcesUpdateInput {
  cpu: ConfigUint32
  memory: ConfigUint32
}

input ConfigConfigComparisonExp {
  _and: [ConfigConfigComparisonExp!]
  _not: ConfigConfigComparisonExp
  _or: [ConfigConfigComparisonExp!]
  ai: ConfigAIComparisonExp
  auth: ConfigAuthComparisonExp
  functions: ConfigFunctionsComparisonExp
  global: ConfigGlobalComparisonExp
  graphql: ConfigGraphqlComparisonExp
  hasura: ConfigHasuraComparisonExp
  observability: ConfigObservabilityComparisonExp
  postgres: ConfigPostgresComparisonExp
  provider: ConfigProviderComparisonExp
  storage: ConfigStorageComparisonExp
}

input ConfigConfigInsertInput {
  ai: ConfigAIInsertInput
  auth: ConfigAuthInsertInput
  functions: ConfigFunctionsInsertInput
  global: ConfigGlobalInsertInput
  graphql: ConfigGraphqlInsertInput
  hasura: ConfigHasuraInsertInput!
  observability: ConfigObservabilityInsertInput!
  postgres: ConfigPostgresInsertInput!
  provider: ConfigProviderInsertInput
  storage: ConfigStorageInsertInput
}

input ConfigConfigUpdateInput {
  ai: ConfigAIUpdateInput
  auth: ConfigAuthUpdateInput
  functions: ConfigFunctionsUpdateInput
  global: ConfigGlobalUpdateInput
  graphql: ConfigGraphqlUpdateInput
  hasura: ConfigHasuraUpdateInput
  observability: ConfigObservabilityUpdateInput
  postgres: ConfigPostgresUpdateInput
  provider: ConfigProviderUpdateInput
  storage: ConfigStorageUpdateInput
}

input ConfigEmailComparisonExp {
  _eq: ConfigEmail
  _in: [ConfigEmail!]
  _neq: ConfigEmail
  _nin: [ConfigEmail!]
}

input ConfigEnvironmentVariableComparisonExp {
  _and: [ConfigEnvironmentVariableComparisonExp!]
  _not: ConfigEnvironmentVariableComparisonExp
  _or: [ConfigEnvironmentVariableComparisonExp!]
  name: ConfigStringComparisonExp
  value: ConfigStringComparisonExp
}

input ConfigEnvironmentVariableInsertInput {
  name: String!
  value: String!
}

input ConfigEnvironmentVariableUpdateInput {
  name: String
  value: String
}

input ConfigFloatComparisonExp {
  _eq: Float
  _in: [Float!]
  _neq: Float
  _nin: [Float!]
}

input ConfigFunctionsComparisonExp {
  _and: [ConfigFunctionsComparisonExp!]
  _not: ConfigFunctionsComparisonExp
  _or: [ConfigFunctionsComparisonExp!]
  node: ConfigFunctionsNodeComparisonExp
  rateLimit: ConfigRateLimitComparisonExp
  resources: ConfigFunctionsResourcesComparisonExp
}

input ConfigFunctionsInsertInput {
  node: ConfigFunctionsNodeInsertInput
  rateLimit: ConfigRateLimitInsertInput
  resources: ConfigFunctionsResourcesInsertInput
}

input ConfigFunctionsNodeComparisonExp {
  _and: [ConfigFunctionsNodeComparisonExp!]
  _not: ConfigFunctionsNodeComparisonExp
  _or: [ConfigFunctionsNodeComparisonExp!]
  version: ConfigIntComparisonExp
}

input ConfigFunctionsNodeInsertInput {
  version: Int
}

input ConfigFunctionsNodeUpdateInput {
  version: Int
}

input ConfigFunctionsResourcesComparisonExp {
  _and: [ConfigFunctionsResourcesComparisonExp!]
  _not: ConfigFunctionsResourcesComparisonExp
  _or: [ConfigFunctionsResourcesComparisonExp!]
  networking: ConfigNetworkingComparisonExp
}

input ConfigFunctionsResourcesInsertInput {
  networking: ConfigNetworkingInsertInput
}

input ConfigFunctionsResourcesUpdateInput {
  networking: ConfigNetworkingUpdateInput
}

input ConfigFunctionsUpdateInput {
  node: ConfigFunctionsNodeUpdateInput
  rateLimit: ConfigRateLimitUpdateInput
  resources: ConfigFunctionsResourcesUpdateInput
}

input ConfigGlobalComparisonExp {
  _and: [ConfigGlobalComparisonExp!]
  _not: ConfigGlobalComparisonExp
  _or: [ConfigGlobalComparisonExp!]
  environment: ConfigGlobalEnvironmentVariableComparisonExp
}

input ConfigGlobalEnvironmentVariableComparisonExp {
  _and: [ConfigGlobalEnvironmentVariableComparisonExp!]
  _not: ConfigGlobalEnvironmentVariableComparisonExp
  _or: [ConfigGlobalEnvironmentVariableComparisonExp!]
  name: ConfigStringComparisonExp
  value: ConfigStringComparisonExp
}

input ConfigGlobalEnvironmentVariableInsertInput {
  name: String!
  value: String!
}

input ConfigGlobalEnvironmentVariableUpdateInput {
  name: String
  value: String
}

input ConfigGlobalInsertInput {
  environment: [ConfigGlobalEnvironmentVariableInsertInput!]
}

input ConfigGlobalUpdateInput {
  environment: [ConfigGlobalEnvironmentVariableUpdateInput!]
}

input ConfigGrafanaAlertingComparisonExp {
  _and: [ConfigGrafanaAlertingComparisonExp!]
  _not: ConfigGrafanaAlertingComparisonExp
  _or: [ConfigGrafanaAlertingComparisonExp!]
  enabled: ConfigBooleanComparisonExp
}

input ConfigGrafanaAlertingInsertInput {
  enabled: Boolean
}

input ConfigGrafanaAlertingUpdateInput {
  enabled: Boolean
}

input ConfigGrafanaComparisonExp {
  _and: [ConfigGrafanaComparisonExp!]
  _not: ConfigGrafanaComparisonExp
  _or: [ConfigGrafanaComparisonExp!]
  adminPassword: ConfigStringComparisonExp
  alerting: ConfigGrafanaAlertingComparisonExp
  contacts: ConfigGrafanaContactsComparisonExp
  smtp: ConfigGrafanaSmtpComparisonExp
}

input ConfigGrafanaContactsComparisonExp {
  _and: [ConfigGrafanaContactsComparisonExp!]
  _not: ConfigGrafanaContactsComparisonExp
  _or: [ConfigGrafanaContactsComparisonExp!]
  discord: ConfigGrafanacontactsDiscordComparisonExp
  emails: ConfigStringComparisonExp
  pagerduty: ConfigGrafanacontactsPagerdutyComparisonExp
  slack: ConfigGrafanacontactsSlackComparisonExp
  webhook: ConfigGrafanacontactsWebhookComparisonExp
}

input ConfigGrafanaContactsInsertInput {
  discord: [ConfigGrafanacontactsDiscordInsertInput!]
  emails: [String!]
  pagerduty: [ConfigGrafanacontactsPagerdutyInsertInput!]
  slack: [ConfigGrafanacontactsSlackInsertInput!]
  webhook: [ConfigGrafanacontactsWebhookInsertInput!]
}

input ConfigGrafanaContactsUpdateInput {
  discord: [ConfigGrafanacontactsDiscordUpdateInput!]
  emails: [String!]
  pagerduty: [ConfigGrafanacontactsPagerdutyUpdateInput!]
  slack: [ConfigGrafanacontactsSlackUpdateInput!]
  webhook: [ConfigGrafanacontactsWebhookUpdateInput!]
}

input ConfigGrafanaInsertInput {
  adminPassword: String!
  alerting: ConfigGrafanaAlertingInsertInput
  contacts: ConfigGrafanaContactsInsertInput
  smtp: ConfigGrafanaSmtpInsertInput
}

input ConfigGrafanaSmtpComparisonExp {
  _and: [ConfigGrafanaSmtpComparisonExp!]
  _not: ConfigGrafanaSmtpComparisonExp
  _or: [ConfigGrafanaSmtpComparisonExp!]
  host: ConfigStringComparisonExp
  password: ConfigStringComparisonExp
  port: ConfigPortComparisonExp
  sender: ConfigStringComparisonExp
  user: ConfigStringComparisonExp
}

input ConfigGrafanaSmtpInsertInput {
  host: String!
  password: String!
  port: ConfigPort!
  sender: String!
  user: String!
}

input ConfigGrafanaSmtpUpdateInput {
  host: String
  password: String
  port: ConfigPort
  sender: String
  user: String
}

input ConfigGrafanaUpdateInput {
  adminPassword: String
  alerting: ConfigGrafanaAlertingUpdateInput
  contacts: ConfigGrafanaContactsUpdateInput
  smtp: ConfigGrafanaSmtpUpdateInput
}

input ConfigGrafanacontactsDiscordComparisonExp {
  _and: [ConfigGrafanacontactsDiscordComparisonExp!]
  _not: ConfigGrafanacontactsDiscordComparisonExp
  _or: [ConfigGrafanacontactsDiscordComparisonExp!]
  avatarUrl: ConfigStringComparisonExp
  url: ConfigStringComparisonExp
}

input ConfigGrafanacontactsDiscordInsertInput {
  avatarUrl: String!
  url: String!
}

input ConfigGrafanacontactsDiscordUpdateInput {
  avatarUrl: String
  url: String
}

input ConfigGrafanacontactsPagerdutyComparisonExp {
  _and: [ConfigGrafanacontactsPagerdutyComparisonExp!]
  _not: ConfigGrafanacontactsPagerdutyComparisonExp
  _or: [ConfigGrafanacontactsPagerdutyComparisonExp!]
  class: ConfigStringComparisonExp
  component: ConfigStringComparisonExp
  group: ConfigStringComparisonExp
  integrationKey: ConfigStringComparisonExp
  severity: ConfigStringComparisonExp
}

input ConfigGrafanacontactsPagerdutyInsertInput {
  class: String!
  component: String!
  group: String!
  integrationKey: String!
  severity: String!
}

input ConfigGrafanacontactsPagerdutyUpdateInput {
  class: String
  component: String
  group: String
  integrationKey: String
  severity: String
}

input ConfigGrafanacontactsSlackComparisonExp {
  _and: [ConfigGrafanacontactsSlackComparisonExp!]
  _not: ConfigGrafanacontactsSlackComparisonExp
  _or: [ConfigGrafanacontactsSlackComparisonExp!]
  endpointURL: ConfigStringComparisonExp
  iconEmoji: ConfigStringComparisonExp
  iconURL: ConfigStringComparisonExp
  mentionChannel: ConfigStringComparisonExp
  mentionGroups: ConfigStringComparisonExp
  mentionUsers: ConfigStringComparisonExp
  recipient: ConfigStringComparisonExp
  token: ConfigStringComparisonExp
  url: ConfigStringComparisonExp
  username: ConfigStringComparisonExp
}

input ConfigGrafanacontactsSlackInsertInput {
  endpointURL: String!
  iconEmoji: String!
  iconURL: String!
  mentionChannel: String!
  mentionGroups: [String!]!
  mentionUsers: [String!]!
  recipient: String!
  token: String!
  url: String!
  username: String!
}

input ConfigGrafanacontactsSlackUpdateInput {
  endpointURL: String
  iconEmoji: String
  iconURL: String
  mentionChannel: String
  mentionGroups: [String!]
  mentionUsers: [String!]
  recipient: String
  token: String
  url: String
  username: String
}

input ConfigGrafanacontactsWebhookComparisonExp {
  _and: [ConfigGrafanacontactsWebhookComparisonExp!]
  _not: ConfigGrafanacontactsWebhookComparisonExp
  _or: [ConfigGrafanacontactsWebhookComparisonExp!]
  authorizationCredentials: ConfigStringComparisonExp
  authorizationScheme: ConfigStringComparisonExp
  httpMethod: ConfigStringComparisonExp
  maxAlerts: ConfigIntComparisonExp
  password: ConfigStringComparisonExp
  url: ConfigStringComparisonExp
  username: ConfigStringComparisonExp
}

input ConfigGrafanacontactsWebhookInsertInput {
  authorizationCredentials: String!
  authorizationScheme: String!
  httpMethod: String!
  maxAlerts: Int!
  password: String!
  url: String!
  username: String!
}

input ConfigGrafanacontactsWebhookUpdateInput {
  authorizationCredentials: String
  authorizationScheme: String
  httpMethod: String
  maxAlerts: Int
  password: String
  url: String
  username: String
}

input ConfigGraphqlComparisonExp {
  _and: [ConfigGraphqlComparisonExp!]
  _not: ConfigGraphqlComparisonExp
  _or: [ConfigGraphqlComparisonExp!]
  security: ConfigGraphqlSecurityComparisonExp
}

input ConfigGraphqlInsertInput {
  security: ConfigGraphqlSecurityInsertInput
}

input ConfigGraphqlSecurityComparisonExp {
  _and: [ConfigGraphqlSecurityComparisonExp!]
  _not: ConfigGraphqlSecurityComparisonExp
  _or: [ConfigGraphqlSecurityComparisonExp!]
  forbidAminSecret: ConfigBooleanComparisonExp
  maxDepthQueries: ConfigUintComparisonExp
}

input ConfigGraphqlSecurityInsertInput {
  forbidAminSecret: Boolean
  maxDepthQueries: ConfigUint
}

input ConfigGraphqlSecurityUpdateInput {
  forbidAminSecret: Boolean
  maxDepthQueries: ConfigUint
}

input ConfigGraphqlUpdateInput {
  security: ConfigGraphqlSecurityUpdateInput
}

input ConfigHasuraAPIsComparisonExp {
  _eq: ConfigHasuraAPIs
  _in: [ConfigHasuraAPIs!]
  _neq: ConfigHasuraAPIs
  _nin: [ConfigHasuraAPIs!]
}

input ConfigHasuraAuthHookComparisonExp {
  _and: [ConfigHasuraAuthHookComparisonExp!]
  _not: ConfigHasuraAuthHookComparisonExp
  _or: [ConfigHasuraAuthHookComparisonExp!]
  mode: ConfigStringComparisonExp
  sendRequestBody: ConfigBooleanComparisonExp
  url: ConfigStringComparisonExp
}

input ConfigHasuraAuthHookInsertInput {
  mode: String
  sendRequestBody: Boolean
  url: String!
}

input ConfigHasuraAuthHookUpdateInput {
  mode: String
  sendRequestBody: Boolean
  url: String
}

input ConfigHasuraComparisonExp {
  _and: [ConfigHasuraComparisonExp!]
  _not: ConfigHasuraComparisonExp
  _or: [ConfigHasuraComparisonExp!]
  adminSecret: ConfigStringComparisonExp
  authHook: ConfigHasuraAuthHookComparisonExp
  events: ConfigHasuraEventsComparisonExp
  jwtSecrets: ConfigJWTSecretComparisonExp
  logs: ConfigHasuraLogsComparisonExp
  rateLimit: ConfigRateLimitComparisonExp
  resources: ConfigResourcesComparisonExp
  settings: ConfigHasuraSettingsComparisonExp
  version: ConfigStringComparisonExp
  webhookSecret: ConfigStringComparisonExp
}

input ConfigHasuraEventsComparisonExp {
  _and: [ConfigHasuraEventsComparisonExp!]
  _not: ConfigHasuraEventsComparisonExp
  _or: [ConfigHasuraEventsComparisonExp!]
  httpPoolSize: ConfigUint32ComparisonExp
}

input ConfigHasuraEventsInsertInput {
  httpPoolSize: ConfigUint32
}

input ConfigHasuraEventsUpdateInput {
  httpPoolSize: ConfigUint32
}

input ConfigHasuraInsertInput {
  adminSecret: String!
  authHook: ConfigHasuraAuthHookInsertInput
  events: ConfigHasuraEventsInsertInput
  jwtSecrets: [ConfigJWTSecretInsertInput!]
  logs: ConfigHasuraLogsInsertInput
  rateLimit: ConfigRateLimitInsertInput
  resources: ConfigResourcesInsertInput
  settings: ConfigHasuraSettingsInsertInput
  version: String
  webhookSecret: String!
}

input ConfigHasuraLogsComparisonExp {
  _and: [ConfigHasuraLogsComparisonExp!]
  _not: ConfigHasuraLogsComparisonExp
  _or: [ConfigHasuraLogsComparisonExp!]
  level: ConfigStringComparisonExp
}

input ConfigHasuraLogsInsertInput {
  level: String
}

input ConfigHasuraLogsUpdateInput {
  level: String
}

input ConfigHasuraSettingsComparisonExp {
  _and: [ConfigHasuraSettingsComparisonExp!]
  _not: ConfigHasuraSettingsComparisonExp
  _or: [ConfigHasuraSettingsComparisonExp!]
  corsDomain: ConfigUrlComparisonExp
  devMode: ConfigBooleanComparisonExp
  enableAllowList: ConfigBooleanComparisonExp
  enableConsole: ConfigBooleanComparisonExp
  enableRemoteSchemaPermissions: ConfigBooleanComparisonExp
  enabledAPIs: ConfigHasuraAPIsComparisonExp
  inferFunctionPermissions: ConfigBooleanComparisonExp
  liveQueriesMultiplexedRefetchInterval: ConfigUint32ComparisonExp
  stringifyNumericTypes: ConfigBooleanComparisonExp
}

input ConfigHasuraSettingsInsertInput {
  corsDomain: [ConfigUrl!]
  devMode: Boolean
  enableAllowList: Boolean
  enableConsole: Boolean
  enableRemoteSchemaPermissions: Boolean
  enabledAPIs: [ConfigHasuraAPIs!]
  inferFunctionPermissions: Boolean
  liveQueriesMultiplexedRefetchInterval: ConfigUint32
  stringifyNumericTypes: Boolean
}

input ConfigHasuraSettingsUpdateInput {
  corsDomain: [ConfigUrl!]
  devMode: Boolean
  enableAllowList: Boolean
  enableConsole: Boolean
  enableRemoteSchemaPermissions: Boolean
  enabledAPIs: [ConfigHasuraAPIs!]
  inferFunctionPermissions: Boolean
  liveQueriesMultiplexedRefetchInterval: ConfigUint32
  stringifyNumericTypes: Boolean
}

input ConfigHasuraUpdateInput {
  adminSecret: String
  authHook: ConfigHasuraAuthHookUpdateInput
  events: ConfigHasuraEventsUpdateInput
  jwtSecrets: [ConfigJWTSecretUpdateInput!]
  logs: ConfigHasuraLogsUpdateInput
  rateLimit: ConfigRateLimitUpdateInput
  resources: ConfigResourcesUpdateInput
  settings: ConfigHasuraSettingsUpdateInput
  version: String
  webhookSecret: String
}

input ConfigHealthCheckComparisonExp {
  _and: [ConfigHealthCheckComparisonExp!]
  _not: ConfigHealthCheckComparisonExp
  _or: [ConfigHealthCheckComparisonExp!]
  initialDelaySeconds: ConfigIntComparisonExp
  port: ConfigPortComparisonExp
  probePeriodSeconds: ConfigIntComparisonExp
}

input ConfigHealthCheckInsertInput {
  initialDelaySeconds: Int
  port: ConfigPort!
  probePeriodSeconds: Int
}

input ConfigHealthCheckUpdateInput {
  initialDelaySeconds: Int
  port: ConfigPort
  probePeriodSeconds: Int
}

input ConfigIngressComparisonExp {
  _and: [ConfigIngressComparisonExp!]
  _not: ConfigIngressComparisonExp
  _or: [ConfigIngressComparisonExp!]
  fqdn: ConfigStringComparisonExp
  tls: ConfigIngressTlsComparisonExp
}

input ConfigIngressInsertInput {
  fqdn: [String!]
  tls: ConfigIngressTlsInsertInput
}

input ConfigIngressTlsComparisonExp {
  _and: [ConfigIngressTlsComparisonExp!]
  _not: ConfigIngressTlsComparisonExp
  _or: [ConfigIngressTlsComparisonExp!]
  clientCA: ConfigStringComparisonExp
}

input ConfigIngressTlsInsertInput {
  clientCA: String
}

input ConfigIngressTlsUpdateInput {
  clientCA: String
}

input ConfigIngressUpdateInput {
  fqdn: [String!]
  tls: ConfigIngressTlsUpdateInput
}

input ConfigInt32ComparisonExp {
  _eq: ConfigInt32
  _in: [ConfigInt32!]
  _neq: ConfigInt32
  _nin: [ConfigInt32!]
}

input ConfigIntComparisonExp {
  _eq: Int
  _in: [Int!]
  _neq: Int
  _nin: [Int!]
}

input ConfigJWTSecretComparisonExp {
  _and: [ConfigJWTSecretComparisonExp!]
  _not: ConfigJWTSecretComparisonExp
  _or: [ConfigJWTSecretComparisonExp!]
  allowed_skew: ConfigUint32ComparisonExp
  audience: ConfigStringComparisonExp
  claims_format: ConfigStringComparisonExp
  claims_map: ConfigClaimMapComparisonExp
  claims_namespace: ConfigStringComparisonExp
  claims_namespace_path: ConfigStringComparisonExp
  header: ConfigStringComparisonExp
  issuer: ConfigStringComparisonExp
  jwk_url: ConfigUrlComparisonExp
  key: ConfigStringComparisonExp
  kid: ConfigStringComparisonExp
  signingKey: ConfigStringComparisonExp
  type: ConfigStringComparisonExp
}

input ConfigJWTSecretInsertInput {
  allowed_skew: ConfigUint32
  audience: String
  claims_format: String
  claims_map: [ConfigClaimMapInsertInput!]
  claims_namespace: String
  claims_namespace_path: String
  header: String
  issuer: String
  jwk_url: ConfigUrl
  key: String
  kid: String
  signingKey: String
  type: String
}

input ConfigJWTSecretUpdateInput {
  allowed_skew: ConfigUint32
  audience: String
  claims_format: String
  claims_map: [ConfigClaimMapUpdateInput!]
  claims_namespace: String
  claims_namespace_path: String
  header: String
  issuer: String
  jwk_url: ConfigUrl
  key: String
  kid: String
  signingKey: String
  type: String
}

input ConfigLocaleComparisonExp {
  _eq: ConfigLocale
  _in: [ConfigLocale!]
  _neq: ConfigLocale
  _nin: [ConfigLocale!]
}

input ConfigNetworkingComparisonExp {
  _and: [ConfigNetworkingComparisonExp!]
  _not: ConfigNetworkingComparisonExp
  _or: [ConfigNetworkingComparisonExp!]
  ingresses: ConfigIngressComparisonExp
}

input ConfigNetworkingInsertInput {
  ingresses: [ConfigIngressInsertInput!]
}

input ConfigNetworkingUpdateInput {
  ingresses: [ConfigIngressUpdateInput!]
}

input ConfigObservabilityComparisonExp {
  _and: [ConfigObservabilityComparisonExp!]
  _not: ConfigObservabilityComparisonExp
  _or: [ConfigObservabilityComparisonExp!]
  grafana: ConfigGrafanaComparisonExp
}

input ConfigObservabilityInsertInput {
  grafana: ConfigGrafanaInsertInput!
}

input ConfigObservabilityUpdateInput {
  grafana: ConfigGrafanaUpdateInput
}

input ConfigPortComparisonExp {
  _eq: ConfigPort
  _in: [ConfigPort!]
  _neq: ConfigPort
  _nin: [ConfigPort!]
}

input ConfigPostgresComparisonExp {
  _and: [ConfigPostgresComparisonExp!]
  _not: ConfigPostgresComparisonExp
  _or: [ConfigPostgresComparisonExp!]
  pitr: ConfigPostgresPitrComparisonExp
  resources: ConfigPostgresResourcesComparisonExp
  settings: ConfigPostgresSettingsComparisonExp
  version: ConfigStringComparisonExp
}

input ConfigPostgresInsertInput {
  pitr: ConfigPostgresPitrInsertInput
  resources: ConfigPostgresResourcesInsertInput!
  settings: ConfigPostgresSettingsInsertInput
  version: String
}

input ConfigPostgresPitrComparisonExp {
  _and: [ConfigPostgresPitrComparisonExp!]
  _not: ConfigPostgresPitrComparisonExp
  _or: [ConfigPostgresPitrComparisonExp!]
  retention: ConfigUint8ComparisonExp
}

input ConfigPostgresPitrInsertInput {
  retention: ConfigUint8
}

input ConfigPostgresPitrUpdateInput {
  retention: ConfigUint8
}

input ConfigPostgresResourcesComparisonExp {
  _and: [ConfigPostgresResourcesComparisonExp!]
  _not: ConfigPostgresResourcesComparisonExp
  _or: [ConfigPostgresResourcesComparisonExp!]
  compute: ConfigResourcesComputeComparisonExp
  enablePublicAccess: ConfigBooleanComparisonExp
  replicas: ConfigIntComparisonExp
  storage: ConfigPostgresResourcesStorageComparisonExp
}

input ConfigPostgresResourcesInsertInput {
  compute: ConfigResourcesComputeInsertInput
  enablePublicAccess: Boolean
  replicas: Int
  storage: ConfigPostgresResourcesStorageInsertInput!
}

input ConfigPostgresResourcesStorageComparisonExp {
  _and: [ConfigPostgresResourcesStorageComparisonExp!]
  _not: ConfigPostgresResourcesStorageComparisonExp
  _or: [ConfigPostgresResourcesStorageComparisonExp!]
  capacity: ConfigUint32ComparisonExp
}

input ConfigPostgresResourcesStorageInsertInput {
  capacity: ConfigUint32!
}

input ConfigPostgresResourcesStorageUpdateInput {
  capacity: ConfigUint32
}

input ConfigPostgresResourcesUpdateInput {
  compute: ConfigResourcesComputeUpdateInput
  enablePublicAccess: Boolean
  replicas: Int
  storage: ConfigPostgresResourcesStorageUpdateInput
}

input ConfigPostgresSettingsComparisonExp {
  _and: [ConfigPostgresSettingsComparisonExp!]
  _not: ConfigPostgresSettingsComparisonExp
  _or: [ConfigPostgresSettingsComparisonExp!]
  archiveTimeout: ConfigInt32ComparisonExp
  checkpointCompletionTarget: ConfigFloatComparisonExp
  defaultStatisticsTarget: ConfigInt32ComparisonExp
  effectiveCacheSize: ConfigStringComparisonExp
  effectiveIOConcurrency: ConfigInt32ComparisonExp
  hugePages: ConfigStringComparisonExp
  jit: ConfigStringComparisonExp
  maintenanceWorkMem: ConfigStringComparisonExp
  maxConnections: ConfigInt32ComparisonExp
  maxParallelMaintenanceWorkers: ConfigInt32ComparisonExp
  maxParallelWorkers: ConfigInt32ComparisonExp
  maxParallelWorkersPerGather: ConfigInt32ComparisonExp
  maxReplicationSlots: ConfigInt32ComparisonExp
  maxWalSenders: ConfigInt32ComparisonExp
  maxWalSize: ConfigStringComparisonExp
  maxWorkerProcesses: ConfigInt32ComparisonExp
  minWalSize: ConfigStringComparisonExp
  randomPageCost: ConfigFloatComparisonExp
  sharedBuffers: ConfigStringComparisonExp
  walBuffers: ConfigStringComparisonExp
  walLevel: ConfigStringComparisonExp
  workMem: ConfigStringComparisonExp
}

input ConfigPostgresSettingsInsertInput {
  archiveTimeout: ConfigInt32
  checkpointCompletionTarget: Float
  defaultStatisticsTarget: ConfigInt32
  effectiveCacheSize: String
  effectiveIOConcurrency: ConfigInt32
  hugePages: String
  jit: String
  maintenanceWorkMem: String
  maxConnections: ConfigInt32
  maxParallelMaintenanceWorkers: ConfigInt32
  maxParallelWorkers: ConfigInt32
  maxParallelWorkersPerGather: ConfigInt32
  maxReplicationSlots: ConfigInt32
  maxWalSenders: ConfigInt32
  maxWalSize: String
  maxWorkerProcesses: ConfigInt32
  minWalSize: String
  randomPageCost: Float
  sharedBuffers: String
  walBuffers: String
  walLevel: String
  workMem: String
}

input ConfigPostgresSettingsUpdateInput {
  archiveTimeout: ConfigInt32
  checkpointCompletionTarget: Float
  defaultStatisticsTarget: ConfigInt32
  effectiveCacheSize: String
  effectiveIOConcurrency: ConfigInt32
  hugePages: String
  jit: String
  maintenanceWorkMem: String
  maxConnections: ConfigInt32
  maxParallelMaintenanceWorkers: ConfigInt32
  maxParallelWorkers: ConfigInt32
  maxParallelWorkersPerGather: ConfigInt32
  maxReplicationSlots: ConfigInt32
  maxWalSenders: ConfigInt32
  maxWalSize: String
  maxWorkerProcesses: ConfigInt32
  minWalSize: String
  randomPageCost: Float
  sharedBuffers: String
  walBuffers: String
  walLevel: String
  workMem: String
}

input ConfigPostgresUpdateInput {
  pitr: ConfigPostgresPitrUpdateInput
  resources: ConfigPostgresResourcesUpdateInput
  settings: ConfigPostgresSettingsUpdateInput
  version: String
}

input ConfigProviderComparisonExp {
  _and: [ConfigProviderComparisonExp!]
  _not: ConfigProviderComparisonExp
  _or: [ConfigProviderComparisonExp!]
  sms: ConfigSmsComparisonExp
  smtp: ConfigSmtpComparisonExp
}

input ConfigProviderInsertInput {
  sms: ConfigSmsInsertInput
  smtp: ConfigSmtpInsertInput
}

input ConfigProviderUpdateInput {
  sms: ConfigSmsUpdateInput
  smtp: ConfigSmtpUpdateInput
}

input ConfigRateLimitComparisonExp {
  _and: [ConfigRateLimitComparisonExp!]
  _not: ConfigRateLimitComparisonExp
  _or: [ConfigRateLimitComparisonExp!]
  interval: ConfigStringComparisonExp
  limit: ConfigUint32ComparisonExp
}

input ConfigRateLimitInsertInput {
  interval: String!
  limit: ConfigUint32!
}

input ConfigRateLimitUpdateInput {
  interval: String
  limit: ConfigUint32
}

input ConfigResourcesComparisonExp {
  _and: [ConfigResourcesComparisonExp!]
  _not: ConfigResourcesComparisonExp
  _or: [ConfigResourcesComparisonExp!]
  autoscaler: ConfigAutoscalerComparisonExp
  compute: ConfigResourcesComputeComparisonExp
  networking: ConfigNetworkingComparisonExp
  replicas: ConfigUint8ComparisonExp
}

input ConfigResourcesComputeComparisonExp {
  _and: [ConfigResourcesComputeComparisonExp!]
  _not: ConfigResourcesComputeComparisonExp
  _or: [ConfigResourcesComputeComparisonExp!]
  cpu: ConfigUint32ComparisonExp
  memory: ConfigUint32ComparisonExp
}

input ConfigResourcesComputeInsertInput {
  cpu: ConfigUint32!
  memory: ConfigUint32!
}

input ConfigResourcesComputeUpdateInput {
  cpu: ConfigUint32
  memory: ConfigUint32
}

input ConfigResourcesInsertInput {
  autoscaler: ConfigAutoscalerInsertInput
  compute: ConfigResourcesComputeInsertInput
  networking: ConfigNetworkingInsertInput
  replicas: ConfigUint8
}

input ConfigResourcesUpdateInput {
  autoscaler: ConfigAutoscalerUpdateInput
  compute: ConfigResourcesComputeUpdateInput
  networking: ConfigNetworkingUpdateInput
  replicas: ConfigUint8
}

input ConfigRunServiceConfigComparisonExp {
  _and: [ConfigRunServiceConfigComparisonExp!]
  _not: ConfigRunServiceConfigComparisonExp
  _or: [ConfigRunServiceConfigComparisonExp!]
  command: ConfigStringComparisonExp
  environment: ConfigEnvironmentVariableComparisonExp
  healthCheck: ConfigHealthCheckComparisonExp
  image: ConfigRunServiceImageComparisonExp
  name: ConfigRunServiceNameComparisonExp
  ports: ConfigRunServicePortComparisonExp
  resources: ConfigRunServiceResourcesComparisonExp
}

input ConfigRunServiceConfigInsertInput {
  command: [String!]
  environment: [ConfigEnvironmentVariableInsertInput!]
  healthCheck: ConfigHealthCheckInsertInput
  image: ConfigRunServiceImageInsertInput!
  name: ConfigRunServiceName!
  ports: [ConfigRunServicePortInsertInput!]
  resources: ConfigRunServiceResourcesInsertInput!
}

input ConfigRunServiceConfigUpdateInput {
  command: [String!]
  environment: [ConfigEnvironmentVariableUpdateInput!]
  healthCheck: ConfigHealthCheckUpdateInput
  image: ConfigRunServiceImageUpdateInput
  name: ConfigRunServiceName
  ports: [ConfigRunServicePortUpdateInput!]
  resources: ConfigRunServiceResourcesUpdateInput
}

input ConfigRunServiceImageComparisonExp {
  _and: [ConfigRunServiceImageComparisonExp!]
  _not: ConfigRunServiceImageComparisonExp
  _or: [ConfigRunServiceImageComparisonExp!]
  image: ConfigStringComparisonExp
  pullCredentials: ConfigStringComparisonExp
}

input ConfigRunServiceImageInsertInput {
  image: String!
  pullCredentials: String
}

input ConfigRunServiceImageUpdateInput {
  image: String
  pullCredentials: String
}

input ConfigRunServiceNameComparisonExp {
  _eq: ConfigRunServiceName
  _in: [ConfigRunServiceName!]
  _neq: ConfigRunServiceName
  _nin: [ConfigRunServiceName!]
}

input ConfigRunServicePortComparisonExp {
  _and: [ConfigRunServicePortComparisonExp!]
  _not: ConfigRunServicePortComparisonExp
  _or: [ConfigRunServicePortComparisonExp!]
  ingresses: ConfigIngressComparisonExp
  port: ConfigPortComparisonExp
  publish: ConfigBooleanComparisonExp
  rateLimit: ConfigRateLimitComparisonExp
  type: ConfigStringComparisonExp
}

input ConfigRunServicePortInsertInput {
  ingresses: [ConfigIngressInsertInput!]
  port: ConfigPort!
  publish: Boolean
  rateLimit: ConfigRateLimitInsertInput
  type: String!
}

input ConfigRunServicePortUpdateInput {
  ingresses: [ConfigIngressUpdateInput!]
  port: ConfigPort
  publish: Boolean
  rateLimit: ConfigRateLimitUpdateInput
  type: String
}

input ConfigRunServiceResourcesComparisonExp {
  _and: [ConfigRunServiceResourcesComparisonExp!]
  _not: ConfigRunServiceResourcesComparisonExp
  _or: [ConfigRunServiceResourcesComparisonExp!]
  autoscaler: ConfigAutoscalerComparisonExp
  compute: ConfigComputeResourcesComparisonExp
  replicas: ConfigUint8ComparisonExp
  storage: ConfigRunServiceResourcesStorageComparisonExp
}

input ConfigRunServiceResourcesInsertInput {
  autoscaler: ConfigAutoscalerInsertInput
  compute: ConfigComputeResourcesInsertInput!
  replicas: ConfigUint8!
  storage: [ConfigRunServiceResourcesStorageInsertInput!]
}

input ConfigRunServiceResourcesStorageComparisonExp {
  _and: [ConfigRunServiceResourcesStorageComparisonExp!]
  _not: ConfigRunServiceResourcesStorageComparisonExp
  _or: [ConfigRunServiceResourcesStorageComparisonExp!]
  capacity: ConfigUint32ComparisonExp
  name: ConfigRunServiceNameComparisonExp
  path: ConfigStringComparisonExp
}

input ConfigRunServiceResourcesStorageInsertInput {
  capacity: ConfigUint32!
  name: ConfigRunServiceName!
  path: String!
}

input ConfigRunServiceResourcesStorageUpdateInput {
  capacity: ConfigUint32
  name: ConfigRunServiceName
  path: String
}

input ConfigRunServiceResourcesUpdateInput {
  autoscaler: ConfigAutoscalerUpdateInput
  compute: ConfigComputeResourcesUpdateInput
  replicas: ConfigUint8
  storage: [ConfigRunServiceResourcesStorageUpdateInput!]
}

input ConfigSmsComparisonExp {
  _and: [ConfigSmsComparisonExp!]
  _not: ConfigSmsComparisonExp
  _or: [ConfigSmsComparisonExp!]
  accountSid: ConfigStringComparisonExp
  authToken: ConfigStringComparisonExp
  messagingServiceId: ConfigStringComparisonExp
  provider: ConfigStringComparisonExp
}

input ConfigSmsInsertInput {
  accountSid: String!
  authToken: String!
  messagingServiceId: String!
  provider: String
}

input ConfigSmsUpdateInput {
  accountSid: String
  authToken: String
  messagingServiceId: String
  provider: String
}

input ConfigSmtpComparisonExp {
  _and: [ConfigSmtpComparisonExp!]
  _not: ConfigSmtpComparisonExp
  _or: [ConfigSmtpComparisonExp!]
  host: ConfigStringComparisonExp
  method: ConfigStringComparisonExp
  password: ConfigStringComparisonExp
  port: ConfigPortComparisonExp
  secure: ConfigBooleanComparisonExp
  sender: ConfigStringComparisonExp
  user: ConfigStringComparisonExp
}

input ConfigSmtpInsertInput {
  host: String!
  method: String!
  password: String!
  port: ConfigPort!
  secure: Boolean!
  sender: String!
  user: String!
}

input ConfigSmtpUpdateInput {
  host: String
  method: String
  password: String
  port: ConfigPort
  secure: Boolean
  sender: String
  user: String
}

input ConfigStandardOauthProviderComparisonExp {
  _and: [ConfigStandardOauthProviderComparisonExp!]
  _not: ConfigStandardOauthProviderComparisonExp
  _or: [ConfigStandardOauthProviderComparisonExp!]
  clientId: ConfigStringComparisonExp
  clientSecret: ConfigStringComparisonExp
  enabled: ConfigBooleanComparisonExp
}

input ConfigStandardOauthProviderInsertInput {
  clientId: String
  clientSecret: String
  enabled: Boolean
}

input ConfigStandardOauthProviderUpdateInput {
  clientId: String
  clientSecret: String
  enabled: Boolean
}

input ConfigStandardOauthProviderWithScopeComparisonExp {
  _and: [ConfigStandardOauthProviderWithScopeComparisonExp!]
  _not: ConfigStandardOauthProviderWithScopeComparisonExp
  _or: [ConfigStandardOauthProviderWithScopeComparisonExp!]
  audience: ConfigStringComparisonExp
  clientId: ConfigStringComparisonExp
  clientSecret: ConfigStringComparisonExp
  enabled: ConfigBooleanComparisonExp
  scope: ConfigStringComparisonExp
}

input ConfigStandardOauthProviderWithScopeInsertInput {
  audience: String
  clientId: String
  clientSecret: String
  enabled: Boolean
  scope: [String!]
}

input ConfigStandardOauthProviderWithScopeUpdateInput {
  audience: String
  clientId: String
  clientSecret: String
  enabled: Boolean
  scope: [String!]
}

input ConfigStorageAntivirusComparisonExp {
  _and: [ConfigStorageAntivirusComparisonExp!]
  _not: ConfigStorageAntivirusComparisonExp
  _or: [ConfigStorageAntivirusComparisonExp!]
  server: ConfigStringComparisonExp
}

input ConfigStorageAntivirusInsertInput {
  server: String
}

input ConfigStorageAntivirusUpdateInput {
  server: String
}

input ConfigStorageComparisonExp {
  _and: [ConfigStorageComparisonExp!]
  _not: ConfigStorageComparisonExp
  _or: [ConfigStorageComparisonExp!]
  antivirus: ConfigStorageAntivirusComparisonExp
  rateLimit: ConfigRateLimitComparisonExp
  resources: ConfigResourcesComparisonExp
  version: ConfigStringComparisonExp
}

input ConfigStorageInsertInput {
  antivirus: ConfigStorageAntivirusInsertInput
  rateLimit: ConfigRateLimitInsertInput
  resources: ConfigResourcesInsertInput
  version: String
}

input ConfigStorageUpdateInput {
  antivirus: ConfigStorageAntivirusUpdateInput
  rateLimit: ConfigRateLimitUpdateInput
  resources: ConfigResourcesUpdateInput
  version: String
}

input ConfigStringComparisonExp {
  _eq: String
  _in: [String!]
  _neq: String
  _nin: [String!]
}

input ConfigSystemConfigAuthComparisonExp {
  _and: [ConfigSystemConfigAuthComparisonExp!]
  _not: ConfigSystemConfigAuthComparisonExp
  _or: [ConfigSystemConfigAuthComparisonExp!]
  email: ConfigSystemConfigAuthEmailComparisonExp
}

input ConfigSystemConfigAuthEmailComparisonExp {
  _and: [ConfigSystemConfigAuthEmailComparisonExp!]
  _not: ConfigSystemConfigAuthEmailComparisonExp
  _or: [ConfigSystemConfigAuthEmailComparisonExp!]
  templates: ConfigSystemConfigAuthEmailTemplatesComparisonExp
}

input ConfigSystemConfigAuthEmailInsertInput {
  templates: ConfigSystemConfigAuthEmailTemplatesInsertInput
}

input ConfigSystemConfigAuthEmailTemplatesComparisonExp {
  _and: [ConfigSystemConfigAuthEmailTemplatesComparisonExp!]
  _not: ConfigSystemConfigAuthEmailTemplatesComparisonExp
  _or: [ConfigSystemConfigAuthEmailTemplatesComparisonExp!]
  s3Key: ConfigStringComparisonExp
}

input ConfigSystemConfigAuthEmailTemplatesInsertInput {
  s3Key: String
}

input ConfigSystemConfigAuthEmailTemplatesUpdateInput {
  s3Key: String
}

input ConfigSystemConfigAuthEmailUpdateInput {
  templates: ConfigSystemConfigAuthEmailTemplatesUpdateInput
}

input ConfigSystemConfigAuthInsertInput {
  email: ConfigSystemConfigAuthEmailInsertInput
}

input ConfigSystemConfigAuthUpdateInput {
  email: ConfigSystemConfigAuthEmailUpdateInput
}

input ConfigSystemConfigComparisonExp {
  _and: [ConfigSystemConfigComparisonExp!]
  _not: ConfigSystemConfigComparisonExp
  _or: [ConfigSystemConfigComparisonExp!]
  auth: ConfigSystemConfigAuthComparisonExp
  graphql: ConfigSystemConfigGraphqlComparisonExp
  persistentVolumesEncrypted: ConfigBooleanComparisonExp
  postgres: ConfigSystemConfigPostgresComparisonExp
}

input ConfigSystemConfigGraphqlComparisonExp {
  _and: [ConfigSystemConfigGraphqlComparisonExp!]
  _not: ConfigSystemConfigGraphqlComparisonExp
  _or: [ConfigSystemConfigGraphqlComparisonExp!]
  featureAdvancedGraphql: ConfigBooleanComparisonExp
}

input ConfigSystemConfigGraphqlInsertInput {
  featureAdvancedGraphql: Boolean
}

input ConfigSystemConfigGraphqlUpdateInput {
  featureAdvancedGraphql: Boolean
}

input ConfigSystemConfigInsertInput {
  auth: ConfigSystemConfigAuthInsertInput
  graphql: ConfigSystemConfigGraphqlInsertInput
  persistentVolumesEncrypted: Boolean
  postgres: ConfigSystemConfigPostgresInsertInput!
}

input ConfigSystemConfigPostgresComparisonExp {
  _and: [ConfigSystemConfigPostgresComparisonExp!]
  _not: ConfigSystemConfigPostgresComparisonExp
  _or: [ConfigSystemConfigPostgresComparisonExp!]
  connectionString: ConfigSystemConfigPostgresConnectionStringComparisonExp
  database: ConfigStringComparisonExp
  disk: ConfigSystemConfigPostgresDiskComparisonExp
  enabled: ConfigBooleanComparisonExp
  majorVersion: ConfigStringComparisonExp
}

input ConfigSystemConfigPostgresConnectionStringComparisonExp {
  _and: [ConfigSystemConfigPostgresConnectionStringComparisonExp!]
  _not: ConfigSystemConfigPostgresConnectionStringComparisonExp
  _or: [ConfigSystemConfigPostgresConnectionStringComparisonExp!]
  auth: ConfigStringComparisonExp
  backup: ConfigStringComparisonExp
  hasura: ConfigStringComparisonExp
  storage: ConfigStringComparisonExp
}

input ConfigSystemConfigPostgresConnectionStringInsertInput {
  auth: String!
  backup: String!
  hasura: String!
  storage: String!
}

input ConfigSystemConfigPostgresConnectionStringUpdateInput {
  auth: String
  backup: String
  hasura: String
  storage: String
}

input ConfigSystemConfigPostgresDiskComparisonExp {
  _and: [ConfigSystemConfigPostgresDiskComparisonExp!]
  _not: ConfigSystemConfigPostgresDiskComparisonExp
  _or: [ConfigSystemConfigPostgresDiskComparisonExp!]
  iops: ConfigUint32ComparisonExp
  tput: ConfigUint32ComparisonExp
}

input ConfigSystemConfigPostgresDiskInsertInput {
  iops: ConfigUint32
  tput: ConfigUint32
}

input ConfigSystemConfigPostgresDiskUpdateInput {
  iops: ConfigUint32
  tput: ConfigUint32
}

input ConfigSystemConfigPostgresInsertInput {
  connectionString: ConfigSystemConfigPostgresConnectionStringInsertInput!
  database: String!
  disk: ConfigSystemConfigPostgresDiskInsertInput
  enabled: Boolean
  majorVersion: String
}

input ConfigSystemConfigPostgresUpdateInput {
  connectionString: ConfigSystemConfigPostgresConnectionStringUpdateInput
  database: String
  disk: ConfigSystemConfigPostgresDiskUpdateInput
  enabled: Boolean
  majorVersion: String
}

input ConfigSystemConfigUpdateInput {
  auth: ConfigSystemConfigAuthUpdateInput
  graphql: ConfigSystemConfigGraphqlUpdateInput
  persistentVolumesEncrypted: Boolean
  postgres: ConfigSystemConfigPostgresUpdateInput
}

input ConfigUint32ComparisonExp {
  _eq: ConfigUint32
  _in: [ConfigUint32!]
  _neq: ConfigUint32
  _nin: [ConfigUint32!]
}

input ConfigUint8ComparisonExp {
  _eq: ConfigUint8
  _in: [ConfigUint8!]
  _neq: ConfigUint8
  _nin: [ConfigUint8!]
}

input ConfigUintComparisonExp {
  _eq: ConfigUint
  _in: [ConfigUint!]
  _neq: ConfigUint
  _nin: [ConfigUint!]
}

input ConfigUrlComparisonExp {
  _eq: ConfigUrl
  _in: [ConfigUrl!]
  _neq: ConfigUrl
  _nin: [ConfigUrl!]
}

input ConfigUserRoleComparisonExp {
  _eq: ConfigUserRole
  _in: [ConfigUserRole!]
  _neq: ConfigUserRole
  _nin: [ConfigUserRole!]
}

input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """does the column match the given POSIX regular expression, case insensitive"""
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """does the column NOT match the given POSIX regular expression, case insensitive"""
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """does the column NOT match the given POSIX regular expression, case sensitive"""
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """does the column match the given POSIX regular expression, case sensitive"""
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

input announcements_bool_exp {
  _and: [announcements_bool_exp!]
  _not: announcements_bool_exp
  _or: [announcements_bool_exp!]
  content: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  expiresAt: timestamptz_comparison_exp
  href: String_comparison_exp
  id: uuid_comparison_exp
  read: announcements_read_bool_exp
  read_aggregate: announcements_read_aggregate_bool_exp
  updatedAt: timestamptz_comparison_exp
}

input announcements_insert_input {
  content: String
  createdAt: timestamptz
  expiresAt: timestamptz
  href: String
  id: uuid
  read: announcements_read_arr_rel_insert_input
  updatedAt: timestamptz
}

input announcements_on_conflict {
  constraint: announcements_constraint!
  update_columns: [announcements_update_column!]! = []
  where: announcements_bool_exp
}

input announcements_order_by {
  content: order_by
  createdAt: order_by
  expiresAt: order_by
  href: order_by
  id: order_by
  read_aggregate: announcements_read_aggregate_order_by
  updatedAt: order_by
}

input announcements_pk_columns_input {
  id: uuid!
}

input announcements_read_aggregate_bool_exp {
  count: announcements_read_aggregate_bool_exp_count
}

input announcements_read_aggregate_bool_exp_count {
  arguments: [announcements_read_select_column!]
  distinct: Boolean
  filter: announcements_read_bool_exp
  predicate: Int_comparison_exp!
}

input announcements_read_aggregate_order_by {
  count: order_by
  max: announcements_read_max_order_by
  min: announcements_read_min_order_by
}

input announcements_read_arr_rel_insert_input {
  data: [announcements_read_insert_input!]!
  """upsert condition"""
  on_conflict: announcements_read_on_conflict
}

input announcements_read_bool_exp {
  _and: [announcements_read_bool_exp!]
  _not: announcements_read_bool_exp
  _or: [announcements_read_bool_exp!]
  announcementID: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  userID: uuid_comparison_exp
}

input announcements_read_insert_input {
  announcementID: uuid
  createdAt: timestamptz
  id: uuid
  userID: uuid
}

input announcements_read_max_order_by {
  announcementID: order_by
  createdAt: order_by
  id: order_by
  userID: order_by
}

input announcements_read_min_order_by {
  announcementID: order_by
  createdAt: order_by
  id: order_by
  userID: order_by
}

input announcements_read_on_conflict {
  constraint: announcements_read_constraint!
  update_columns: [announcements_read_update_column!]! = []
  where: announcements_read_bool_exp
}

input announcements_read_order_by {
  announcementID: order_by
  createdAt: order_by
  id: order_by
  userID: order_by
}

input announcements_read_pk_columns_input {
  id: uuid!
}

input announcements_read_set_input {
  announcementID: uuid
  createdAt: timestamptz
  id: uuid
  userID: uuid
}

input announcements_read_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: announcements_read_set_input
  """filter the rows which have to be updated"""
  where: announcements_read_bool_exp!
}

input announcements_set_input {
  content: String
  createdAt: timestamptz
  expiresAt: timestamptz
  href: String
  id: uuid
  updatedAt: timestamptz
}

input announcements_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: announcements_set_input
  """filter the rows which have to be updated"""
  where: announcements_bool_exp!
}

input appStateHistory_aggregate_bool_exp {
  count: appStateHistory_aggregate_bool_exp_count
}

input appStateHistory_aggregate_bool_exp_count {
  arguments: [appStateHistory_select_column!]
  distinct: Boolean
  filter: appStateHistory_bool_exp
  predicate: Int_comparison_exp!
}

input appStateHistory_aggregate_order_by {
  avg: appStateHistory_avg_order_by
  count: order_by
  max: appStateHistory_max_order_by
  min: appStateHistory_min_order_by
  stddev: appStateHistory_stddev_order_by
  stddev_pop: appStateHistory_stddev_pop_order_by
  stddev_samp: appStateHistory_stddev_samp_order_by
  sum: appStateHistory_sum_order_by
  var_pop: appStateHistory_var_pop_order_by
  var_samp: appStateHistory_var_samp_order_by
  variance: appStateHistory_variance_order_by
}

input appStateHistory_arr_rel_insert_input {
  data: [appStateHistory_insert_input!]!
  """upsert condition"""
  on_conflict: appStateHistory_on_conflict
}

input appStateHistory_avg_order_by {
  stateId: order_by
}

input appStateHistory_bool_exp {
  _and: [appStateHistory_bool_exp!]
  _not: appStateHistory_bool_exp
  _or: [appStateHistory_bool_exp!]
  app: apps_bool_exp
  appId: uuid_comparison_exp
  appState: appStates_bool_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  message: String_comparison_exp
  stateId: Int_comparison_exp
}

input appStateHistory_inc_input {
  stateId: Int
}

input appStateHistory_insert_input {
  app: apps_obj_rel_insert_input
  appId: uuid
  appState: appStates_obj_rel_insert_input
  createdAt: timestamptz
  id: uuid
  message: String
  stateId: Int
}

input appStateHistory_max_order_by {
  appId: order_by
  createdAt: order_by
  id: order_by
  message: order_by
  stateId: order_by
}

input appStateHistory_min_order_by {
  appId: order_by
  createdAt: order_by
  id: order_by
  message: order_by
  stateId: order_by
}

input appStateHistory_on_conflict {
  constraint: appStateHistory_constraint!
  update_columns: [appStateHistory_update_column!]! = []
  where: appStateHistory_bool_exp
}

input appStateHistory_order_by {
  app: apps_order_by
  appId: order_by
  appState: appStates_order_by
  createdAt: order_by
  id: order_by
  message: order_by
  stateId: order_by
}

input appStateHistory_pk_columns_input {
  id: uuid!
}

input appStateHistory_set_input {
  appId: uuid
  createdAt: timestamptz
  id: uuid
  message: String
  stateId: Int
}

input appStateHistory_stddev_order_by {
  stateId: order_by
}

input appStateHistory_stddev_pop_order_by {
  stateId: order_by
}

input appStateHistory_stddev_samp_order_by {
  stateId: order_by
}

input appStateHistory_sum_order_by {
  stateId: order_by
}

input appStateHistory_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: appStateHistory_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: appStateHistory_set_input
  """filter the rows which have to be updated"""
  where: appStateHistory_bool_exp!
}

input appStateHistory_var_pop_order_by {
  stateId: order_by
}

input appStateHistory_var_samp_order_by {
  stateId: order_by
}

input appStateHistory_variance_order_by {
  stateId: order_by
}

input appStates_bool_exp {
  _and: [appStates_bool_exp!]
  _not: appStates_bool_exp
  _or: [appStates_bool_exp!]
  appStates: appStateHistory_bool_exp
  appStates_aggregate: appStateHistory_aggregate_bool_exp
  apps: apps_bool_exp
  apps_aggregate: apps_aggregate_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

input appStates_inc_input {
  id: Int
}

input appStates_insert_input {
  appStates: appStateHistory_arr_rel_insert_input
  apps: apps_arr_rel_insert_input
  id: Int
  name: String
}

input appStates_obj_rel_insert_input {
  data: appStates_insert_input!
  """upsert condition"""
  on_conflict: appStates_on_conflict
}

input appStates_on_conflict {
  constraint: appStates_constraint!
  update_columns: [appStates_update_column!]! = []
  where: appStates_bool_exp
}

input appStates_order_by {
  appStates_aggregate: appStateHistory_aggregate_order_by
  apps_aggregate: apps_aggregate_order_by
  id: order_by
  name: order_by
}

input appStates_pk_columns_input {
  id: Int!
}

input appStates_set_input {
  id: Int
  name: String
}

input appStates_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: appStates_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: appStates_set_input
  """filter the rows which have to be updated"""
  where: appStates_bool_exp!
}

input apps_aggregate_bool_exp {
  bool_and: apps_aggregate_bool_exp_bool_and
  bool_or: apps_aggregate_bool_exp_bool_or
  count: apps_aggregate_bool_exp_count
}

input apps_aggregate_bool_exp_bool_and {
  arguments: apps_select_column_apps_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: apps_bool_exp
  predicate: Boolean_comparison_exp!
}

input apps_aggregate_bool_exp_bool_or {
  arguments: apps_select_column_apps_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: apps_bool_exp
  predicate: Boolean_comparison_exp!
}

input apps_aggregate_bool_exp_count {
  arguments: [apps_select_column!]
  distinct: Boolean
  filter: apps_bool_exp
  predicate: Int_comparison_exp!
}

input apps_aggregate_order_by {
  avg: apps_avg_order_by
  count: order_by
  max: apps_max_order_by
  min: apps_min_order_by
  stddev: apps_stddev_order_by
  stddev_pop: apps_stddev_pop_order_by
  stddev_samp: apps_stddev_samp_order_by
  sum: apps_sum_order_by
  var_pop: apps_var_pop_order_by
  var_samp: apps_var_samp_order_by
  variance: apps_variance_order_by
}

input apps_append_input {
  metadataFunctions: jsonb
}

input apps_arr_rel_insert_input {
  data: [apps_insert_input!]!
  """upsert condition"""
  on_conflict: apps_on_conflict
}

input apps_avg_order_by {
  currentState: order_by
  desiredState: order_by
}

input apps_bool_exp {
  _and: [apps_bool_exp!]
  _not: apps_bool_exp
  _or: [apps_bool_exp!]
  appStates: appStateHistory_bool_exp
  appStates_aggregate: appStateHistory_aggregate_bool_exp
  automaticDeploys: Boolean_comparison_exp
  backups: backups_bool_exp
  backups_aggregate: backups_aggregate_bool_exp
  billingDedicatedCompute: billing_dedicated_compute_bool_exp
  billingSubscriptions: billing_subscriptions_bool_exp
  createdAt: timestamptz_comparison_exp
  creator: users_bool_exp
  creatorUserId: uuid_comparison_exp
  currentState: Int_comparison_exp
  deployments: deployments_bool_exp
  deployments_aggregate: deployments_aggregate_bool_exp
  desiredAppState: appStates_bool_exp
  desiredState: Int_comparison_exp
  featureFlags: featureFlags_bool_exp
  featureFlags_aggregate: featureFlags_aggregate_bool_exp
  githubRepository: githubRepositories_bool_exp
  githubRepositoryId: uuid_comparison_exp
  id: uuid_comparison_exp
  isLocked: Boolean_comparison_exp
  isLockedReason: String_comparison_exp
  legacyPlan: plans_bool_exp
  legacyPlanID: uuid_comparison_exp
  legacyStripeSubscriptionId: String_comparison_exp
  metadataFunctions: jsonb_comparison_exp
  mimirConfigEnc: String_comparison_exp
  mimirSecretsEnc: String_comparison_exp
  mimirSystemConfigEnc: String_comparison_exp
  name: String_comparison_exp
  nhostBaseFolder: String_comparison_exp
  organization: organizations_bool_exp
  organizationID: uuid_comparison_exp
  region: regions_bool_exp
  regionId: uuid_comparison_exp
  repositoryProductionBranch: String_comparison_exp
  runServices: run_service_bool_exp
  runServices_aggregate: run_service_aggregate_bool_exp
  slug: String_comparison_exp
  stateMatch: Boolean_comparison_exp
  subdomain: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  workspace: workspaces_bool_exp
  workspaceId: uuid_comparison_exp
}

input apps_delete_at_path_input {
  metadataFunctions: [String!]
}

input apps_delete_elem_input {
  metadataFunctions: Int
}

input apps_delete_key_input {
  metadataFunctions: String
}

input apps_inc_input {
  currentState: Int
  desiredState: Int
}

input apps_insert_input {
  appStates: appStateHistory_arr_rel_insert_input
  automaticDeploys: Boolean
  backups: backups_arr_rel_insert_input
  billingDedicatedCompute: billing_dedicated_compute_obj_rel_insert_input
  billingSubscriptions: billing_subscriptions_obj_rel_insert_input
  createdAt: timestamptz
  creator: users_obj_rel_insert_input
  creatorUserId: uuid
  currentState: Int
  deployments: deployments_arr_rel_insert_input
  desiredAppState: appStates_obj_rel_insert_input
  desiredState: Int
  featureFlags: featureFlags_arr_rel_insert_input
  githubRepository: githubRepositories_obj_rel_insert_input
  githubRepositoryId: uuid
  id: uuid
  isLocked: Boolean
  isLockedReason: String
  legacyPlan: plans_obj_rel_insert_input
  legacyPlanID: uuid
  legacyStripeSubscriptionId: String
  metadataFunctions: jsonb
  mimirConfigEnc: String
  mimirSecretsEnc: String
  mimirSystemConfigEnc: String
  name: String
  nhostBaseFolder: String
  organization: organizations_obj_rel_insert_input
  organizationID: uuid
  region: regions_obj_rel_insert_input
  regionId: uuid
  repositoryProductionBranch: String
  runServices: run_service_arr_rel_insert_input
  slug: String
  subdomain: String
  updatedAt: timestamptz
  workspace: workspaces_obj_rel_insert_input
  workspaceId: uuid
}

input apps_max_order_by {
  createdAt: order_by
  creatorUserId: order_by
  currentState: order_by
  desiredState: order_by
  githubRepositoryId: order_by
  id: order_by
  isLockedReason: order_by
  legacyPlanID: order_by
  legacyStripeSubscriptionId: order_by
  mimirConfigEnc: order_by
  mimirSecretsEnc: order_by
  mimirSystemConfigEnc: order_by
  name: order_by
  nhostBaseFolder: order_by
  organizationID: order_by
  regionId: order_by
  repositoryProductionBranch: order_by
  slug: order_by
  subdomain: order_by
  updatedAt: order_by
  workspaceId: order_by
}

input apps_min_order_by {
  createdAt: order_by
  creatorUserId: order_by
  currentState: order_by
  desiredState: order_by
  githubRepositoryId: order_by
  id: order_by
  isLockedReason: order_by
  legacyPlanID: order_by
  legacyStripeSubscriptionId: order_by
  mimirConfigEnc: order_by
  mimirSecretsEnc: order_by
  mimirSystemConfigEnc: order_by
  name: order_by
  nhostBaseFolder: order_by
  organizationID: order_by
  regionId: order_by
  repositoryProductionBranch: order_by
  slug: order_by
  subdomain: order_by
  updatedAt: order_by
  workspaceId: order_by
}

input apps_obj_rel_insert_input {
  data: apps_insert_input!
  """upsert condition"""
  on_conflict: apps_on_conflict
}

input apps_on_conflict {
  constraint: apps_constraint!
  update_columns: [apps_update_column!]! = []
  where: apps_bool_exp
}

input apps_order_by {
  appStates_aggregate: appStateHistory_aggregate_order_by
  automaticDeploys: order_by
  backups_aggregate: backups_aggregate_order_by
  billingDedicatedCompute: billing_dedicated_compute_order_by
  billingSubscriptions: billing_subscriptions_order_by
  createdAt: order_by
  creator: users_order_by
  creatorUserId: order_by
  currentState: order_by
  deployments_aggregate: deployments_aggregate_order_by
  desiredAppState: appStates_order_by
  desiredState: order_by
  featureFlags_aggregate: featureFlags_aggregate_order_by
  githubRepository: githubRepositories_order_by
  githubRepositoryId: order_by
  id: order_by
  isLocked: order_by
  isLockedReason: order_by
  legacyPlan: plans_order_by
  legacyPlanID: order_by
  legacyStripeSubscriptionId: order_by
  metadataFunctions: order_by
  mimirConfigEnc: order_by
  mimirSecretsEnc: order_by
  mimirSystemConfigEnc: order_by
  name: order_by
  nhostBaseFolder: order_by
  organization: organizations_order_by
  organizationID: order_by
  region: regions_order_by
  regionId: order_by
  repositoryProductionBranch: order_by
  runServices_aggregate: run_service_aggregate_order_by
  slug: order_by
  stateMatch: order_by
  subdomain: order_by
  updatedAt: order_by
  workspace: workspaces_order_by
  workspaceId: order_by
}

input apps_pk_columns_input {
  id: uuid!
}

input apps_prepend_input {
  metadataFunctions: jsonb
}

input apps_set_input {
  automaticDeploys: Boolean
  createdAt: timestamptz
  creatorUserId: uuid
  currentState: Int
  desiredState: Int
  githubRepositoryId: uuid
  id: uuid
  isLocked: Boolean
  isLockedReason: String
  legacyPlanID: uuid
  legacyStripeSubscriptionId: String
  metadataFunctions: jsonb
  mimirConfigEnc: String
  mimirSecretsEnc: String
  mimirSystemConfigEnc: String
  name: String
  nhostBaseFolder: String
  organizationID: uuid
  regionId: uuid
  repositoryProductionBranch: String
  slug: String
  subdomain: String
  updatedAt: timestamptz
  workspaceId: uuid
}

input apps_stddev_order_by {
  currentState: order_by
  desiredState: order_by
}

input apps_stddev_pop_order_by {
  currentState: order_by
  desiredState: order_by
}

input apps_stddev_samp_order_by {
  currentState: order_by
  desiredState: order_by
}

input apps_sum_order_by {
  currentState: order_by
  desiredState: order_by
}

input apps_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: apps_append_input
  """delete the field or element with specified path (for JSON arrays, negative integers count from the end)"""
  _delete_at_path: apps_delete_at_path_input
  """delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"""
  _delete_elem: apps_delete_elem_input
  """delete key/value pair or string element. key/value pairs are matched based on their key value"""
  _delete_key: apps_delete_key_input
  """increments the numeric columns with given value of the filtered values"""
  _inc: apps_inc_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: apps_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: apps_set_input
  """filter the rows which have to be updated"""
  where: apps_bool_exp!
}

input apps_var_pop_order_by {
  currentState: order_by
  desiredState: order_by
}

input apps_var_samp_order_by {
  currentState: order_by
  desiredState: order_by
}

input apps_variance_order_by {
  currentState: order_by
  desiredState: order_by
}

input authProviderRequests_append_input {
  options: jsonb
}

input authProviderRequests_bool_exp {
  _and: [authProviderRequests_bool_exp!]
  _not: authProviderRequests_bool_exp
  _or: [authProviderRequests_bool_exp!]
  id: uuid_comparison_exp
  options: jsonb_comparison_exp
}

input authProviderRequests_delete_at_path_input {
  options: [String!]
}

input authProviderRequests_delete_elem_input {
  options: Int
}

input authProviderRequests_delete_key_input {
  options: String
}

input authProviderRequests_insert_input {
  id: uuid
  options: jsonb
}

input authProviderRequests_on_conflict {
  constraint: authProviderRequests_constraint!
  update_columns: [authProviderRequests_update_column!]! = []
  where: authProviderRequests_bool_exp
}

input authProviderRequests_order_by {
  id: order_by
  options: order_by
}

input authProviderRequests_pk_columns_input {
  id: uuid!
}

input authProviderRequests_prepend_input {
  options: jsonb
}

input authProviderRequests_set_input {
  id: uuid
  options: jsonb
}

input authProviderRequests_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: authProviderRequests_append_input
  """delete the field or element with specified path (for JSON arrays, negative integers count from the end)"""
  _delete_at_path: authProviderRequests_delete_at_path_input
  """delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"""
  _delete_elem: authProviderRequests_delete_elem_input
  """delete key/value pair or string element. key/value pairs are matched based on their key value"""
  _delete_key: authProviderRequests_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: authProviderRequests_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: authProviderRequests_set_input
  """filter the rows which have to be updated"""
  where: authProviderRequests_bool_exp!
}

input authProviders_bool_exp {
  _and: [authProviders_bool_exp!]
  _not: authProviders_bool_exp
  _or: [authProviders_bool_exp!]
  id: String_comparison_exp
  userProviders: authUserProviders_bool_exp
  userProviders_aggregate: authUserProviders_aggregate_bool_exp
}

input authProviders_insert_input {
  id: String
  userProviders: authUserProviders_arr_rel_insert_input
}

input authProviders_obj_rel_insert_input {
  data: authProviders_insert_input!
  """upsert condition"""
  on_conflict: authProviders_on_conflict
}

input authProviders_on_conflict {
  constraint: authProviders_constraint!
  update_columns: [authProviders_update_column!]! = []
  where: authProviders_bool_exp
}

input authProviders_order_by {
  id: order_by
  userProviders_aggregate: authUserProviders_aggregate_order_by
}

input authProviders_pk_columns_input {
  id: String!
}

input authProviders_set_input {
  id: String
}

input authProviders_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authProviders_set_input
  """filter the rows which have to be updated"""
  where: authProviders_bool_exp!
}

input authRefreshTokenTypes_bool_exp {
  _and: [authRefreshTokenTypes_bool_exp!]
  _not: authRefreshTokenTypes_bool_exp
  _or: [authRefreshTokenTypes_bool_exp!]
  comment: String_comparison_exp
  refreshTokens: authRefreshTokens_bool_exp
  refreshTokens_aggregate: authRefreshTokens_aggregate_bool_exp
  value: String_comparison_exp
}

input authRefreshTokenTypes_enum_comparison_exp {
  _eq: authRefreshTokenTypes_enum
  _in: [authRefreshTokenTypes_enum!]
  _is_null: Boolean
  _neq: authRefreshTokenTypes_enum
  _nin: [authRefreshTokenTypes_enum!]
}

input authRefreshTokenTypes_insert_input {
  comment: String
  refreshTokens: authRefreshTokens_arr_rel_insert_input
  value: String
}

input authRefreshTokenTypes_on_conflict {
  constraint: authRefreshTokenTypes_constraint!
  update_columns: [authRefreshTokenTypes_update_column!]! = []
  where: authRefreshTokenTypes_bool_exp
}

input authRefreshTokenTypes_order_by {
  comment: order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
  value: order_by
}

input authRefreshTokenTypes_pk_columns_input {
  value: String!
}

input authRefreshTokenTypes_set_input {
  comment: String
  value: String
}

input authRefreshTokenTypes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authRefreshTokenTypes_set_input
  """filter the rows which have to be updated"""
  where: authRefreshTokenTypes_bool_exp!
}

input authRefreshTokens_aggregate_bool_exp {
  count: authRefreshTokens_aggregate_bool_exp_count
}

input authRefreshTokens_aggregate_bool_exp_count {
  arguments: [authRefreshTokens_select_column!]
  distinct: Boolean
  filter: authRefreshTokens_bool_exp
  predicate: Int_comparison_exp!
}

input authRefreshTokens_aggregate_order_by {
  count: order_by
  max: authRefreshTokens_max_order_by
  min: authRefreshTokens_min_order_by
}

input authRefreshTokens_append_input {
  metadata: jsonb
}

input authRefreshTokens_arr_rel_insert_input {
  data: [authRefreshTokens_insert_input!]!
  """upsert condition"""
  on_conflict: authRefreshTokens_on_conflict
}

input authRefreshTokens_bool_exp {
  _and: [authRefreshTokens_bool_exp!]
  _not: authRefreshTokens_bool_exp
  _or: [authRefreshTokens_bool_exp!]
  createdAt: timestamptz_comparison_exp
  expiresAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  refreshTokenHash: String_comparison_exp
  type: authRefreshTokenTypes_enum_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

input authRefreshTokens_delete_at_path_input {
  metadata: [String!]
}

input authRefreshTokens_delete_elem_input {
  metadata: Int
}

input authRefreshTokens_delete_key_input {
  metadata: String
}

input authRefreshTokens_insert_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  user: users_obj_rel_insert_input
  userId: uuid
}

input authRefreshTokens_max_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  refreshTokenHash: order_by
  userId: order_by
}

input authRefreshTokens_min_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  refreshTokenHash: order_by
  userId: order_by
}

input authRefreshTokens_on_conflict {
  constraint: authRefreshTokens_constraint!
  update_columns: [authRefreshTokens_update_column!]! = []
  where: authRefreshTokens_bool_exp
}

input authRefreshTokens_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  metadata: order_by
  refreshTokenHash: order_by
  type: order_by
  user: users_order_by
  userId: order_by
}

input authRefreshTokens_pk_columns_input {
  id: uuid!
}

input authRefreshTokens_prepend_input {
  metadata: jsonb
}

input authRefreshTokens_set_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  userId: uuid
}

input authRefreshTokens_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: authRefreshTokens_append_input
  """delete the field or element with specified path (for JSON arrays, negative integers count from the end)"""
  _delete_at_path: authRefreshTokens_delete_at_path_input
  """delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"""
  _delete_elem: authRefreshTokens_delete_elem_input
  """delete key/value pair or string element. key/value pairs are matched based on their key value"""
  _delete_key: authRefreshTokens_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: authRefreshTokens_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: authRefreshTokens_set_input
  """filter the rows which have to be updated"""
  where: authRefreshTokens_bool_exp!
}

input authRoles_bool_exp {
  _and: [authRoles_bool_exp!]
  _not: authRoles_bool_exp
  _or: [authRoles_bool_exp!]
  role: String_comparison_exp
  userRoles: authUserRoles_bool_exp
  userRoles_aggregate: authUserRoles_aggregate_bool_exp
  usersByDefaultRole: users_bool_exp
  usersByDefaultRole_aggregate: users_aggregate_bool_exp
}

input authRoles_insert_input {
  role: String
  userRoles: authUserRoles_arr_rel_insert_input
  usersByDefaultRole: users_arr_rel_insert_input
}

input authRoles_obj_rel_insert_input {
  data: authRoles_insert_input!
  """upsert condition"""
  on_conflict: authRoles_on_conflict
}

input authRoles_on_conflict {
  constraint: authRoles_constraint!
  update_columns: [authRoles_update_column!]! = []
  where: authRoles_bool_exp
}

input authRoles_order_by {
  role: order_by
  userRoles_aggregate: authUserRoles_aggregate_order_by
  usersByDefaultRole_aggregate: users_aggregate_order_by
}

input authRoles_pk_columns_input {
  role: String!
}

input authRoles_set_input {
  role: String
}

input authRoles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authRoles_set_input
  """filter the rows which have to be updated"""
  where: authRoles_bool_exp!
}

input authUserProviders_aggregate_bool_exp {
  count: authUserProviders_aggregate_bool_exp_count
}

input authUserProviders_aggregate_bool_exp_count {
  arguments: [authUserProviders_select_column!]
  distinct: Boolean
  filter: authUserProviders_bool_exp
  predicate: Int_comparison_exp!
}

input authUserProviders_aggregate_order_by {
  count: order_by
  max: authUserProviders_max_order_by
  min: authUserProviders_min_order_by
}

input authUserProviders_arr_rel_insert_input {
  data: [authUserProviders_insert_input!]!
  """upsert condition"""
  on_conflict: authUserProviders_on_conflict
}

input authUserProviders_bool_exp {
  _and: [authUserProviders_bool_exp!]
  _not: authUserProviders_bool_exp
  _or: [authUserProviders_bool_exp!]
  accessToken: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  provider: authProviders_bool_exp
  providerId: String_comparison_exp
  providerUserId: String_comparison_exp
  refreshToken: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

input authUserProviders_insert_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  provider: authProviders_obj_rel_insert_input
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userId: uuid
}

input authUserProviders_max_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  userId: order_by
}

input authUserProviders_min_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  userId: order_by
}

input authUserProviders_on_conflict {
  constraint: authUserProviders_constraint!
  update_columns: [authUserProviders_update_column!]! = []
  where: authUserProviders_bool_exp
}

input authUserProviders_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  provider: authProviders_order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
}

input authUserProviders_pk_columns_input {
  id: uuid!
}

input authUserProviders_set_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

input authUserProviders_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authUserProviders_set_input
  """filter the rows which have to be updated"""
  where: authUserProviders_bool_exp!
}

input authUserRoles_aggregate_bool_exp {
  count: authUserRoles_aggregate_bool_exp_count
}

input authUserRoles_aggregate_bool_exp_count {
  arguments: [authUserRoles_select_column!]
  distinct: Boolean
  filter: authUserRoles_bool_exp
  predicate: Int_comparison_exp!
}

input authUserRoles_aggregate_order_by {
  count: order_by
  max: authUserRoles_max_order_by
  min: authUserRoles_min_order_by
}

input authUserRoles_arr_rel_insert_input {
  data: [authUserRoles_insert_input!]!
  """upsert condition"""
  on_conflict: authUserRoles_on_conflict
}

input authUserRoles_bool_exp {
  _and: [authUserRoles_bool_exp!]
  _not: authUserRoles_bool_exp
  _or: [authUserRoles_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  role: String_comparison_exp
  roleByRole: authRoles_bool_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

input authUserRoles_insert_input {
  createdAt: timestamptz
  id: uuid
  role: String
  roleByRole: authRoles_obj_rel_insert_input
  user: users_obj_rel_insert_input
  userId: uuid
}

input authUserRoles_max_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

input authUserRoles_min_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

input authUserRoles_on_conflict {
  constraint: authUserRoles_constraint!
  update_columns: [authUserRoles_update_column!]! = []
  where: authUserRoles_bool_exp
}

input authUserRoles_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  roleByRole: authRoles_order_by
  user: users_order_by
  userId: order_by
}

input authUserRoles_pk_columns_input {
  id: uuid!
}

input authUserRoles_set_input {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

input authUserRoles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authUserRoles_set_input
  """filter the rows which have to be updated"""
  where: authUserRoles_bool_exp!
}

input authUserSecurityKeys_aggregate_bool_exp {
  count: authUserSecurityKeys_aggregate_bool_exp_count
}

input authUserSecurityKeys_aggregate_bool_exp_count {
  arguments: [authUserSecurityKeys_select_column!]
  distinct: Boolean
  filter: authUserSecurityKeys_bool_exp
  predicate: Int_comparison_exp!
}

input authUserSecurityKeys_aggregate_order_by {
  avg: authUserSecurityKeys_avg_order_by
  count: order_by
  max: authUserSecurityKeys_max_order_by
  min: authUserSecurityKeys_min_order_by
  stddev: authUserSecurityKeys_stddev_order_by
  stddev_pop: authUserSecurityKeys_stddev_pop_order_by
  stddev_samp: authUserSecurityKeys_stddev_samp_order_by
  sum: authUserSecurityKeys_sum_order_by
  var_pop: authUserSecurityKeys_var_pop_order_by
  var_samp: authUserSecurityKeys_var_samp_order_by
  variance: authUserSecurityKeys_variance_order_by
}

input authUserSecurityKeys_arr_rel_insert_input {
  data: [authUserSecurityKeys_insert_input!]!
  """upsert condition"""
  on_conflict: authUserSecurityKeys_on_conflict
}

input authUserSecurityKeys_avg_order_by {
  counter: order_by
}

input authUserSecurityKeys_bool_exp {
  _and: [authUserSecurityKeys_bool_exp!]
  _not: authUserSecurityKeys_bool_exp
  _or: [authUserSecurityKeys_bool_exp!]
  counter: bigint_comparison_exp
  credentialId: String_comparison_exp
  credentialPublicKey: bytea_comparison_exp
  id: uuid_comparison_exp
  nickname: String_comparison_exp
  transports: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

input authUserSecurityKeys_inc_input {
  counter: bigint
}

input authUserSecurityKeys_insert_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  user: users_obj_rel_insert_input
  userId: uuid
}

input authUserSecurityKeys_max_order_by {
  counter: order_by
  credentialId: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  userId: order_by
}

input authUserSecurityKeys_min_order_by {
  counter: order_by
  credentialId: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  userId: order_by
}

input authUserSecurityKeys_on_conflict {
  constraint: authUserSecurityKeys_constraint!
  update_columns: [authUserSecurityKeys_update_column!]! = []
  where: authUserSecurityKeys_bool_exp
}

input authUserSecurityKeys_order_by {
  counter: order_by
  credentialId: order_by
  credentialPublicKey: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  user: users_order_by
  userId: order_by
}

input authUserSecurityKeys_pk_columns_input {
  id: uuid!
}

input authUserSecurityKeys_set_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

input authUserSecurityKeys_stddev_order_by {
  counter: order_by
}

input authUserSecurityKeys_stddev_pop_order_by {
  counter: order_by
}

input authUserSecurityKeys_stddev_samp_order_by {
  counter: order_by
}

input authUserSecurityKeys_sum_order_by {
  counter: order_by
}

input authUserSecurityKeys_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: authUserSecurityKeys_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: authUserSecurityKeys_set_input
  """filter the rows which have to be updated"""
  where: authUserSecurityKeys_bool_exp!
}

input authUserSecurityKeys_var_pop_order_by {
  counter: order_by
}

input authUserSecurityKeys_var_samp_order_by {
  counter: order_by
}

input authUserSecurityKeys_variance_order_by {
  counter: order_by
}

input auth_migrations_bool_exp {
  _and: [auth_migrations_bool_exp!]
  _not: auth_migrations_bool_exp
  _or: [auth_migrations_bool_exp!]
  executed_at: timestamp_comparison_exp
  hash: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

input auth_migrations_inc_input {
  id: Int
}

input auth_migrations_insert_input {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

input auth_migrations_on_conflict {
  constraint: auth_migrations_constraint!
  update_columns: [auth_migrations_update_column!]! = []
  where: auth_migrations_bool_exp
}

input auth_migrations_order_by {
  executed_at: order_by
  hash: order_by
  id: order_by
  name: order_by
}

input auth_migrations_pk_columns_input {
  id: Int!
}

input auth_migrations_set_input {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

input auth_migrations_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: auth_migrations_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: auth_migrations_set_input
  """filter the rows which have to be updated"""
  where: auth_migrations_bool_exp!
}

input backups_aggregate_bool_exp {
  count: backups_aggregate_bool_exp_count
}

input backups_aggregate_bool_exp_count {
  arguments: [backups_select_column!]
  distinct: Boolean
  filter: backups_bool_exp
  predicate: Int_comparison_exp!
}

input backups_aggregate_order_by {
  avg: backups_avg_order_by
  count: order_by
  max: backups_max_order_by
  min: backups_min_order_by
  stddev: backups_stddev_order_by
  stddev_pop: backups_stddev_pop_order_by
  stddev_samp: backups_stddev_samp_order_by
  sum: backups_sum_order_by
  var_pop: backups_var_pop_order_by
  var_samp: backups_var_samp_order_by
  variance: backups_variance_order_by
}

input backups_arr_rel_insert_input {
  data: [backups_insert_input!]!
  """upsert condition"""
  on_conflict: backups_on_conflict
}

input backups_avg_order_by {
  size: order_by
}

input backups_bool_exp {
  _and: [backups_bool_exp!]
  _not: backups_bool_exp
  _or: [backups_bool_exp!]
  app: apps_bool_exp
  appId: uuid_comparison_exp
  completedAt: timestamptz_comparison_exp
  createdAt: timestamptz_comparison_exp
  expiresAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  size: bigint_comparison_exp
}

input backups_inc_input {
  size: bigint
}

input backups_insert_input {
  app: apps_obj_rel_insert_input
  appId: uuid
  completedAt: timestamptz
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  size: bigint
}

input backups_max_order_by {
  appId: order_by
  completedAt: order_by
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  size: order_by
}

input backups_min_order_by {
  appId: order_by
  completedAt: order_by
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  size: order_by
}

input backups_on_conflict {
  constraint: backups_constraint!
  update_columns: [backups_update_column!]! = []
  where: backups_bool_exp
}

input backups_order_by {
  app: apps_order_by
  appId: order_by
  completedAt: order_by
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  size: order_by
}

input backups_pk_columns_input {
  id: uuid!
}

input backups_set_input {
  appId: uuid
  completedAt: timestamptz
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  size: bigint
}

input backups_stddev_order_by {
  size: order_by
}

input backups_stddev_pop_order_by {
  size: order_by
}

input backups_stddev_samp_order_by {
  size: order_by
}

input backups_sum_order_by {
  size: order_by
}

input backups_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: backups_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: backups_set_input
  """filter the rows which have to be updated"""
  where: backups_bool_exp!
}

input backups_var_pop_order_by {
  size: order_by
}

input backups_var_samp_order_by {
  size: order_by
}

input backups_variance_order_by {
  size: order_by
}

input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

input billing_dedicated_compute_bool_exp {
  _and: [billing_dedicated_compute_bool_exp!]
  _not: billing_dedicated_compute_bool_exp
  _or: [billing_dedicated_compute_bool_exp!]
  app: apps_bool_exp
  appID: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  organizationID: uuid_comparison_exp
  totalMillicores: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input billing_dedicated_compute_inc_input {
  totalMillicores: Int
}

input billing_dedicated_compute_insert_input {
  app: apps_obj_rel_insert_input
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  totalMillicores: Int
  updatedAt: timestamptz
}

input billing_dedicated_compute_obj_rel_insert_input {
  data: billing_dedicated_compute_insert_input!
  """upsert condition"""
  on_conflict: billing_dedicated_compute_on_conflict
}

input billing_dedicated_compute_on_conflict {
  constraint: billing_dedicated_compute_constraint!
  update_columns: [billing_dedicated_compute_update_column!]! = []
  where: billing_dedicated_compute_bool_exp
}

input billing_dedicated_compute_order_by {
  app: apps_order_by
  appID: order_by
  createdAt: order_by
  id: order_by
  organizationID: order_by
  totalMillicores: order_by
  updatedAt: order_by
}

input billing_dedicated_compute_pk_columns_input {
  id: uuid!
}

input billing_dedicated_compute_set_input {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  totalMillicores: Int
  updatedAt: timestamptz
}

input billing_dedicated_compute_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: billing_dedicated_compute_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: billing_dedicated_compute_set_input
  """filter the rows which have to be updated"""
  where: billing_dedicated_compute_bool_exp!
}

input billing_report_resource_type_bool_exp {
  _and: [billing_report_resource_type_bool_exp!]
  _not: billing_report_resource_type_bool_exp
  _or: [billing_report_resource_type_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

input billing_report_resource_type_enum_comparison_exp {
  _eq: billing_report_resource_type_enum
  _in: [billing_report_resource_type_enum!]
  _is_null: Boolean
  _neq: billing_report_resource_type_enum
  _nin: [billing_report_resource_type_enum!]
}

input billing_report_resource_type_insert_input {
  comment: String
  value: String
}

input billing_report_resource_type_on_conflict {
  constraint: billing_report_resource_type_constraint!
  update_columns: [billing_report_resource_type_update_column!]! = []
  where: billing_report_resource_type_bool_exp
}

input billing_report_resource_type_order_by {
  comment: order_by
  value: order_by
}

input billing_report_resource_type_pk_columns_input {
  value: String!
}

input billing_report_resource_type_set_input {
  comment: String
  value: String
}

input billing_report_resource_type_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: billing_report_resource_type_set_input
  """filter the rows which have to be updated"""
  where: billing_report_resource_type_bool_exp!
}

input billing_report_type_bool_exp {
  _and: [billing_report_type_bool_exp!]
  _not: billing_report_type_bool_exp
  _or: [billing_report_type_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

input billing_report_type_enum_comparison_exp {
  _eq: billing_report_type_enum
  _in: [billing_report_type_enum!]
  _is_null: Boolean
  _neq: billing_report_type_enum
  _nin: [billing_report_type_enum!]
}

input billing_report_type_insert_input {
  comment: String
  value: String
}

input billing_report_type_on_conflict {
  constraint: billing_report_type_constraint!
  update_columns: [billing_report_type_update_column!]! = []
  where: billing_report_type_bool_exp
}

input billing_report_type_order_by {
  comment: order_by
  value: order_by
}

input billing_report_type_pk_columns_input {
  value: String!
}

input billing_report_type_set_input {
  comment: String
  value: String
}

input billing_report_type_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: billing_report_type_set_input
  """filter the rows which have to be updated"""
  where: billing_report_type_bool_exp!
}

input billing_reports_aggregate_bool_exp {
  bool_and: billing_reports_aggregate_bool_exp_bool_and
  bool_or: billing_reports_aggregate_bool_exp_bool_or
  count: billing_reports_aggregate_bool_exp_count
}

input billing_reports_aggregate_bool_exp_bool_and {
  arguments: billing_reports_select_column_billing_reports_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: billing_reports_bool_exp
  predicate: Boolean_comparison_exp!
}

input billing_reports_aggregate_bool_exp_bool_or {
  arguments: billing_reports_select_column_billing_reports_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: billing_reports_bool_exp
  predicate: Boolean_comparison_exp!
}

input billing_reports_aggregate_bool_exp_count {
  arguments: [billing_reports_select_column!]
  distinct: Boolean
  filter: billing_reports_bool_exp
  predicate: Int_comparison_exp!
}

input billing_reports_aggregate_order_by {
  avg: billing_reports_avg_order_by
  count: order_by
  max: billing_reports_max_order_by
  min: billing_reports_min_order_by
  stddev: billing_reports_stddev_order_by
  stddev_pop: billing_reports_stddev_pop_order_by
  stddev_samp: billing_reports_stddev_samp_order_by
  sum: billing_reports_sum_order_by
  var_pop: billing_reports_var_pop_order_by
  var_samp: billing_reports_var_samp_order_by
  variance: billing_reports_variance_order_by
}

input billing_reports_arr_rel_insert_input {
  data: [billing_reports_insert_input!]!
  """upsert condition"""
  on_conflict: billing_reports_on_conflict
}

input billing_reports_avg_order_by {
  value: order_by
}

input billing_reports_bool_exp {
  _and: [billing_reports_bool_exp!]
  _not: billing_reports_bool_exp
  _or: [billing_reports_bool_exp!]
  appID: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  organizationID: uuid_comparison_exp
  pending: Boolean_comparison_exp
  reportEnds: timestamptz_comparison_exp
  reportStarts: timestamptz_comparison_exp
  stripeSubscriptionID: String_comparison_exp
  type: billing_report_type_enum_comparison_exp
  updatedAt: timestamptz_comparison_exp
  value: Int_comparison_exp
}

input billing_reports_inc_input {
  value: Int
}

input billing_reports_insert_input {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  pending: Boolean
  reportEnds: timestamptz
  reportStarts: timestamptz
  stripeSubscriptionID: String
  type: billing_report_type_enum
  updatedAt: timestamptz
  value: Int
}

input billing_reports_max_order_by {
  appID: order_by
  createdAt: order_by
  id: order_by
  organizationID: order_by
  reportEnds: order_by
  reportStarts: order_by
  stripeSubscriptionID: order_by
  updatedAt: order_by
  value: order_by
}

input billing_reports_min_order_by {
  appID: order_by
  createdAt: order_by
  id: order_by
  organizationID: order_by
  reportEnds: order_by
  reportStarts: order_by
  stripeSubscriptionID: order_by
  updatedAt: order_by
  value: order_by
}

input billing_reports_on_conflict {
  constraint: billing_reports_constraint!
  update_columns: [billing_reports_update_column!]! = []
  where: billing_reports_bool_exp
}

input billing_reports_order_by {
  appID: order_by
  createdAt: order_by
  id: order_by
  organizationID: order_by
  pending: order_by
  reportEnds: order_by
  reportStarts: order_by
  stripeSubscriptionID: order_by
  type: order_by
  updatedAt: order_by
  value: order_by
}

input billing_reports_pk_columns_input {
  id: uuid!
}

input billing_reports_resources_bool_exp {
  _and: [billing_reports_resources_bool_exp!]
  _not: billing_reports_resources_bool_exp
  _or: [billing_reports_resources_bool_exp!]
  app_ids: uuid_array_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  organization_id: uuid_comparison_exp
  pending: Boolean_comparison_exp
  report_ends: timestamptz_comparison_exp
  report_starts: timestamptz_comparison_exp
  stripeSubscriptionID: String_comparison_exp
  type: billing_report_resource_type_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: Int_comparison_exp
}

input billing_reports_resources_inc_input {
  value: Int
}

input billing_reports_resources_insert_input {
  app_ids: [uuid!]
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  pending: Boolean
  report_ends: timestamptz
  report_starts: timestamptz
  stripeSubscriptionID: String
  type: billing_report_resource_type_enum
  updated_at: timestamptz
  value: Int
}

input billing_reports_resources_on_conflict {
  constraint: billing_reports_resources_constraint!
  update_columns: [billing_reports_resources_update_column!]! = []
  where: billing_reports_resources_bool_exp
}

input billing_reports_resources_order_by {
  app_ids: order_by
  created_at: order_by
  id: order_by
  organization_id: order_by
  pending: order_by
  report_ends: order_by
  report_starts: order_by
  stripeSubscriptionID: order_by
  type: order_by
  updated_at: order_by
  value: order_by
}

input billing_reports_resources_pk_columns_input {
  id: uuid!
}

input billing_reports_resources_set_input {
  app_ids: [uuid!]
  created_at: timestamptz
  id: uuid
  organization_id: uuid
  pending: Boolean
  report_ends: timestamptz
  report_starts: timestamptz
  stripeSubscriptionID: String
  type: billing_report_resource_type_enum
  updated_at: timestamptz
  value: Int
}

input billing_reports_resources_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: billing_reports_resources_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: billing_reports_resources_set_input
  """filter the rows which have to be updated"""
  where: billing_reports_resources_bool_exp!
}

input billing_reports_set_input {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  organizationID: uuid
  pending: Boolean
  reportEnds: timestamptz
  reportStarts: timestamptz
  stripeSubscriptionID: String
  type: billing_report_type_enum
  updatedAt: timestamptz
  value: Int
}

input billing_reports_stddev_order_by {
  value: order_by
}

input billing_reports_stddev_pop_order_by {
  value: order_by
}

input billing_reports_stddev_samp_order_by {
  value: order_by
}

input billing_reports_sum_order_by {
  value: order_by
}

input billing_reports_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: billing_reports_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: billing_reports_set_input
  """filter the rows which have to be updated"""
  where: billing_reports_bool_exp!
}

input billing_reports_var_pop_order_by {
  value: order_by
}

input billing_reports_var_samp_order_by {
  value: order_by
}

input billing_reports_variance_order_by {
  value: order_by
}

input billing_resources_bool_exp {
  _and: [billing_resources_bool_exp!]
  _not: billing_resources_bool_exp
  _or: [billing_resources_bool_exp!]
  appID: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  customDomains: Int_comparison_exp
  functionsAmount: Int_comparison_exp
  id: uuid_comparison_exp
  organizationID: uuid_comparison_exp
  persistentVolume: Int_comparison_exp
  pitr: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input billing_resources_inc_input {
  customDomains: Int
  functionsAmount: Int
  persistentVolume: Int
  pitr: Int
}

input billing_resources_insert_input {
  appID: uuid
  createdAt: timestamptz
  customDomains: Int
  functionsAmount: Int
  id: uuid
  organizationID: uuid
  persistentVolume: Int
  pitr: Int
  updatedAt: timestamptz
}

input billing_resources_obj_rel_insert_input {
  data: billing_resources_insert_input!
  """upsert condition"""
  on_conflict: billing_resources_on_conflict
}

input billing_resources_on_conflict {
  constraint: billing_resources_constraint!
  update_columns: [billing_resources_update_column!]! = []
  where: billing_resources_bool_exp
}

input billing_resources_order_by {
  appID: order_by
  createdAt: order_by
  customDomains: order_by
  functionsAmount: order_by
  id: order_by
  organizationID: order_by
  persistentVolume: order_by
  pitr: order_by
  updatedAt: order_by
}

input billing_resources_pk_columns_input {
  id: uuid!
}

input billing_resources_set_input {
  appID: uuid
  createdAt: timestamptz
  customDomains: Int
  functionsAmount: Int
  id: uuid
  organizationID: uuid
  persistentVolume: Int
  pitr: Int
  updatedAt: timestamptz
}

input billing_resources_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: billing_resources_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: billing_resources_set_input
  """filter the rows which have to be updated"""
  where: billing_resources_bool_exp!
}

input billing_subscription_items_bool_exp {
  _and: [billing_subscription_items_bool_exp!]
  _not: billing_subscription_items_bool_exp
  _or: [billing_subscription_items_bool_exp!]
  created_at: timestamptz_comparison_exp
  custom_domains: String_comparison_exp
  dedicated_compute: String_comparison_exp
  egress: String_comparison_exp
  functions_amount: String_comparison_exp
  functions_usage_seconds: String_comparison_exp
  id: uuid_comparison_exp
  persistent_volume: String_comparison_exp
  pitr: String_comparison_exp
  subscription: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

input billing_subscription_items_insert_input {
  created_at: timestamptz
  custom_domains: String
  dedicated_compute: String
  egress: String
  functions_amount: String
  functions_usage_seconds: String
  id: uuid
  persistent_volume: String
  pitr: String
  subscription: String
  updated_at: timestamptz
}

input billing_subscription_items_on_conflict {
  constraint: billing_subscription_items_constraint!
  update_columns: [billing_subscription_items_update_column!]! = []
  where: billing_subscription_items_bool_exp
}

input billing_subscription_items_order_by {
  created_at: order_by
  custom_domains: order_by
  dedicated_compute: order_by
  egress: order_by
  functions_amount: order_by
  functions_usage_seconds: order_by
  id: order_by
  persistent_volume: order_by
  pitr: order_by
  subscription: order_by
  updated_at: order_by
}

input billing_subscription_items_pk_columns_input {
  id: uuid!
}

input billing_subscription_items_set_input {
  created_at: timestamptz
  custom_domains: String
  dedicated_compute: String
  egress: String
  functions_amount: String
  functions_usage_seconds: String
  id: uuid
  persistent_volume: String
  pitr: String
  subscription: String
  updated_at: timestamptz
}

input billing_subscription_items_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: billing_subscription_items_set_input
  """filter the rows which have to be updated"""
  where: billing_subscription_items_bool_exp!
}

input billing_subscriptions_bool_exp {
  _and: [billing_subscriptions_bool_exp!]
  _not: billing_subscriptions_bool_exp
  _or: [billing_subscriptions_bool_exp!]
  app: apps_bool_exp
  appID: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  customDomains: String_comparison_exp
  dedicatedCompute: String_comparison_exp
  egress: String_comparison_exp
  functions: String_comparison_exp
  functionsAmount: String_comparison_exp
  id: uuid_comparison_exp
  persistentVolume: String_comparison_exp
  reports: billing_reports_bool_exp
  reports_aggregate: billing_reports_aggregate_bool_exp
  resources: billing_resources_bool_exp
  updatedAt: timestamptz_comparison_exp
}

input billing_subscriptions_insert_input {
  app: apps_obj_rel_insert_input
  appID: uuid
  createdAt: timestamptz
  customDomains: String
  dedicatedCompute: String
  egress: String
  functions: String
  functionsAmount: String
  id: uuid
  persistentVolume: String
  reports: billing_reports_arr_rel_insert_input
  resources: billing_resources_obj_rel_insert_input
  updatedAt: timestamptz
}

input billing_subscriptions_obj_rel_insert_input {
  data: billing_subscriptions_insert_input!
  """upsert condition"""
  on_conflict: billing_subscriptions_on_conflict
}

input billing_subscriptions_on_conflict {
  constraint: billing_subscriptions_constraint!
  update_columns: [billing_subscriptions_update_column!]! = []
  where: billing_subscriptions_bool_exp
}

input billing_subscriptions_order_by {
  app: apps_order_by
  appID: order_by
  createdAt: order_by
  customDomains: order_by
  dedicatedCompute: order_by
  egress: order_by
  functions: order_by
  functionsAmount: order_by
  id: order_by
  persistentVolume: order_by
  reports_aggregate: billing_reports_aggregate_order_by
  resources: billing_resources_order_by
  updatedAt: order_by
}

input billing_subscriptions_pk_columns_input {
  id: uuid!
}

input billing_subscriptions_set_input {
  appID: uuid
  createdAt: timestamptz
  customDomains: String
  dedicatedCompute: String
  egress: String
  functions: String
  functionsAmount: String
  id: uuid
  persistentVolume: String
  updatedAt: timestamptz
}

input billing_subscriptions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: billing_subscriptions_set_input
  """filter the rows which have to be updated"""
  where: billing_subscriptions_bool_exp!
}

input bpchar_comparison_exp {
  _eq: bpchar
  _gt: bpchar
  _gte: bpchar
  """does the column match the given case-insensitive pattern"""
  _ilike: bpchar
  _in: [bpchar!]
  """does the column match the given POSIX regular expression, case insensitive"""
  _iregex: bpchar
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: bpchar
  _lt: bpchar
  _lte: bpchar
  _neq: bpchar
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: bpchar
  _nin: [bpchar!]
  """does the column NOT match the given POSIX regular expression, case insensitive"""
  _niregex: bpchar
  """does the column NOT match the given pattern"""
  _nlike: bpchar
  """does the column NOT match the given POSIX regular expression, case sensitive"""
  _nregex: bpchar
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: bpchar
  """does the column match the given POSIX regular expression, case sensitive"""
  _regex: bpchar
  """does the column match the given SQL regular expression"""
  _similar: bpchar
}

input buckets_bool_exp {
  _and: [buckets_bool_exp!]
  _not: buckets_bool_exp
  _or: [buckets_bool_exp!]
  cacheControl: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  downloadExpiration: Int_comparison_exp
  files: files_bool_exp
  files_aggregate: files_aggregate_bool_exp
  id: String_comparison_exp
  maxUploadFileSize: Int_comparison_exp
  minUploadFileSize: Int_comparison_exp
  presignedUrlsEnabled: Boolean_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input buckets_inc_input {
  downloadExpiration: Int
  maxUploadFileSize: Int
  minUploadFileSize: Int
}

input buckets_insert_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  files: files_arr_rel_insert_input
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

input buckets_obj_rel_insert_input {
  data: buckets_insert_input!
  """upsert condition"""
  on_conflict: buckets_on_conflict
}

input buckets_on_conflict {
  constraint: buckets_constraint!
  update_columns: [buckets_update_column!]! = []
  where: buckets_bool_exp
}

input buckets_order_by {
  cacheControl: order_by
  createdAt: order_by
  downloadExpiration: order_by
  files_aggregate: files_aggregate_order_by
  id: order_by
  maxUploadFileSize: order_by
  minUploadFileSize: order_by
  presignedUrlsEnabled: order_by
  updatedAt: order_by
}

input buckets_pk_columns_input {
  id: String!
}

input buckets_set_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

input buckets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: buckets_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: buckets_set_input
  """filter the rows which have to be updated"""
  where: buckets_bool_exp!
}

input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext
  """does the column match the given case-insensitive pattern"""
  _ilike: citext
  _in: [citext!]
  """does the column match the given POSIX regular expression, case insensitive"""
  _iregex: citext
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: citext
  _nin: [citext!]
  """does the column NOT match the given POSIX regular expression, case insensitive"""
  _niregex: citext
  """does the column NOT match the given pattern"""
  _nlike: citext
  """does the column NOT match the given POSIX regular expression, case sensitive"""
  _nregex: citext
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: citext
  """does the column match the given POSIX regular expression, case sensitive"""
  _regex: citext
  """does the column match the given SQL regular expression"""
  _similar: citext
}

input cliTokens_aggregate_bool_exp {
  count: cliTokens_aggregate_bool_exp_count
}

input cliTokens_aggregate_bool_exp_count {
  arguments: [cliTokens_select_column!]
  distinct: Boolean
  filter: cliTokens_bool_exp
  predicate: Int_comparison_exp!
}

input cliTokens_aggregate_order_by {
  count: order_by
  max: cliTokens_max_order_by
  min: cliTokens_min_order_by
}

input cliTokens_arr_rel_insert_input {
  data: [cliTokens_insert_input!]!
  """upsert condition"""
  on_conflict: cliTokens_on_conflict
}

input cliTokens_bool_exp {
  _and: [cliTokens_bool_exp!]
  _not: cliTokens_bool_exp
  _or: [cliTokens_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  token: uuid_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

input cliTokens_insert_input {
  createdAt: timestamptz
  id: uuid
  token: uuid
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userId: uuid
}

input cliTokens_max_order_by {
  createdAt: order_by
  id: order_by
  token: order_by
  updatedAt: order_by
  userId: order_by
}

input cliTokens_min_order_by {
  createdAt: order_by
  id: order_by
  token: order_by
  updatedAt: order_by
  userId: order_by
}

input cliTokens_on_conflict {
  constraint: cliTokens_constraint!
  update_columns: [cliTokens_update_column!]! = []
  where: cliTokens_bool_exp
}

input cliTokens_order_by {
  createdAt: order_by
  id: order_by
  token: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
}

input cliTokens_pk_columns_input {
  id: uuid!
}

input cliTokens_set_input {
  createdAt: timestamptz
  id: uuid
  token: uuid
  updatedAt: timestamptz
  userId: uuid
}

input cliTokens_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: cliTokens_set_input
  """filter the rows which have to be updated"""
  where: cliTokens_bool_exp!
}

input continents_bool_exp {
  _and: [continents_bool_exp!]
  _not: continents_bool_exp
  _or: [continents_bool_exp!]
  code: bpchar_comparison_exp
  countries: countries_bool_exp
  countries_aggregate: countries_aggregate_bool_exp
  name: String_comparison_exp
}

input continents_insert_input {
  """Continent code"""
  code: bpchar
  countries: countries_arr_rel_insert_input
  """Continent name"""
  name: String
}

input continents_obj_rel_insert_input {
  data: continents_insert_input!
  """upsert condition"""
  on_conflict: continents_on_conflict
}

input continents_on_conflict {
  constraint: continents_constraint!
  update_columns: [continents_update_column!]! = []
  where: continents_bool_exp
}

input continents_order_by {
  code: order_by
  countries_aggregate: countries_aggregate_order_by
  name: order_by
}

input continents_pk_columns_input {
  """Continent code"""
  code: bpchar!
}

input continents_set_input {
  """Continent code"""
  code: bpchar
  """Continent name"""
  name: String
}

input continents_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: continents_set_input
  """filter the rows which have to be updated"""
  where: continents_bool_exp!
}

input countries_aggregate_bool_exp {
  count: countries_aggregate_bool_exp_count
}

input countries_aggregate_bool_exp_count {
  arguments: [countries_select_column!]
  distinct: Boolean
  filter: countries_bool_exp
  predicate: Int_comparison_exp!
}

input countries_aggregate_order_by {
  avg: countries_avg_order_by
  count: order_by
  max: countries_max_order_by
  min: countries_min_order_by
  stddev: countries_stddev_order_by
  stddev_pop: countries_stddev_pop_order_by
  stddev_samp: countries_stddev_samp_order_by
  sum: countries_sum_order_by
  var_pop: countries_var_pop_order_by
  var_samp: countries_var_samp_order_by
  variance: countries_variance_order_by
}

input countries_arr_rel_insert_input {
  data: [countries_insert_input!]!
  """upsert condition"""
  on_conflict: countries_on_conflict
}

input countries_avg_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input countries_bool_exp {
  _and: [countries_bool_exp!]
  _not: countries_bool_exp
  _or: [countries_bool_exp!]
  code: bpchar_comparison_exp
  continent: continents_bool_exp
  continentCode: bpchar_comparison_exp
  emojiFlag: String_comparison_exp
  fullName: String_comparison_exp
  iso3: bpchar_comparison_exp
  isoNumber: smallint_comparison_exp
  locations: regions_bool_exp
  locations_aggregate: regions_aggregate_bool_exp
  name: String_comparison_exp
  workspaces: workspaces_bool_exp
  workspaces_aggregate: workspaces_aggregate_bool_exp
}

input countries_inc_input {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: smallint
}

input countries_insert_input {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
  code: bpchar
  continent: continents_obj_rel_insert_input
  continentCode: bpchar
  emojiFlag: String
  """Full English country name"""
  fullName: String
  """Three-letter country code (ISO 3166-1 alpha-3)"""
  iso3: bpchar
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: smallint
  locations: regions_arr_rel_insert_input
  """English country name"""
  name: String
  workspaces: workspaces_arr_rel_insert_input
}

input countries_max_order_by {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
  code: order_by
  continentCode: order_by
  emojiFlag: order_by
  """Full English country name"""
  fullName: order_by
  """Three-letter country code (ISO 3166-1 alpha-3)"""
  iso3: order_by
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
  """English country name"""
  name: order_by
}

input countries_min_order_by {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
  code: order_by
  continentCode: order_by
  emojiFlag: order_by
  """Full English country name"""
  fullName: order_by
  """Three-letter country code (ISO 3166-1 alpha-3)"""
  iso3: order_by
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
  """English country name"""
  name: order_by
}

input countries_obj_rel_insert_input {
  data: countries_insert_input!
  """upsert condition"""
  on_conflict: countries_on_conflict
}

input countries_on_conflict {
  constraint: countries_constraint!
  update_columns: [countries_update_column!]! = []
  where: countries_bool_exp
}

input countries_order_by {
  code: order_by
  continent: continents_order_by
  continentCode: order_by
  emojiFlag: order_by
  fullName: order_by
  iso3: order_by
  isoNumber: order_by
  locations_aggregate: regions_aggregate_order_by
  name: order_by
  workspaces_aggregate: workspaces_aggregate_order_by
}

input countries_pk_columns_input {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
  code: bpchar!
}

input countries_set_input {
  """Two-letter country code (ISO 3166-1 alpha-2)"""
  code: bpchar
  continentCode: bpchar
  emojiFlag: String
  """Full English country name"""
  fullName: String
  """Three-letter country code (ISO 3166-1 alpha-3)"""
  iso3: bpchar
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: smallint
  """English country name"""
  name: String
}

input countries_stddev_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input countries_stddev_pop_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input countries_stddev_samp_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input countries_sum_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input countries_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: countries_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: countries_set_input
  """filter the rows which have to be updated"""
  where: countries_bool_exp!
}

input countries_var_pop_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input countries_var_samp_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input countries_variance_order_by {
  """Three-letter country code (ISO 3166-1 numeric)"""
  isoNumber: order_by
}

input deploymentLogs_aggregate_bool_exp {
  count: deploymentLogs_aggregate_bool_exp_count
}

input deploymentLogs_aggregate_bool_exp_count {
  arguments: [deploymentLogs_select_column!]
  distinct: Boolean
  filter: deploymentLogs_bool_exp
  predicate: Int_comparison_exp!
}

input deploymentLogs_aggregate_order_by {
  count: order_by
  max: deploymentLogs_max_order_by
  min: deploymentLogs_min_order_by
}

input deploymentLogs_arr_rel_insert_input {
  data: [deploymentLogs_insert_input!]!
  """upsert condition"""
  on_conflict: deploymentLogs_on_conflict
}

input deploymentLogs_bool_exp {
  _and: [deploymentLogs_bool_exp!]
  _not: deploymentLogs_bool_exp
  _or: [deploymentLogs_bool_exp!]
  createdAt: timestamptz_comparison_exp
  deployment: deployments_bool_exp
  deploymentId: uuid_comparison_exp
  id: uuid_comparison_exp
  message: String_comparison_exp
}

input deploymentLogs_insert_input {
  createdAt: timestamptz
  deployment: deployments_obj_rel_insert_input
  deploymentId: uuid
  id: uuid
  message: String
}

input deploymentLogs_max_order_by {
  createdAt: order_by
  deploymentId: order_by
  id: order_by
  message: order_by
}

input deploymentLogs_min_order_by {
  createdAt: order_by
  deploymentId: order_by
  id: order_by
  message: order_by
}

input deploymentLogs_on_conflict {
  constraint: deploymentLogs_constraint!
  update_columns: [deploymentLogs_update_column!]! = []
  where: deploymentLogs_bool_exp
}

input deploymentLogs_order_by {
  createdAt: order_by
  deployment: deployments_order_by
  deploymentId: order_by
  id: order_by
  message: order_by
}

input deploymentLogs_pk_columns_input {
  id: uuid!
}

input deploymentLogs_set_input {
  createdAt: timestamptz
  deploymentId: uuid
  id: uuid
  message: String
}

input deploymentLogs_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: deploymentLogs_set_input
  """filter the rows which have to be updated"""
  where: deploymentLogs_bool_exp!
}

input deployments_aggregate_bool_exp {
  count: deployments_aggregate_bool_exp_count
}

input deployments_aggregate_bool_exp_count {
  arguments: [deployments_select_column!]
  distinct: Boolean
  filter: deployments_bool_exp
  predicate: Int_comparison_exp!
}

input deployments_aggregate_order_by {
  count: order_by
  max: deployments_max_order_by
  min: deployments_min_order_by
}

input deployments_arr_rel_insert_input {
  data: [deployments_insert_input!]!
  """upsert condition"""
  on_conflict: deployments_on_conflict
}

input deployments_bool_exp {
  _and: [deployments_bool_exp!]
  _not: deployments_bool_exp
  _or: [deployments_bool_exp!]
  app: apps_bool_exp
  appId: uuid_comparison_exp
  commitMessage: String_comparison_exp
  commitSHA: String_comparison_exp
  commitUserAvatarUrl: String_comparison_exp
  commitUserName: String_comparison_exp
  deploymentEndedAt: timestamptz_comparison_exp
  deploymentLogs: deploymentLogs_bool_exp
  deploymentLogs_aggregate: deploymentLogs_aggregate_bool_exp
  deploymentStartedAt: timestamptz_comparison_exp
  deploymentStatus: String_comparison_exp
  functionsEndedAt: timestamptz_comparison_exp
  functionsStartedAt: timestamptz_comparison_exp
  functionsStatus: String_comparison_exp
  id: uuid_comparison_exp
  metadataEndedAt: timestamptz_comparison_exp
  metadataStartedAt: timestamptz_comparison_exp
  metadataStatus: String_comparison_exp
  migrationsEndedAt: timestamptz_comparison_exp
  migrationsStartedAt: timestamptz_comparison_exp
  migrationsStatus: String_comparison_exp
}

input deployments_insert_input {
  app: apps_obj_rel_insert_input
  appId: uuid
  commitMessage: String
  commitSHA: String
  commitUserAvatarUrl: String
  commitUserName: String
  deploymentEndedAt: timestamptz
  deploymentLogs: deploymentLogs_arr_rel_insert_input
  deploymentStartedAt: timestamptz
  deploymentStatus: String
  functionsEndedAt: timestamptz
  functionsStartedAt: timestamptz
  functionsStatus: String
  id: uuid
  metadataEndedAt: timestamptz
  metadataStartedAt: timestamptz
  metadataStatus: String
  migrationsEndedAt: timestamptz
  migrationsStartedAt: timestamptz
  migrationsStatus: String
}

input deployments_max_order_by {
  appId: order_by
  commitMessage: order_by
  commitSHA: order_by
  commitUserAvatarUrl: order_by
  commitUserName: order_by
  deploymentEndedAt: order_by
  deploymentStartedAt: order_by
  deploymentStatus: order_by
  functionsEndedAt: order_by
  functionsStartedAt: order_by
  functionsStatus: order_by
  id: order_by
  metadataEndedAt: order_by
  metadataStartedAt: order_by
  metadataStatus: order_by
  migrationsEndedAt: order_by
  migrationsStartedAt: order_by
  migrationsStatus: order_by
}

input deployments_min_order_by {
  appId: order_by
  commitMessage: order_by
  commitSHA: order_by
  commitUserAvatarUrl: order_by
  commitUserName: order_by
  deploymentEndedAt: order_by
  deploymentStartedAt: order_by
  deploymentStatus: order_by
  functionsEndedAt: order_by
  functionsStartedAt: order_by
  functionsStatus: order_by
  id: order_by
  metadataEndedAt: order_by
  metadataStartedAt: order_by
  metadataStatus: order_by
  migrationsEndedAt: order_by
  migrationsStartedAt: order_by
  migrationsStatus: order_by
}

input deployments_obj_rel_insert_input {
  data: deployments_insert_input!
  """upsert condition"""
  on_conflict: deployments_on_conflict
}

input deployments_on_conflict {
  constraint: deployments_constraint!
  update_columns: [deployments_update_column!]! = []
  where: deployments_bool_exp
}

input deployments_order_by {
  app: apps_order_by
  appId: order_by
  commitMessage: order_by
  commitSHA: order_by
  commitUserAvatarUrl: order_by
  commitUserName: order_by
  deploymentEndedAt: order_by
  deploymentLogs_aggregate: deploymentLogs_aggregate_order_by
  deploymentStartedAt: order_by
  deploymentStatus: order_by
  functionsEndedAt: order_by
  functionsStartedAt: order_by
  functionsStatus: order_by
  id: order_by
  metadataEndedAt: order_by
  metadataStartedAt: order_by
  metadataStatus: order_by
  migrationsEndedAt: order_by
  migrationsStartedAt: order_by
  migrationsStatus: order_by
}

input deployments_pk_columns_input {
  id: uuid!
}

input deployments_set_input {
  appId: uuid
  commitMessage: String
  commitSHA: String
  commitUserAvatarUrl: String
  commitUserName: String
  deploymentEndedAt: timestamptz
  deploymentStartedAt: timestamptz
  deploymentStatus: String
  functionsEndedAt: timestamptz
  functionsStartedAt: timestamptz
  functionsStatus: String
  id: uuid
  metadataEndedAt: timestamptz
  metadataStartedAt: timestamptz
  metadataStatus: String
  migrationsEndedAt: timestamptz
  migrationsStartedAt: timestamptz
  migrationsStatus: String
}

input deployments_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: deployments_set_input
  """filter the rows which have to be updated"""
  where: deployments_bool_exp!
}

input featureFlags_aggregate_bool_exp {
  count: featureFlags_aggregate_bool_exp_count
}

input featureFlags_aggregate_bool_exp_count {
  arguments: [featureFlags_select_column!]
  distinct: Boolean
  filter: featureFlags_bool_exp
  predicate: Int_comparison_exp!
}

input featureFlags_aggregate_order_by {
  count: order_by
  max: featureFlags_max_order_by
  min: featureFlags_min_order_by
}

input featureFlags_arr_rel_insert_input {
  data: [featureFlags_insert_input!]!
  """upsert condition"""
  on_conflict: featureFlags_on_conflict
}

input featureFlags_bool_exp {
  _and: [featureFlags_bool_exp!]
  _not: featureFlags_bool_exp
  _or: [featureFlags_bool_exp!]
  app: apps_bool_exp
  appId: uuid_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  value: String_comparison_exp
}

input featureFlags_insert_input {
  app: apps_obj_rel_insert_input
  appId: uuid
  description: String
  id: uuid
  name: String
  value: String
}

input featureFlags_max_order_by {
  appId: order_by
  description: order_by
  id: order_by
  name: order_by
  value: order_by
}

input featureFlags_min_order_by {
  appId: order_by
  description: order_by
  id: order_by
  name: order_by
  value: order_by
}

input featureFlags_on_conflict {
  constraint: featureFlags_constraint!
  update_columns: [featureFlags_update_column!]! = []
  where: featureFlags_bool_exp
}

input featureFlags_order_by {
  app: apps_order_by
  appId: order_by
  description: order_by
  id: order_by
  name: order_by
  value: order_by
}

input featureFlags_pk_columns_input {
  id: uuid!
}

input featureFlags_set_input {
  appId: uuid
  description: String
  id: uuid
  name: String
  value: String
}

input featureFlags_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: featureFlags_set_input
  """filter the rows which have to be updated"""
  where: featureFlags_bool_exp!
}

input files_aggregate_bool_exp {
  bool_and: files_aggregate_bool_exp_bool_and
  bool_or: files_aggregate_bool_exp_bool_or
  count: files_aggregate_bool_exp_count
}

input files_aggregate_bool_exp_bool_and {
  arguments: files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: files_bool_exp
  predicate: Boolean_comparison_exp!
}

input files_aggregate_bool_exp_bool_or {
  arguments: files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: files_bool_exp
  predicate: Boolean_comparison_exp!
}

input files_aggregate_bool_exp_count {
  arguments: [files_select_column!]
  distinct: Boolean
  filter: files_bool_exp
  predicate: Int_comparison_exp!
}

input files_aggregate_order_by {
  avg: files_avg_order_by
  count: order_by
  max: files_max_order_by
  min: files_min_order_by
  stddev: files_stddev_order_by
  stddev_pop: files_stddev_pop_order_by
  stddev_samp: files_stddev_samp_order_by
  sum: files_sum_order_by
  var_pop: files_var_pop_order_by
  var_samp: files_var_samp_order_by
  variance: files_variance_order_by
}

input files_append_input {
  metadata: jsonb
}

input files_arr_rel_insert_input {
  data: [files_insert_input!]!
  """upsert condition"""
  on_conflict: files_on_conflict
}

input files_avg_order_by {
  size: order_by
}

input files_bool_exp {
  _and: [files_bool_exp!]
  _not: files_bool_exp
  _or: [files_bool_exp!]
  bucket: buckets_bool_exp
  bucketId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  etag: String_comparison_exp
  id: uuid_comparison_exp
  isUploaded: Boolean_comparison_exp
  metadata: jsonb_comparison_exp
  mimeType: String_comparison_exp
  name: String_comparison_exp
  size: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
  uploadedByUserId: uuid_comparison_exp
}

input files_delete_at_path_input {
  metadata: [String!]
}

input files_delete_elem_input {
  metadata: Int
}

input files_delete_key_input {
  metadata: String
}

input files_inc_input {
  size: Int
}

input files_insert_input {
  bucket: buckets_obj_rel_insert_input
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  metadata: jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

input files_max_order_by {
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

input files_min_order_by {
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

input files_obj_rel_insert_input {
  data: files_insert_input!
  """upsert condition"""
  on_conflict: files_on_conflict
}

input files_on_conflict {
  constraint: files_constraint!
  update_columns: [files_update_column!]! = []
  where: files_bool_exp
}

input files_order_by {
  bucket: buckets_order_by
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  isUploaded: order_by
  metadata: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

input files_pk_columns_input {
  id: uuid!
}

input files_prepend_input {
  metadata: jsonb
}

input files_set_input {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  metadata: jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

input files_stddev_order_by {
  size: order_by
}

input files_stddev_pop_order_by {
  size: order_by
}

input files_stddev_samp_order_by {
  size: order_by
}

input files_sum_order_by {
  size: order_by
}

input files_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: files_append_input
  """delete the field or element with specified path (for JSON arrays, negative integers count from the end)"""
  _delete_at_path: files_delete_at_path_input
  """delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"""
  _delete_elem: files_delete_elem_input
  """delete key/value pair or string element. key/value pairs are matched based on their key value"""
  _delete_key: files_delete_key_input
  """increments the numeric columns with given value of the filtered values"""
  _inc: files_inc_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: files_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: files_set_input
  """filter the rows which have to be updated"""
  where: files_bool_exp!
}

input files_var_pop_order_by {
  size: order_by
}

input files_var_samp_order_by {
  size: order_by
}

input files_variance_order_by {
  size: order_by
}

input githubAppInstallations_aggregate_bool_exp {
  count: githubAppInstallations_aggregate_bool_exp_count
}

input githubAppInstallations_aggregate_bool_exp_count {
  arguments: [githubAppInstallations_select_column!]
  distinct: Boolean
  filter: githubAppInstallations_bool_exp
  predicate: Int_comparison_exp!
}

input githubAppInstallations_aggregate_order_by {
  avg: githubAppInstallations_avg_order_by
  count: order_by
  max: githubAppInstallations_max_order_by
  min: githubAppInstallations_min_order_by
  stddev: githubAppInstallations_stddev_order_by
  stddev_pop: githubAppInstallations_stddev_pop_order_by
  stddev_samp: githubAppInstallations_stddev_samp_order_by
  sum: githubAppInstallations_sum_order_by
  var_pop: githubAppInstallations_var_pop_order_by
  var_samp: githubAppInstallations_var_samp_order_by
  variance: githubAppInstallations_variance_order_by
}

input githubAppInstallations_append_input {
  githubData: jsonb
}

input githubAppInstallations_arr_rel_insert_input {
  data: [githubAppInstallations_insert_input!]!
  """upsert condition"""
  on_conflict: githubAppInstallations_on_conflict
}

input githubAppInstallations_avg_order_by {
  externalGithubAppInstallationId: order_by
}

input githubAppInstallations_bool_exp {
  _and: [githubAppInstallations_bool_exp!]
  _not: githubAppInstallations_bool_exp
  _or: [githubAppInstallations_bool_exp!]
  accountAvatarUrl: String_comparison_exp
  accountLogin: String_comparison_exp
  accountNodeId: String_comparison_exp
  accountType: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  externalGithubAppInstallationId: Int_comparison_exp
  githubData: jsonb_comparison_exp
  githubRepositories: githubRepositories_bool_exp
  githubRepositories_aggregate: githubRepositories_aggregate_bool_exp
  id: uuid_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

input githubAppInstallations_delete_at_path_input {
  githubData: [String!]
}

input githubAppInstallations_delete_elem_input {
  githubData: Int
}

input githubAppInstallations_delete_key_input {
  githubData: String
}

input githubAppInstallations_inc_input {
  externalGithubAppInstallationId: Int
}

input githubAppInstallations_insert_input {
  accountAvatarUrl: String
  accountLogin: String
  accountNodeId: String
  accountType: String
  createdAt: timestamptz
  externalGithubAppInstallationId: Int
  githubData: jsonb
  githubRepositories: githubRepositories_arr_rel_insert_input
  id: uuid
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userId: uuid
}

input githubAppInstallations_max_order_by {
  accountAvatarUrl: order_by
  accountLogin: order_by
  accountNodeId: order_by
  accountType: order_by
  createdAt: order_by
  externalGithubAppInstallationId: order_by
  id: order_by
  updatedAt: order_by
  userId: order_by
}

input githubAppInstallations_min_order_by {
  accountAvatarUrl: order_by
  accountLogin: order_by
  accountNodeId: order_by
  accountType: order_by
  createdAt: order_by
  externalGithubAppInstallationId: order_by
  id: order_by
  updatedAt: order_by
  userId: order_by
}

input githubAppInstallations_obj_rel_insert_input {
  data: githubAppInstallations_insert_input!
  """upsert condition"""
  on_conflict: githubAppInstallations_on_conflict
}

input githubAppInstallations_on_conflict {
  constraint: githubAppInstallations_constraint!
  update_columns: [githubAppInstallations_update_column!]! = []
  where: githubAppInstallations_bool_exp
}

input githubAppInstallations_order_by {
  accountAvatarUrl: order_by
  accountLogin: order_by
  accountNodeId: order_by
  accountType: order_by
  createdAt: order_by
  externalGithubAppInstallationId: order_by
  githubData: order_by
  githubRepositories_aggregate: githubRepositories_aggregate_order_by
  id: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
}

input githubAppInstallations_pk_columns_input {
  id: uuid!
}

input githubAppInstallations_prepend_input {
  githubData: jsonb
}

input githubAppInstallations_set_input {
  accountAvatarUrl: String
  accountLogin: String
  accountNodeId: String
  accountType: String
  createdAt: timestamptz
  externalGithubAppInstallationId: Int
  githubData: jsonb
  id: uuid
  updatedAt: timestamptz
  userId: uuid
}

input githubAppInstallations_stddev_order_by {
  externalGithubAppInstallationId: order_by
}

input githubAppInstallations_stddev_pop_order_by {
  externalGithubAppInstallationId: order_by
}

input githubAppInstallations_stddev_samp_order_by {
  externalGithubAppInstallationId: order_by
}

input githubAppInstallations_sum_order_by {
  externalGithubAppInstallationId: order_by
}

input githubAppInstallations_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: githubAppInstallations_append_input
  """delete the field or element with specified path (for JSON arrays, negative integers count from the end)"""
  _delete_at_path: githubAppInstallations_delete_at_path_input
  """delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"""
  _delete_elem: githubAppInstallations_delete_elem_input
  """delete key/value pair or string element. key/value pairs are matched based on their key value"""
  _delete_key: githubAppInstallations_delete_key_input
  """increments the numeric columns with given value of the filtered values"""
  _inc: githubAppInstallations_inc_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: githubAppInstallations_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: githubAppInstallations_set_input
  """filter the rows which have to be updated"""
  where: githubAppInstallations_bool_exp!
}

input githubAppInstallations_var_pop_order_by {
  externalGithubAppInstallationId: order_by
}

input githubAppInstallations_var_samp_order_by {
  externalGithubAppInstallationId: order_by
}

input githubAppInstallations_variance_order_by {
  externalGithubAppInstallationId: order_by
}

input githubRepositories_aggregate_bool_exp {
  bool_and: githubRepositories_aggregate_bool_exp_bool_and
  bool_or: githubRepositories_aggregate_bool_exp_bool_or
  count: githubRepositories_aggregate_bool_exp_count
}

input githubRepositories_aggregate_bool_exp_bool_and {
  arguments: githubRepositories_select_column_githubRepositories_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: githubRepositories_bool_exp
  predicate: Boolean_comparison_exp!
}

input githubRepositories_aggregate_bool_exp_bool_or {
  arguments: githubRepositories_select_column_githubRepositories_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: githubRepositories_bool_exp
  predicate: Boolean_comparison_exp!
}

input githubRepositories_aggregate_bool_exp_count {
  arguments: [githubRepositories_select_column!]
  distinct: Boolean
  filter: githubRepositories_bool_exp
  predicate: Int_comparison_exp!
}

input githubRepositories_aggregate_order_by {
  count: order_by
  max: githubRepositories_max_order_by
  min: githubRepositories_min_order_by
}

input githubRepositories_arr_rel_insert_input {
  data: [githubRepositories_insert_input!]!
  """upsert condition"""
  on_conflict: githubRepositories_on_conflict
}

input githubRepositories_bool_exp {
  _and: [githubRepositories_bool_exp!]
  _not: githubRepositories_bool_exp
  _or: [githubRepositories_bool_exp!]
  apps: apps_bool_exp
  apps_aggregate: apps_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  externalGithubAppRepositoryNodeId: String_comparison_exp
  fullName: String_comparison_exp
  githubAppInstallation: githubAppInstallations_bool_exp
  githubAppInstallationId: uuid_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  private: Boolean_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input githubRepositories_insert_input {
  apps: apps_arr_rel_insert_input
  createdAt: timestamptz
  externalGithubAppRepositoryNodeId: String
  fullName: String
  githubAppInstallation: githubAppInstallations_obj_rel_insert_input
  githubAppInstallationId: uuid
  id: uuid
  name: String
  private: Boolean
  updatedAt: timestamptz
}

input githubRepositories_max_order_by {
  createdAt: order_by
  externalGithubAppRepositoryNodeId: order_by
  fullName: order_by
  githubAppInstallationId: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

input githubRepositories_min_order_by {
  createdAt: order_by
  externalGithubAppRepositoryNodeId: order_by
  fullName: order_by
  githubAppInstallationId: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

input githubRepositories_obj_rel_insert_input {
  data: githubRepositories_insert_input!
  """upsert condition"""
  on_conflict: githubRepositories_on_conflict
}

input githubRepositories_on_conflict {
  constraint: githubRepositories_constraint!
  update_columns: [githubRepositories_update_column!]! = []
  where: githubRepositories_bool_exp
}

input githubRepositories_order_by {
  apps_aggregate: apps_aggregate_order_by
  createdAt: order_by
  externalGithubAppRepositoryNodeId: order_by
  fullName: order_by
  githubAppInstallation: githubAppInstallations_order_by
  githubAppInstallationId: order_by
  id: order_by
  name: order_by
  private: order_by
  updatedAt: order_by
}

input githubRepositories_pk_columns_input {
  id: uuid!
}

input githubRepositories_set_input {
  createdAt: timestamptz
  externalGithubAppRepositoryNodeId: String
  fullName: String
  githubAppInstallationId: uuid
  id: uuid
  name: String
  private: Boolean
  updatedAt: timestamptz
}

input githubRepositories_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: githubRepositories_set_input
  """filter the rows which have to be updated"""
  where: githubRepositories_bool_exp!
}

input jsonb_cast_exp {
  String: String_comparison_exp
}

input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  """is the column contained in the given json value"""
  _contained_in: jsonb
  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  """does the string exist as a top-level key in the column"""
  _has_key: String
  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]
  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

input organizationMemberInviteAccept_args {
  id: uuid
}

input organization_costs_thresholds_bool_exp {
  _and: [organization_costs_thresholds_bool_exp!]
  _not: organization_costs_thresholds_bool_exp
  _or: [organization_costs_thresholds_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

input organization_costs_thresholds_enum_comparison_exp {
  _eq: organization_costs_thresholds_enum
  _in: [organization_costs_thresholds_enum!]
  _is_null: Boolean
  _neq: organization_costs_thresholds_enum
  _nin: [organization_costs_thresholds_enum!]
}

input organization_costs_thresholds_insert_input {
  comment: String
  value: String
}

input organization_costs_thresholds_on_conflict {
  constraint: organization_costs_thresholds_constraint!
  update_columns: [organization_costs_thresholds_update_column!]! = []
  where: organization_costs_thresholds_bool_exp
}

input organization_costs_thresholds_order_by {
  comment: order_by
  value: order_by
}

input organization_costs_thresholds_pk_columns_input {
  value: String!
}

input organization_costs_thresholds_set_input {
  comment: String
  value: String
}

input organization_costs_thresholds_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: organization_costs_thresholds_set_input
  """filter the rows which have to be updated"""
  where: organization_costs_thresholds_bool_exp!
}

input organization_member_invites_aggregate_bool_exp {
  count: organization_member_invites_aggregate_bool_exp_count
}

input organization_member_invites_aggregate_bool_exp_count {
  arguments: [organization_member_invites_select_column!]
  distinct: Boolean
  filter: organization_member_invites_bool_exp
  predicate: Int_comparison_exp!
}

input organization_member_invites_aggregate_order_by {
  count: order_by
  max: organization_member_invites_max_order_by
  min: organization_member_invites_min_order_by
}

input organization_member_invites_arr_rel_insert_input {
  data: [organization_member_invites_insert_input!]!
  """upsert condition"""
  on_conflict: organization_member_invites_on_conflict
}

input organization_member_invites_bool_exp {
  _and: [organization_member_invites_bool_exp!]
  _not: organization_member_invites_bool_exp
  _or: [organization_member_invites_bool_exp!]
  createdAt: timestamptz_comparison_exp
  email: citext_comparison_exp
  id: uuid_comparison_exp
  organization: organizations_bool_exp
  organizationID: uuid_comparison_exp
  role: organization_members_role_enum_comparison_exp
  updateAt: timestamptz_comparison_exp
  user: users_bool_exp
}

input organization_member_invites_insert_input {
  createdAt: timestamptz
  email: citext
  id: uuid
  organization: organizations_obj_rel_insert_input
  organizationID: uuid
  role: organization_members_role_enum
  updateAt: timestamptz
  user: users_obj_rel_insert_input
}

input organization_member_invites_max_order_by {
  createdAt: order_by
  email: order_by
  id: order_by
  organizationID: order_by
  updateAt: order_by
}

input organization_member_invites_min_order_by {
  createdAt: order_by
  email: order_by
  id: order_by
  organizationID: order_by
  updateAt: order_by
}

input organization_member_invites_on_conflict {
  constraint: organization_member_invites_constraint!
  update_columns: [organization_member_invites_update_column!]! = []
  where: organization_member_invites_bool_exp
}

input organization_member_invites_order_by {
  createdAt: order_by
  email: order_by
  id: order_by
  organization: organizations_order_by
  organizationID: order_by
  role: order_by
  updateAt: order_by
  user: users_order_by
}

input organization_member_invites_pk_columns_input {
  id: uuid!
}

input organization_member_invites_set_input {
  createdAt: timestamptz
  email: citext
  id: uuid
  organizationID: uuid
  role: organization_members_role_enum
  updateAt: timestamptz
}

input organization_member_invites_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: organization_member_invites_set_input
  """filter the rows which have to be updated"""
  where: organization_member_invites_bool_exp!
}

input organization_members_aggregate_bool_exp {
  count: organization_members_aggregate_bool_exp_count
}

input organization_members_aggregate_bool_exp_count {
  arguments: [organization_members_select_column!]
  distinct: Boolean
  filter: organization_members_bool_exp
  predicate: Int_comparison_exp!
}

input organization_members_aggregate_order_by {
  count: order_by
  max: organization_members_max_order_by
  min: organization_members_min_order_by
}

input organization_members_arr_rel_insert_input {
  data: [organization_members_insert_input!]!
  """upsert condition"""
  on_conflict: organization_members_on_conflict
}

input organization_members_bool_exp {
  _and: [organization_members_bool_exp!]
  _not: organization_members_bool_exp
  _or: [organization_members_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  organization: organizations_bool_exp
  organizatonID: uuid_comparison_exp
  role: organization_members_role_enum_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userID: uuid_comparison_exp
}

input organization_members_insert_input {
  createdAt: timestamptz
  id: uuid
  organization: organizations_obj_rel_insert_input
  organizatonID: uuid
  role: organization_members_role_enum
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userID: uuid
}

input organization_members_max_order_by {
  createdAt: order_by
  id: order_by
  organizatonID: order_by
  updatedAt: order_by
  userID: order_by
}

input organization_members_min_order_by {
  createdAt: order_by
  id: order_by
  organizatonID: order_by
  updatedAt: order_by
  userID: order_by
}

input organization_members_on_conflict {
  constraint: organization_members_constraint!
  update_columns: [organization_members_update_column!]! = []
  where: organization_members_bool_exp
}

input organization_members_order_by {
  createdAt: order_by
  id: order_by
  organization: organizations_order_by
  organizatonID: order_by
  role: order_by
  updatedAt: order_by
  user: users_order_by
  userID: order_by
}

input organization_members_pk_columns_input {
  id: uuid!
}

input organization_members_role_bool_exp {
  _and: [organization_members_role_bool_exp!]
  _not: organization_members_role_bool_exp
  _or: [organization_members_role_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

input organization_members_role_enum_comparison_exp {
  _eq: organization_members_role_enum
  _in: [organization_members_role_enum!]
  _is_null: Boolean
  _neq: organization_members_role_enum
  _nin: [organization_members_role_enum!]
}

input organization_members_role_insert_input {
  comment: String
  value: String
}

input organization_members_role_on_conflict {
  constraint: organization_members_role_constraint!
  update_columns: [organization_members_role_update_column!]! = []
  where: organization_members_role_bool_exp
}

input organization_members_role_order_by {
  comment: order_by
  value: order_by
}

input organization_members_role_pk_columns_input {
  value: String!
}

input organization_members_role_set_input {
  comment: String
  value: String
}

input organization_members_role_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: organization_members_role_set_input
  """filter the rows which have to be updated"""
  where: organization_members_role_bool_exp!
}

input organization_members_set_input {
  createdAt: timestamptz
  id: uuid
  organizatonID: uuid
  role: organization_members_role_enum
  updatedAt: timestamptz
  userID: uuid
}

input organization_members_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: organization_members_set_input
  """filter the rows which have to be updated"""
  where: organization_members_bool_exp!
}

input organization_new_request_bool_exp {
  _and: [organization_new_request_bool_exp!]
  _not: organization_new_request_bool_exp
  _or: [organization_new_request_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  plan: plans_bool_exp
  planID: uuid_comparison_exp
  sessionID: String_comparison_exp
  slug: String_comparison_exp
  user: users_bool_exp
  userID: uuid_comparison_exp
}

input organization_new_request_insert_input {
  createdAt: timestamptz
  id: uuid
  name: String
  plan: plans_obj_rel_insert_input
  planID: uuid
  sessionID: String
  slug: String
  user: users_obj_rel_insert_input
  userID: uuid
}

input organization_new_request_on_conflict {
  constraint: organization_new_request_constraint!
  update_columns: [organization_new_request_update_column!]! = []
  where: organization_new_request_bool_exp
}

input organization_new_request_order_by {
  createdAt: order_by
  id: order_by
  name: order_by
  plan: plans_order_by
  planID: order_by
  sessionID: order_by
  slug: order_by
  user: users_order_by
  userID: order_by
}

input organization_new_request_pk_columns_input {
  id: uuid!
}

input organization_new_request_set_input {
  createdAt: timestamptz
  id: uuid
  name: String
  planID: uuid
  sessionID: String
  slug: String
  userID: uuid
}

input organization_new_request_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: organization_new_request_set_input
  """filter the rows which have to be updated"""
  where: organization_new_request_bool_exp!
}

input organization_status_bool_exp {
  _and: [organization_status_bool_exp!]
  _not: organization_status_bool_exp
  _or: [organization_status_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

input organization_status_enum_comparison_exp {
  _eq: organization_status_enum
  _in: [organization_status_enum!]
  _is_null: Boolean
  _neq: organization_status_enum
  _nin: [organization_status_enum!]
}

input organization_status_insert_input {
  comment: String
  value: String
}

input organization_status_on_conflict {
  constraint: organization_status_constraint!
  update_columns: [organization_status_update_column!]! = []
  where: organization_status_bool_exp
}

input organization_status_order_by {
  comment: order_by
  value: order_by
}

input organization_status_pk_columns_input {
  value: String!
}

input organization_status_set_input {
  comment: String
  value: String
}

input organization_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: organization_status_set_input
  """filter the rows which have to be updated"""
  where: organization_status_bool_exp!
}

input organizations_aggregate_bool_exp {
  count: organizations_aggregate_bool_exp_count
}

input organizations_aggregate_bool_exp_count {
  arguments: [organizations_select_column!]
  distinct: Boolean
  filter: organizations_bool_exp
  predicate: Int_comparison_exp!
}

input organizations_aggregate_order_by {
  avg: organizations_avg_order_by
  count: order_by
  max: organizations_max_order_by
  min: organizations_min_order_by
  stddev: organizations_stddev_order_by
  stddev_pop: organizations_stddev_pop_order_by
  stddev_samp: organizations_stddev_samp_order_by
  sum: organizations_sum_order_by
  var_pop: organizations_var_pop_order_by
  var_samp: organizations_var_samp_order_by
  variance: organizations_variance_order_by
}

input organizations_arr_rel_insert_input {
  data: [organizations_insert_input!]!
  """upsert condition"""
  on_conflict: organizations_on_conflict
}

input organizations_avg_order_by {
  threshold: order_by
}

input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  allowedPrivateRegions: regions_allowed_organization_bool_exp
  allowedPrivateRegions_aggregate: regions_allowed_organization_aggregate_bool_exp
  apps: apps_bool_exp
  apps_aggregate: apps_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  current_threshold: organization_costs_thresholds_enum_comparison_exp
  id: uuid_comparison_exp
  invites: organization_member_invites_bool_exp
  invites_aggregate: organization_member_invites_aggregate_bool_exp
  members: organization_members_bool_exp
  members_aggregate: organization_members_aggregate_bool_exp
  name: String_comparison_exp
  plan: plans_bool_exp
  planID: uuid_comparison_exp
  slug: String_comparison_exp
  status: organization_status_enum_comparison_exp
  status_comment: String_comparison_exp
  stripeCustomerID: String_comparison_exp
  stripeSubscriptionID: String_comparison_exp
  threshold: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input organizations_inc_input {
  threshold: Int
}

input organizations_insert_input {
  allowedPrivateRegions: regions_allowed_organization_arr_rel_insert_input
  apps: apps_arr_rel_insert_input
  createdAt: timestamptz
  current_threshold: organization_costs_thresholds_enum
  id: uuid
  invites: organization_member_invites_arr_rel_insert_input
  members: organization_members_arr_rel_insert_input
  name: String
  plan: plans_obj_rel_insert_input
  planID: uuid
  slug: String
  status: organization_status_enum
  status_comment: String
  stripeCustomerID: String
  stripeSubscriptionID: String
  threshold: Int
  updatedAt: timestamptz
}

input organizations_max_order_by {
  createdAt: order_by
  id: order_by
  name: order_by
  planID: order_by
  slug: order_by
  status_comment: order_by
  stripeCustomerID: order_by
  stripeSubscriptionID: order_by
  threshold: order_by
  updatedAt: order_by
}

input organizations_min_order_by {
  createdAt: order_by
  id: order_by
  name: order_by
  planID: order_by
  slug: order_by
  status_comment: order_by
  stripeCustomerID: order_by
  stripeSubscriptionID: order_by
  threshold: order_by
  updatedAt: order_by
}

input organizations_obj_rel_insert_input {
  data: organizations_insert_input!
  """upsert condition"""
  on_conflict: organizations_on_conflict
}

input organizations_on_conflict {
  constraint: organizations_constraint!
  update_columns: [organizations_update_column!]! = []
  where: organizations_bool_exp
}

input organizations_order_by {
  allowedPrivateRegions_aggregate: regions_allowed_organization_aggregate_order_by
  apps_aggregate: apps_aggregate_order_by
  createdAt: order_by
  current_threshold: order_by
  id: order_by
  invites_aggregate: organization_member_invites_aggregate_order_by
  members_aggregate: organization_members_aggregate_order_by
  name: order_by
  plan: plans_order_by
  planID: order_by
  slug: order_by
  status: order_by
  status_comment: order_by
  stripeCustomerID: order_by
  stripeSubscriptionID: order_by
  threshold: order_by
  updatedAt: order_by
}

input organizations_pk_columns_input {
  id: uuid!
}

input organizations_set_input {
  createdAt: timestamptz
  current_threshold: organization_costs_thresholds_enum
  id: uuid
  name: String
  planID: uuid
  slug: String
  status: organization_status_enum
  status_comment: String
  stripeCustomerID: String
  stripeSubscriptionID: String
  threshold: Int
  updatedAt: timestamptz
}

input organizations_stddev_order_by {
  threshold: order_by
}

input organizations_stddev_pop_order_by {
  threshold: order_by
}

input organizations_stddev_samp_order_by {
  threshold: order_by
}

input organizations_sum_order_by {
  threshold: order_by
}

input organizations_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: organizations_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: organizations_set_input
  """filter the rows which have to be updated"""
  where: organizations_bool_exp!
}

input organizations_var_pop_order_by {
  threshold: order_by
}

input organizations_var_samp_order_by {
  threshold: order_by
}

input organizations_variance_order_by {
  threshold: order_by
}

input paymentMethods_aggregate_bool_exp {
  bool_and: paymentMethods_aggregate_bool_exp_bool_and
  bool_or: paymentMethods_aggregate_bool_exp_bool_or
  count: paymentMethods_aggregate_bool_exp_count
}

input paymentMethods_aggregate_bool_exp_bool_and {
  arguments: paymentMethods_select_column_paymentMethods_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: paymentMethods_bool_exp
  predicate: Boolean_comparison_exp!
}

input paymentMethods_aggregate_bool_exp_bool_or {
  arguments: paymentMethods_select_column_paymentMethods_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: paymentMethods_bool_exp
  predicate: Boolean_comparison_exp!
}

input paymentMethods_aggregate_bool_exp_count {
  arguments: [paymentMethods_select_column!]
  distinct: Boolean
  filter: paymentMethods_bool_exp
  predicate: Int_comparison_exp!
}

input paymentMethods_aggregate_order_by {
  avg: paymentMethods_avg_order_by
  count: order_by
  max: paymentMethods_max_order_by
  min: paymentMethods_min_order_by
  stddev: paymentMethods_stddev_order_by
  stddev_pop: paymentMethods_stddev_pop_order_by
  stddev_samp: paymentMethods_stddev_samp_order_by
  sum: paymentMethods_sum_order_by
  var_pop: paymentMethods_var_pop_order_by
  var_samp: paymentMethods_var_samp_order_by
  variance: paymentMethods_variance_order_by
}

input paymentMethods_arr_rel_insert_input {
  data: [paymentMethods_insert_input!]!
  """upsert condition"""
  on_conflict: paymentMethods_on_conflict
}

input paymentMethods_avg_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input paymentMethods_bool_exp {
  _and: [paymentMethods_bool_exp!]
  _not: paymentMethods_bool_exp
  _or: [paymentMethods_bool_exp!]
  addedByUserId: uuid_comparison_exp
  cardBrand: String_comparison_exp
  cardExpMonth: Int_comparison_exp
  cardExpYear: Int_comparison_exp
  cardLast4: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  isDefault: Boolean_comparison_exp
  stripePaymentMethodId: String_comparison_exp
  user: users_bool_exp
  workspace: workspaces_bool_exp
  workspaceId: uuid_comparison_exp
}

input paymentMethods_inc_input {
  cardExpMonth: Int
  cardExpYear: Int
}

input paymentMethods_insert_input {
  addedByUserId: uuid
  cardBrand: String
  cardExpMonth: Int
  cardExpYear: Int
  cardLast4: String
  createdAt: timestamptz
  id: uuid
  isDefault: Boolean
  stripePaymentMethodId: String
  user: users_obj_rel_insert_input
  workspace: workspaces_obj_rel_insert_input
  workspaceId: uuid
}

input paymentMethods_max_order_by {
  addedByUserId: order_by
  cardBrand: order_by
  cardExpMonth: order_by
  cardExpYear: order_by
  cardLast4: order_by
  createdAt: order_by
  id: order_by
  stripePaymentMethodId: order_by
  workspaceId: order_by
}

input paymentMethods_min_order_by {
  addedByUserId: order_by
  cardBrand: order_by
  cardExpMonth: order_by
  cardExpYear: order_by
  cardLast4: order_by
  createdAt: order_by
  id: order_by
  stripePaymentMethodId: order_by
  workspaceId: order_by
}

input paymentMethods_obj_rel_insert_input {
  data: paymentMethods_insert_input!
  """upsert condition"""
  on_conflict: paymentMethods_on_conflict
}

input paymentMethods_on_conflict {
  constraint: paymentMethods_constraint!
  update_columns: [paymentMethods_update_column!]! = []
  where: paymentMethods_bool_exp
}

input paymentMethods_order_by {
  addedByUserId: order_by
  cardBrand: order_by
  cardExpMonth: order_by
  cardExpYear: order_by
  cardLast4: order_by
  createdAt: order_by
  id: order_by
  isDefault: order_by
  stripePaymentMethodId: order_by
  user: users_order_by
  workspace: workspaces_order_by
  workspaceId: order_by
}

input paymentMethods_pk_columns_input {
  id: uuid!
}

input paymentMethods_set_input {
  addedByUserId: uuid
  cardBrand: String
  cardExpMonth: Int
  cardExpYear: Int
  cardLast4: String
  createdAt: timestamptz
  id: uuid
  isDefault: Boolean
  stripePaymentMethodId: String
  workspaceId: uuid
}

input paymentMethods_stddev_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input paymentMethods_stddev_pop_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input paymentMethods_stddev_samp_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input paymentMethods_sum_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input paymentMethods_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: paymentMethods_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: paymentMethods_set_input
  """filter the rows which have to be updated"""
  where: paymentMethods_bool_exp!
}

input paymentMethods_var_pop_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input paymentMethods_var_samp_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input paymentMethods_variance_order_by {
  cardExpMonth: order_by
  cardExpYear: order_by
}

input plans_bool_exp {
  _and: [plans_bool_exp!]
  _not: plans_bool_exp
  _or: [plans_bool_exp!]
  apps: apps_bool_exp
  apps_aggregate: apps_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  deprecated: Boolean_comparison_exp
  featureAdvancedGraphql: Boolean_comparison_exp
  featureBackupEnabled: Boolean_comparison_exp
  featureBackupRetentionDays: Int_comparison_exp
  featureCustomDomainsEnabled: Boolean_comparison_exp
  featureCustomEmailTemplatesEnabled: Boolean_comparison_exp
  featureCustomResources: Boolean_comparison_exp
  featureDeployEmailTemplates: Boolean_comparison_exp
  featureFunctionExecutionTimeout: Int_comparison_exp
  featureMaxDbSize: Int_comparison_exp
  featureMaxFilesSize: Int_comparison_exp
  featureMaxNumberOfFunctionsPerDeployment: Int_comparison_exp
  id: uuid_comparison_exp
  individual: Boolean_comparison_exp
  isDefault: Boolean_comparison_exp
  isFree: Boolean_comparison_exp
  isPublic: Boolean_comparison_exp
  name: String_comparison_exp
  organizations: organizations_bool_exp
  organizations_aggregate: organizations_aggregate_bool_exp
  price: Int_comparison_exp
  sort: Int_comparison_exp
  stripePriceIDCustomDomains: String_comparison_exp
  stripePriceIDDedicatedCompute: String_comparison_exp
  stripePriceIDEgressUsageMB: String_comparison_exp
  stripePriceIDFunctionsAmount: String_comparison_exp
  stripePriceIDFunctionsUsageSeconds: String_comparison_exp
  stripePriceIDPersistentVolumesGB: String_comparison_exp
  stripePriceId: String_comparison_exp
  stripe_price_id_pitr: String_comparison_exp
  upatedAt: timestamptz_comparison_exp
}

input plans_inc_input {
  featureBackupRetentionDays: Int
  """Function execution timeout in seconds"""
  featureFunctionExecutionTimeout: Int
  featureMaxDbSize: Int
  featureMaxFilesSize: Int
  """Max number of functions to deploy per git deployment"""
  featureMaxNumberOfFunctionsPerDeployment: Int
  price: Int
  sort: Int
}

input plans_insert_input {
  apps: apps_arr_rel_insert_input
  createdAt: timestamptz
  deprecated: Boolean
  featureAdvancedGraphql: Boolean
  featureBackupEnabled: Boolean
  featureBackupRetentionDays: Int
  featureCustomDomainsEnabled: Boolean
  featureCustomEmailTemplatesEnabled: Boolean
  featureCustomResources: Boolean
  """Weather or not to deploy email templates for git deployments"""
  featureDeployEmailTemplates: Boolean
  """Function execution timeout in seconds"""
  featureFunctionExecutionTimeout: Int
  featureMaxDbSize: Int
  featureMaxFilesSize: Int
  """Max number of functions to deploy per git deployment"""
  featureMaxNumberOfFunctionsPerDeployment: Int
  id: uuid
  individual: Boolean
  isDefault: Boolean
  isFree: Boolean
  isPublic: Boolean
  name: String
  organizations: organizations_arr_rel_insert_input
  price: Int
  sort: Int
  stripePriceIDCustomDomains: String
  stripePriceIDDedicatedCompute: String
  stripePriceIDEgressUsageMB: String
  stripePriceIDFunctionsAmount: String
  stripePriceIDFunctionsUsageSeconds: String
  stripePriceIDPersistentVolumesGB: String
  stripePriceId: String
  stripe_price_id_pitr: String
  upatedAt: timestamptz
}

input plans_obj_rel_insert_input {
  data: plans_insert_input!
  """upsert condition"""
  on_conflict: plans_on_conflict
}

input plans_on_conflict {
  constraint: plans_constraint!
  update_columns: [plans_update_column!]! = []
  where: plans_bool_exp
}

input plans_order_by {
  apps_aggregate: apps_aggregate_order_by
  createdAt: order_by
  deprecated: order_by
  featureAdvancedGraphql: order_by
  featureBackupEnabled: order_by
  featureBackupRetentionDays: order_by
  featureCustomDomainsEnabled: order_by
  featureCustomEmailTemplatesEnabled: order_by
  featureCustomResources: order_by
  featureDeployEmailTemplates: order_by
  featureFunctionExecutionTimeout: order_by
  featureMaxDbSize: order_by
  featureMaxFilesSize: order_by
  featureMaxNumberOfFunctionsPerDeployment: order_by
  id: order_by
  individual: order_by
  isDefault: order_by
  isFree: order_by
  isPublic: order_by
  name: order_by
  organizations_aggregate: organizations_aggregate_order_by
  price: order_by
  sort: order_by
  stripePriceIDCustomDomains: order_by
  stripePriceIDDedicatedCompute: order_by
  stripePriceIDEgressUsageMB: order_by
  stripePriceIDFunctionsAmount: order_by
  stripePriceIDFunctionsUsageSeconds: order_by
  stripePriceIDPersistentVolumesGB: order_by
  stripePriceId: order_by
  stripe_price_id_pitr: order_by
  upatedAt: order_by
}

input plans_pk_columns_input {
  id: uuid!
}

input plans_set_input {
  createdAt: timestamptz
  deprecated: Boolean
  featureAdvancedGraphql: Boolean
  featureBackupEnabled: Boolean
  featureBackupRetentionDays: Int
  featureCustomDomainsEnabled: Boolean
  featureCustomEmailTemplatesEnabled: Boolean
  featureCustomResources: Boolean
  """Weather or not to deploy email templates for git deployments"""
  featureDeployEmailTemplates: Boolean
  """Function execution timeout in seconds"""
  featureFunctionExecutionTimeout: Int
  featureMaxDbSize: Int
  featureMaxFilesSize: Int
  """Max number of functions to deploy per git deployment"""
  featureMaxNumberOfFunctionsPerDeployment: Int
  id: uuid
  individual: Boolean
  isDefault: Boolean
  isFree: Boolean
  isPublic: Boolean
  name: String
  price: Int
  sort: Int
  stripePriceIDCustomDomains: String
  stripePriceIDDedicatedCompute: String
  stripePriceIDEgressUsageMB: String
  stripePriceIDFunctionsAmount: String
  stripePriceIDFunctionsUsageSeconds: String
  stripePriceIDPersistentVolumesGB: String
  stripePriceId: String
  stripe_price_id_pitr: String
  upatedAt: timestamptz
}

input plans_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: plans_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: plans_set_input
  """filter the rows which have to be updated"""
  where: plans_bool_exp!
}

input region_type_bool_exp {
  _and: [region_type_bool_exp!]
  _not: region_type_bool_exp
  _or: [region_type_bool_exp!]
  comment: String_comparison_exp
  regions: regions_bool_exp
  regions_aggregate: regions_aggregate_bool_exp
  type: String_comparison_exp
}

input region_type_enum_comparison_exp {
  _eq: region_type_enum
  _in: [region_type_enum!]
  _is_null: Boolean
  _neq: region_type_enum
  _nin: [region_type_enum!]
}

input region_type_insert_input {
  comment: String
  regions: regions_arr_rel_insert_input
  type: String
}

input region_type_obj_rel_insert_input {
  data: region_type_insert_input!
  """upsert condition"""
  on_conflict: region_type_on_conflict
}

input region_type_on_conflict {
  constraint: region_type_constraint!
  update_columns: [region_type_update_column!]! = []
  where: region_type_bool_exp
}

input region_type_order_by {
  comment: order_by
  regions_aggregate: regions_aggregate_order_by
  type: order_by
}

input region_type_pk_columns_input {
  type: String!
}

input region_type_set_input {
  comment: String
  type: String
}

input region_type_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: region_type_set_input
  """filter the rows which have to be updated"""
  where: region_type_bool_exp!
}

input regions_aggregate_bool_exp {
  bool_and: regions_aggregate_bool_exp_bool_and
  bool_or: regions_aggregate_bool_exp_bool_or
  count: regions_aggregate_bool_exp_count
}

input regions_aggregate_bool_exp_bool_and {
  arguments: regions_select_column_regions_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: regions_bool_exp
  predicate: Boolean_comparison_exp!
}

input regions_aggregate_bool_exp_bool_or {
  arguments: regions_select_column_regions_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: regions_bool_exp
  predicate: Boolean_comparison_exp!
}

input regions_aggregate_bool_exp_count {
  arguments: [regions_select_column!]
  distinct: Boolean
  filter: regions_bool_exp
  predicate: Int_comparison_exp!
}

input regions_aggregate_order_by {
  count: order_by
  max: regions_max_order_by
  min: regions_min_order_by
}

input regions_allowed_organization_aggregate_bool_exp {
  count: regions_allowed_organization_aggregate_bool_exp_count
}

input regions_allowed_organization_aggregate_bool_exp_count {
  arguments: [regions_allowed_organization_select_column!]
  distinct: Boolean
  filter: regions_allowed_organization_bool_exp
  predicate: Int_comparison_exp!
}

input regions_allowed_organization_aggregate_order_by {
  count: order_by
  max: regions_allowed_organization_max_order_by
  min: regions_allowed_organization_min_order_by
}

input regions_allowed_organization_arr_rel_insert_input {
  data: [regions_allowed_organization_insert_input!]!
  """upsert condition"""
  on_conflict: regions_allowed_organization_on_conflict
}

input regions_allowed_organization_bool_exp {
  _and: [regions_allowed_organization_bool_exp!]
  _not: regions_allowed_organization_bool_exp
  _or: [regions_allowed_organization_bool_exp!]
  createdAt: timestamptz_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  organization: organizations_bool_exp
  organizationID: uuid_comparison_exp
  region: regions_bool_exp
  regionID: uuid_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input regions_allowed_organization_insert_input {
  createdAt: timestamptz
  description: String
  id: uuid
  organization: organizations_obj_rel_insert_input
  organizationID: uuid
  region: regions_obj_rel_insert_input
  regionID: uuid
  updatedAt: timestamptz
}

input regions_allowed_organization_max_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  organizationID: order_by
  regionID: order_by
  updatedAt: order_by
}

input regions_allowed_organization_min_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  organizationID: order_by
  regionID: order_by
  updatedAt: order_by
}

input regions_allowed_organization_on_conflict {
  constraint: regions_allowed_organization_constraint!
  update_columns: [regions_allowed_organization_update_column!]! = []
  where: regions_allowed_organization_bool_exp
}

input regions_allowed_organization_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  organization: organizations_order_by
  organizationID: order_by
  region: regions_order_by
  regionID: order_by
  updatedAt: order_by
}

input regions_allowed_organization_pk_columns_input {
  id: uuid!
}

input regions_allowed_organization_set_input {
  createdAt: timestamptz
  description: String
  id: uuid
  organizationID: uuid
  regionID: uuid
  updatedAt: timestamptz
}

input regions_allowed_organization_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: regions_allowed_organization_set_input
  """filter the rows which have to be updated"""
  where: regions_allowed_organization_bool_exp!
}

input regions_allowed_workspace_aggregate_bool_exp {
  count: regions_allowed_workspace_aggregate_bool_exp_count
}

input regions_allowed_workspace_aggregate_bool_exp_count {
  arguments: [regions_allowed_workspace_select_column!]
  distinct: Boolean
  filter: regions_allowed_workspace_bool_exp
  predicate: Int_comparison_exp!
}

input regions_allowed_workspace_aggregate_order_by {
  count: order_by
  max: regions_allowed_workspace_max_order_by
  min: regions_allowed_workspace_min_order_by
}

input regions_allowed_workspace_arr_rel_insert_input {
  data: [regions_allowed_workspace_insert_input!]!
  """upsert condition"""
  on_conflict: regions_allowed_workspace_on_conflict
}

input regions_allowed_workspace_bool_exp {
  _and: [regions_allowed_workspace_bool_exp!]
  _not: regions_allowed_workspace_bool_exp
  _or: [regions_allowed_workspace_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  region: regions_bool_exp
  region_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  workspace: workspaces_bool_exp
  workspace_id: uuid_comparison_exp
}

input regions_allowed_workspace_insert_input {
  created_at: timestamptz
  description: String
  id: uuid
  region: regions_obj_rel_insert_input
  region_id: uuid
  updated_at: timestamptz
  workspace: workspaces_obj_rel_insert_input
  workspace_id: uuid
}

input regions_allowed_workspace_max_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  region_id: order_by
  updated_at: order_by
  workspace_id: order_by
}

input regions_allowed_workspace_min_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  region_id: order_by
  updated_at: order_by
  workspace_id: order_by
}

input regions_allowed_workspace_obj_rel_insert_input {
  data: regions_allowed_workspace_insert_input!
  """upsert condition"""
  on_conflict: regions_allowed_workspace_on_conflict
}

input regions_allowed_workspace_on_conflict {
  constraint: regions_allowed_workspace_constraint!
  update_columns: [regions_allowed_workspace_update_column!]! = []
  where: regions_allowed_workspace_bool_exp
}

input regions_allowed_workspace_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  region: regions_order_by
  region_id: order_by
  updated_at: order_by
  workspace: workspaces_order_by
  workspace_id: order_by
}

input regions_allowed_workspace_pk_columns_input {
  id: uuid!
}

input regions_allowed_workspace_set_input {
  created_at: timestamptz
  description: String
  id: uuid
  region_id: uuid
  updated_at: timestamptz
  workspace_id: uuid
}

input regions_allowed_workspace_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: regions_allowed_workspace_set_input
  """filter the rows which have to be updated"""
  where: regions_allowed_workspace_bool_exp!
}

input regions_arr_rel_insert_input {
  data: [regions_insert_input!]!
  """upsert condition"""
  on_conflict: regions_on_conflict
}

input regions_bool_exp {
  _and: [regions_bool_exp!]
  _not: regions_bool_exp
  _or: [regions_bool_exp!]
  active: Boolean_comparison_exp
  allowedOrganizations: regions_allowed_organization_bool_exp
  allowedOrganizations_aggregate: regions_allowed_organization_aggregate_bool_exp
  allowedWorkspaces: regions_allowed_workspace_bool_exp
  apps: apps_bool_exp
  apps_aggregate: apps_aggregate_bool_exp
  awsName: String_comparison_exp
  city: String_comparison_exp
  country: countries_bool_exp
  countryCode: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  description: String_comparison_exp
  domain: String_comparison_exp
  id: uuid_comparison_exp
  isGdprCompliant: Boolean_comparison_exp
  name: String_comparison_exp
  region_type: region_type_bool_exp
  regions_allowed_workspaces: regions_allowed_workspace_bool_exp
  regions_allowed_workspaces_aggregate: regions_allowed_workspace_aggregate_bool_exp
  type: region_type_enum_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input regions_insert_input {
  active: Boolean
  allowedOrganizations: regions_allowed_organization_arr_rel_insert_input
  allowedWorkspaces: regions_allowed_workspace_obj_rel_insert_input
  apps: apps_arr_rel_insert_input
  awsName: String
  city: String
  country: countries_obj_rel_insert_input
  countryCode: String
  createdAt: timestamptz
  description: String
  domain: String
  id: uuid
  isGdprCompliant: Boolean
  name: String
  region_type: region_type_obj_rel_insert_input
  regions_allowed_workspaces: regions_allowed_workspace_arr_rel_insert_input
  type: region_type_enum
  updatedAt: timestamptz
}

input regions_max_order_by {
  awsName: order_by
  city: order_by
  countryCode: order_by
  createdAt: order_by
  description: order_by
  domain: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

input regions_min_order_by {
  awsName: order_by
  city: order_by
  countryCode: order_by
  createdAt: order_by
  description: order_by
  domain: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

input regions_obj_rel_insert_input {
  data: regions_insert_input!
  """upsert condition"""
  on_conflict: regions_on_conflict
}

input regions_on_conflict {
  constraint: regions_constraint!
  update_columns: [regions_update_column!]! = []
  where: regions_bool_exp
}

input regions_order_by {
  active: order_by
  allowedOrganizations_aggregate: regions_allowed_organization_aggregate_order_by
  allowedWorkspaces: regions_allowed_workspace_order_by
  apps_aggregate: apps_aggregate_order_by
  awsName: order_by
  city: order_by
  country: countries_order_by
  countryCode: order_by
  createdAt: order_by
  description: order_by
  domain: order_by
  id: order_by
  isGdprCompliant: order_by
  name: order_by
  region_type: region_type_order_by
  regions_allowed_workspaces_aggregate: regions_allowed_workspace_aggregate_order_by
  type: order_by
  updatedAt: order_by
}

input regions_pk_columns_input {
  id: uuid!
}

input regions_set_input {
  active: Boolean
  awsName: String
  city: String
  countryCode: String
  createdAt: timestamptz
  description: String
  domain: String
  id: uuid
  isGdprCompliant: Boolean
  name: String
  type: region_type_enum
  updatedAt: timestamptz
}

input regions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: regions_set_input
  """filter the rows which have to be updated"""
  where: regions_bool_exp!
}

input run_service_aggregate_bool_exp {
  count: run_service_aggregate_bool_exp_count
}

input run_service_aggregate_bool_exp_count {
  arguments: [run_service_select_column!]
  distinct: Boolean
  filter: run_service_bool_exp
  predicate: Int_comparison_exp!
}

input run_service_aggregate_order_by {
  count: order_by
  max: run_service_max_order_by
  min: run_service_min_order_by
}

input run_service_arr_rel_insert_input {
  data: [run_service_insert_input!]!
  """upsert condition"""
  on_conflict: run_service_on_conflict
}

input run_service_bool_exp {
  _and: [run_service_bool_exp!]
  _not: run_service_bool_exp
  _or: [run_service_bool_exp!]
  app: apps_bool_exp
  appID: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  mimirConfigEnc: String_comparison_exp
  subdomain: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

input run_service_insert_input {
  app: apps_obj_rel_insert_input
  appID: uuid
  createdAt: timestamptz
  id: uuid
  mimirConfigEnc: String
  subdomain: String
  updatedAt: timestamptz
}

input run_service_max_order_by {
  appID: order_by
  createdAt: order_by
  id: order_by
  mimirConfigEnc: order_by
  subdomain: order_by
  updatedAt: order_by
}

input run_service_min_order_by {
  appID: order_by
  createdAt: order_by
  id: order_by
  mimirConfigEnc: order_by
  subdomain: order_by
  updatedAt: order_by
}

input run_service_on_conflict {
  constraint: run_service_constraint!
  update_columns: [run_service_update_column!]! = []
  where: run_service_bool_exp
}

input run_service_order_by {
  app: apps_order_by
  appID: order_by
  createdAt: order_by
  id: order_by
  mimirConfigEnc: order_by
  subdomain: order_by
  updatedAt: order_by
}

input run_service_pk_columns_input {
  id: uuid!
}

input run_service_set_input {
  appID: uuid
  createdAt: timestamptz
  id: uuid
  mimirConfigEnc: String
  subdomain: String
  updatedAt: timestamptz
}

input run_service_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: run_service_set_input
  """filter the rows which have to be updated"""
  where: run_service_bool_exp!
}

input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

input software_type_bool_exp {
  _and: [software_type_bool_exp!]
  _not: software_type_bool_exp
  _or: [software_type_bool_exp!]
  comment: String_comparison_exp
  software_versions: software_versions_bool_exp
  software_versions_aggregate: software_versions_aggregate_bool_exp
  type: String_comparison_exp
}

input software_type_enum_comparison_exp {
  _eq: software_type_enum
  _in: [software_type_enum!]
  _is_null: Boolean
  _neq: software_type_enum
  _nin: [software_type_enum!]
}

input software_type_insert_input {
  comment: String
  software_versions: software_versions_arr_rel_insert_input
  type: String
}

input software_type_obj_rel_insert_input {
  data: software_type_insert_input!
  """upsert condition"""
  on_conflict: software_type_on_conflict
}

input software_type_on_conflict {
  constraint: software_type_constraint!
  update_columns: [software_type_update_column!]! = []
  where: software_type_bool_exp
}

input software_type_order_by {
  comment: order_by
  software_versions_aggregate: software_versions_aggregate_order_by
  type: order_by
}

input software_type_pk_columns_input {
  type: String!
}

input software_type_set_input {
  comment: String
  type: String
}

input software_type_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: software_type_set_input
  """filter the rows which have to be updated"""
  where: software_type_bool_exp!
}

input software_versions_aggregate_bool_exp {
  count: software_versions_aggregate_bool_exp_count
}

input software_versions_aggregate_bool_exp_count {
  arguments: [software_versions_select_column!]
  distinct: Boolean
  filter: software_versions_bool_exp
  predicate: Int_comparison_exp!
}

input software_versions_aggregate_order_by {
  count: order_by
  max: software_versions_max_order_by
  min: software_versions_min_order_by
}

input software_versions_arr_rel_insert_input {
  data: [software_versions_insert_input!]!
  """upsert condition"""
  on_conflict: software_versions_on_conflict
}

input software_versions_bool_exp {
  _and: [software_versions_bool_exp!]
  _not: software_versions_bool_exp
  _or: [software_versions_bool_exp!]
  id: uuid_comparison_exp
  software: software_type_enum_comparison_exp
  softwareType: software_type_bool_exp
  version: String_comparison_exp
}

input software_versions_insert_input {
  id: uuid
  software: software_type_enum
  softwareType: software_type_obj_rel_insert_input
  version: String
}

input software_versions_max_order_by {
  id: order_by
  version: order_by
}

input software_versions_min_order_by {
  id: order_by
  version: order_by
}

input software_versions_on_conflict {
  constraint: software_versions_constraint!
  update_columns: [software_versions_update_column!]! = []
  where: software_versions_bool_exp
}

input software_versions_order_by {
  id: order_by
  software: order_by
  softwareType: software_type_order_by
  version: order_by
}

input software_versions_pk_columns_input {
  id: uuid!
}

input software_versions_set_input {
  id: uuid
  software: software_type_enum
  version: String
}

input software_versions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: software_versions_set_input
  """filter the rows which have to be updated"""
  where: software_versions_bool_exp!
}

input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

input users_aggregate_bool_exp {
  bool_and: users_aggregate_bool_exp_bool_and
  bool_or: users_aggregate_bool_exp_bool_or
  count: users_aggregate_bool_exp_count
}

input users_aggregate_bool_exp_bool_and {
  arguments: users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: users_bool_exp
  predicate: Boolean_comparison_exp!
}

input users_aggregate_bool_exp_bool_or {
  arguments: users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: users_bool_exp
  predicate: Boolean_comparison_exp!
}

input users_aggregate_bool_exp_count {
  arguments: [users_select_column!]
  distinct: Boolean
  filter: users_bool_exp
  predicate: Int_comparison_exp!
}

input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

input users_append_input {
  metadata: jsonb
}

input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  """upsert condition"""
  on_conflict: users_on_conflict
}

input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  activeMfaType: String_comparison_exp
  apps: apps_bool_exp
  apps_aggregate: apps_aggregate_bool_exp
  avatarUrl: String_comparison_exp
  cliTokens: cliTokens_bool_exp
  cliTokens_aggregate: cliTokens_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  creatorOfWorkspaces: workspaces_bool_exp
  creatorOfWorkspaces_aggregate: workspaces_aggregate_bool_exp
  currentChallenge: String_comparison_exp
  defaultRole: String_comparison_exp
  defaultRoleByRole: authRoles_bool_exp
  disabled: Boolean_comparison_exp
  displayName: String_comparison_exp
  email: citext_comparison_exp
  emailVerified: Boolean_comparison_exp
  github_app_installations: githubAppInstallations_bool_exp
  github_app_installations_aggregate: githubAppInstallations_aggregate_bool_exp
  id: uuid_comparison_exp
  isAnonymous: Boolean_comparison_exp
  lastSeen: timestamptz_comparison_exp
  locale: String_comparison_exp
  metadata: jsonb_comparison_exp
  newEmail: citext_comparison_exp
  organizationMembership: organization_members_bool_exp
  organizationMembership_aggregate: organization_members_aggregate_bool_exp
  otpHash: String_comparison_exp
  otpHashExpiresAt: timestamptz_comparison_exp
  otpMethodLastUsed: String_comparison_exp
  passwordHash: String_comparison_exp
  payment_methods: paymentMethods_bool_exp
  payment_methods_aggregate: paymentMethods_aggregate_bool_exp
  phoneNumber: String_comparison_exp
  phoneNumberVerified: Boolean_comparison_exp
  refreshTokens: authRefreshTokens_bool_exp
  refreshTokens_aggregate: authRefreshTokens_aggregate_bool_exp
  role: authRoles_bool_exp
  roles: authUserRoles_bool_exp
  roles_aggregate: authUserRoles_aggregate_bool_exp
  securityKeys: authUserSecurityKeys_bool_exp
  securityKeys_aggregate: authUserSecurityKeys_aggregate_bool_exp
  ticket: String_comparison_exp
  ticketExpiresAt: timestamptz_comparison_exp
  totpSecret: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  userProviders: authUserProviders_bool_exp
  userProviders_aggregate: authUserProviders_aggregate_bool_exp
  workspaceMemberInvitesByInvitedByUserId: workspaceMemberInvites_bool_exp
  workspaceMemberInvitesByInvitedByUserId_aggregate: workspaceMemberInvites_aggregate_bool_exp
  workspaceMembers: workspaceMembers_bool_exp
  workspaceMembers_aggregate: workspaceMembers_aggregate_bool_exp
  workspace_member_invites: workspaceMemberInvites_bool_exp
  workspace_member_invites_aggregate: workspaceMemberInvites_aggregate_bool_exp
}

input users_delete_at_path_input {
  metadata: [String!]
}

input users_delete_elem_input {
  metadata: Int
}

input users_delete_key_input {
  metadata: String
}

input users_insert_input {
  activeMfaType: String
  apps: apps_arr_rel_insert_input
  avatarUrl: String
  cliTokens: cliTokens_arr_rel_insert_input
  createdAt: timestamptz
  creatorOfWorkspaces: workspaces_arr_rel_insert_input
  currentChallenge: String
  defaultRole: String
  defaultRoleByRole: authRoles_obj_rel_insert_input
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  github_app_installations: githubAppInstallations_arr_rel_insert_input
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  newEmail: citext
  organizationMembership: organization_members_arr_rel_insert_input
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  payment_methods: paymentMethods_arr_rel_insert_input
  phoneNumber: String
  phoneNumberVerified: Boolean
  refreshTokens: authRefreshTokens_arr_rel_insert_input
  role: authRoles_obj_rel_insert_input
  roles: authUserRoles_arr_rel_insert_input
  securityKeys: authUserSecurityKeys_arr_rel_insert_input
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
  userProviders: authUserProviders_arr_rel_insert_input
  workspaceMemberInvitesByInvitedByUserId: workspaceMemberInvites_arr_rel_insert_input
  workspaceMembers: workspaceMembers_arr_rel_insert_input
  workspace_member_invites: workspaceMemberInvites_arr_rel_insert_input
}

input users_max_order_by {
  activeMfaType: order_by
  avatarUrl: order_by
  createdAt: order_by
  currentChallenge: order_by
  defaultRole: order_by
  displayName: order_by
  email: order_by
  id: order_by
  lastSeen: order_by
  locale: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
}

input users_min_order_by {
  activeMfaType: order_by
  avatarUrl: order_by
  createdAt: order_by
  currentChallenge: order_by
  defaultRole: order_by
  displayName: order_by
  email: order_by
  id: order_by
  lastSeen: order_by
  locale: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
}

input users_obj_rel_insert_input {
  data: users_insert_input!
  """upsert condition"""
  on_conflict: users_on_conflict
}

input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

input users_order_by {
  activeMfaType: order_by
  apps_aggregate: apps_aggregate_order_by
  avatarUrl: order_by
  cliTokens_aggregate: cliTokens_aggregate_order_by
  createdAt: order_by
  creatorOfWorkspaces_aggregate: workspaces_aggregate_order_by
  currentChallenge: order_by
  defaultRole: order_by
  defaultRoleByRole: authRoles_order_by
  disabled: order_by
  displayName: order_by
  email: order_by
  emailVerified: order_by
  github_app_installations_aggregate: githubAppInstallations_aggregate_order_by
  id: order_by
  isAnonymous: order_by
  lastSeen: order_by
  locale: order_by
  metadata: order_by
  newEmail: order_by
  organizationMembership_aggregate: organization_members_aggregate_order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  payment_methods_aggregate: paymentMethods_aggregate_order_by
  phoneNumber: order_by
  phoneNumberVerified: order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
  role: authRoles_order_by
  roles_aggregate: authUserRoles_aggregate_order_by
  securityKeys_aggregate: authUserSecurityKeys_aggregate_order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
  userProviders_aggregate: authUserProviders_aggregate_order_by
  workspaceMemberInvitesByInvitedByUserId_aggregate: workspaceMemberInvites_aggregate_order_by
  workspaceMembers_aggregate: workspaceMembers_aggregate_order_by
  workspace_member_invites_aggregate: workspaceMemberInvites_aggregate_order_by
}

input users_pk_columns_input {
  id: uuid!
}

input users_prepend_input {
  metadata: jsonb
}

input users_set_input {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

input users_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: users_append_input
  """delete the field or element with specified path (for JSON arrays, negative integers count from the end)"""
  _delete_at_path: users_delete_at_path_input
  """delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"""
  _delete_elem: users_delete_elem_input
  """delete key/value pair or string element. key/value pairs are matched based on their key value"""
  _delete_key: users_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: users_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input
  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

input uuid_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [uuid!]
  """does the array contain the given value"""
  _contains: [uuid!]
  _eq: [uuid!]
  _gt: [uuid!]
  _gte: [uuid!]
  _in: [[uuid!]!]
  _is_null: Boolean
  _lt: [uuid!]
  _lte: [uuid!]
  _neq: [uuid!]
  _nin: [[uuid!]!]
}

input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

input virus_append_input {
  userSession: jsonb
}

input virus_bool_exp {
  _and: [virus_bool_exp!]
  _not: virus_bool_exp
  _or: [virus_bool_exp!]
  createdAt: timestamptz_comparison_exp
  file: files_bool_exp
  fileId: uuid_comparison_exp
  filename: String_comparison_exp
  id: uuid_comparison_exp
  updatedAt: timestamptz_comparison_exp
  userSession: jsonb_comparison_exp
  virus: String_comparison_exp
}

input virus_delete_at_path_input {
  userSession: [String!]
}

input virus_delete_elem_input {
  userSession: Int
}

input virus_delete_key_input {
  userSession: String
}

input virus_insert_input {
  createdAt: timestamptz
  file: files_obj_rel_insert_input
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  userSession: jsonb
  virus: String
}

input virus_on_conflict {
  constraint: virus_constraint!
  update_columns: [virus_update_column!]! = []
  where: virus_bool_exp
}

input virus_order_by {
  createdAt: order_by
  file: files_order_by
  fileId: order_by
  filename: order_by
  id: order_by
  updatedAt: order_by
  userSession: order_by
  virus: order_by
}

input virus_pk_columns_input {
  id: uuid!
}

input virus_prepend_input {
  userSession: jsonb
}

input virus_set_input {
  createdAt: timestamptz
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  userSession: jsonb
  virus: String
}

input virus_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: virus_append_input
  """delete the field or element with specified path (for JSON arrays, negative integers count from the end)"""
  _delete_at_path: virus_delete_at_path_input
  """delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"""
  _delete_elem: virus_delete_elem_input
  """delete key/value pair or string element. key/value pairs are matched based on their key value"""
  _delete_key: virus_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: virus_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: virus_set_input
  """filter the rows which have to be updated"""
  where: virus_bool_exp!
}

input workspaceMemberInvites_aggregate_bool_exp {
  bool_and: workspaceMemberInvites_aggregate_bool_exp_bool_and
  bool_or: workspaceMemberInvites_aggregate_bool_exp_bool_or
  count: workspaceMemberInvites_aggregate_bool_exp_count
}

input workspaceMemberInvites_aggregate_bool_exp_bool_and {
  arguments: workspaceMemberInvites_select_column_workspaceMemberInvites_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: workspaceMemberInvites_bool_exp
  predicate: Boolean_comparison_exp!
}

input workspaceMemberInvites_aggregate_bool_exp_bool_or {
  arguments: workspaceMemberInvites_select_column_workspaceMemberInvites_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: workspaceMemberInvites_bool_exp
  predicate: Boolean_comparison_exp!
}

input workspaceMemberInvites_aggregate_bool_exp_count {
  arguments: [workspaceMemberInvites_select_column!]
  distinct: Boolean
  filter: workspaceMemberInvites_bool_exp
  predicate: Int_comparison_exp!
}

input workspaceMemberInvites_aggregate_order_by {
  count: order_by
  max: workspaceMemberInvites_max_order_by
  min: workspaceMemberInvites_min_order_by
}

input workspaceMemberInvites_arr_rel_insert_input {
  data: [workspaceMemberInvites_insert_input!]!
  """upsert condition"""
  on_conflict: workspaceMemberInvites_on_conflict
}

input workspaceMemberInvites_bool_exp {
  _and: [workspaceMemberInvites_bool_exp!]
  _not: workspaceMemberInvites_bool_exp
  _or: [workspaceMemberInvites_bool_exp!]
  createdAt: timestamptz_comparison_exp
  email: citext_comparison_exp
  id: uuid_comparison_exp
  invitedByUser: users_bool_exp
  invitedByUserId: uuid_comparison_exp
  isAccepted: Boolean_comparison_exp
  memberType: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  userByEmail: users_bool_exp
  workspace: workspaces_bool_exp
  workspaceId: uuid_comparison_exp
}

input workspaceMemberInvites_insert_input {
  createdAt: timestamptz
  email: citext
  id: uuid
  invitedByUser: users_obj_rel_insert_input
  invitedByUserId: uuid
  isAccepted: Boolean
  """owner or member"""
  memberType: String
  updatedAt: timestamptz
  userByEmail: users_obj_rel_insert_input
  workspace: workspaces_obj_rel_insert_input
  workspaceId: uuid
}

input workspaceMemberInvites_max_order_by {
  createdAt: order_by
  email: order_by
  id: order_by
  invitedByUserId: order_by
  """owner or member"""
  memberType: order_by
  updatedAt: order_by
  workspaceId: order_by
}

input workspaceMemberInvites_min_order_by {
  createdAt: order_by
  email: order_by
  id: order_by
  invitedByUserId: order_by
  """owner or member"""
  memberType: order_by
  updatedAt: order_by
  workspaceId: order_by
}

input workspaceMemberInvites_on_conflict {
  constraint: workspaceMemberInvites_constraint!
  update_columns: [workspaceMemberInvites_update_column!]! = []
  where: workspaceMemberInvites_bool_exp
}

input workspaceMemberInvites_order_by {
  createdAt: order_by
  email: order_by
  id: order_by
  invitedByUser: users_order_by
  invitedByUserId: order_by
  isAccepted: order_by
  memberType: order_by
  updatedAt: order_by
  userByEmail: users_order_by
  workspace: workspaces_order_by
  workspaceId: order_by
}

input workspaceMemberInvites_pk_columns_input {
  id: uuid!
}

input workspaceMemberInvites_set_input {
  createdAt: timestamptz
  email: citext
  id: uuid
  invitedByUserId: uuid
  isAccepted: Boolean
  """owner or member"""
  memberType: String
  updatedAt: timestamptz
  workspaceId: uuid
}

input workspaceMemberInvites_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: workspaceMemberInvites_set_input
  """filter the rows which have to be updated"""
  where: workspaceMemberInvites_bool_exp!
}

input workspaceMembers_aggregate_bool_exp {
  count: workspaceMembers_aggregate_bool_exp_count
}

input workspaceMembers_aggregate_bool_exp_count {
  arguments: [workspaceMembers_select_column!]
  distinct: Boolean
  filter: workspaceMembers_bool_exp
  predicate: Int_comparison_exp!
}

input workspaceMembers_aggregate_order_by {
  count: order_by
  max: workspaceMembers_max_order_by
  min: workspaceMembers_min_order_by
}

input workspaceMembers_arr_rel_insert_input {
  data: [workspaceMembers_insert_input!]!
  """upsert condition"""
  on_conflict: workspaceMembers_on_conflict
}

input workspaceMembers_bool_exp {
  _and: [workspaceMembers_bool_exp!]
  _not: workspaceMembers_bool_exp
  _or: [workspaceMembers_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  type: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
  workspace: workspaces_bool_exp
  workspaceId: uuid_comparison_exp
}

input workspaceMembers_insert_input {
  createdAt: timestamptz
  id: uuid
  """owner or member"""
  type: String
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userId: uuid
  workspace: workspaces_obj_rel_insert_input
  workspaceId: uuid
}

input workspaceMembers_max_order_by {
  createdAt: order_by
  id: order_by
  """owner or member"""
  type: order_by
  updatedAt: order_by
  userId: order_by
  workspaceId: order_by
}

input workspaceMembers_min_order_by {
  createdAt: order_by
  id: order_by
  """owner or member"""
  type: order_by
  updatedAt: order_by
  userId: order_by
  workspaceId: order_by
}

input workspaceMembers_on_conflict {
  constraint: workspaceMembers_constraint!
  update_columns: [workspaceMembers_update_column!]! = []
  where: workspaceMembers_bool_exp
}

input workspaceMembers_order_by {
  createdAt: order_by
  id: order_by
  type: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
  workspace: workspaces_order_by
  workspaceId: order_by
}

input workspaceMembers_pk_columns_input {
  id: uuid!
}

input workspaceMembers_set_input {
  createdAt: timestamptz
  id: uuid
  """owner or member"""
  type: String
  updatedAt: timestamptz
  userId: uuid
  workspaceId: uuid
}

input workspaceMembers_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: workspaceMembers_set_input
  """filter the rows which have to be updated"""
  where: workspaceMembers_bool_exp!
}

input workspaces_aggregate_bool_exp {
  count: workspaces_aggregate_bool_exp_count
}

input workspaces_aggregate_bool_exp_count {
  arguments: [workspaces_select_column!]
  distinct: Boolean
  filter: workspaces_bool_exp
  predicate: Int_comparison_exp!
}

input workspaces_aggregate_order_by {
  count: order_by
  max: workspaces_max_order_by
  min: workspaces_min_order_by
}

input workspaces_arr_rel_insert_input {
  data: [workspaces_insert_input!]!
  """upsert condition"""
  on_conflict: workspaces_on_conflict
}

input workspaces_bool_exp {
  _and: [workspaces_bool_exp!]
  _not: workspaces_bool_exp
  _or: [workspaces_bool_exp!]
  addressCity: String_comparison_exp
  addressCountry: countries_bool_exp
  addressCountryCode: String_comparison_exp
  addressLine1: String_comparison_exp
  addressLine2: String_comparison_exp
  addressPostalCode: String_comparison_exp
  addressState: String_comparison_exp
  allowedPrivateRegions: regions_allowed_workspace_bool_exp
  apps: apps_bool_exp
  apps_aggregate: apps_aggregate_bool_exp
  companyName: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  creatorUser: users_bool_exp
  creatorUserId: uuid_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  paymentMethod: paymentMethods_bool_exp
  paymentMethods: paymentMethods_bool_exp
  paymentMethods_aggregate: paymentMethods_aggregate_bool_exp
  regions_allowed_workspaces: regions_allowed_workspace_bool_exp
  regions_allowed_workspaces_aggregate: regions_allowed_workspace_aggregate_bool_exp
  slug: String_comparison_exp
  stripeCustomerId: String_comparison_exp
  taxIdType: String_comparison_exp
  taxIdValue: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  workspaceMemberInvites: workspaceMemberInvites_bool_exp
  workspaceMemberInvites_aggregate: workspaceMemberInvites_aggregate_bool_exp
  workspaceMembers: workspaceMembers_bool_exp
  workspaceMembers_aggregate: workspaceMembers_aggregate_bool_exp
}

input workspaces_insert_input {
  """City, district, suburb, town, or village."""
  addressCity: String
  addressCountry: countries_obj_rel_insert_input
  """Two-letter country code (ISO 3166-1 alpha-2)."""
  addressCountryCode: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  addressLine1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  addressLine2: String
  """ZIP or postal code."""
  addressPostalCode: String
  """State, county, province, or region."""
  addressState: String
  allowedPrivateRegions: regions_allowed_workspace_obj_rel_insert_input
  apps: apps_arr_rel_insert_input
  companyName: String
  createdAt: timestamptz
  creatorUser: users_obj_rel_insert_input
  creatorUserId: uuid
  email: String
  id: uuid
  name: String
  paymentMethod: paymentMethods_obj_rel_insert_input
  paymentMethods: paymentMethods_arr_rel_insert_input
  regions_allowed_workspaces: regions_allowed_workspace_arr_rel_insert_input
  slug: String
  stripeCustomerId: String
  taxIdType: String
  taxIdValue: String
  updatedAt: timestamptz
  workspaceMemberInvites: workspaceMemberInvites_arr_rel_insert_input
  workspaceMembers: workspaceMembers_arr_rel_insert_input
}

input workspaces_max_order_by {
  """City, district, suburb, town, or village."""
  addressCity: order_by
  """Two-letter country code (ISO 3166-1 alpha-2)."""
  addressCountryCode: order_by
  """Address line 1 (e.g., street, PO Box, or company name)."""
  addressLine1: order_by
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  addressLine2: order_by
  """ZIP or postal code."""
  addressPostalCode: order_by
  """State, county, province, or region."""
  addressState: order_by
  companyName: order_by
  createdAt: order_by
  creatorUserId: order_by
  email: order_by
  id: order_by
  name: order_by
  slug: order_by
  stripeCustomerId: order_by
  taxIdType: order_by
  taxIdValue: order_by
  updatedAt: order_by
}

input workspaces_min_order_by {
  """City, district, suburb, town, or village."""
  addressCity: order_by
  """Two-letter country code (ISO 3166-1 alpha-2)."""
  addressCountryCode: order_by
  """Address line 1 (e.g., street, PO Box, or company name)."""
  addressLine1: order_by
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  addressLine2: order_by
  """ZIP or postal code."""
  addressPostalCode: order_by
  """State, county, province, or region."""
  addressState: order_by
  companyName: order_by
  createdAt: order_by
  creatorUserId: order_by
  email: order_by
  id: order_by
  name: order_by
  slug: order_by
  stripeCustomerId: order_by
  taxIdType: order_by
  taxIdValue: order_by
  updatedAt: order_by
}

input workspaces_obj_rel_insert_input {
  data: workspaces_insert_input!
  """upsert condition"""
  on_conflict: workspaces_on_conflict
}

input workspaces_on_conflict {
  constraint: workspaces_constraint!
  update_columns: [workspaces_update_column!]! = []
  where: workspaces_bool_exp
}

input workspaces_order_by {
  addressCity: order_by
  addressCountry: countries_order_by
  addressCountryCode: order_by
  addressLine1: order_by
  addressLine2: order_by
  addressPostalCode: order_by
  addressState: order_by
  allowedPrivateRegions: regions_allowed_workspace_order_by
  apps_aggregate: apps_aggregate_order_by
  companyName: order_by
  createdAt: order_by
  creatorUser: users_order_by
  creatorUserId: order_by
  email: order_by
  id: order_by
  name: order_by
  paymentMethod: paymentMethods_order_by
  paymentMethods_aggregate: paymentMethods_aggregate_order_by
  regions_allowed_workspaces_aggregate: regions_allowed_workspace_aggregate_order_by
  slug: order_by
  stripeCustomerId: order_by
  taxIdType: order_by
  taxIdValue: order_by
  updatedAt: order_by
  workspaceMemberInvites_aggregate: workspaceMemberInvites_aggregate_order_by
  workspaceMembers_aggregate: workspaceMembers_aggregate_order_by
}

input workspaces_pk_columns_input {
  id: uuid!
}

input workspaces_set_input {
  """City, district, suburb, town, or village."""
  addressCity: String
  """Two-letter country code (ISO 3166-1 alpha-2)."""
  addressCountryCode: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  addressLine1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  addressLine2: String
  """ZIP or postal code."""
  addressPostalCode: String
  """State, county, province, or region."""
  addressState: String
  companyName: String
  createdAt: timestamptz
  creatorUserId: uuid
  email: String
  id: uuid
  name: String
  slug: String
  stripeCustomerId: String
  taxIdType: String
  taxIdValue: String
  updatedAt: timestamptz
}

input workspaces_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: workspaces_set_input
  """filter the rows which have to be updated"""
  where: workspaces_bool_exp!
}

type Query {
  """fetch data from the table: "announcements_read" using primary key columns"""
announcementRead(id: uuid!): announcements_read
  """fetch data from the table: "announcements""""
announcements(distinct_on: [announcements_select_column!], limit: Int, offset: Int, order_by: [announcements_order_by!], where: announcements_bool_exp): [announcements!]!
  """fetch data from the table: "announcements_read""""
announcementsRead(distinct_on: [announcements_read_select_column!], limit: Int, offset: Int, order_by: [announcements_read_order_by!], where: announcements_read_bool_exp): [announcements_read!]!
  """fetch aggregated fields from the table: "announcements_read""""
announcementsReadAggregate(distinct_on: [announcements_read_select_column!], limit: Int, offset: Int, order_by: [announcements_read_order_by!], where: announcements_read_bool_exp): announcements_read_aggregate!
  """fetch aggregated fields from the table: "announcements""""
announcements_aggregate(distinct_on: [announcements_select_column!], limit: Int, offset: Int, order_by: [announcements_order_by!], where: announcements_bool_exp): announcements_aggregate!
  """fetch data from the table: "announcements" using primary key columns"""
announcements_by_pk(id: uuid!): announcements
  """fetch data from the table: "apps" using primary key columns"""
app(id: uuid!): apps
  appSecrets(appID: uuid!): [ConfigEnvironmentVariable!]!
  """fetch data from the table: "app_states" using primary key columns"""
appState(id: Int!): appStates
  """fetch data from the table: "app_state_history""""
appStateHistories(distinct_on: [appStateHistory_select_column!], limit: Int, offset: Int, order_by: [appStateHistory_order_by!], where: appStateHistory_bool_exp): [appStateHistory!]!
  """fetch data from the table: "app_state_history" using primary key columns"""
appStateHistory(id: uuid!): appStateHistory
  """fetch aggregated fields from the table: "app_state_history""""
appStateHistoryAggregate(distinct_on: [appStateHistory_select_column!], limit: Int, offset: Int, order_by: [appStateHistory_order_by!], where: appStateHistory_bool_exp): appStateHistory_aggregate!
  """fetch data from the table: "app_states""""
appStates(distinct_on: [appStates_select_column!], limit: Int, offset: Int, order_by: [appStates_order_by!], where: appStates_bool_exp): [appStates!]!
  """fetch aggregated fields from the table: "app_states""""
appStatesAggregate(distinct_on: [appStates_select_column!], limit: Int, offset: Int, order_by: [appStates_order_by!], where: appStates_bool_exp): appStates_aggregate!
  """An array relationship"""
apps(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): [apps!]!
  """fetch aggregated fields from the table: "apps""""
appsAggregate(distinct_on: [apps_select_column!], limit: Int, offset: Int, order_by: [apps_order_by!], where: apps_bool_exp): apps_aggregate!
  appsSecrets: [ConfigAppSecrets!]
  """fetch data from the table: "auth.providers" using primary key columns"""
authProvider(id: String!): authProviders
  """fetch data from the table: "auth.provider_requests" using primary key columns"""
authProviderRequest(id: uuid!): authProviderRequests
  """fetch data from the table: "auth.provider_requests""""
authProviderRequests(distinct_on: [authProviderRequests_select_column!], limit: Int, offset: Int, order_by: [authProviderRequests_order_by!], where: authProviderRequests_bool_exp): [authProviderRequests!]!
  """fetch aggregated fields from the table: "auth.provider_requests""""
authProviderRequestsAggregate(distinct_on: [authProviderRequests_select_column!], limit: Int, offset: Int, order_by: [authProviderRequests_order_by!], where: authProviderRequests_bool_exp): authProviderRequests_aggregate!
  """fetch data from the table: "auth.providers""""
authProviders(distinct_on: [authProviders_select_column!], limit: Int, offset: Int, order_by: [authProviders_order_by!], where: authProviders_bool_exp): [authProviders!]!
  """fetch aggregated fields from the table: "auth.providers""""
authProvidersAggregate(distinct_on: [authProviders_select_column!], limit: Int, offset: Int, order_by: [authProviders_order_by!], where: authProviders_bool_exp): authProviders_aggregate!
  """fetch data from the table: "auth.refresh_tokens" using primary key columns"""
authRefreshToken(id: uuid!): authRefreshTokens
  """fetch data from the table: "auth.refresh_token_types" using primary key columns"""
authRefreshTokenType(value: String!): authRefreshTokenTypes
  """fetch data from the table: "auth.refresh_token_types""""
authRefreshTokenTypes(distinct_on: [authRefreshTokenTypes_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokenTypes_order_by!], where: authRefreshTokenTypes_bool_exp): [authRefreshTokenTypes!]!
  """fetch aggregated fields from the table: "auth.refresh_token_types""""
authRefreshTokenTypesAggregate(distinct_on: [authRefreshTokenTypes_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokenTypes_order_by!], where: authRefreshTokenTypes_bool_exp): authRefreshTokenTypes_aggregate!
  """fetch data from the table: "auth.refresh_tokens""""
authRefreshTokens(distinct_on: [authRefreshTokens_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokens_order_by!], where: authRefreshTokens_bool_exp): [authRefreshTokens!]!
  """fetch aggregated fields from the table: "auth.refresh_tokens""""
authRefreshTokensAggregate(distinct_on: [authRefreshTokens_select_column!], limit: Int, offset: Int, order_by: [authRefreshTokens_order_by!], where: authRefreshTokens_bool_exp): authRefreshTokens_aggregate!
  """fetch data from the table: "auth.roles" using primary key columns"""
authRole(role: String!): authRoles
  """fetch data from the table: "auth.roles""""
authRoles(distinct_on: [authRoles_select_column!], limit: Int, offset: Int, order_by: [authRoles_order_by!], where: authRoles_bool_exp): [authRoles!]!
  """fetch aggregated fields from the table: "auth.roles""""
authRolesAggregate(distinct_on: [authRoles_select_column!], limit: Int, offset: Int, order_by: [authRoles_order_by!], where: authRoles_bool_exp): authRoles_aggregate!
  """fetch data from the table: "auth.user_providers" using primary key columns"""
authUserProvider(id: uuid!): authUserProviders
  """fetch data from the table: "auth.user_providers""""
authUserProviders(distinct_on: [authUserProviders_select_column!], limit: Int, offset: Int, order_by: [authUserProviders_order_by!], where: authUserProviders_bool_exp): [authUserProviders!]!
  """fetch aggregated fields from the table: "auth.user_providers""""
authUserProvidersAggregate(distinct_on: [authUserProviders_select_column!], limit: Int, offset: Int, order_by: [authUserProviders_order_by!], where: authUserProviders_bool_exp): authUserProviders_aggregate!
  """fetch data from the table: "auth.user_roles" using primary key columns"""
authUserRole(id: uuid!): authUserRoles
  """fetch data from the table: "auth.user_roles""""
authUserRoles(distinct_on: [authUserRoles_select_column!], limit: Int, offset: Int, order_by: [authUserRoles_order_by!], where: authUserRoles_bool_exp): [authUserRoles!]!
  """fetch aggregated fields from the table: "auth.user_roles""""
authUserRolesAggregate(distinct_on: [authUserRoles_select_column!], limit: Int, offset: Int, order_by: [authUserRoles_order_by!], where: authUserRoles_bool_exp): authUserRoles_aggregate!
  """fetch data from the table: "auth.user_security_keys" using primary key columns"""
authUserSecurityKey(id: uuid!): authUserSecurityKeys
  """fetch data from the table: "auth.user_security_keys""""
authUserSecurityKeys(distinct_on: [authUserSecurityKeys_select_column!], limit: Int, offset: Int, order_by: [authUserSecurityKeys_order_by!], where: authUserSecurityKeys_bool_exp): [authUserSecurityKeys!]!
  """fetch aggregated fields from the table: "auth.user_security_keys""""
authUserSecurityKeysAggregate(distinct_on: [authUserSecurityKeys_select_column!], limit: Int, offset: Int, order_by: [authUserSecurityKeys_order_by!], where: authUserSecurityKeys_bool_exp): authUserSecurityKeys_aggregate!
  """fetch data from the table: "auth.migrations""""
auth_migrations(distinct_on: [auth_migrations_select_column!], limit: Int, offset: Int, order_by: [auth_migrations_order_by!], where: auth_migrations_bool_exp): [auth_migrations!]!
  """fetch aggregated fields from the table: "auth.migrations""""
auth_migrations_aggregate(distinct_on: [auth_migrations_select_column!], limit: Int, offset: Int, order_by: [auth_migrations_order_by!], where: auth_migrations_bool_exp): auth_migrations_aggregate!
  """fetch data from the table: "auth.migrations" using primary key columns"""
auth_migrations_by_pk(id: Int!): auth_migrations
  """fetch data from the table: "backups" using primary key columns"""
backup(id: uuid!): backups
  """An array relationship"""
backups(distinct_on: [backups_select_column!], limit: Int, offset: Int, order_by: [backups_order_by!], where: backups_bool_exp): [backups!]!
  """fetch aggregated fields from the table: "backups""""
backupsAggregate(distinct_on: [backups_select_column!], limit: Int, offset: Int, order_by: [backups_order_by!], where: backups_bool_exp): backups_aggregate!
  """fetch data from the table: "billing.dedicated_compute" using primary key columns"""
billingDedicatedCompute(id: uuid!): billing_dedicated_compute
  """fetch aggregated fields from the table: "billing.dedicated_compute""""
billingDedicatedComputeAggregate(distinct_on: [billing_dedicated_compute_select_column!], limit: Int, offset: Int, order_by: [billing_dedicated_compute_order_by!], where: billing_dedicated_compute_bool_exp): billing_dedicated_compute_aggregate!
  """fetch data from the table: "billing.dedicated_compute""""
billingDedicatedComputes(distinct_on: [billing_dedicated_compute_select_column!], limit: Int, offset: Int, order_by: [billing_dedicated_compute_order_by!], where: billing_dedicated_compute_bool_exp): [billing_dedicated_compute!]!
  billingGetNextInvoice(organizationID: uuid!): InvoiceSummary
  billingOrganizationCustomePortal(organizationID: uuid!): String!
  """fetch data from the table: "billing.reports" using primary key columns"""
billingReport(id: uuid!): billing_reports
  """fetch data from the table: "billing.reports""""
billingReports(distinct_on: [billing_reports_select_column!], limit: Int, offset: Int, order_by: [billing_reports_order_by!], where: billing_reports_bool_exp): [billing_reports!]!
  """fetch aggregated fields from the table: "billing.reports""""
billingReportsAggregate(distinct_on: [billing_reports_select_column!], limit: Int, offset: Int, order_by: [billing_reports_order_by!], where: billing_reports_bool_exp): billing_reports_aggregate!
  """fetch data from the table: "billing.resources" using primary key columns"""
billingResource(id: uuid!): billing_resources
  """fetch data from the table: "billing.resources""""
billingResources(distinct_on: [billing_resources_select_column!], limit: Int, offset: Int, order_by: [billing_resources_order_by!], where: billing_resources_bool_exp): [billing_resources!]!
  """fetch aggregated fields from the table: "billing.resources""""
billingResourcesAggregate(distinct_on: [billing_resources_select_column!], limit: Int, offset: Int, order_by: [billing_resources_order_by!], where: billing_resources_bool_exp): billing_resources_aggregate!
  """fetch data from the table: "billing.subscriptions" using primary key columns"""
billingSubscription(id: uuid!): billing_subscriptions
  """fetch data from the table: "billing.subscriptions""""
billingSubscriptions(distinct_on: [billing_subscriptions_select_column!], limit: Int, offset: Int, order_by: [billing_subscriptions_order_by!], where: billing_subscriptions_bool_exp): [billing_subscriptions!]!
  """fetch aggregated fields from the table: "billing.subscriptions""""
billingSubscriptionsAggregate(distinct_on: [billing_subscriptions_select_column!], limit: Int, offset: Int, order_by: [billing_subscriptions_order_by!], where: billing_subscriptions_bool_exp): billing_subscriptions_aggregate!
  billingVerifySubscriptions: VerifySubscriptionsResponse!
  """fetch data from the table: "billing.report_resource_type""""
billing_report_resource_type(distinct_on: [billing_report_resource_type_select_column!], limit: Int, offset: Int, order_by: [billing_report_resource_type_order_by!], where: billing_report_resource_type_bool_exp): [billing_report_resource_type!]!
  """fetch aggregated fields from the table: "billing.report_resource_type""""
billing_report_resource_type_aggregate(distinct_on: [billing_report_resource_type_select_column!], limit: Int, offset: Int, order_by: [billing_report_resource_type_order_by!], where: billing_report_resource_type_bool_exp): billing_report_resource_type_aggregate!
  """fetch data from the table: "billing.report_resource_type" using primary key columns"""
billing_report_resource_type_by_pk(value: String!): billing_report_resource_type
  """fetch data from the table: "billing.report_type""""
billing_report_type(distinct_on: [billing_report_type_select_column!], limit: Int, offset: Int, order_by: [billing_report_type_order_by!], where: billing_report_type_bool_exp): [billing_report_type!]!
  """fetch aggregated fields from the table: "billing.report_type""""
billing_report_type_aggregate(distinct_on: [billing_report_type_select_column!], limit: Int, offset: Int, order_by: [billing_report_type_order_by!], where: billing_report_type_bool_exp): billing_report_type_aggregate!
  """fetch data from the table: "billing.report_type" using primary key columns"""
billing_report_type_by_pk(value: String!): billing_report_type
  """fetch data from the table: "billing.reports_resources""""
billing_reports_resources(distinct_on: [billing_reports_resources_select_column!], limit: Int, offset: Int, order_by: [billing_reports_resources_order_by!], where: billing_reports_resources_bool_exp): [billing_reports_resources!]!
  """fetch aggregated fields from the table: "billing.reports_resources""""
billing_reports_resources_aggregate(distinct_on: [billing_reports_resources_select_column!], limit: Int, offset: Int, order_by: [billing_reports_resources_order_by!], where: billing_reports_resources_bool_exp): billing_reports_resources_aggregate!
  """fetch data from the table: "billing.reports_resources" using primary key columns"""
billing_reports_resources_by_pk(id: uuid!): billing_reports_resources
  """fetch data from the table: "billing.subscription_items""""
billing_subscription_items(distinct_on: [billing_subscription_items_select_column!], limit: Int, offset: Int, order_by: [billing_subscription_items_order_by!], where: billing_subscription_items_bool_exp): [billing_subscription_items!]!
  """fetch aggregated fields from the table: "billing.subscription_items""""
billing_subscription_items_aggregate(distinct_on: [billing_subscription_items_select_column!], limit: Int, offset: Int, order_by: [billing_subscription_items_order_by!], where: billing_subscription_items_bool_exp): billing_subscription_items_aggregate!
  """fetch data from the table: "billing.subscription_items" using primary key columns"""
billing_subscription_items_by_pk(id: uuid!): billing_subscription_items
  """fetch data from the table: "storage.buckets" using primary key columns"""
bucket(id: String!): buckets
  """fetch data from the table: "storage.buckets""""
buckets(distinct_on: [buckets_select_column!], limit: Int, offset: Int, order_by: [buckets_order_by!], where: buckets_bool_exp): [buckets!]!
  """fetch aggregated fields from the table: "storage.buckets""""
bucketsAggregate(distinct_on: [buckets_select_column!], limit: Int, offset: Int, order_by: [buckets_order_by!], where: buckets_bool_exp): buckets_aggregate!
  """fetch data from the table: "cli_tokens" using primary key columns"""
cliToken(id: uuid!): cliTokens
  """An array relationship"""
cliTokens(distinct_on: [cliTokens_select_column!], limit: Int, offset: Int, order_by: [cliTokens_order_by!], where: cliTokens_bool_exp): [cliTokens!]!
  """fetch aggregated fields from the table: "cli_tokens""""
cliTokensAggregate(distinct_on: [cliTokens_select_column!], limit: Int, offset: Int, order_by: [cliTokens_order_by!], where: cliTokens_bool_exp): cliTokens_aggregate!
  config(appID: uuid!, resolve: Boolean!): ConfigConfig
  configRawJSON(appID: uuid!, resolve: Boolean!): String!
  configs(resolve: Boolean!, where: ConfigConfigComparisonExp): [ConfigAppConfig!]!
  """fetch data from the table: "continents""""
continents(distinct_on: [continents_select_column!], limit: Int, offset: Int, order_by: [continents_order_by!], where: continents_bool_exp): [continents!]!
  """fetch aggregated fields from the table: "continents""""
continents_aggregate(distinct_on: [continents_select_column!], limit: Int, offset: Int, order_by: [continents_order_by!], where: continents_bool_exp): continents_aggregate!
  """fetch data from the table: "continents" using primary key columns"""
continents_by_pk(code: bpchar!): continents
  """An array relationship"""
countries(distinct_on: [countries_select_column!], limit: Int, offset: Int, order_by: [countries_order_by!], where: countries_bool_exp): [countries!]!
  """An aggregate relationship"""
countries_aggregate(distinct_on: [countries_select_column!], limit: Int, offset: Int, order_by: [countries_order_by!], where: countries_bool_exp): countries_aggregate!
  """fetch data from the table: "countries" using primary key columns"""
countries_by_pk(code: bpchar!): countries
  """fetch data from the table: "deployments" using primary key columns"""
deployment(id: uuid!): deployments
  """fetch data from the table: "deployment_logs" using primary key columns"""
deploymentLog(id: uuid!): deploymentLogs
  """An array relationship"""
deploymentLogs(distinct_on: [deploymentLogs_select_column!], limit: Int, offset: Int, order_by: [deploymentLogs_order_by!], where: deploymentLogs_bool_exp): [deploymentLogs!]!
  """fetch aggregated fields from the table: "deployment_logs""""
deploymentLogsAggregate(distinct_on: [deploymentLogs_select_column!], limit: Int, offset: Int, order_by: [deploymentLogs_order_by!], where: deploymentLogs_bool_exp): deploymentLogs_aggregate!
  """An array relationship"""
deployments(distinct_on: [deployments_select_column!], limit: Int, offset: Int, order_by: [deployments_order_by!], where: deployments_bool_exp): [deployments!]!
  """fetch aggregated fields from the table: "deployments""""
deploymentsAggregate(distinct_on: [deployments_select_column!], limit: Int, offset: Int, order_by: [deployments_order_by!], where: deployments_bool_exp): deployments_aggregate!
  """Returns the CNAME the hostname resolves to.
If the hostname cannot be resolved or isn't a CNAME, returns empty"""
dnsLookupCNAME(hostname: String!): String!
  """fetch data from the table: "feature_flags" using primary key columns"""
featureFlag(id: uuid!): featureFlags
  """An array relationship"""
featureFlags(distinct_on: [featureFlags_select_column!], limit: Int, offset: Int, order_by: [featureFlags_order_by!], where: featureFlags_bool_exp): [featureFlags!]!
  """fetch aggregated fields from the table: "feature_flags""""
featureFlagsAggregate(distinct_on: [featureFlags_select_column!], limit: Int, offset: Int, order_by: [featureFlags_order_by!], where: featureFlags_bool_exp): featureFlags_aggregate!
  """fetch data from the table: "storage.files" using primary key columns"""
file(id: uuid!): files
  """An array relationship"""
files(distinct_on: [files_select_column!], limit: Int, offset: Int, order_by: [files_order_by!], where: files_bool_exp): [files!]!
  """fetch aggregated fields from the table: "storage.files""""
filesAggregate(distinct_on: [files_select_column!], limit: Int, offset: Int, order_by: [files_order_by!], where: files_bool_exp): files_aggregate!
  getBackupPresignedURL(appID: String!, backupID: String!, expireInMinutes: Int): BackupPresignedURL!
  getCPUSecondsUsage(appID: String!, from: Timestamp, to: Timestamp): Metrics!
  getEgressVolume(appID: String!, from: Timestamp, subdomain: String!, to: Timestamp): Metrics!
  getFunctionsDuration(appID: String!, from: Timestamp, to: Timestamp): Metrics!
  getFunctionsInvocations(appID: String!, from: Timestamp, to: Timestamp): Metrics!
  getLogsVolume(appID: String!, from: Timestamp, to: Timestamp): Metrics!
  getPiTRBaseBackups(appID: String!): [PiTRBaseBackup!]!
  getPostgresVolumeCapacity(appID: String!, t: Timestamp): Metrics!
  getPostgresVolumeUsage(appID: String!, t: Timestamp): Metrics!
  getProjectStatus(appID: String!): ProjectStatusResponse!
  """Returns list of label values for a given label within a range of time.

If `from` and `to` are not provided, they default to 6 hour ago and now, respectively."""
getServiceLabelValues(appID: String!): [String!]!
  getTotalRequests(appID: String!, from: Timestamp, to: Timestamp): Metrics!
  getUsageForApp(appID: String!, from: Timestamp, to: Timestamp): UsageSummary!
  getUsageForOrganization(from: Timestamp, organizationID: String!, to: Timestamp): UsageSummary!
  """fetch data from the table: "github_app_installations" using primary key columns"""
githubAppInstallation(id: uuid!): githubAppInstallations
  """fetch data from the table: "github_app_installations""""
githubAppInstallations(distinct_on: [githubAppInstallations_select_column!], limit: Int, offset: Int, order_by: [githubAppInstallations_order_by!], where: githubAppInstallations_bool_exp): [githubAppInstallations!]!
  """fetch aggregated fields from the table: "github_app_installations""""
githubAppInstallationsAggregate(distinct_on: [githubAppInstallations_select_column!], limit: Int, offset: Int, order_by: [githubAppInstallations_order_by!], where: githubAppInstallations_bool_exp): githubAppInstallations_aggregate!
  """An array relationship"""
githubRepositories(distinct_on: [githubRepositories_select_column!], limit: Int, offset: Int, order_by: [githubRepositories_order_by!], where: githubRepositories_bool_exp): [githubRepositories!]!
  """fetch aggregated fields from the table: "github_repositories""""
githubRepositoriesAggregate(distinct_on: [githubRepositories_select_column!], limit: Int, offset: Int, order_by: [githubRepositories_order_by!], where: githubRepositories_bool_exp): githubRepositories_aggregate!
  """fetch data from the table: "github_repositories" using primary key columns"""
githubRepository(id: uuid!): githubRepositories
  """Returns logs for a given application. If `service` is not provided all services are returned.
If `from` and `to` are not provided, they default to an hour ago and now, respectively."""
logs(appID: String!, from: Timestamp, regexFilter: String, service: String, to: Timestamp): [Log!]!
  """fetch data from the table: "organizations" using primary key columns"""
organization(id: uuid!): organizations
  """fetch data from the table: "organization_members" using primary key columns"""
organizationMember(id: uuid!): organization_members
  """fetch data from the table: "organization_member_invites" using primary key columns"""
organizationMemberInvite(id: uuid!): organization_member_invites
  """fetch data from the table: "organization_member_invites""""
organizationMemberInvites(distinct_on: [organization_member_invites_select_column!], limit: Int, offset: Int, order_by: [organization_member_invites_order_by!], where: organization_member_invites_bool_exp): [organization_member_invites!]!
  """fetch aggregated fields from the table: "organization_member_invites""""
organizationMemberInvitesAggregate(distinct_on: [organization_member_invites_select_column!], limit: Int, offset: Int, order_by: [organization_member_invites_order_by!], where: organization_member_invites_bool_exp): organization_member_invites_aggregate!
  """fetch data from the table: "organization_members""""
organizationMembers(distinct_on: [organization_members_select_column!], limit: Int, offset: Int, order_by: [organization_members_order_by!], where: organization_members_bool_exp): [organization_members!]!
  """fetch aggregated fields from the table: "organization_members""""
organizationMembersAggregate(distinct_on: [organization_members_select_column!], limit: Int, offset: Int, order_by: [organization_members_order_by!], where: organization_members_bool_exp): organization_members_aggregate!
  """fetch data from the table: "organization_new_request" using primary key columns"""
organizationNewRequest(id: uuid!): organization_new_request
  """fetch data from the table: "organization_new_request""""
organizationNewRequests(distinct_on: [organization_new_request_select_column!], limit: Int, offset: Int, order_by: [organization_new_request_order_by!], where: organization_new_request_bool_exp): [organization_new_request!]!
  """fetch aggregated fields from the table: "organization_new_request""""
organizationNewRequestsAggregate(distinct_on: [organization_new_request_select_column!], limit: Int, offset: Int, order_by: [organization_new_request_order_by!], where: organization_new_request_bool_exp): organization_new_request_aggregate!
  """fetch data from the table: "organization_costs_thresholds""""
organization_costs_thresholds(distinct_on: [organization_costs_thresholds_select_column!], limit: Int, offset: Int, order_by: [organization_costs_thresholds_order_by!], where: organization_costs_thresholds_bool_exp): [organization_costs_thresholds!]!
  """fetch aggregated fields from the table: "organization_costs_thresholds""""
organization_costs_thresholds_aggregate(distinct_on: [organization_costs_thresholds_select_column!], limit: Int, offset: Int, order_by: [organization_costs_thresholds_order_by!], where: organization_costs_thresholds_bool_exp): organization_costs_thresholds_aggregate!
  """fetch data from the table: "organization_costs_thresholds" using primary key columns"""
organization_costs_thresholds_by_pk(value: String!): organization_costs_thresholds
  """fetch data from the table: "organization_members_role""""
organization_members_role(distinct_on: [organization_members_role_select_column!], limit: Int, offset: Int, order_by: [organization_members_role_order_by!], where: organization_members_role_bool_exp): [organization_members_role!]!
  """fetch aggregated fields from the table: "organization_members_role""""
organization_members_role_aggregate(distinct_on: [organization_members_role_select_column!], limit: Int, offset: Int, order_by: [organization_members_role_order_by!], where: organization_members_role_bool_exp): organization_members_role_aggregate!
  """fetch data from the table: "organization_members_role" using primary key columns"""
organization_members_role_by_pk(value: String!): organization_members_role
  """fetch data from the table: "organization_status""""
organization_status(distinct_on: [organization_status_select_column!], limit: Int, offset: Int, order_by: [organization_status_order_by!], where: organization_status_bool_exp): [organization_status!]!
  """fetch aggregated fields from the table: "organization_status""""
organization_status_aggregate(distinct_on: [organization_status_select_column!], limit: Int, offset: Int, order_by: [organization_status_order_by!], where: organization_status_bool_exp): organization_status_aggregate!
  """fetch data from the table: "organization_status" using primary key columns"""
organization_status_by_pk(value: String!): organization_status
  """An array relationship"""
organizations(distinct_on: [organizations_select_column!], limit: Int, offset: Int, order_by: [organizations_order_by!], where: organizations_bool_exp): [organizations!]!
  """fetch aggregated fields from the table: "organizations""""
organizationsAggregate(distinct_on: [organizations_select_column!], limit: Int, offset: Int, order_by: [organizations_order_by!], where: organizations_bool_exp): organizations_aggregate!
  """fetch data from the table: "payment_methods" using primary key columns"""
paymentMethod(id: uuid!): paymentMethods
  """An array relationship"""
paymentMethods(distinct_on: [paymentMethods_select_column!], limit: Int, offset: Int, order_by: [paymentMethods_order_by!], where: paymentMethods_bool_exp): [paymentMethods!]!
  """fetch aggregated fields from the table: "payment_methods""""
paymentMethodsAggregate(distinct_on: [paymentMethods_select_column!], limit: Int, offset: Int, order_by: [paymentMethods_order_by!], where: paymentMethods_bool_exp): paymentMethods_aggregate!
  """fetch data from the table: "plans" using primary key columns"""
plan(id: uuid!): plans
  """fetch data from the table: "plans""""
plans(distinct_on: [plans_select_column!], limit: Int, offset: Int, order_by: [plans_order_by!], where: plans_bool_exp): [plans!]!
  """fetch aggregated fields from the table: "plans""""
plansAggregate(distinct_on: [plans_select_column!], limit: Int, offset: Int, order_by: [plans_order_by!], where: plans_bool_exp): plans_aggregate!
  """fetch data from the table: "region_type""""
region_type(distinct_on: [region_type_select_column!], limit: Int, offset: Int, order_by: [region_type_order_by!], where: region_type_bool_exp): [region_type!]!
  """fetch aggregated fields from the table: "region_type""""
region_type_aggregate(distinct_on: [region_type_select_column!], limit: Int, offset: Int, order_by: [region_type_order_by!], where: region_type_bool_exp): region_type_aggregate!
  """fetch data from the table: "region_type" using primary key columns"""
region_type_by_pk(type: String!): region_type
  """An array relationship"""
regions(distinct_on: [regions_select_column!], limit: Int, offset: Int, order_by: [regions_order_by!], where: regions_bool_exp): [regions!]!
  """fetch data from the table: "regions_allowed_organization" using primary key columns"""
regionsAllowedOrganization(id: uuid!): regions_allowed_organization
  """fetch data from the table: "regions_allowed_organization""""
regionsAllowedOrganizations(distinct_on: [regions_allowed_organization_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_organization_order_by!], where: regions_allowed_organization_bool_exp): [regions_allowed_organization!]!
  """fetch aggregated fields from the table: "regions_allowed_organization""""
regionsAllowedOrganizationsAggregate(distinct_on: [regions_allowed_organization_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_organization_order_by!], where: regions_allowed_organization_bool_exp): regions_allowed_organization_aggregate!
  """An aggregate relationship"""
regions_aggregate(distinct_on: [regions_select_column!], limit: Int, offset: Int, order_by: [regions_order_by!], where: regions_bool_exp): regions_aggregate!
  """fetch data from the table: "regions" using primary key columns"""
regions_by_pk(id: uuid!): regions
  """fetch data from the table: "run_service" using primary key columns"""
runService(id: uuid!): run_service
  runServiceConfig(appID: uuid!, resolve: Boolean!, serviceID: uuid!): ConfigRunServiceConfig
  runServiceConfigRawJSON(appID: uuid!, resolve: Boolean!, serviceID: uuid!): String!
  runServiceConfigs(appID: uuid!, resolve: Boolean!): [ConfigRunServiceConfigWithID!]!
  runServiceConfigsAll(resolve: Boolean!, where: ConfigRunServiceConfigComparisonExp): [ConfigRunServiceConfigWithID!]!
  """An array relationship"""
runServices(distinct_on: [run_service_select_column!], limit: Int, offset: Int, order_by: [run_service_order_by!], where: run_service_bool_exp): [run_service!]!
  """fetch aggregated fields from the table: "run_service""""
runServicesAggregate(distinct_on: [run_service_select_column!], limit: Int, offset: Int, order_by: [run_service_order_by!], where: run_service_bool_exp): run_service_aggregate!
  """fetch data from the table: "regions_allowed_workspace" using primary key columns"""
selectRegionsAllowedWorkspace(id: uuid!): regions_allowed_workspace
  """fetch data from the table: "regions_allowed_workspace""""
selectRegionsAllowedWorkspaces(distinct_on: [regions_allowed_workspace_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_workspace_order_by!], where: regions_allowed_workspace_bool_exp): [regions_allowed_workspace!]!
  """fetch aggregated fields from the table: "regions_allowed_workspace""""
selectRegionsAllowedWorkspacesAggregate(distinct_on: [regions_allowed_workspace_select_column!], limit: Int, offset: Int, order_by: [regions_allowed_workspace_order_by!], where: regions_allowed_workspace_bool_exp): regions_allowed_workspace_aggregate!
  """fetch data from the table: "software_type" using primary key columns"""
softwareType(type: String!): software_type
  """fetch data from the table: "software_type""""
softwareTypes(distinct_on: [software_type_select_column!], limit: Int, offset: Int, order_by: [software_type_order_by!], where: software_type_bool_exp): [software_type!]!
  """fetch aggregated fields from the table: "software_type""""
softwareTypesAggregate(distinct_on: [software_type_select_column!], limit: Int, offset: Int, order_by: [software_type_order_by!], where: software_type_bool_exp): software_type_aggregate!
  """fetch data from the table: "software_versions" using primary key columns"""
softwareVersion(id: uuid!): software_versions
  """fetch data from the table: "software_versions""""
softwareVersions(distinct_on: [software_versions_select_column!], limit: Int, offset: Int, order_by: [software_versions_order_by!], where: software_versions_bool_exp): [software_versions!]!
  """fetch aggregated fields from the table: "software_versions""""
softwareVersionsAggregate(distinct_on: [software_versions_select_column!], limit: Int, offset: Int, order_by: [software_versions_order_by!], where: software_versions_bool_exp): software_versions_aggregate!
  """Returns lists of apps that have some live traffic in the give time range.
From defaults to 24 hours ago and to defaults to now.

Requests that returned a 4xx or 5xx status code are not counted as live traffic."""
statsLiveApps(from: Timestamp, to: Timestamp): StatsLiveApps!
  systemConfig(appID: uuid!): ConfigSystemConfig
  systemConfigs(where: ConfigSystemConfigComparisonExp): [ConfigAppSystemConfig!]!
  """Returns system logs for a given application"""
systemLogs(action: String!, appID: String!, from: Timestamp, to: Timestamp): [Log!]!
  """fetch data from the table: "auth.users" using primary key columns"""
user(id: uuid!): users
  """fetch data from the table: "auth.users""""
users(distinct_on: [users_select_column!], limit: Int, offset: Int, order_by: [users_order_by!], where: users_bool_exp): [users!]!
  """fetch aggregated fields from the table: "auth.users""""
usersAggregate(distinct_on: [users_select_column!], limit: Int, offset: Int, order_by: [users_order_by!], where: users_bool_exp): users_aggregate!
  """fetch data from the table: "storage.virus" using primary key columns"""
virus(id: uuid!): virus
  """fetch data from the table: "storage.virus""""
viruses(distinct_on: [virus_select_column!], limit: Int, offset: Int, order_by: [virus_order_by!], where: virus_bool_exp): [virus!]!
  """fetch aggregated fields from the table: "storage.virus""""
virusesAggregate(distinct_on: [virus_select_column!], limit: Int, offset: Int, order_by: [virus_order_by!], where: virus_bool_exp): virus_aggregate!
  """fetch data from the table: "workspaces" using primary key columns"""
workspace(id: uuid!): workspaces
  """fetch data from the table: "workspace_members" using primary key columns"""
workspaceMember(id: uuid!): workspaceMembers
  """fetch data from the table: "workspace_member_invites" using primary key columns"""
workspaceMemberInvite(id: uuid!): workspaceMemberInvites
  """An array relationship"""
workspaceMemberInvites(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): [workspaceMemberInvites!]!
  """fetch aggregated fields from the table: "workspace_member_invites""""
workspaceMemberInvitesAggregate(distinct_on: [workspaceMemberInvites_select_column!], limit: Int, offset: Int, order_by: [workspaceMemberInvites_order_by!], where: workspaceMemberInvites_bool_exp): workspaceMemberInvites_aggregate!
  """An array relationship"""
workspaceMembers(distinct_on: [workspaceMembers_select_column!], limit: Int, offset: Int, order_by: [workspaceMembers_order_by!], where: workspaceMembers_bool_exp): [workspaceMembers!]!
  """fetch aggregated fields from the table: "workspace_members""""
workspaceMembersAggregate(distinct_on: [workspaceMembers_select_column!], limit: Int, offset: Int, order_by: [workspaceMembers_order_by!], where: workspaceMembers_bool_exp): workspaceMembers_aggregate!
  """An array relationship"""
workspaces(distinct_on: [workspaces_select_column!], limit: Int, offset: Int, order_by: [workspaces_order_by!], where: workspaces_bool_exp): [workspaces!]!
  """fetch aggregated fields from the table: "workspaces""""
workspacesAggregate(distinct_on: [workspaces_select_column!], limit: Int, offset: Int, order_by: [workspaces_order_by!], where: workspaces_bool_exp): workspaces_aggregate!
}

type Mutation {
  """Backup all applications databases. It will skip databases with PiTR"""
backupAllApplicationsDatabase: [BackupResultsItem]!
  backupApplicationDatabase(appID: String!, expireInDays: Int): BackupResult!
  """Triggers a backup of the application database with PiTR"""
backupApplicationDatabasePiTR(appID: String!): Boolean!
  billingChangeOrganizationPlan(organizationID: uuid!, planID: uuid!): Boolean!
  billingCreateOrganizationRequest(organizationName: String!, planID: uuid!, redirectURL: String!): String!
  billingDeleteApp(appID: uuid!): Boolean!
  billingDeleteOrganization(organizationID: uuid!): Boolean!
  billingFinishSubscription(appID: uuid!, appName: String!, organizationID: uuid, planID: uuid!, subdomain: String!, subscriptionID: String!): Boolean!
  billingFixSubscriptionItems: Boolean!
  billingFixSubscriptions: Boolean!
  billingFullReportWorkflow: Boolean!
  billingMigrateProjectToOrganization(appID: uuid!, organizationID: uuid!): Boolean!
  billingPostOrganizationRequest(sessionID: String!): PostOrganizationRequestResponse!
  billingTransferApp(appID: uuid!, organizationID: uuid!): Boolean!
  billingUpdateCustomDomains(amount: Int!, appID: uuid!, organizationID: uuid): Boolean!
  billingUpdateDedicatedCompute(appID: uuid!, organizationID: uuid, totalMillicores: Int!): Boolean!
  billingUpdateFunctionsAmount(amount: Int!, appID: uuid!, organizationID: uuid): Boolean!
  billingUpdateOrganizationThresholds: Boolean!
  billingUpdatePITR(amount: Int!, appID: uuid!, organizationID: uuid): Boolean!
  billingUpdatePersistentVolume(amount: Int!, appID: uuid!, organizationID: uuid): Boolean!
  billingUpdateReports: Boolean!
  billingUploadReports: Boolean!
  changeDatabaseVersion(appID: uuid!, force: Boolean, version: String!): Boolean!
  """delete single row from the table: "announcements_read""""
deleteAnnouncementRead(id: uuid!): announcements_read
  """delete data from the table: "announcements_read""""
deleteAnnouncementsRead(where: announcements_read_bool_exp!): announcements_read_mutation_response
  """delete single row from the table: "apps""""
deleteApp(id: uuid!): apps
  """delete single row from the table: "app_states""""
deleteAppState(id: Int!): appStates
  """delete data from the table: "app_state_history""""
deleteAppStateHistories(where: appStateHistory_bool_exp!): appStateHistory_mutation_response
  """delete single row from the table: "app_state_history""""
deleteAppStateHistory(id: uuid!): appStateHistory
  """delete data from the table: "app_states""""
deleteAppStates(where: appStates_bool_exp!): appStates_mutation_response
  """delete data from the table: "apps""""
deleteApps(where: apps_bool_exp!): apps_mutation_response
  """delete single row from the table: "auth.providers""""
deleteAuthProvider(id: String!): authProviders
  """delete single row from the table: "auth.provider_requests""""
deleteAuthProviderRequest(id: uuid!): authProviderRequests
  """delete data from the table: "auth.provider_requests""""
deleteAuthProviderRequests(where: authProviderRequests_bool_exp!): authProviderRequests_mutation_response
  """delete data from the table: "auth.providers""""
deleteAuthProviders(where: authProviders_bool_exp!): authProviders_mutation_response
  """delete single row from the table: "auth.refresh_tokens""""
deleteAuthRefreshToken(id: uuid!): authRefreshTokens
  """delete single row from the table: "auth.refresh_token_types""""
deleteAuthRefreshTokenType(value: String!): authRefreshTokenTypes
  """delete data from the table: "auth.refresh_token_types""""
deleteAuthRefreshTokenTypes(where: authRefreshTokenTypes_bool_exp!): authRefreshTokenTypes_mutation_response
  """delete data from the table: "auth.refresh_tokens""""
deleteAuthRefreshTokens(where: authRefreshTokens_bool_exp!): authRefreshTokens_mutation_response
  """delete single row from the table: "auth.roles""""
deleteAuthRole(role: String!): authRoles
  """delete data from the table: "auth.roles""""
deleteAuthRoles(where: authRoles_bool_exp!): authRoles_mutation_response
  """delete single row from the table: "auth.user_providers""""
deleteAuthUserProvider(id: uuid!): authUserProviders
  """delete data from the table: "auth.user_providers""""
deleteAuthUserProviders(where: authUserProviders_bool_exp!): authUserProviders_mutation_response
  """delete single row from the table: "auth.user_roles""""
deleteAuthUserRole(id: uuid!): authUserRoles
  """delete data from the table: "auth.user_roles""""
deleteAuthUserRoles(where: authUserRoles_bool_exp!): authUserRoles_mutation_response
  """delete single row from the table: "auth.user_security_keys""""
deleteAuthUserSecurityKey(id: uuid!): authUserSecurityKeys
  """delete data from the table: "auth.user_security_keys""""
deleteAuthUserSecurityKeys(where: authUserSecurityKeys_bool_exp!): authUserSecurityKeys_mutation_response
  """delete single row from the table: "backups""""
deleteBackup(id: uuid!): backups
  """delete data from the table: "backups""""
deleteBackups(where: backups_bool_exp!): backups_mutation_response
  """delete single row from the table: "billing.dedicated_compute""""
deleteBillingDedicatedCompute(id: uuid!): billing_dedicated_compute
  """delete data from the table: "billing.dedicated_compute""""
deleteBillingDedicatedComputes(where: billing_dedicated_compute_bool_exp!): billing_dedicated_compute_mutation_response
  """delete single row from the table: "billing.reports""""
deleteBillingReport(id: uuid!): billing_reports
  """delete data from the table: "billing.reports""""
deleteBillingReports(where: billing_reports_bool_exp!): billing_reports_mutation_response
  """delete single row from the table: "billing.resources""""
deleteBillingResource(id: uuid!): billing_resources
  """delete data from the table: "billing.resources""""
deleteBillingResources(where: billing_resources_bool_exp!): billing_resources_mutation_response
  """delete data from the table: "billing.subscriptions""""
deleteBillingSubscription(where: billing_subscriptions_bool_exp!): billing_subscriptions_mutation_response
  """delete single row from the table: "billing.subscriptions""""
deleteBillingSubscriptions(id: uuid!): billing_subscriptions
  """delete single row from the table: "storage.buckets""""
deleteBucket(id: String!): buckets
  """delete data from the table: "storage.buckets""""
deleteBuckets(where: buckets_bool_exp!): buckets_mutation_response
  """delete single row from the table: "cli_tokens""""
deleteCliToken(id: uuid!): cliTokens
  """delete data from the table: "cli_tokens""""
deleteCliTokens(where: cliTokens_bool_exp!): cliTokens_mutation_response
  deleteConfig(appID: uuid!): ConfigConfig
  """delete single row from the table: "deployments""""
deleteDeployment(id: uuid!): deployments
  """delete single row from the table: "deployment_logs""""
deleteDeploymentLog(id: uuid!): deploymentLogs
  """delete data from the table: "deployment_logs""""
deleteDeploymentLogs(where: deploymentLogs_bool_exp!): deploymentLogs_mutation_response
  """delete data from the table: "deployments""""
deleteDeployments(where: deployments_bool_exp!): deployments_mutation_response
  """delete single row from the table: "feature_flags""""
deleteFeatureFlag(id: uuid!): featureFlags
  """delete data from the table: "feature_flags""""
deleteFeatureFlags(where: featureFlags_bool_exp!): featureFlags_mutation_response
  """delete single row from the table: "storage.files""""
deleteFile(id: uuid!): files
  """delete data from the table: "storage.files""""
deleteFiles(where: files_bool_exp!): files_mutation_response
  """delete single row from the table: "github_app_installations""""
deleteGithubAppInstallation(id: uuid!): githubAppInstallations
  """delete data from the table: "github_app_installations""""
deleteGithubAppInstallations(where: githubAppInstallations_bool_exp!): githubAppInstallations_mutation_response
  """delete data from the table: "github_repositories""""
deleteGithubRepositories(where: githubRepositories_bool_exp!): githubRepositories_mutation_response
  """delete single row from the table: "github_repositories""""
deleteGithubRepository(id: uuid!): githubRepositories
  """delete single row from the table: "organizations""""
deleteOrganization(id: uuid!): organizations
  """delete single row from the table: "organization_members""""
deleteOrganizationMember(id: uuid!): organization_members
  """delete single row from the table: "organization_member_invites""""
deleteOrganizationMemberInvite(id: uuid!): organization_member_invites
  """delete data from the table: "organization_member_invites""""
deleteOrganizationMemberInvites(where: organization_member_invites_bool_exp!): organization_member_invites_mutation_response
  """delete data from the table: "organization_members""""
deleteOrganizationMembers(where: organization_members_bool_exp!): organization_members_mutation_response
  """delete single row from the table: "organization_new_request""""
deleteOrganizationNewRequest(id: uuid!): organization_new_request
  """delete data from the table: "organization_new_request""""
deleteOrganizationNewRequests(where: organization_new_request_bool_exp!): organization_new_request_mutation_response
  """delete data from the table: "organizations""""
deleteOrganizations(where: organizations_bool_exp!): organizations_mutation_response
  """delete single row from the table: "payment_methods""""
deletePaymentMethod(id: uuid!): paymentMethods
  """delete data from the table: "payment_methods""""
deletePaymentMethods(where: paymentMethods_bool_exp!): paymentMethods_mutation_response
  """delete single row from the table: "plans""""
deletePlan(id: uuid!): plans
  """delete data from the table: "plans""""
deletePlans(where: plans_bool_exp!): plans_mutation_response
  """delete single row from the table: "regions_allowed_organization""""
deleteRegionsAllowedOrganization(id: uuid!): regions_allowed_organization
  """delete data from the table: "regions_allowed_organization""""
deleteRegionsAllowedOrganizations(where: regions_allowed_organization_bool_exp!): regions_allowed_organization_mutation_response
  """delete single row from the table: "regions_allowed_workspace""""
deleteRegionsAllowedWorkspace(id: uuid!): regions_allowed_workspace
  """delete data from the table: "regions_allowed_workspace""""
deleteRegionsAllowedWorkspaces(where: regions_allowed_workspace_bool_exp!): regions_allowed_workspace_mutation_response
  """delete single row from the table: "run_service""""
deleteRunService(id: uuid!): run_service
  deleteRunServiceConfig(appID: uuid!, serviceID: uuid!): ConfigRunServiceConfig
  """delete data from the table: "run_service""""
deleteRunServices(where: run_service_bool_exp!): run_service_mutation_response
  deleteSecret(appID: uuid!, key: String!): ConfigEnvironmentVariable
  """delete single row from the table: "software_type""""
deleteSoftwareType(type: String!): software_type
  """delete data from the table: "software_type""""
deleteSoftwareTypes(where: software_type_bool_exp!): software_type_mutation_response
  """delete single row from the table: "software_versions""""
deleteSoftwareVersion(id: uuid!): software_versions
  """delete data from the table: "software_versions""""
deleteSoftwareVersions(where: software_versions_bool_exp!): software_versions_mutation_response
  """delete single row from the table: "auth.users""""
deleteUser(id: uuid!): users
  """delete data from the table: "auth.users""""
deleteUsers(where: users_bool_exp!): users_mutation_response
  """delete single row from the table: "storage.virus""""
deleteVirus(id: uuid!): virus
  """delete data from the table: "storage.virus""""
deleteViruses(where: virus_bool_exp!): virus_mutation_response
  """delete single row from the table: "workspaces""""
deleteWorkspace(id: uuid!): workspaces
  """delete single row from the table: "workspace_members""""
deleteWorkspaceMember(id: uuid!): workspaceMembers
  """delete single row from the table: "workspace_member_invites""""
deleteWorkspaceMemberInvite(id: uuid!): workspaceMemberInvites
  """delete data from the table: "workspace_member_invites""""
deleteWorkspaceMemberInvites(where: workspaceMemberInvites_bool_exp!): workspaceMemberInvites_mutation_response
  """delete data from the table: "workspace_members""""
deleteWorkspaceMembers(where: workspaceMembers_bool_exp!): workspaceMembers_mutation_response
  """delete data from the table: "workspaces""""
deleteWorkspaces(where: workspaces_bool_exp!): workspaces_mutation_response
  """delete data from the table: "announcements""""
delete_announcements(where: announcements_bool_exp!): announcements_mutation_response
  """delete single row from the table: "announcements""""
delete_announcements_by_pk(id: uuid!): announcements
  """delete data from the table: "auth.migrations""""
delete_auth_migrations(where: auth_migrations_bool_exp!): auth_migrations_mutation_response
  """delete single row from the table: "auth.migrations""""
delete_auth_migrations_by_pk(id: Int!): auth_migrations
  """delete data from the table: "billing.report_resource_type""""
delete_billing_report_resource_type(where: billing_report_resource_type_bool_exp!): billing_report_resource_type_mutation_response
  """delete single row from the table: "billing.report_resource_type""""
delete_billing_report_resource_type_by_pk(value: String!): billing_report_resource_type
  """delete data from the table: "billing.report_type""""
delete_billing_report_type(where: billing_report_type_bool_exp!): billing_report_type_mutation_response
  """delete single row from the table: "billing.report_type""""
delete_billing_report_type_by_pk(value: String!): billing_report_type
  """delete data from the table: "billing.reports_resources""""
delete_billing_reports_resources(where: billing_reports_resources_bool_exp!): billing_reports_resources_mutation_response
  """delete single row from the table: "billing.reports_resources""""
delete_billing_reports_resources_by_pk(id: uuid!): billing_reports_resources
  """delete data from the table: "billing.subscription_items""""
delete_billing_subscription_items(where: billing_subscription_items_bool_exp!): billing_subscription_items_mutation_response
  """delete single row from the table: "billing.subscription_items""""
delete_billing_subscription_items_by_pk(id: uuid!): billing_subscription_items
  """delete data from the table: "continents""""
delete_continents(where: continents_bool_exp!): continents_mutation_response
  """delete single row from the table: "continents""""
delete_continents_by_pk(code: bpchar!): continents
  """delete data from the table: "countries""""
delete_countries(where: countries_bool_exp!): countries_mutation_response
  """delete single row from the table: "countries""""
delete_countries_by_pk(code: bpchar!): countries
  """delete data from the table: "organization_costs_thresholds""""
delete_organization_costs_thresholds(where: organization_costs_thresholds_bool_exp!): organization_costs_thresholds_mutation_response
  """delete single row from the table: "organization_costs_thresholds""""
delete_organization_costs_thresholds_by_pk(value: String!): organization_costs_thresholds
  """delete data from the table: "organization_members_role""""
delete_organization_members_role(where: organization_members_role_bool_exp!): organization_members_role_mutation_response
  """delete single row from the table: "organization_members_role""""
delete_organization_members_role_by_pk(value: String!): organization_members_role
  """delete data from the table: "organization_status""""
delete_organization_status(where: organization_status_bool_exp!): organization_status_mutation_response
  """delete single row from the table: "organization_status""""
delete_organization_status_by_pk(value: String!): organization_status
  """delete data from the table: "region_type""""
delete_region_type(where: region_type_bool_exp!): region_type_mutation_response
  """delete single row from the table: "region_type""""
delete_region_type_by_pk(type: String!): region_type
  """delete data from the table: "regions""""
delete_regions(where: regions_bool_exp!): regions_mutation_response
  """delete single row from the table: "regions""""
delete_regions_by_pk(id: uuid!): regions
  """insert a single row into the table: "announcements_read""""
insertAnnouncementRead(object: announcements_read_insert_input!, on_conflict: announcements_read_on_conflict): announcements_read
  """insert data into the table: "announcements_read""""
insertAnnouncementsRead(objects: [announcements_read_insert_input!]!, on_conflict: announcements_read_on_conflict): announcements_read_mutation_response
  """insert a single row into the table: "apps""""
insertApp(object: apps_insert_input!, on_conflict: apps_on_conflict): apps
  """insert a single row into the table: "app_states""""
insertAppState(object: appStates_insert_input!, on_conflict: appStates_on_conflict): appStates
  """insert data into the table: "app_state_history""""
insertAppStateHistories(objects: [appStateHistory_insert_input!]!, on_conflict: appStateHistory_on_conflict): appStateHistory_mutation_response
  """insert a single row into the table: "app_state_history""""
insertAppStateHistory(object: appStateHistory_insert_input!, on_conflict: appStateHistory_on_conflict): appStateHistory
  """insert data into the table: "app_states""""
insertAppStates(objects: [appStates_insert_input!]!, on_conflict: appStates_on_conflict): appStates_mutation_response
  """insert data into the table: "apps""""
insertApps(objects: [apps_insert_input!]!, on_conflict: apps_on_conflict): apps_mutation_response
  """insert a single row into the table: "auth.providers""""
insertAuthProvider(object: authProviders_insert_input!, on_conflict: authProviders_on_conflict): authProviders
  """insert a single row into the table: "auth.provider_requests""""
insertAuthProviderRequest(object: authProviderRequests_insert_input!, on_conflict: authProviderRequests_on_conflict): authProviderRequests
  """insert data into the table: "auth.provider_requests""""
insertAuthProviderRequests(objects: [authProviderRequests_insert_input!]!, on_conflict: authProviderRequests_on_conflict): authProviderRequests_mutation_response
  """insert data into the table: "auth.providers""""
insertAuthProviders(objects: [authProviders_insert_input!]!, on_conflict: authProviders_on_conflict): authProviders_mutation_response
  """insert a single row into the table: "auth.refresh_tokens""""
insertAuthRefreshToken(object: authRefreshTokens_insert_input!, on_conflict: authRefreshTokens_on_conflict): authRefreshTokens
  """insert a single row into the table: "auth.refresh_token_types""""
insertAuthRefreshTokenType(object: authRefreshTokenTypes_insert_input!, on_conflict: authRefreshTokenTypes_on_conflict): authRefreshTokenTypes
  """insert data into the table: "auth.refresh_token_types""""
insertAuthRefreshTokenTypes(objects: [authRefreshTokenTypes_insert_input!]!, on_conflict: authRefreshTokenTypes_on_conflict): authRefreshTokenTypes_mutation_response
  """insert data into the table: "auth.refresh_tokens""""
insertAuthRefreshTokens(objects: [authRefreshTokens_insert_input!]!, on_conflict: authRefreshTokens_on_conflict): authRefreshTokens_mutation_response
  """insert a single row into the table: "auth.roles""""
insertAuthRole(object: authRoles_insert_input!, on_conflict: authRoles_on_conflict): authRoles
  """insert data into the table: "auth.roles""""
insertAuthRoles(objects: [authRoles_insert_input!]!, on_conflict: authRoles_on_conflict): authRoles_mutation_response
  """insert a single row into the table: "auth.user_providers""""
insertAuthUserProvider(object: authUserProviders_insert_input!, on_conflict: authUserProviders_on_conflict): authUserProviders
  """insert data into the table: "auth.user_providers""""
insertAuthUserProviders(objects: [authUserProviders_insert_input!]!, on_conflict: authUserProviders_on_conflict): authUserProviders_mutation_response
  """insert a single row into the table: "auth.user_roles""""
insertAuthUserRole(object: authUserRoles_insert_input!, on_conflict: authUserRoles_on_conflict): authUserRoles
  """insert data into the table: "auth.user_roles""""
insertAuthUserRoles(objects: [authUserRoles_insert_input!]!, on_conflict: authUserRoles_on_conflict): authUserRoles_mutation_response
  """insert a single row into the table: "auth.user_security_keys""""
insertAuthUserSecurityKey(object: authUserSecurityKeys_insert_input!, on_conflict: authUserSecurityKeys_on_conflict): authUserSecurityKeys
  """insert data into the table: "auth.user_security_keys""""
insertAuthUserSecurityKeys(objects: [authUserSecurityKeys_insert_input!]!, on_conflict: authUserSecurityKeys_on_conflict): authUserSecurityKeys_mutation_response
  """insert a single row into the table: "backups""""
insertBackup(object: backups_insert_input!, on_conflict: backups_on_conflict): backups
  """insert data into the table: "backups""""
insertBackups(objects: [backups_insert_input!]!, on_conflict: backups_on_conflict): backups_mutation_response
  """insert a single row into the table: "billing.dedicated_compute""""
insertBillingDedicatedCompute(object: billing_dedicated_compute_insert_input!, on_conflict: billing_dedicated_compute_on_conflict): billing_dedicated_compute
  """insert data into the table: "billing.dedicated_compute""""
insertBillingDedicatedComputes(objects: [billing_dedicated_compute_insert_input!]!, on_conflict: billing_dedicated_compute_on_conflict): billing_dedicated_compute_mutation_response
  """insert a single row into the table: "billing.reports""""
insertBillingReport(object: billing_reports_insert_input!, on_conflict: billing_reports_on_conflict): billing_reports
  """insert data into the table: "billing.reports""""
insertBillingReports(objects: [billing_reports_insert_input!]!, on_conflict: billing_reports_on_conflict): billing_reports_mutation_response
  """insert a single row into the table: "billing.resources""""
insertBillingResource(object: billing_resources_insert_input!, on_conflict: billing_resources_on_conflict): billing_resources
  """insert data into the table: "billing.resources""""
insertBillingResources(objects: [billing_resources_insert_input!]!, on_conflict: billing_resources_on_conflict): billing_resources_mutation_response
  """insert data into the table: "billing.subscriptions""""
insertBillingSubscription(objects: [billing_subscriptions_insert_input!]!, on_conflict: billing_subscriptions_on_conflict): billing_subscriptions_mutation_response
  """insert a single row into the table: "billing.subscriptions""""
insertBillingSubscriptions(object: billing_subscriptions_insert_input!, on_conflict: billing_subscriptions_on_conflict): billing_subscriptions
  """insert a single row into the table: "storage.buckets""""
insertBucket(object: buckets_insert_input!, on_conflict: buckets_on_conflict): buckets
  """insert data into the table: "storage.buckets""""
insertBuckets(objects: [buckets_insert_input!]!, on_conflict: buckets_on_conflict): buckets_mutation_response
  """insert a single row into the table: "cli_tokens""""
insertCliToken(object: cliTokens_insert_input!, on_conflict: cliTokens_on_conflict): cliTokens
  """insert data into the table: "cli_tokens""""
insertCliTokens(objects: [cliTokens_insert_input!]!, on_conflict: cliTokens_on_conflict): cliTokens_mutation_response
  insertConfig(appID: uuid!, config: ConfigConfigInsertInput!, secrets: [ConfigEnvironmentVariableInsertInput!], systemConfig: ConfigSystemConfigInsertInput!): ConfigInsertConfigResponse!
  """insert a single row into the table: "deployments""""
insertDeployment(object: deployments_insert_input!, on_conflict: deployments_on_conflict): deployments
  """insert a single row into the table: "deployment_logs""""
insertDeploymentLog(object: deploymentLogs_insert_input!, on_conflict: deploymentLogs_on_conflict): deploymentLogs
  """insert data into the table: "deployment_logs""""
insertDeploymentLogs(objects: [deploymentLogs_insert_input!]!, on_conflict: deploymentLogs_on_conflict): deploymentLogs_mutation_response
  """insert data into the table: "deployments""""
insertDeployments(objects: [deployments_insert_input!]!, on_conflict: deployments_on_conflict): deployments_mutation_response
  """insert a single row into the table: "feature_flags""""
insertFeatureFlag(object: featureFlags_insert_input!, on_conflict: featureFlags_on_conflict): featureFlags
  """insert data into the table: "feature_flags""""
insertFeatureFlags(objects: [featureFlags_insert_input!]!, on_conflict: featureFlags_on_conflict): featureFlags_mutation_response
  """insert a single row into the table: "storage.files""""
insertFile(object: files_insert_input!, on_conflict: files_on_conflict): files
  """insert data into the table: "storage.files""""
insertFiles(objects: [files_insert_input!]!, on_conflict: files_on_conflict): files_mutation_response
  """insert a single row into the table: "github_app_installations""""
insertGithubAppInstallation(object: githubAppInstallations_insert_input!, on_conflict: githubAppInstallations_on_conflict): githubAppInstallations
  """insert data into the table: "github_app_installations""""
insertGithubAppInstallations(objects: [githubAppInstallations_insert_input!]!, on_conflict: githubAppInstallations_on_conflict): githubAppInstallations_mutation_response
  """insert data into the table: "github_repositories""""
insertGithubRepositories(objects: [githubRepositories_insert_input!]!, on_conflict: githubRepositories_on_conflict): githubRepositories_mutation_response
  """insert a single row into the table: "github_repositories""""
insertGithubRepository(object: githubRepositories_insert_input!, on_conflict: githubRepositories_on_conflict): githubRepositories
  """insert a single row into the table: "organizations""""
insertOrganization(object: organizations_insert_input!, on_conflict: organizations_on_conflict): organizations
  """insert a single row into the table: "organization_members""""
insertOrganizationMember(object: organization_members_insert_input!, on_conflict: organization_members_on_conflict): organization_members
  """insert a single row into the table: "organization_member_invites""""
insertOrganizationMemberInvite(object: organization_member_invites_insert_input!, on_conflict: organization_member_invites_on_conflict): organization_member_invites
  """insert data into the table: "organization_member_invites""""
insertOrganizationMemberInvites(objects: [organization_member_invites_insert_input!]!, on_conflict: organization_member_invites_on_conflict): organization_member_invites_mutation_response
  """insert data into the table: "organization_members""""
insertOrganizationMembers(objects: [organization_members_insert_input!]!, on_conflict: organization_members_on_conflict): organization_members_mutation_response
  """insert a single row into the table: "organization_new_request""""
insertOrganizationNewRequest(object: organization_new_request_insert_input!, on_conflict: organization_new_request_on_conflict): organization_new_request
  """insert data into the table: "organization_new_request""""
insertOrganizationNewRequests(objects: [organization_new_request_insert_input!]!, on_conflict: organization_new_request_on_conflict): organization_new_request_mutation_response
  """insert data into the table: "organizations""""
insertOrganizations(objects: [organizations_insert_input!]!, on_conflict: organizations_on_conflict): organizations_mutation_response
  """insert a single row into the table: "payment_methods""""
insertPaymentMethod(object: paymentMethods_insert_input!, on_conflict: paymentMethods_on_conflict): paymentMethods
  """insert data into the table: "payment_methods""""
insertPaymentMethods(objects: [paymentMethods_insert_input!]!, on_conflict: paymentMethods_on_conflict): paymentMethods_mutation_response
  """insert a single row into the table: "plans""""
insertPlan(object: plans_insert_input!, on_conflict: plans_on_conflict): plans
  """insert data into the table: "plans""""
insertPlans(objects: [plans_insert_input!]!, on_conflict: plans_on_conflict): plans_mutation_response
  """insert a single row into the table: "regions_allowed_organization""""
insertRegionsAllowedOrganization(object: regions_allowed_organization_insert_input!, on_conflict: regions_allowed_organization_on_conflict): regions_allowed_organization
  """insert data into the table: "regions_allowed_organization""""
insertRegionsAllowedOrganizations(objects: [regions_allowed_organization_insert_input!]!, on_conflict: regions_allowed_organization_on_conflict): regions_allowed_organization_mutation_response
  """insert a single row into the table: "regions_allowed_workspace""""
insertRegionsAllowedWorkspace(object: regions_allowed_workspace_insert_input!, on_conflict: regions_allowed_workspace_on_conflict): regions_allowed_workspace
  """insert data into the table: "regions_allowed_workspace""""
insertRegionsAllowedWorkspaces(objects: [regions_allowed_workspace_insert_input!]!, on_conflict: regions_allowed_workspace_on_conflict): regions_allowed_workspace_mutation_response
  """insert a single row into the table: "run_service""""
insertRunService(object: run_service_insert_input!, on_conflict: run_service_on_conflict): run_service
  insertRunServiceConfig(appID: uuid!, config: ConfigRunServiceConfigInsertInput!): InsertRunServiceConfigResponse!
  """insert data into the table: "run_service""""
insertRunServices(objects: [run_service_insert_input!]!, on_conflict: run_service_on_conflict): run_service_mutation_response
  insertSecret(appID: uuid!, secret: ConfigEnvironmentVariableInsertInput!): ConfigEnvironmentVariable!
  """insert a single row into the table: "software_type""""
insertSoftwareType(object: software_type_insert_input!, on_conflict: software_type_on_conflict): software_type
  """insert data into the table: "software_type""""
insertSoftwareTypes(objects: [software_type_insert_input!]!, on_conflict: software_type_on_conflict): software_type_mutation_response
  """insert a single row into the table: "software_versions""""
insertSoftwareVersion(object: software_versions_insert_input!, on_conflict: software_versions_on_conflict): software_versions
  """insert data into the table: "software_versions""""
insertSoftwareVersions(objects: [software_versions_insert_input!]!, on_conflict: software_versions_on_conflict): software_versions_mutation_response
  """insert a single row into the table: "auth.users""""
insertUser(object: users_insert_input!, on_conflict: users_on_conflict): users
  """insert data into the table: "auth.users""""
insertUsers(objects: [users_insert_input!]!, on_conflict: users_on_conflict): users_mutation_response
  """insert a single row into the table: "storage.virus""""
insertVirus(object: virus_insert_input!, on_conflict: virus_on_conflict): virus
  """insert data into the table: "storage.virus""""
insertViruses(objects: [virus_insert_input!]!, on_conflict: virus_on_conflict): virus_mutation_response
  """insert a single row into the table: "workspaces""""
insertWorkspace(object: workspaces_insert_input!, on_conflict: workspaces_on_conflict): workspaces
  """insert a single row into the table: "workspace_members""""
insertWorkspaceMember(object: workspaceMembers_insert_input!, on_conflict: workspaceMembers_on_conflict): workspaceMembers
  """insert a single row into the table: "workspace_member_invites""""
insertWorkspaceMemberInvite(object: workspaceMemberInvites_insert_input!, on_conflict: workspaceMemberInvites_on_conflict): workspaceMemberInvites
  """insert data into the table: "workspace_member_invites""""
insertWorkspaceMemberInvites(objects: [workspaceMemberInvites_insert_input!]!, on_conflict: workspaceMemberInvites_on_conflict): workspaceMemberInvites_mutation_response
  """insert data into the table: "workspace_members""""
insertWorkspaceMembers(objects: [workspaceMembers_insert_input!]!, on_conflict: workspaceMembers_on_conflict): workspaceMembers_mutation_response
  """insert data into the table: "workspaces""""
insertWorkspaces(objects: [workspaces_insert_input!]!, on_conflict: workspaces_on_conflict): workspaces_mutation_response
  """insert data into the table: "announcements""""
insert_announcements(objects: [announcements_insert_input!]!, on_conflict: announcements_on_conflict): announcements_mutation_response
  """insert a single row into the table: "announcements""""
insert_announcements_one(object: announcements_insert_input!, on_conflict: announcements_on_conflict): announcements
  """insert data into the table: "auth.migrations""""
insert_auth_migrations(objects: [auth_migrations_insert_input!]!, on_conflict: auth_migrations_on_conflict): auth_migrations_mutation_response
  """insert a single row into the table: "auth.migrations""""
insert_auth_migrations_one(object: auth_migrations_insert_input!, on_conflict: auth_migrations_on_conflict): auth_migrations
  """insert data into the table: "billing.report_resource_type""""
insert_billing_report_resource_type(objects: [billing_report_resource_type_insert_input!]!, on_conflict: billing_report_resource_type_on_conflict): billing_report_resource_type_mutation_response
  """insert a single row into the table: "billing.report_resource_type""""
insert_billing_report_resource_type_one(object: billing_report_resource_type_insert_input!, on_conflict: billing_report_resource_type_on_conflict): billing_report_resource_type
  """insert data into the table: "billing.report_type""""
insert_billing_report_type(objects: [billing_report_type_insert_input!]!, on_conflict: billing_report_type_on_conflict): billing_report_type_mutation_response
  """insert a single row into the table: "billing.report_type""""
insert_billing_report_type_one(object: billing_report_type_insert_input!, on_conflict: billing_report_type_on_conflict): billing_report_type
  """insert data into the table: "billing.reports_resources""""
insert_billing_reports_resources(objects: [billing_reports_resources_insert_input!]!, on_conflict: billing_reports_resources_on_conflict): billing_reports_resources_mutation_response
  """insert a single row into the table: "billing.reports_resources""""
insert_billing_reports_resources_one(object: billing_reports_resources_insert_input!, on_conflict: billing_reports_resources_on_conflict): billing_reports_resources
  """insert data into the table: "billing.subscription_items""""
insert_billing_subscription_items(objects: [billing_subscription_items_insert_input!]!, on_conflict: billing_subscription_items_on_conflict): billing_subscription_items_mutation_response
  """insert a single row into the table: "billing.subscription_items""""
insert_billing_subscription_items_one(object: billing_subscription_items_insert_input!, on_conflict: billing_subscription_items_on_conflict): billing_subscription_items
  """insert data into the table: "continents""""
insert_continents(objects: [continents_insert_input!]!, on_conflict: continents_on_conflict): continents_mutation_response
  """insert a single row into the table: "continents""""
insert_continents_one(object: continents_insert_input!, on_conflict: continents_on_conflict): continents
  """insert data into the table: "countries""""
insert_countries(objects: [countries_insert_input!]!, on_conflict: countries_on_conflict): countries_mutation_response
  """insert a single row into the table: "countries""""
insert_countries_one(object: countries_insert_input!, on_conflict: countries_on_conflict): countries
  """insert data into the table: "organization_costs_thresholds""""
insert_organization_costs_thresholds(objects: [organization_costs_thresholds_insert_input!]!, on_conflict: organization_costs_thresholds_on_conflict): organization_costs_thresholds_mutation_response
  """insert a single row into the table: "organization_costs_thresholds""""
insert_organization_costs_thresholds_one(object: organization_costs_thresholds_insert_input!, on_conflict: organization_costs_thresholds_on_conflict): organization_costs_thresholds
  """insert data into the table: "organization_members_role""""
insert_organization_members_role(objects: [organization_members_role_insert_input!]!, on_conflict: organization_members_role_on_conflict): organization_members_role_mutation_response
  """insert a single row into the table: "organization_members_role""""
insert_organization_members_role_one(object: organization_members_role_insert_input!, on_conflict: organization_members_role_on_conflict): organization_members_role
  """insert data into the table: "organization_status""""
insert_organization_status(objects: [organization_status_insert_input!]!, on_conflict: organization_status_on_conflict): organization_status_mutation_response
  """insert a single row into the table: "organization_status""""
insert_organization_status_one(object: organization_status_insert_input!, on_conflict: organization_status_on_conflict): organization_status
  """insert data into the table: "region_type""""
insert_region_type(objects: [region_type_insert_input!]!, on_conflict: region_type_on_conflict): region_type_mutation_response
  """insert a single row into the table: "region_type""""
insert_region_type_one(object: region_type_insert_input!, on_conflict: region_type_on_conflict): region_type
  """insert data into the table: "regions""""
insert_regions(objects: [regions_insert_input!]!, on_conflict: regions_on_conflict): regions_mutation_response
  """insert a single row into the table: "regions""""
insert_regions_one(object: regions_insert_input!, on_conflict: regions_on_conflict): regions
  """execute VOLATILE function "organization_member_invite_accept" which returns "organization_members""""
organizationMemberInviteAccept(args: organizationMemberInviteAccept_args!, distinct_on: [organization_members_select_column!], limit: Int, offset: Int, order_by: [organization_members_order_by!], where: organization_members_bool_exp): [organization_members!]!
  pauseInactiveApps: [String!]!
  pauseOrganizationsExceedUsage: [String!]!
  replaceConfig(appID: uuid!, config: ConfigConfigInsertInput!): ConfigConfig!
  replaceConfigRawJSON(appID: uuid!, rawJSON: String!): String!
  replaceRunServiceConfig(appID: uuid!, config: ConfigRunServiceConfigInsertInput!, serviceID: uuid!): ConfigRunServiceConfig!
  resetPostgresPassword(appID: String!, newPassword: String!): Boolean!
  restoreApplicationDatabase(appID: String!, backupID: String!): Boolean!
  """Triggers a restore of the application database with PiTR
If `baseBackupName` is not provided, we will attempt to determine the base backup
by using the newest backup that is older than `recoveryTarget`"""
restoreApplicationDatabasePiTR(appID: String!, baseBackupName: String, fromAppID: String, recoveryTarget: Timestamp!): Boolean!
  sendEmailInvite(inviteID: uuid!): Boolean!
  sendEmailOrganizationStatusChange(newStatus: String!, oldStatus: String!, organizationID: uuid!): Boolean!
  sendEmailOrganizationThreshold(organizationID: uuid!, threshold: String!): Boolean!
  sendEmailTemplate(from: String!, templateAlias: String!, templateModel: map, to: String!): Boolean!
  """update single row of the table: "announcements_read""""
updateAnnouncementRead(_set: announcements_read_set_input, pk_columns: announcements_read_pk_columns_input!): announcements_read
  """update data of the table: "announcements_read""""
updateAnnouncementsRead(_set: announcements_read_set_input, where: announcements_read_bool_exp!): announcements_read_mutation_response
  """update multiples rows of table: "announcements_read""""
updateAnnouncementsReadMany(updates: [announcements_read_updates!]!): [announcements_read_mutation_response]
  """update single row of the table: "apps""""
updateApp(_append: apps_append_input, _delete_at_path: apps_delete_at_path_input, _delete_elem: apps_delete_elem_input, _delete_key: apps_delete_key_input, _inc: apps_inc_input, _prepend: apps_prepend_input, _set: apps_set_input, pk_columns: apps_pk_columns_input!): apps
  """update single row of the table: "app_states""""
updateAppState(_inc: appStates_inc_input, _set: appStates_set_input, pk_columns: appStates_pk_columns_input!): appStates
  """update data of the table: "app_state_history""""
updateAppStateHistories(_inc: appStateHistory_inc_input, _set: appStateHistory_set_input, where: appStateHistory_bool_exp!): appStateHistory_mutation_response
  """update single row of the table: "app_state_history""""
updateAppStateHistory(_inc: appStateHistory_inc_input, _set: appStateHistory_set_input, pk_columns: appStateHistory_pk_columns_input!): appStateHistory
  """update data of the table: "app_states""""
updateAppStates(_inc: appStates_inc_input, _set: appStates_set_input, where: appStates_bool_exp!): appStates_mutation_response
  """update data of the table: "apps""""
updateApps(_append: apps_append_input, _delete_at_path: apps_delete_at_path_input, _delete_elem: apps_delete_elem_input, _delete_key: apps_delete_key_input, _inc: apps_inc_input, _prepend: apps_prepend_input, _set: apps_set_input, where: apps_bool_exp!): apps_mutation_response
  """update single row of the table: "auth.providers""""
updateAuthProvider(_set: authProviders_set_input, pk_columns: authProviders_pk_columns_input!): authProviders
  """update single row of the table: "auth.provider_requests""""
updateAuthProviderRequest(_append: authProviderRequests_append_input, _delete_at_path: authProviderRequests_delete_at_path_input, _delete_elem: authProviderRequests_delete_elem_input, _delete_key: authProviderRequests_delete_key_input, _prepend: authProviderRequests_prepend_input, _set: authProviderRequests_set_input, pk_columns: authProviderRequests_pk_columns_input!): authProviderRequests
  """update data of the table: "auth.provider_requests""""
updateAuthProviderRequests(_append: authProviderRequests_append_input, _delete_at_path: authProviderRequests_delete_at_path_input, _delete_elem: authProviderRequests_delete_elem_input, _delete_key: authProviderRequests_delete_key_input, _prepend: authProviderRequests_prepend_input, _set: authProviderRequests_set_input, where: authProviderRequests_bool_exp!): authProviderRequests_mutation_response
  """update data of the table: "auth.providers""""
updateAuthProviders(_set: authProviders_set_input, where: authProviders_bool_exp!): authProviders_mutation_response
  """update single row of the table: "auth.refresh_tokens""""
updateAuthRefreshToken(_append: authRefreshTokens_append_input, _delete_at_path: authRefreshTokens_delete_at_path_input, _delete_elem: authRefreshTokens_delete_elem_input, _delete_key: authRefreshTokens_delete_key_input, _prepend: authRefreshTokens_prepend_input, _set: authRefreshTokens_set_input, pk_columns: authRefreshTokens_pk_columns_input!): authRefreshTokens
  """update single row of the table: "auth.refresh_token_types""""
updateAuthRefreshTokenType(_set: authRefreshTokenTypes_set_input, pk_columns: authRefreshTokenTypes_pk_columns_input!): authRefreshTokenTypes
  """update data of the table: "auth.refresh_token_types""""
updateAuthRefreshTokenTypes(_set: authRefreshTokenTypes_set_input, where: authRefreshTokenTypes_bool_exp!): authRefreshTokenTypes_mutation_response
  """update data of the table: "auth.refresh_tokens""""
updateAuthRefreshTokens(_append: authRefreshTokens_append_input, _delete_at_path: authRefreshTokens_delete_at_path_input, _delete_elem: authRefreshTokens_delete_elem_input, _delete_key: authRefreshTokens_delete_key_input, _prepend: authRefreshTokens_prepend_input, _set: authRefreshTokens_set_input, where: authRefreshTokens_bool_exp!): authRefreshTokens_mutation_response
  """update single row of the table: "auth.roles""""
updateAuthRole(_set: authRoles_set_input, pk_columns: authRoles_pk_columns_input!): authRoles
  """update data of the table: "auth.roles""""
updateAuthRoles(_set: authRoles_set_input, where: authRoles_bool_exp!): authRoles_mutation_response
  """update single row of the table: "auth.user_providers""""
updateAuthUserProvider(_set: authUserProviders_set_input, pk_columns: authUserProviders_pk_columns_input!): authUserProviders
  """update data of the table: "auth.user_providers""""
updateAuthUserProviders(_set: authUserProviders_set_input, where: authUserProviders_bool_exp!): authUserProviders_mutation_response
  """update single row of the table: "auth.user_roles""""
updateAuthUserRole(_set: authUserRoles_set_input, pk_columns: authUserRoles_pk_columns_input!): authUserRoles
  """update data of the table: "auth.user_roles""""
updateAuthUserRoles(_set: authUserRoles_set_input, where: authUserRoles_bool_exp!): authUserRoles_mutation_response
  """update single row of the table: "auth.user_security_keys""""
updateAuthUserSecurityKey(_inc: authUserSecurityKeys_inc_input, _set: authUserSecurityKeys_set_input, pk_columns: authUserSecurityKeys_pk_columns_input!): authUserSecurityKeys
  """update data of the table: "auth.user_security_keys""""
updateAuthUserSecurityKeys(_inc: authUserSecurityKeys_inc_input, _set: authUserSecurityKeys_set_input, where: authUserSecurityKeys_bool_exp!): authUserSecurityKeys_mutation_response
  """update single row of the table: "backups""""
updateBackup(_inc: backups_inc_input, _set: backups_set_input, pk_columns: backups_pk_columns_input!): backups
  """update data of the table: "backups""""
updateBackups(_inc: backups_inc_input, _set: backups_set_input, where: backups_bool_exp!): backups_mutation_response
  """update single row of the table: "billing.dedicated_compute""""
updateBillingDedicatedCompute(_inc: billing_dedicated_compute_inc_input, _set: billing_dedicated_compute_set_input, pk_columns: billing_dedicated_compute_pk_columns_input!): billing_dedicated_compute
  """update data of the table: "billing.dedicated_compute""""
updateBillingDedicatedComputes(_inc: billing_dedicated_compute_inc_input, _set: billing_dedicated_compute_set_input, where: billing_dedicated_compute_bool_exp!): billing_dedicated_compute_mutation_response
  """update single row of the table: "billing.reports""""
updateBillingReport(_inc: billing_reports_inc_input, _set: billing_reports_set_input, pk_columns: billing_reports_pk_columns_input!): billing_reports
  """update data of the table: "billing.reports""""
updateBillingReports(_inc: billing_reports_inc_input, _set: billing_reports_set_input, where: billing_reports_bool_exp!): billing_reports_mutation_response
  """update single row of the table: "billing.resources""""
updateBillingResource(_inc: billing_resources_inc_input, _set: billing_resources_set_input, pk_columns: billing_resources_pk_columns_input!): billing_resources
  """update data of the table: "billing.resources""""
updateBillingResources(_inc: billing_resources_inc_input, _set: billing_resources_set_input, where: billing_resources_bool_exp!): billing_resources_mutation_response
  """update single row of the table: "billing.subscriptions""""
updateBillingSubscription(_set: billing_subscriptions_set_input, pk_columns: billing_subscriptions_pk_columns_input!): billing_subscriptions
  """update data of the table: "billing.subscriptions""""
updateBillingSubscriptions(_set: billing_subscriptions_set_input, where: billing_subscriptions_bool_exp!): billing_subscriptions_mutation_response
  """update single row of the table: "storage.buckets""""
updateBucket(_inc: buckets_inc_input, _set: buckets_set_input, pk_columns: buckets_pk_columns_input!): buckets
  """update data of the table: "storage.buckets""""
updateBuckets(_inc: buckets_inc_input, _set: buckets_set_input, where: buckets_bool_exp!): buckets_mutation_response
  """update single row of the table: "cli_tokens""""
updateCliToken(_set: cliTokens_set_input, pk_columns: cliTokens_pk_columns_input!): cliTokens
  """update data of the table: "cli_tokens""""
updateCliTokens(_set: cliTokens_set_input, where: cliTokens_bool_exp!): cliTokens_mutation_response
  updateConfig(appID: uuid!, config: ConfigConfigUpdateInput!): ConfigConfig!
  """update single row of the table: "deployments""""
updateDeployment(_set: deployments_set_input, pk_columns: deployments_pk_columns_input!): deployments
  """update single row of the table: "deployment_logs""""
updateDeploymentLog(_set: deploymentLogs_set_input, pk_columns: deploymentLogs_pk_columns_input!): deploymentLogs
  """update data of the table: "deployment_logs""""
updateDeploymentLogs(_set: deploymentLogs_set_input, where: deploymentLogs_bool_exp!): deploymentLogs_mutation_response
  """update data of the table: "deployments""""
updateDeployments(_set: deployments_set_input, where: deployments_bool_exp!): deployments_mutation_response
  """update single row of the table: "feature_flags""""
updateFeatureFlag(_set: featureFlags_set_input, pk_columns: featureFlags_pk_columns_input!): featureFlags
  """update data of the table: "feature_flags""""
updateFeatureFlags(_set: featureFlags_set_input, where: featureFlags_bool_exp!): featureFlags_mutation_response
  """update single row of the table: "storage.files""""
updateFile(_append: files_append_input, _delete_at_path: files_delete_at_path_input, _delete_elem: files_delete_elem_input, _delete_key: files_delete_key_input, _inc: files_inc_input, _prepend: files_prepend_input, _set: files_set_input, pk_columns: files_pk_columns_input!): files
  """update data of the table: "storage.files""""
updateFiles(_append: files_append_input, _delete_at_path: files_delete_at_path_input, _delete_elem: files_delete_elem_input, _delete_key: files_delete_key_input, _inc: files_inc_input, _prepend: files_prepend_input, _set: files_set_input, where: files_bool_exp!): files_mutation_response
  """update single row of the table: "github_app_installations""""
updateGithubAppInstallation(_append: githubAppInstallations_append_input, _delete_at_path: githubAppInstallations_delete_at_path_input, _delete_elem: githubAppInstallations_delete_elem_input, _delete_key: githubAppInstallations_delete_key_input, _inc: githubAppInstallations_inc_input, _prepend: githubAppInstallations_prepend_input, _set: githubAppInstallations_set_input, pk_columns: githubAppInstallations_pk_columns_input!): githubAppInstallations
  """update data of the table: "github_app_installations""""
updateGithubAppInstallations(_append: githubAppInstallations_append_input, _delete_at_path: githubAppInstallations_delete_at_path_input, _delete_elem: githubAppInstallations_delete_elem_input, _delete_key: githubAppInstallations_delete_key_input, _inc: githubAppInstallations_inc_input, _prepend: githubAppInstallations_prepend_input, _set: githubAppInstallations_set_input, where: githubAppInstallations_bool_exp!): githubAppInstallations_mutation_response
  """update data of the table: "github_repositories""""
updateGithubRepositories(_set: githubRepositories_set_input, where: githubRepositories_bool_exp!): githubRepositories_mutation_response
  """update single row of the table: "github_repositories""""
updateGithubRepository(_set: githubRepositories_set_input, pk_columns: githubRepositories_pk_columns_input!): githubRepositories
  """update multiples rows of table: "billing.reports""""
updateManyBillingReports(updates: [billing_reports_updates!]!): [billing_reports_mutation_response]
  """update multiples rows of table: "billing.resources""""
updateManyBillingResources(updates: [billing_resources_updates!]!): [billing_resources_mutation_response]
  """update multiples rows of table: "software_type""""
updateManySoftwareType(updates: [software_type_updates!]!): [software_type_mutation_response]
  """update multiples rows of table: "software_versions""""
updateManySoftwareVersions(updates: [software_versions_updates!]!): [software_versions_mutation_response]
  """update single row of the table: "organizations""""
updateOrganization(_inc: organizations_inc_input, _set: organizations_set_input, pk_columns: organizations_pk_columns_input!): organizations
  """update single row of the table: "organization_members""""
updateOrganizationMember(_set: organization_members_set_input, pk_columns: organization_members_pk_columns_input!): organization_members
  """update single row of the table: "organization_member_invites""""
updateOrganizationMemberInvite(_set: organization_member_invites_set_input, pk_columns: organization_member_invites_pk_columns_input!): organization_member_invites
  """update data of the table: "organization_member_invites""""
updateOrganizationMemberInvites(_set: organization_member_invites_set_input, where: organization_member_invites_bool_exp!): organization_member_invites_mutation_response
  """update multiples rows of table: "organization_member_invites""""
updateOrganizationMemberInvitesMany(updates: [organization_member_invites_updates!]!): [organization_member_invites_mutation_response]
  """update data of the table: "organization_members""""
updateOrganizationMembers(_set: organization_members_set_input, where: organization_members_bool_exp!): organization_members_mutation_response
  """update multiples rows of table: "organization_members""""
updateOrganizationMembersMany(updates: [organization_members_updates!]!): [organization_members_mutation_response]
  """update single row of the table: "organization_new_request""""
updateOrganizationNewRequest(_set: organization_new_request_set_input, pk_columns: organization_new_request_pk_columns_input!): organization_new_request
  """update data of the table: "organization_new_request""""
updateOrganizationNewRequests(_set: organization_new_request_set_input, where: organization_new_request_bool_exp!): organization_new_request_mutation_response
  """update multiples rows of table: "organization_new_request""""
updateOrganizationNewRequestsMany(updates: [organization_new_request_updates!]!): [organization_new_request_mutation_response]
  """update data of the table: "organizations""""
updateOrganizations(_inc: organizations_inc_input, _set: organizations_set_input, where: organizations_bool_exp!): organizations_mutation_response
  """update multiples rows of table: "organizations""""
updateOrganizationsMany(updates: [organizations_updates!]!): [organizations_mutation_response]
  """update single row of the table: "payment_methods""""
updatePaymentMethod(_inc: paymentMethods_inc_input, _set: paymentMethods_set_input, pk_columns: paymentMethods_pk_columns_input!): paymentMethods
  """update data of the table: "payment_methods""""
updatePaymentMethods(_inc: paymentMethods_inc_input, _set: paymentMethods_set_input, where: paymentMethods_bool_exp!): paymentMethods_mutation_response
  """update single row of the table: "plans""""
updatePlan(_inc: plans_inc_input, _set: plans_set_input, pk_columns: plans_pk_columns_input!): plans
  """update data of the table: "plans""""
updatePlans(_inc: plans_inc_input, _set: plans_set_input, where: plans_bool_exp!): plans_mutation_response
  """update single row of the table: "regions_allowed_organization""""
updateRegionsAllowedOrganization(_set: regions_allowed_organization_set_input, pk_columns: regions_allowed_organization_pk_columns_input!): regions_allowed_organization
  """update data of the table: "regions_allowed_organization""""
updateRegionsAllowedOrganizations(_set: regions_allowed_organization_set_input, where: regions_allowed_organization_bool_exp!): regions_allowed_organization_mutation_response
  """update multiples rows of table: "regions_allowed_organization""""
updateRegionsAllowedOrganizationsMany(updates: [regions_allowed_organization_updates!]!): [regions_allowed_organization_mutation_response]
  """update single row of the table: "regions_allowed_workspace""""
updateRegionsAllowedWorkspace(_set: regions_allowed_workspace_set_input, pk_columns: regions_allowed_workspace_pk_columns_input!): regions_allowed_workspace
  """update data of the table: "regions_allowed_workspace""""
updateRegionsAllowedWorkspaces(_set: regions_allowed_workspace_set_input, where: regions_allowed_workspace_bool_exp!): regions_allowed_workspace_mutation_response
  """update single row of the table: "run_service""""
updateRunService(_set: run_service_set_input, pk_columns: run_service_pk_columns_input!): run_service
  updateRunServiceConfig(appID: uuid!, config: ConfigRunServiceConfigUpdateInput!, serviceID: uuid!): ConfigRunServiceConfig!
  """update data of the table: "run_service""""
updateRunServices(_set: run_service_set_input, where: run_service_bool_exp!): run_service_mutation_response
  updateSecret(appID: uuid!, secret: ConfigEnvironmentVariableInsertInput!): ConfigEnvironmentVariable!
  """update single row of the table: "software_type""""
updateSoftwareType(_set: software_type_set_input, pk_columns: software_type_pk_columns_input!): software_type
  """update data of the table: "software_type""""
updateSoftwareTypes(_set: software_type_set_input, where: software_type_bool_exp!): software_type_mutation_response
  """update single row of the table: "software_versions""""
updateSoftwareVersion(_set: software_versions_set_input, pk_columns: software_versions_pk_columns_input!): software_versions
  """update data of the table: "software_versions""""
updateSoftwareVersions(_set: software_versions_set_input, where: software_versions_bool_exp!): software_versions_mutation_response
  updateSystemConfig(appID: uuid!, systemConfig: ConfigSystemConfigUpdateInput!): ConfigSystemConfig!
  """update single row of the table: "auth.users""""
updateUser(_append: users_append_input, _delete_at_path: users_delete_at_path_input, _delete_elem: users_delete_elem_input, _delete_key: users_delete_key_input, _prepend: users_prepend_input, _set: users_set_input, pk_columns: users_pk_columns_input!): users
  """update data of the table: "auth.users""""
updateUsers(_append: users_append_input, _delete_at_path: users_delete_at_path_input, _delete_elem: users_delete_elem_input, _delete_key: users_delete_key_input, _prepend: users_prepend_input, _set: users_set_input, where: users_bool_exp!): users_mutation_response
  """update single row of the table: "storage.virus""""
updateVirus(_append: virus_append_input, _delete_at_path: virus_delete_at_path_input, _delete_elem: virus_delete_elem_input, _delete_key: virus_delete_key_input, _prepend: virus_prepend_input, _set: virus_set_input, pk_columns: virus_pk_columns_input!): virus
  """update data of the table: "storage.virus""""
updateViruses(_append: virus_append_input, _delete_at_path: virus_delete_at_path_input, _delete_elem: virus_delete_elem_input, _delete_key: virus_delete_key_input, _prepend: virus_prepend_input, _set: virus_set_input, where: virus_bool_exp!): virus_mutation_response
  """update single row of the table: "workspaces""""
updateWorkspace(_set: workspaces_set_input, pk_columns: workspaces_pk_columns_input!): workspaces
  """update single row of the table: "workspace_members""""
updateWorkspaceMember(_set: workspaceMembers_set_input, pk_columns: workspaceMembers_pk_columns_input!): workspaceMembers
  """update single row of the table: "workspace_member_invites""""
updateWorkspaceMemberInvite(_set: workspaceMemberInvites_set_input, pk_columns: workspaceMemberInvites_pk_columns_input!): workspaceMemberInvites
  """update data of the table: "workspace_member_invites""""
updateWorkspaceMemberInvites(_set: workspaceMemberInvites_set_input, where: workspaceMemberInvites_bool_exp!): workspaceMemberInvites_mutation_response
  """update data of the table: "workspace_members""""
updateWorkspaceMembers(_set: workspaceMembers_set_input, where: workspaceMembers_bool_exp!): workspaceMembers_mutation_response
  """update data of the table: "workspaces""""
updateWorkspaces(_set: workspaces_set_input, where: workspaces_bool_exp!): workspaces_mutation_response
  """update data of the table: "announcements""""
update_announcements(_set: announcements_set_input, where: announcements_bool_exp!): announcements_mutation_response
  """update single row of the table: "announcements""""
update_announcements_by_pk(_set: announcements_set_input, pk_columns: announcements_pk_columns_input!): announcements
  """update multiples rows of table: "announcements""""
update_announcements_many(updates: [announcements_updates!]!): [announcements_mutation_response]
  """update multiples rows of table: "app_state_history""""
update_appStateHistory_many(updates: [appStateHistory_updates!]!): [appStateHistory_mutation_response]
  """update multiples rows of table: "app_states""""
update_appStates_many(updates: [appStates_updates!]!): [appStates_mutation_response]
  """update multiples rows of table: "apps""""
update_apps_many(updates: [apps_updates!]!): [apps_mutation_response]
  """update multiples rows of table: "auth.provider_requests""""
update_authProviderRequests_many(updates: [authProviderRequests_updates!]!): [authProviderRequests_mutation_response]
  """update multiples rows of table: "auth.providers""""
update_authProviders_many(updates: [authProviders_updates!]!): [authProviders_mutation_response]
  """update multiples rows of table: "auth.refresh_token_types""""
update_authRefreshTokenTypes_many(updates: [authRefreshTokenTypes_updates!]!): [authRefreshTokenTypes_mutation_response]
  """update multiples rows of table: "auth.refresh_tokens""""
update_authRefreshTokens_many(updates: [authRefreshTokens_updates!]!): [authRefreshTokens_mutation_response]
  """update multiples rows of table: "auth.roles""""
update_authRoles_many(updates: [authRoles_updates!]!): [authRoles_mutation_response]
  """update multiples rows of table: "auth.user_providers""""
update_authUserProviders_many(updates: [authUserProviders_updates!]!): [authUserProviders_mutation_response]
  """update multiples rows of table: "auth.user_roles""""
update_authUserRoles_many(updates: [authUserRoles_updates!]!): [authUserRoles_mutation_response]
  """update multiples rows of table: "auth.user_security_keys""""
update_authUserSecurityKeys_many(updates: [authUserSecurityKeys_updates!]!): [authUserSecurityKeys_mutation_response]
  """update data of the table: "auth.migrations""""
update_auth_migrations(_inc: auth_migrations_inc_input, _set: auth_migrations_set_input, where: auth_migrations_bool_exp!): auth_migrations_mutation_response
  """update single row of the table: "auth.migrations""""
update_auth_migrations_by_pk(_inc: auth_migrations_inc_input, _set: auth_migrations_set_input, pk_columns: auth_migrations_pk_columns_input!): auth_migrations
  """update multiples rows of table: "auth.migrations""""
update_auth_migrations_many(updates: [auth_migrations_updates!]!): [auth_migrations_mutation_response]
  """update multiples rows of table: "backups""""
update_backups_many(updates: [backups_updates!]!): [backups_mutation_response]
  """update multiples rows of table: "billing.dedicated_compute""""
update_billing_dedicated_compute_many(updates: [billing_dedicated_compute_updates!]!): [billing_dedicated_compute_mutation_response]
  """update data of the table: "billing.report_resource_type""""
update_billing_report_resource_type(_set: billing_report_resource_type_set_input, where: billing_report_resource_type_bool_exp!): billing_report_resource_type_mutation_response
  """update single row of the table: "billing.report_resource_type""""
update_billing_report_resource_type_by_pk(_set: billing_report_resource_type_set_input, pk_columns: billing_report_resource_type_pk_columns_input!): billing_report_resource_type
  """update multiples rows of table: "billing.report_resource_type""""
update_billing_report_resource_type_many(updates: [billing_report_resource_type_updates!]!): [billing_report_resource_type_mutation_response]
  """update data of the table: "billing.report_type""""
update_billing_report_type(_set: billing_report_type_set_input, where: billing_report_type_bool_exp!): billing_report_type_mutation_response
  """update single row of the table: "billing.report_type""""
update_billing_report_type_by_pk(_set: billing_report_type_set_input, pk_columns: billing_report_type_pk_columns_input!): billing_report_type
  """update multiples rows of table: "billing.report_type""""
update_billing_report_type_many(updates: [billing_report_type_updates!]!): [billing_report_type_mutation_response]
  """update data of the table: "billing.reports_resources""""
update_billing_reports_resources(_inc: billing_reports_resources_inc_input, _set: billing_reports_resources_set_input, where: billing_reports_resources_bool_exp!): billing_reports_resources_mutation_response
  """update single row of the table: "billing.reports_resources""""
update_billing_reports_resources_by_pk(_inc: billing_reports_resources_inc_input, _set: billing_reports_resources_set_input, pk_columns: billing_reports_resources_pk_columns_input!): billing_reports_resources
  """update multiples rows of table: "billing.reports_resources""""
update_billing_reports_resources_many(updates: [billing_reports_resources_updates!]!): [billing_reports_resources_mutation_response]
  """update data of the table: "billing.subscription_items""""
update_billing_subscription_items(_set: billing_subscription_items_set_input, where: billing_subscription_items_bool_exp!): billing_subscription_items_mutation_response
  """update single row of the table: "billing.subscription_items""""
update_billing_subscription_items_by_pk(_set: billing_subscription_items_set_input, pk_columns: billing_subscription_items_pk_columns_input!): billing_subscription_items
  """update multiples rows of table: "billing.subscription_items""""
update_billing_subscription_items_many(updates: [billing_subscription_items_updates!]!): [billing_subscription_items_mutation_response]
  """update multiples rows of table: "storage.buckets""""
update_buckets_many(updates: [buckets_updates!]!): [buckets_mutation_response]
  """update multiples rows of table: "cli_tokens""""
update_cliTokens_many(updates: [cliTokens_updates!]!): [cliTokens_mutation_response]
  """update data of the table: "continents""""
update_continents(_set: continents_set_input, where: continents_bool_exp!): continents_mutation_response
  """update single row of the table: "continents""""
update_continents_by_pk(_set: continents_set_input, pk_columns: continents_pk_columns_input!): continents
  """update multiples rows of table: "continents""""
update_continents_many(updates: [continents_updates!]!): [continents_mutation_response]
  """update data of the table: "countries""""
update_countries(_inc: countries_inc_input, _set: countries_set_input, where: countries_bool_exp!): countries_mutation_response
  """update single row of the table: "countries""""
update_countries_by_pk(_inc: countries_inc_input, _set: countries_set_input, pk_columns: countries_pk_columns_input!): countries
  """update multiples rows of table: "countries""""
update_countries_many(updates: [countries_updates!]!): [countries_mutation_response]
  """update multiples rows of table: "deployment_logs""""
update_deploymentLogs_many(updates: [deploymentLogs_updates!]!): [deploymentLogs_mutation_response]
  """update multiples rows of table: "deployments""""
update_deployments_many(updates: [deployments_updates!]!): [deployments_mutation_response]
  """update multiples rows of table: "feature_flags""""
update_featureFlags_many(updates: [featureFlags_updates!]!): [featureFlags_mutation_response]
  """update multiples rows of table: "storage.files""""
update_files_many(updates: [files_updates!]!): [files_mutation_response]
  """update multiples rows of table: "github_app_installations""""
update_githubAppInstallations_many(updates: [githubAppInstallations_updates!]!): [githubAppInstallations_mutation_response]
  """update multiples rows of table: "github_repositories""""
update_githubRepositories_many(updates: [githubRepositories_updates!]!): [githubRepositories_mutation_response]
  """update multiples rows of table: "billing.subscriptions""""
update_many_billing_subscriptions(updates: [billing_subscriptions_updates!]!): [billing_subscriptions_mutation_response]
  """update data of the table: "organization_costs_thresholds""""
update_organization_costs_thresholds(_set: organization_costs_thresholds_set_input, where: organization_costs_thresholds_bool_exp!): organization_costs_thresholds_mutation_response
  """update single row of the table: "organization_costs_thresholds""""
update_organization_costs_thresholds_by_pk(_set: organization_costs_thresholds_set_input, pk_columns: organization_costs_thresholds_pk_columns_input!): organization_costs_thresholds
  """update multiples rows of table: "organization_costs_thresholds""""
update_organization_costs_thresholds_many(updates: [organization_costs_thresholds_updates!]!): [organization_costs_thresholds_mutation_response]
  """update data of the table: "organization_members_role""""
update_organization_members_role(_set: organization_members_role_set_input, where: organization_members_role_bool_exp!): organization_members_role_mutation_response
  """update single row of the table: "organization_members_role""""
update_organization_members_role_by_pk(_set: organization_members_role_set_input, pk_columns: organization_members_role_pk_columns_input!): organization_members_role
  """update multiples rows of table: "organization_members_role""""
update_organization_members_role_many(updates: [organization_members_role_updates!]!): [organization_members_role_mutation_response]
  """update data of the table: "organization_status""""
update_organization_status(_set: organization_status_set_input, where: organization_status_bool_exp!): organization_status_mutation_response
  """update single row of the table: "organization_status""""
update_organization_status_by_pk(_set: organization_status_set_input, pk_columns: organization_status_pk_columns_input!): organization_status
  """update multiples rows of table: "organization_status""""
update_organization_status_many(updates: [organization_status_updates!]!): [organization_status_mutation_response]
  """update multiples rows of table: "payment_methods""""
update_paymentMethods_many(updates: [paymentMethods_updates!]!): [paymentMethods_mutation_response]
  """update multiples rows of table: "plans""""
update_plans_many(updates: [plans_updates!]!): [plans_mutation_response]
  """update data of the table: "region_type""""
update_region_type(_set: region_type_set_input, where: region_type_bool_exp!): region_type_mutation_response
  """update single row of the table: "region_type""""
update_region_type_by_pk(_set: region_type_set_input, pk_columns: region_type_pk_columns_input!): region_type
  """update multiples rows of table: "region_type""""
update_region_type_many(updates: [region_type_updates!]!): [region_type_mutation_response]
  """update data of the table: "regions""""
update_regions(_set: regions_set_input, where: regions_bool_exp!): regions_mutation_response
  """update multiples rows of table: "regions_allowed_workspace""""
update_regions_allowed_workspace_many(updates: [regions_allowed_workspace_updates!]!): [regions_allowed_workspace_mutation_response]
  """update single row of the table: "regions""""
update_regions_by_pk(_set: regions_set_input, pk_columns: regions_pk_columns_input!): regions
  """update multiples rows of table: "regions""""
update_regions_many(updates: [regions_updates!]!): [regions_mutation_response]
  """update multiples rows of table: "run_service""""
update_run_service_many(updates: [run_service_updates!]!): [run_service_mutation_response]
  """update multiples rows of table: "auth.users""""
update_users_many(updates: [users_updates!]!): [users_mutation_response]
  """update multiples rows of table: "storage.virus""""
update_virus_many(updates: [virus_updates!]!): [virus_mutation_response]
  """update multiples rows of table: "workspace_member_invites""""
update_workspaceMemberInvites_many(updates: [workspaceMemberInvites_updates!]!): [workspaceMemberInvites_mutation_response]
  """update multiples rows of table: "workspace_members""""
update_workspaceMembers_many(updates: [workspaceMembers_updates!]!): [workspaceMembers_mutation_response]
  """update multiples rows of table: "workspaces""""
update_workspaces_many(updates: [workspaces_updates!]!): [workspaces_mutation_response]
}

