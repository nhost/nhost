// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(c *gin.Context)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(c *gin.Context)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(c *gin.Context)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(c *gin.Context)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(c *gin.Context)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(c *gin.Context)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(c *gin.Context)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(c *gin.Context)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(c *gin.Context)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(c *gin.Context)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(c *gin.Context)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(c *gin.Context)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(c *gin.Context)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(c *gin.Context)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(c *gin.Context)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(c *gin.Context)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(c *gin.Context)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(c *gin.Context)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(c *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(c *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(c *gin.Context, provider SignInProviderCallbackPostParamsProvider)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(c *gin.Context)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(c *gin.Context)
	// Sign out
	// (POST /signout)
	SignOut(c *gin.Context)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(c *gin.Context)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(c *gin.Context)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(c *gin.Context)
	// Refresh access token
	// (POST /token)
	RefreshToken(c *gin.Context)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(c *gin.Context)
	// Get user information
	// (GET /user)
	GetUser(c *gin.Context)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(c *gin.Context)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(c *gin.Context)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(c *gin.Context)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(c *gin.Context)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(c *gin.Context)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(c *gin.Context)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(c *gin.Context)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(c *gin.Context, params VerifyTicketParams)
	// Get service version
	// (GET /version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetJWKs operation middleware
func (siw *ServerInterfaceWrapper) GetJWKs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKs(c)
}

// ElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) ElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ElevateWebauthn(c)
}

// VerifyElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifyElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyElevateWebauthn(c)
}

// HealthCheckGet operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckGet(c)
}

// HealthCheckHead operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckHead(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckHead(c)
}

// LinkIdToken operation middleware
func (siw *ServerInterfaceWrapper) LinkIdToken(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LinkIdToken(c)
}

// ChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserMfa(c)
}

// CreatePAT operation middleware
func (siw *ServerInterfaceWrapper) CreatePAT(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePAT(c)
}

// SignInAnonymous operation middleware
func (siw *ServerInterfaceWrapper) SignInAnonymous(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInAnonymous(c)
}

// SignInEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignInEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInEmailPassword(c)
}

// SignInIdToken operation middleware
func (siw *ServerInterfaceWrapper) SignInIdToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInIdToken(c)
}

// VerifySignInMfaTotp operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInMfaTotp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInMfaTotp(c)
}

// SignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInOTPEmail(c)
}

// VerifySignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInOTPEmail(c)
}

// SignInPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessEmail(c)
}

// SignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessSms(c)
}

// VerifySignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInPasswordlessSms(c)
}

// SignInPAT operation middleware
func (siw *ServerInterfaceWrapper) SignInPAT(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPAT(c)
}

// SignInProvider operation middleware
func (siw *ServerInterfaceWrapper) SignInProvider(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderParams

	// ------------- Optional query parameter "allowedRoles" -------------

	err = runtime.BindQueryParameter("form", false, false, "allowedRoles", c.Request.URL.Query(), &params.AllowedRoles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter allowedRoles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "defaultRole" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultRole", c.Request.URL.Query(), &params.DefaultRole)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter defaultRole: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", c.Request.URL.Query(), &params.Locale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter locale: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "metadata" -------------

	if paramValue := c.Query("metadata"); paramValue != "" {

		var value map[string]interface{}
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'metadata' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Metadata = &value

	}

	// ------------- Optional query parameter "redirectTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connect" -------------

	err = runtime.BindQueryParameter("form", true, false, "connect", c.Request.URL.Query(), &params.Connect)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connect: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProvider(c, provider, params)
}

// SignInProviderCallbackGet operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackGetParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderCallbackGetParams

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_token", c.Request.URL.Query(), &params.IdToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_token", c.Request.URL.Query(), &params.OauthToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_verifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_verifier", c.Request.URL.Query(), &params.OauthVerifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_verifier: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", c.Request.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", c.Request.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_uri", c.Request.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_uri: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackGet(c, provider, params)
}

// SignInProviderCallbackPost operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackPost(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackPostParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackPost(c, provider)
}

// SignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInWebauthn(c)
}

// VerifySignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInWebauthn(c)
}

// SignOut operation middleware
func (siw *ServerInterfaceWrapper) SignOut(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOut(c)
}

// SignUpEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignUpEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpEmailPassword(c)
}

// SignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpWebauthn(c)
}

// VerifySignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignUpWebauthn(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// VerifyToken operation middleware
func (siw *ServerInterfaceWrapper) VerifyToken(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyToken(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// DeanonymizeUser operation middleware
func (siw *ServerInterfaceWrapper) DeanonymizeUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeanonymizeUser(c)
}

// ChangeUserEmail operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserEmail(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserEmail(c)
}

// SendVerificationEmail operation middleware
func (siw *ServerInterfaceWrapper) SendVerificationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendVerificationEmail(c)
}

// VerifyChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) VerifyChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyChangeUserMfa(c)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserPassword(c)
}

// SendPasswordResetEmail operation middleware
func (siw *ServerInterfaceWrapper) SendPasswordResetEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendPasswordResetEmail(c)
}

// AddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) AddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddSecurityKey(c)
}

// VerifyAddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) VerifyAddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyAddSecurityKey(c)
}

// VerifyTicket operation middleware
func (siw *ServerInterfaceWrapper) VerifyTicket(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyTicketParams

	// ------------- Required query parameter "ticket" -------------

	if paramValue := c.Query("ticket"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticket is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticket", c.Request.URL.Query(), &params.Ticket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirectTo" -------------

	if paramValue := c.Query("redirectTo"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectTo is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyTicket(c, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKs)
	router.POST(options.BaseURL+"/elevate/webauthn", wrapper.ElevateWebauthn)
	router.POST(options.BaseURL+"/elevate/webauthn/verify", wrapper.VerifyElevateWebauthn)
	router.GET(options.BaseURL+"/healthz", wrapper.HealthCheckGet)
	router.HEAD(options.BaseURL+"/healthz", wrapper.HealthCheckHead)
	router.POST(options.BaseURL+"/link/idtoken", wrapper.LinkIdToken)
	router.GET(options.BaseURL+"/mfa/totp/generate", wrapper.ChangeUserMfa)
	router.POST(options.BaseURL+"/pat", wrapper.CreatePAT)
	router.POST(options.BaseURL+"/signin/anonymous", wrapper.SignInAnonymous)
	router.POST(options.BaseURL+"/signin/email-password", wrapper.SignInEmailPassword)
	router.POST(options.BaseURL+"/signin/idtoken", wrapper.SignInIdToken)
	router.POST(options.BaseURL+"/signin/mfa/totp", wrapper.VerifySignInMfaTotp)
	router.POST(options.BaseURL+"/signin/otp/email", wrapper.SignInOTPEmail)
	router.POST(options.BaseURL+"/signin/otp/email/verify", wrapper.VerifySignInOTPEmail)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.SignInPasswordlessEmail)
	router.POST(options.BaseURL+"/signin/passwordless/sms", wrapper.SignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/passwordless/sms/otp", wrapper.VerifySignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/pat", wrapper.SignInPAT)
	router.GET(options.BaseURL+"/signin/provider/:provider", wrapper.SignInProvider)
	router.GET(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackGet)
	router.POST(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackPost)
	router.POST(options.BaseURL+"/signin/webauthn", wrapper.SignInWebauthn)
	router.POST(options.BaseURL+"/signin/webauthn/verify", wrapper.VerifySignInWebauthn)
	router.POST(options.BaseURL+"/signout", wrapper.SignOut)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.SignUpEmailPassword)
	router.POST(options.BaseURL+"/signup/webauthn", wrapper.SignUpWebauthn)
	router.POST(options.BaseURL+"/signup/webauthn/verify", wrapper.VerifySignUpWebauthn)
	router.POST(options.BaseURL+"/token", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/token/verify", wrapper.VerifyToken)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user/deanonymize", wrapper.DeanonymizeUser)
	router.POST(options.BaseURL+"/user/email/change", wrapper.ChangeUserEmail)
	router.POST(options.BaseURL+"/user/email/send-verification-email", wrapper.SendVerificationEmail)
	router.POST(options.BaseURL+"/user/mfa", wrapper.VerifyChangeUserMfa)
	router.POST(options.BaseURL+"/user/password", wrapper.ChangeUserPassword)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.SendPasswordResetEmail)
	router.POST(options.BaseURL+"/user/webauthn/add", wrapper.AddSecurityKey)
	router.POST(options.BaseURL+"/user/webauthn/verify", wrapper.VerifyAddSecurityKey)
	router.GET(options.BaseURL+"/verify", wrapper.VerifyTicket)
	router.GET(options.BaseURL+"/version", wrapper.GetVersion)
}

type GetJWKsRequestObject struct {
}

type GetJWKsResponseObject interface {
	VisitGetJWKsResponse(w http.ResponseWriter) error
}

type GetJWKs200JSONResponse JWKSet

func (response GetJWKs200JSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJWKsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetJWKsdefaultJSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ElevateWebauthnRequestObject struct {
}

type ElevateWebauthnResponseObject interface {
	VisitElevateWebauthnResponse(w http.ResponseWriter) error
}

type ElevateWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response ElevateWebauthn200JSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ElevateWebauthndefaultJSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyElevateWebauthnRequestObject struct {
	Body *VerifyElevateWebauthnJSONRequestBody
}

type VerifyElevateWebauthnResponseObject interface {
	VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error
}

type VerifyElevateWebauthn200JSONResponse SessionPayload

func (response VerifyElevateWebauthn200JSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyElevateWebauthndefaultJSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckGetRequestObject struct {
}

type HealthCheckGetResponseObject interface {
	VisitHealthCheckGetResponse(w http.ResponseWriter) error
}

type HealthCheckGet200JSONResponse OKResponse

func (response HealthCheckGet200JSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckGetdefaultJSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckHeadRequestObject struct {
}

type HealthCheckHeadResponseObject interface {
	VisitHealthCheckHeadResponse(w http.ResponseWriter) error
}

type HealthCheckHead200Response struct {
}

func (response HealthCheckHead200Response) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthCheckHeaddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckHeaddefaultJSONResponse) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkIdTokenRequestObject struct {
	Body *LinkIdTokenJSONRequestBody
}

type LinkIdTokenResponseObject interface {
	VisitLinkIdTokenResponse(w http.ResponseWriter) error
}

type LinkIdToken200JSONResponse OKResponse

func (response LinkIdToken200JSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response LinkIdTokendefaultJSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserMfaRequestObject struct {
}

type ChangeUserMfaResponseObject interface {
	VisitChangeUserMfaResponse(w http.ResponseWriter) error
}

type ChangeUserMfa200JSONResponse TotpGenerateResponse

func (response ChangeUserMfa200JSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserMfadefaultJSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePATRequestObject struct {
	Body *CreatePATJSONRequestBody
}

type CreatePATResponseObject interface {
	VisitCreatePATResponse(w http.ResponseWriter) error
}

type CreatePAT200JSONResponse CreatePATResponse

func (response CreatePAT200JSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response CreatePATdefaultJSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInAnonymousRequestObject struct {
	Body *SignInAnonymousJSONRequestBody
}

type SignInAnonymousResponseObject interface {
	VisitSignInAnonymousResponse(w http.ResponseWriter) error
}

type SignInAnonymous200JSONResponse SessionPayload

func (response SignInAnonymous200JSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInAnonymousdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInAnonymousdefaultJSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInEmailPasswordRequestObject struct {
	Body *SignInEmailPasswordJSONRequestBody
}

type SignInEmailPasswordResponseObject interface {
	VisitSignInEmailPasswordResponse(w http.ResponseWriter) error
}

type SignInEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response SignInEmailPassword200JSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInEmailPassworddefaultJSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInIdTokenRequestObject struct {
	Body *SignInIdTokenJSONRequestBody
}

type SignInIdTokenResponseObject interface {
	VisitSignInIdTokenResponse(w http.ResponseWriter) error
}

type SignInIdToken200JSONResponse SessionPayload

func (response SignInIdToken200JSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInIdTokendefaultJSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInMfaTotpRequestObject struct {
	Body *VerifySignInMfaTotpJSONRequestBody
}

type VerifySignInMfaTotpResponseObject interface {
	VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error
}

type VerifySignInMfaTotp200JSONResponse SessionPayload

func (response VerifySignInMfaTotp200JSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInMfaTotpdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInMfaTotpdefaultJSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInOTPEmailRequestObject struct {
	Body *SignInOTPEmailJSONRequestBody
}

type SignInOTPEmailResponseObject interface {
	VisitSignInOTPEmailResponse(w http.ResponseWriter) error
}

type SignInOTPEmail200JSONResponse OKResponse

func (response SignInOTPEmail200JSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInOTPEmaildefaultJSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInOTPEmailRequestObject struct {
	Body *VerifySignInOTPEmailJSONRequestBody
}

type VerifySignInOTPEmailResponseObject interface {
	VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error
}

type VerifySignInOTPEmail200JSONResponse SignInOTPEmailVerifyResponse

func (response VerifySignInOTPEmail200JSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInOTPEmaildefaultJSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessEmailRequestObject struct {
	Body *SignInPasswordlessEmailJSONRequestBody
}

type SignInPasswordlessEmailResponseObject interface {
	VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error
}

type SignInPasswordlessEmail200JSONResponse OKResponse

func (response SignInPasswordlessEmail200JSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessEmaildefaultJSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessSmsRequestObject struct {
	Body *SignInPasswordlessSmsJSONRequestBody
}

type SignInPasswordlessSmsResponseObject interface {
	VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type SignInPasswordlessSms200JSONResponse OKResponse

func (response SignInPasswordlessSms200JSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessSmsdefaultJSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInPasswordlessSmsRequestObject struct {
	Body *VerifySignInPasswordlessSmsJSONRequestBody
}

type VerifySignInPasswordlessSmsResponseObject interface {
	VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type VerifySignInPasswordlessSms200JSONResponse SignInPasswordlessSmsOtpResponse

func (response VerifySignInPasswordlessSms200JSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInPasswordlessSmsdefaultJSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPATRequestObject struct {
	Body *SignInPATJSONRequestBody
}

type SignInPATResponseObject interface {
	VisitSignInPATResponse(w http.ResponseWriter) error
}

type SignInPAT200JSONResponse SessionPayload

func (response SignInPAT200JSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPATdefaultJSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderRequestObject struct {
	Provider SignInProviderParamsProvider `json:"provider"`
	Params   SignInProviderParams
}

type SignInProviderResponseObject interface {
	VisitSignInProviderResponse(w http.ResponseWriter) error
}

type SignInProvider302ResponseHeaders struct {
	Location string
}

type SignInProvider302Response struct {
	Headers SignInProvider302ResponseHeaders
}

func (response SignInProvider302Response) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderdefaultJSONResponse) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackGetRequestObject struct {
	Provider SignInProviderCallbackGetParamsProvider `json:"provider"`
	Params   SignInProviderCallbackGetParams
}

type SignInProviderCallbackGetResponseObject interface {
	VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackGet302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackGet302Response struct {
	Headers SignInProviderCallbackGet302ResponseHeaders
}

func (response SignInProviderCallbackGet302Response) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackGetdefaultJSONResponse) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackPostRequestObject struct {
	Provider SignInProviderCallbackPostParamsProvider `json:"provider"`
	Body     *SignInProviderCallbackPostFormdataRequestBody
}

type SignInProviderCallbackPostResponseObject interface {
	VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackPost302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackPost302Response struct {
	Headers SignInProviderCallbackPost302ResponseHeaders
}

func (response SignInProviderCallbackPost302Response) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackPostdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackPostdefaultJSONResponse) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInWebauthnRequestObject struct {
	Body *SignInWebauthnJSONRequestBody
}

type SignInWebauthnResponseObject interface {
	VisitSignInWebauthnResponse(w http.ResponseWriter) error
}

type SignInWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response SignInWebauthn200JSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInWebauthndefaultJSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInWebauthnRequestObject struct {
	Body *VerifySignInWebauthnJSONRequestBody
}

type VerifySignInWebauthnResponseObject interface {
	VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignInWebauthn200JSONResponse SessionPayload

func (response VerifySignInWebauthn200JSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInWebauthndefaultJSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignOutRequestObject struct {
	Body *SignOutJSONRequestBody
}

type SignOutResponseObject interface {
	VisitSignOutResponse(w http.ResponseWriter) error
}

type SignOut200JSONResponse OKResponse

func (response SignOut200JSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignOutdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignOutdefaultJSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpEmailPasswordRequestObject struct {
	Body *SignUpEmailPasswordJSONRequestBody
}

type SignUpEmailPasswordResponseObject interface {
	VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error
}

type SignUpEmailPassword200JSONResponse SessionPayload

func (response SignUpEmailPassword200JSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpEmailPassworddefaultJSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpWebauthnRequestObject struct {
	Body *SignUpWebauthnJSONRequestBody
}

type SignUpWebauthnResponseObject interface {
	VisitSignUpWebauthnResponse(w http.ResponseWriter) error
}

type SignUpWebauthn200JSONResponse PublicKeyCredentialCreationOptions

func (response SignUpWebauthn200JSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpWebauthndefaultJSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignUpWebauthnRequestObject struct {
	Body *VerifySignUpWebauthnJSONRequestBody
}

type VerifySignUpWebauthnResponseObject interface {
	VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignUpWebauthn200JSONResponse SessionPayload

func (response VerifySignUpWebauthn200JSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignUpWebauthndefaultJSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse Session

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response RefreshTokendefaultJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTokenRequestObject struct {
	Body *VerifyTokenJSONRequestBody
}

type VerifyTokenResponseObject interface {
	VisitVerifyTokenResponse(w http.ResponseWriter) error
}

type VerifyToken200JSONResponse string

func (response VerifyToken200JSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTokendefaultJSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUserdefaultJSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeanonymizeUserRequestObject struct {
	Body *DeanonymizeUserJSONRequestBody
}

type DeanonymizeUserResponseObject interface {
	VisitDeanonymizeUserResponse(w http.ResponseWriter) error
}

type DeanonymizeUser200JSONResponse OKResponse

func (response DeanonymizeUser200JSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeanonymizeUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeanonymizeUserdefaultJSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserEmailRequestObject struct {
	Body *ChangeUserEmailJSONRequestBody
}

type ChangeUserEmailResponseObject interface {
	VisitChangeUserEmailResponse(w http.ResponseWriter) error
}

type ChangeUserEmail200JSONResponse OKResponse

func (response ChangeUserEmail200JSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserEmaildefaultJSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendVerificationEmailRequestObject struct {
	Body *SendVerificationEmailJSONRequestBody
}

type SendVerificationEmailResponseObject interface {
	VisitSendVerificationEmailResponse(w http.ResponseWriter) error
}

type SendVerificationEmail200JSONResponse OKResponse

func (response SendVerificationEmail200JSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendVerificationEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendVerificationEmaildefaultJSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyChangeUserMfaRequestObject struct {
	Body *VerifyChangeUserMfaJSONRequestBody
}

type VerifyChangeUserMfaResponseObject interface {
	VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error
}

type VerifyChangeUserMfa200JSONResponse OKResponse

func (response VerifyChangeUserMfa200JSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyChangeUserMfadefaultJSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserPasswordRequestObject struct {
	Body *ChangeUserPasswordJSONRequestBody
}

type ChangeUserPasswordResponseObject interface {
	VisitChangeUserPasswordResponse(w http.ResponseWriter) error
}

type ChangeUserPassword200JSONResponse OKResponse

func (response ChangeUserPassword200JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserPassworddefaultJSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendPasswordResetEmailRequestObject struct {
	Body *SendPasswordResetEmailJSONRequestBody
}

type SendPasswordResetEmailResponseObject interface {
	VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error
}

type SendPasswordResetEmail200JSONResponse OKResponse

func (response SendPasswordResetEmail200JSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendPasswordResetEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendPasswordResetEmaildefaultJSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddSecurityKeyRequestObject struct {
}

type AddSecurityKeyResponseObject interface {
	VisitAddSecurityKeyResponse(w http.ResponseWriter) error
}

type AddSecurityKey200JSONResponse PublicKeyCredentialCreationOptions

func (response AddSecurityKey200JSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response AddSecurityKeydefaultJSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyAddSecurityKeyRequestObject struct {
	Body *VerifyAddSecurityKeyJSONRequestBody
}

type VerifyAddSecurityKeyResponseObject interface {
	VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error
}

type VerifyAddSecurityKey200JSONResponse VerifyAddSecurityKeyResponse

func (response VerifyAddSecurityKey200JSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyAddSecurityKeydefaultJSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTicketRequestObject struct {
	Params VerifyTicketParams
}

type VerifyTicketResponseObject interface {
	VisitVerifyTicketResponse(w http.ResponseWriter) error
}

type VerifyTicket302ResponseHeaders struct {
	Location string
}

type VerifyTicket302Response struct {
	Headers VerifyTicket302ResponseHeaders
}

func (response VerifyTicket302Response) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type VerifyTicketdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTicketdefaultJSONResponse) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	// Version The version of the authentication service
	Version string `json:"version"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVersiondefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetVersiondefaultJSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(ctx context.Context, request GetJWKsRequestObject) (GetJWKsResponseObject, error)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(ctx context.Context, request ElevateWebauthnRequestObject) (ElevateWebauthnResponseObject, error)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(ctx context.Context, request VerifyElevateWebauthnRequestObject) (VerifyElevateWebauthnResponseObject, error)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(ctx context.Context, request HealthCheckGetRequestObject) (HealthCheckGetResponseObject, error)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(ctx context.Context, request HealthCheckHeadRequestObject) (HealthCheckHeadResponseObject, error)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(ctx context.Context, request LinkIdTokenRequestObject) (LinkIdTokenResponseObject, error)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(ctx context.Context, request ChangeUserMfaRequestObject) (ChangeUserMfaResponseObject, error)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(ctx context.Context, request CreatePATRequestObject) (CreatePATResponseObject, error)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(ctx context.Context, request SignInAnonymousRequestObject) (SignInAnonymousResponseObject, error)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(ctx context.Context, request SignInEmailPasswordRequestObject) (SignInEmailPasswordResponseObject, error)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(ctx context.Context, request SignInIdTokenRequestObject) (SignInIdTokenResponseObject, error)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(ctx context.Context, request VerifySignInMfaTotpRequestObject) (VerifySignInMfaTotpResponseObject, error)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(ctx context.Context, request SignInOTPEmailRequestObject) (SignInOTPEmailResponseObject, error)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(ctx context.Context, request VerifySignInOTPEmailRequestObject) (VerifySignInOTPEmailResponseObject, error)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(ctx context.Context, request SignInPasswordlessEmailRequestObject) (SignInPasswordlessEmailResponseObject, error)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(ctx context.Context, request SignInPasswordlessSmsRequestObject) (SignInPasswordlessSmsResponseObject, error)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(ctx context.Context, request VerifySignInPasswordlessSmsRequestObject) (VerifySignInPasswordlessSmsResponseObject, error)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(ctx context.Context, request SignInPATRequestObject) (SignInPATResponseObject, error)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(ctx context.Context, request SignInProviderRequestObject) (SignInProviderResponseObject, error)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(ctx context.Context, request SignInProviderCallbackGetRequestObject) (SignInProviderCallbackGetResponseObject, error)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(ctx context.Context, request SignInProviderCallbackPostRequestObject) (SignInProviderCallbackPostResponseObject, error)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(ctx context.Context, request SignInWebauthnRequestObject) (SignInWebauthnResponseObject, error)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(ctx context.Context, request VerifySignInWebauthnRequestObject) (VerifySignInWebauthnResponseObject, error)
	// Sign out
	// (POST /signout)
	SignOut(ctx context.Context, request SignOutRequestObject) (SignOutResponseObject, error)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(ctx context.Context, request SignUpEmailPasswordRequestObject) (SignUpEmailPasswordResponseObject, error)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(ctx context.Context, request SignUpWebauthnRequestObject) (SignUpWebauthnResponseObject, error)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(ctx context.Context, request VerifySignUpWebauthnRequestObject) (VerifySignUpWebauthnResponseObject, error)
	// Refresh access token
	// (POST /token)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(ctx context.Context, request VerifyTokenRequestObject) (VerifyTokenResponseObject, error)
	// Get user information
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(ctx context.Context, request DeanonymizeUserRequestObject) (DeanonymizeUserResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(ctx context.Context, request ChangeUserEmailRequestObject) (ChangeUserEmailResponseObject, error)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(ctx context.Context, request SendVerificationEmailRequestObject) (SendVerificationEmailResponseObject, error)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(ctx context.Context, request VerifyChangeUserMfaRequestObject) (VerifyChangeUserMfaResponseObject, error)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(ctx context.Context, request ChangeUserPasswordRequestObject) (ChangeUserPasswordResponseObject, error)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(ctx context.Context, request SendPasswordResetEmailRequestObject) (SendPasswordResetEmailResponseObject, error)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(ctx context.Context, request AddSecurityKeyRequestObject) (AddSecurityKeyResponseObject, error)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(ctx context.Context, request VerifyAddSecurityKeyRequestObject) (VerifyAddSecurityKeyResponseObject, error)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(ctx context.Context, request VerifyTicketRequestObject) (VerifyTicketResponseObject, error)
	// Get service version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetJWKs operation middleware
func (sh *strictHandler) GetJWKs(ctx *gin.Context) {
	var request GetJWKsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJWKs(ctx, request.(GetJWKsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJWKs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJWKsResponseObject); ok {
		if err := validResponse.VisitGetJWKsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ElevateWebauthn operation middleware
func (sh *strictHandler) ElevateWebauthn(ctx *gin.Context) {
	var request ElevateWebauthnRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ElevateWebauthn(ctx, request.(ElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyElevateWebauthn operation middleware
func (sh *strictHandler) VerifyElevateWebauthn(ctx *gin.Context) {
	var request VerifyElevateWebauthnRequestObject

	var body VerifyElevateWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyElevateWebauthn(ctx, request.(VerifyElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifyElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckGet operation middleware
func (sh *strictHandler) HealthCheckGet(ctx *gin.Context) {
	var request HealthCheckGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckGet(ctx, request.(HealthCheckGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckGetResponseObject); ok {
		if err := validResponse.VisitHealthCheckGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckHead operation middleware
func (sh *strictHandler) HealthCheckHead(ctx *gin.Context) {
	var request HealthCheckHeadRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckHead(ctx, request.(HealthCheckHeadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckHead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckHeadResponseObject); ok {
		if err := validResponse.VisitHealthCheckHeadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LinkIdToken operation middleware
func (sh *strictHandler) LinkIdToken(ctx *gin.Context) {
	var request LinkIdTokenRequestObject

	var body LinkIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkIdToken(ctx, request.(LinkIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LinkIdTokenResponseObject); ok {
		if err := validResponse.VisitLinkIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserMfa operation middleware
func (sh *strictHandler) ChangeUserMfa(ctx *gin.Context) {
	var request ChangeUserMfaRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserMfa(ctx, request.(ChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePAT operation middleware
func (sh *strictHandler) CreatePAT(ctx *gin.Context) {
	var request CreatePATRequestObject

	var body CreatePATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePAT(ctx, request.(CreatePATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePATResponseObject); ok {
		if err := validResponse.VisitCreatePATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInAnonymous operation middleware
func (sh *strictHandler) SignInAnonymous(ctx *gin.Context) {
	var request SignInAnonymousRequestObject

	var body SignInAnonymousJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInAnonymous(ctx, request.(SignInAnonymousRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInAnonymous")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInAnonymousResponseObject); ok {
		if err := validResponse.VisitSignInAnonymousResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInEmailPassword operation middleware
func (sh *strictHandler) SignInEmailPassword(ctx *gin.Context) {
	var request SignInEmailPasswordRequestObject

	var body SignInEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInEmailPassword(ctx, request.(SignInEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignInEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInIdToken operation middleware
func (sh *strictHandler) SignInIdToken(ctx *gin.Context) {
	var request SignInIdTokenRequestObject

	var body SignInIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInIdToken(ctx, request.(SignInIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInIdTokenResponseObject); ok {
		if err := validResponse.VisitSignInIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInMfaTotp operation middleware
func (sh *strictHandler) VerifySignInMfaTotp(ctx *gin.Context) {
	var request VerifySignInMfaTotpRequestObject

	var body VerifySignInMfaTotpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInMfaTotp(ctx, request.(VerifySignInMfaTotpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInMfaTotp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInMfaTotpResponseObject); ok {
		if err := validResponse.VisitVerifySignInMfaTotpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInOTPEmail operation middleware
func (sh *strictHandler) SignInOTPEmail(ctx *gin.Context) {
	var request SignInOTPEmailRequestObject

	var body SignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInOTPEmail(ctx, request.(SignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitSignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInOTPEmail operation middleware
func (sh *strictHandler) VerifySignInOTPEmail(ctx *gin.Context) {
	var request VerifySignInOTPEmailRequestObject

	var body VerifySignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInOTPEmail(ctx, request.(VerifySignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitVerifySignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessEmail operation middleware
func (sh *strictHandler) SignInPasswordlessEmail(ctx *gin.Context) {
	var request SignInPasswordlessEmailRequestObject

	var body SignInPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessEmail(ctx, request.(SignInPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessSms operation middleware
func (sh *strictHandler) SignInPasswordlessSms(ctx *gin.Context) {
	var request SignInPasswordlessSmsRequestObject

	var body SignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessSms(ctx, request.(SignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInPasswordlessSms operation middleware
func (sh *strictHandler) VerifySignInPasswordlessSms(ctx *gin.Context) {
	var request VerifySignInPasswordlessSmsRequestObject

	var body VerifySignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInPasswordlessSms(ctx, request.(VerifySignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitVerifySignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPAT operation middleware
func (sh *strictHandler) SignInPAT(ctx *gin.Context) {
	var request SignInPATRequestObject

	var body SignInPATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPAT(ctx, request.(SignInPATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPATResponseObject); ok {
		if err := validResponse.VisitSignInPATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProvider operation middleware
func (sh *strictHandler) SignInProvider(ctx *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams) {
	var request SignInProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProvider(ctx, request.(SignInProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProvider")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderResponseObject); ok {
		if err := validResponse.VisitSignInProviderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackGet operation middleware
func (sh *strictHandler) SignInProviderCallbackGet(ctx *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams) {
	var request SignInProviderCallbackGetRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackGet(ctx, request.(SignInProviderCallbackGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackGetResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackPost operation middleware
func (sh *strictHandler) SignInProviderCallbackPost(ctx *gin.Context, provider SignInProviderCallbackPostParamsProvider) {
	var request SignInProviderCallbackPostRequestObject

	request.Provider = provider

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body SignInProviderCallbackPostFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackPost(ctx, request.(SignInProviderCallbackPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackPostResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInWebauthn operation middleware
func (sh *strictHandler) SignInWebauthn(ctx *gin.Context) {
	var request SignInWebauthnRequestObject

	var body SignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInWebauthn(ctx, request.(SignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInWebauthnResponseObject); ok {
		if err := validResponse.VisitSignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInWebauthn operation middleware
func (sh *strictHandler) VerifySignInWebauthn(ctx *gin.Context) {
	var request VerifySignInWebauthnRequestObject

	var body VerifySignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInWebauthn(ctx, request.(VerifySignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignOut operation middleware
func (sh *strictHandler) SignOut(ctx *gin.Context) {
	var request SignOutRequestObject

	var body SignOutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignOut(ctx, request.(SignOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignOutResponseObject); ok {
		if err := validResponse.VisitSignOutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpEmailPassword operation middleware
func (sh *strictHandler) SignUpEmailPassword(ctx *gin.Context) {
	var request SignUpEmailPasswordRequestObject

	var body SignUpEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpEmailPassword(ctx, request.(SignUpEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignUpEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpWebauthn operation middleware
func (sh *strictHandler) SignUpWebauthn(ctx *gin.Context) {
	var request SignUpWebauthnRequestObject

	var body SignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpWebauthn(ctx, request.(SignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitSignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignUpWebauthn operation middleware
func (sh *strictHandler) VerifySignUpWebauthn(ctx *gin.Context) {
	var request VerifySignUpWebauthnRequestObject

	var body VerifySignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignUpWebauthn(ctx, request.(VerifySignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyToken operation middleware
func (sh *strictHandler) VerifyToken(ctx *gin.Context) {
	var request VerifyTokenRequestObject

	var body VerifyTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyToken(ctx, request.(VerifyTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTokenResponseObject); ok {
		if err := validResponse.VisitVerifyTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context) {
	var request GetUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeanonymizeUser operation middleware
func (sh *strictHandler) DeanonymizeUser(ctx *gin.Context) {
	var request DeanonymizeUserRequestObject

	var body DeanonymizeUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeanonymizeUser(ctx, request.(DeanonymizeUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeanonymizeUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeanonymizeUserResponseObject); ok {
		if err := validResponse.VisitDeanonymizeUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserEmail operation middleware
func (sh *strictHandler) ChangeUserEmail(ctx *gin.Context) {
	var request ChangeUserEmailRequestObject

	var body ChangeUserEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserEmail(ctx, request.(ChangeUserEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserEmailResponseObject); ok {
		if err := validResponse.VisitChangeUserEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendVerificationEmail operation middleware
func (sh *strictHandler) SendVerificationEmail(ctx *gin.Context) {
	var request SendVerificationEmailRequestObject

	var body SendVerificationEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendVerificationEmail(ctx, request.(SendVerificationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendVerificationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendVerificationEmailResponseObject); ok {
		if err := validResponse.VisitSendVerificationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyChangeUserMfa operation middleware
func (sh *strictHandler) VerifyChangeUserMfa(ctx *gin.Context) {
	var request VerifyChangeUserMfaRequestObject

	var body VerifyChangeUserMfaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyChangeUserMfa(ctx, request.(VerifyChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitVerifyChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserPassword operation middleware
func (sh *strictHandler) ChangeUserPassword(ctx *gin.Context) {
	var request ChangeUserPasswordRequestObject

	var body ChangeUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserPassword(ctx, request.(ChangeUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserPasswordResponseObject); ok {
		if err := validResponse.VisitChangeUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendPasswordResetEmail operation middleware
func (sh *strictHandler) SendPasswordResetEmail(ctx *gin.Context) {
	var request SendPasswordResetEmailRequestObject

	var body SendPasswordResetEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendPasswordResetEmail(ctx, request.(SendPasswordResetEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendPasswordResetEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendPasswordResetEmailResponseObject); ok {
		if err := validResponse.VisitSendPasswordResetEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddSecurityKey operation middleware
func (sh *strictHandler) AddSecurityKey(ctx *gin.Context) {
	var request AddSecurityKeyRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddSecurityKey(ctx, request.(AddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAddSecurityKey operation middleware
func (sh *strictHandler) VerifyAddSecurityKey(ctx *gin.Context) {
	var request VerifyAddSecurityKeyRequestObject

	var body VerifyAddSecurityKeyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAddSecurityKey(ctx, request.(VerifyAddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyAddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitVerifyAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyTicket operation middleware
func (sh *strictHandler) VerifyTicket(ctx *gin.Context, params VerifyTicketParams) {
	var request VerifyTicketRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyTicket(ctx, request.(VerifyTicketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyTicket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTicketResponseObject); ok {
		if err := validResponse.VisitVerifyTicketResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *gin.Context) {
	var request GetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x96XbbOLrgq+Do3jmVzCXlJU66yvNnVFmdzW7bqdwzqUwfiIQklEmADYB2VBm/+xxs",
	"JECCFCUvsV3VP7pikcTy4ds3fB8lNC8oQUTw0f730QLBFDH1z2OUYoYS8Z4mUGBK5G8p4gnDhf5z9On4",
	"PRAUMPMiEHQUjRj6d4kZSkf7gpUoGvFkgXIoP55RlkMx2h+VDI+ikVgWaLQ/4oJhMh9dXl5GowIymCPR",
	"WMAp/WeJ2LI9/ylkcySAXMaMMiAWqFrLKBph+cq/1ZfRiMBcTsaqIXtXus406BvMi0wOvhCi4PtbW/ky",
	"hkUxTmi+lUCRLGL7thwuWgWGaHSC5+SAHDF6jlPE9HoKhhIo6rU2VrhAQO4Q0JlaHqcJhhko7BAGGAUU",
	"ixoWztNuSCBS5qP9LyNYyD1GozkWi3Iq/0HpXP2SYXKGUix3lmKeUJaOohEvqMAzCXhxgUWy0F9mUH45",
	"xWJaJmdIAu+CsjPKR9EI/lkyBOWniAgGsRpEMHgOJcRggqaUnskPMEnpBc/wOTKDC8RGX0NgPMVyki7U",
	"wWYFISwR9uFgDLEf1MhwjhieLV/mEGf738z/Rt3LPF0WyFnqiuNeFtVR67WOwYvqmwgQCjJK5oiBkqO0",
	"a5NyJT1bas2hzkZjA5Lb+k3tUP4q/3pOyQyz/PkCkrkaF88JJkeQ8wvK0gxxecqF+fMYcSTkqdXw8ocM",
	"8Aa9UMUYJkIgLhRTemWI6XuAImD9GpD/RTkiAhjyqzdTwORMQUkUucREkjKK0/gMLZ2/OJwhsSQKCjOc",
	"0rjcncnHhiwIJSiAhdFoUooFIgJrFvrym0CEY0rUNmCaYvkrzI4YLRATGPHwgU+qN0HNIoHETsQFJnMA",
	"nRcYTRDn8tfpUh1fkmG5cUhSAOvlUFbDmU7/kMysZ73P1RiHpShKsebiP8BCIhKyYwGqRwEzRnNngRI/",
	"nKG+S+DitH20k6LIzPoATuViZxix1vj17qaUZggSub2EoVSuV43/nwzNRvuj/9iqReCWwbKt5wypod3t",
	"6d3LYRY5TJ4zBAU6QQlDAfx782HyHHD1cMjKLvuPgrIJ53IRlBwjXlDCUfcZzGDGUQuW7mAvoAhQ/K+Q",
	"o2d7JcsAIglNUQNbQCq/CqC4Pj055tuTw49DxjUIKQcE6pvAqJJ/QFEyNGihFjqg/iwwZskRewNJmg0a",
	"VL4NFvr1aETKLINT+aXG8TYjr4XFlyZMogD83S1+XXn8QsBkIflXB6vzTgpWb4OcpjDDYunyuwwKyQRH",
	"khwo53H1wwoGppZhOeqmeFiPcKi3uoIQPx2/f6kPRJ+QXFMQmdcdpI22645QlNMMJ+/Q8kofT7I5ZVgs",
	"8vDJ6vfAGVoCaN902J6rT2Iinu3VeI+JQHPE5GSCQcILyjTrXoU+ztvRCAuUq69amGF+gIzB5QACaB38",
	"SqQ/QZlRmq/A63zK6TulLoKrd3aMuIK8OXIfjp8XSCyQNg98eOYlFyBR4gJAw/xiOVLMzIDuKSeV5AGc",
	"lixBQUHG/KX07ctZ9bHeh92W5HBK5cK1hdeLx433veFWirBTi1br4SAQCyhAAgmYIqvPWlZWcmlQkFki",
	"zQrFpnkOmYgTqKyQxXLKsNZ/BWIEZkEO95ySc7SEJEFHDM0QQyQx8mEGy0wSltLuohUaZlINA4p6nHqt",
	"ZhBMKsuxNiHl8gqGeViH1JrG0eT0WCt8a5ID+lZghvgkAPeX8pFefiqx0+j7R5NTl6/IR7HAeVCm5kjA",
	"1LDgPp2w0vS/WwMkX8aFUsTlocbTpf4JFkWcZHjURqcGh6m3FWIkDsw2klMhxfPghQ+g2njZTZ48nT6b",
	"PYmTvekv8d7P6En8yz9+hnG6l27PdtK9XbS7p8wfaa3KoX7/ffplO/4FxrOv33++/P33aVz9uXfZ+W/3",
	"q51d+VnoRArEuNzjJJF2wCk9QwHXzR3eQeOcFQGH9tRx7IZ5XqvCvKn61a0uV5bVMeJlJvgawqnHLruM",
	"gogrl1iLlZ+4rz+0VsjgxUG6iU7DHFAPl7Stg6pIv38fQL4EGCoY4pKDptrexRwYfBiEWcYNovfsbKGF",
	"XdHoWzynsfmxYFTQhGbjPoxzPolxbkVf7X5TI2iqWoz2jW9N+Q3nNL5AU4lWZKv6R/XFpYfpitX9jeh3",
	"H9EDxtM9RfUWyt0Oph9Z39e6KJ7NuyC8LASdM1gscNJlXwXMKXNkwxxIp/Lt5oGYs5Ar65djLffTqq37",
	"u6wHAjVMQh4pH2LsLKD+kFQiMuIAay3IwU/MAQSVNaNdp0N8XA0oBQ/pHGY4bRIDdx0aynhSDtuQ+vyS",
	"McoGM0d//hMBSQpZiv9EKUByIMBqnG/o2fJxQMdWX0kGYtFqiclch2kKlEhjCkDHpamHqXdnzJCY0QzF",
	"0pSMpyjGJIZZRi9Qqn7nOvgCpxlKY0TSgmIi3N+kpWc99THMGILpUg5Sqn34P6vIBVZ21oyyKU5TRGJI",
	"KFnmtOSONRVzxM4Ri+2KMVFHFevhrK/feWAc1qNolNEEZigmVNh9ONGBWFAa84VkIs6PmMQLPC1iaWxM",
	"oVp3Hc1rjKRg5f/E8ZyURWwhIs0OYndqwSP/oz/zdqsXr22VeiszhvgiFkoVrX+vQiUV6PMZjAUVhYoS",
	"qH/F2i/sfqWfq1clC5VrmNGSKK4tv7BnAxOhI1/2SxXXGEUjKhmnXk2MEhWEiWcQ653qhwWjM5yheIZE",
	"sgg8VMHA1mHqlSWQyDVxRNKY5zxIZzniHM4DRPymzCGJZwwjkmZLQ0b2bdcIOdBzAoVAdaCm7RsWUJQB",
	"V9ab09MjoB+aWSTZuVPsbW+3GXqDNZvR6w1FhrRDjPogVcaIG6ztZS+teKoOo4bg+fbzuzW51duTw4/g",
	"M5qCd2ipQtVvP5+Cc9fBM0gyVh5J5W4BF1gstLKh+Xp9Xscnu0+fhQ4ogATHJxPr5ULftLD0xpr8c/Jr",
	"aKizkJ4n93fwwvv+DC1jnMY7wTHEMjyGkcLujiahAUh4PzlNy0yhSj0CnCbpzu6TvfF43BGCCC+lbFED",
	"x/OVep08PwluDSe9U7lcPVEIYd9+fneCxFUQ6wSpIKpGLCXLJJpVwQzeQrIztAwQ64QxuAR05vg+PX9z",
	"n3IlSWOVB1qNF4LAe0zODNlu5lDDaYdTZSKJGhy8AFYqtBGJVs5F98OP8mdNbWkp31XgBJjYaG7Qz+Pw",
	"nD5gNVlUE1Bulkja7Vr58GryfAGzDJE5OoLLjMJ0XV3Ufg4K/b1Co7zMBI5nMFEWpWf9tTDJSNeO/Asg",
	"qIQhuFggAiQgMiSsqvXh1QQkdn6PzPIZPKWi2IfTZGf3SYpmeyGe1lTf9UJCcDp8N1jXtMLg8F1QAByq",
	"7fE6DWpNPGXeh9efp9Ta+pGNabUtRbOXzaOFK+2tkBf/0os76VyRjhCY9tkzlPamjQzmUO0UlRa/asQx",
	"vWjXYKdC/dVlNKoRfAOfBvqWZGWK6qML8WyQYS4k0w4c9QvzKmXGK8Frj4Ukw2CMy4R3IEOAUAFgkqBC",
	"SMVZErMyMuWW2FCw9y4rdATIy8jZxDGl8kEwCeHVG/mz3MgCZQWYlzhFak8qs0AsGC3nC/UD+lYgqR6r",
	"gNGmG1WzhfZYlFPzonKgdBBAirjkbi1DW+UNiQXC2vRFygJpeE6cvM2B6w85dQJLZ8Xq6GYmdZAjyMTy",
	"JRFYqO8EzhEtRQiD5aNIitYcZxnmKKEk5ZFGwxrhAObgQr4g5QcFFxCLKvlTviF/NCIGBX1EyqQcEE+1",
	"a24IGFYYe3TkknXgLIc67wbw5pt04vUT5iaxuXX526Y5EKH48zAREA5+B7D8+vyJOA3qJJ3c4ppYllVk",
	"OEpKhsXSJE+aVIcUnWP1monHh3SdwAqNcr6h5pBl9GKgLLuyCLt1qXVFQf/wRR4rDjrCQ8dHykDz3dd8",
	"QcsslQTOE1qgVFcytDOe7oRUuc6MHS9lq0KqK8iUBtHepEg51i7YtQz5hg9Hf6VrWNRgABJFzZxXNnzT",
	"pqonDTiFzCjqW23PCwrmiCCmk78IumiOfx9yMLxdhwRMQAu7er7NBJQE/7tEbpa3pRYzIVAzAqSmjMDF",
	"AicLwJGS2obWg24YhYDt+RbKU13ADGpurmpq7JR6kpWwUmN3SuKOZDwv3UyV0ZQMzpWu0WZhbpwNMGcU",
	"J2jkDVHZtm5JS0gKnyDOh+RbNsrAJG/3PTeA65FAQomAmGiGd4aINieUNMBE29RBv3Rf7tLbz6eGwmYN",
	"lxGZg8nRgS2M8B2zaPl2MX2d4EP89uDTnwc7H/EBPyDHT5PnB88Ozor//u352186nLbOal7qrLMD0ptM",
	"J6WBzRVzyV0KCCMb3LX9sr09KI23n/mcekzHMrTmEu5u3pq7u5D0PmhzAeby27u7s6G2YNu975BBBxo2",
	"sKIFxhATMmS+oRdXU7Q5BUvnfcTMa67SBwHLfIKuRV0TObFx2c0c9ynmRQaXHw33r7HlLV0QcJJjVR7Z",
	"Oj4drA5qfRc0ThaQwUQVZJkXPa4jwZHDb+8RmUsVZzca5Zg4f11HQu0MMy70rtRWRtEog9Uvel/BfNoO",
	"MKuqxaOqVu+KqpXDoKUdIJm0DvBKSeBkCTSyKeQrgZJjjthP3A6QpkwHR2qA/0EXZMzllv83WVAuxpi6",
	"vmw9bCiaYhfSNaWz0nq2E8G2pdrD+cV/UJbGv+z9v//hH/jTbe/En6xSH+wCq+m+Dj2mjRJc7GeKmP3E",
	"jaZIV7ZMDpcAE+UpBrCifspaARb/NPPZyhqdUHzpMrpG5vEQYn60dob0QgPPyafCGmG3HyvUAP+gI2ub",
	"AZyKog2zQ4K0buUQY8BK7wsSekL//9rg3/h//ufQmF+klta968PTI0WYGxZrhNneBDiZMdfC7zbDpCCz",
	"Wg0LXdd91yGyIcY1YKITptaFzEap29fHGzcuLnpgxSZD60wM1JzuBn/TfAAoJzk/vG4BEHvkCBhKED7X",
	"GfEnH06Cqt2CEvSxzKcokJ57JB8Cop5ak91my1YA/6+d3Sd7T5/94+dfVmOQM9kqUREC1UaM4C6oV43N",
	"bHjom+o3P+qIuw/3s3Fa32mecLly+VcR3XWEZXh0M1gO5kCjvzOOB58VTXGuAXZe+KTebBdSHJbCAWQr",
	"YOl5gcPlCNJCoKXQrVNgloGEEoISIY0IFWXlHdXiw6MWVTyqZAwRYW284bjzqbhe/wFDc8wFYiZ8onzH",
	"Kid5cy/CS9d9UO24Gh0mCS0b+cm3K3P7/BEWsMPW/QM9FPV+Nojdo/RYFba4frovIxVaUbz76/DWFJGl",
	"Kjmi7/gzYqA1wDBPoQPEJ7ueXfnl99+L7+8v5f9/VP9/cgmi8U/x1//6z7+QhzG6/RRUjXf3Qvbeij5e",
	"w+K2BXmrRvQyGhGcnIVjrx/Nk4qp2VQiv5jwmmG3QmafUlG8NsH7q/pXnUDo6eHpEeBIlIUbNlE7//Bq",
	"0pJhOIdz9Illnf03/3lsygvlizoqk0CiplJyEpJm3XZRePgrmcG++nqrIPP/NVWpQhH+7dfD44vtd6/n",
	"HWFRQUXR1f/M7FH1Pzsz1Ug5JCXMzM6HrWzy6/MXL1+9fnPw9p1Sz1cXOltgecsLHW4rNaq7JVhsW4JN",
	"MYFsaTuhVQQ+XYpgb5RPfEBFWCCWbir1dMc+LdNXRMsFPkcfZjBcRDvRKbsfXk10HbklMSP8VnQ2i0bw",
	"HArI+jDQjvYTr9Ze4MS0YQtxfcv09dB8S368s/tk/EcxD7YSUN1c0knQq5sjLmBe6LKPKtfMwu0CctN7",
	"ydf5d7d3n8TbO/HO09Od3f0ne/tPn/2fwU1vGvqEv6IX+qHCbMrwn5q6Gc1akF9bDwkGpsw7wCSeDI1q",
	"3naArW7wiVHa3z6rdNewgBxMESLAqUuuVuNhrGPwhNKJPnUmE7WO405lD2Behb37wIa5qsInoCpe7jQK",
	"DOdpg61LD7Uh0KpGRr8IHmWQzEspdSR/fHxLemkjH6HkgubAfgwgV92PRV252j7gzRXaXkeTBZPjb2r6",
	"mLZ3nz59ur2z+2SFo3ItQnEn7KeXzpNn1tjyJ3tvUqTVYwlaPCc6vygE1i9VxYI6k/WstGbqSyV0XPbv",
	"s16fPzZZTKS7nrjkU2G4g2xhsFuIBDUHjtgLpMkM/4k2VKm146bqq97v13IdWRc4y8AUATwnVOf0DeXt",
	"d8WC6fNuTGrXPp2BHBOclzl4Amoj+LrdG7o3xAH5gMSCBglOJZXiOYkxkXxmQVNTatpsie02vSjc1tdf",
	"V+mt3hL6woeqZkg13FZNHjZDPoIuXt4xFGkXu7YSa+2ie8FygkjqZrw/oLjcahCtQJtNErN7NdAVGdOu",
	"/hEBTAQi0oqiJNMGoRk7qPR0lG84TZndUE6l7nclad9KzrcvjToywOVJfJjBq6fVSatONe1kIEXVX+uU",
	"06+wG+0VAMpwrCccg08cAZQXYgk0PORT0+9Gvjx22KLpbOP3+jc/ts08mgaW4VKzdnRUjeNbzgNtBJqV",
	"ypVph0o99c4wN4JaSdfprRvZaPHeozsl/VY3VWCII13GZFcX2bqD1DYD0yn9XFdxOxmfqZ9w5d0A8fvv",
	"gxKvXIitPhOOxN/svq/uy6s1cUtDmvt2SksUQ1RH7LYTqtikBKNlMZbyq4X69SduZUqoBEW7qSdpemIc",
	"wKZS5i46rfUJwQyQ9bzX63mhwxC5tq7GUqrWnY0JusiWAKZSTjc24TFRtPf02T9i9PMv03hnN30Sw72n",
	"z+K93WfPdvZ2/rG3vb0dFMGdkFQXGFkg2kuMnOkllzG5p+mQZpfdcLxCDrBYVY4kqGmKNCRWpZJv9A5P",
	"JB7qOX5FkCE2KSWzbvmj1bNmWrZycsg1uFU+Skanrex7WxglHxSMCp05YBsG8rG9D0g5B9Rs9U4WQhQS",
	"jPUKX2boXJusw1aqEsjNQXGAzNegQCzHKseAm2XrwhLCsfJbV8yF1ynoZhT33psKXXIEeSln4GWyAJCr",
	"FDEiGqsZg1dKcRIQZxxwhID1Tqc04WPL0LdUCTPfkh9v2SXHzpJXg0yeNCYzaqx+AfWlF0bcjHhZFJQJ",
	"V4SY+tiP8hdwop+PolHJMseJXr1/2a7QyQuGFhKA56hdmMfOcYJsQAbOpZakhbdiQhLZI5v0waPmrUFy",
	"CG0CK28KTpDhQmbNHw5OwXvza3PFtEBEX2kwpmy+ZT7mWx8OTrUeIrJ6237tOZgcHYyi0TliOltttDPe",
	"Hm9rYYoILPBof/RE/aRriRUtbY0vUJbFZ4RekK0/Ls74+A+u3S3zkL5zjATD6FzXq7c6nj16+/ndyWM3",
	"jOf0Lauq7jT5NxqijcHpAvOKzKSWpN6fLs1lEIoelZahqoQdOlYkWRHAQTraH71G4u3nd9xp4Ks2u7u9",
	"bRHMCHmnqeiW3Xh929eK9monSGjM7buRhANMwNvP72xLONPmqNIurmk5fgPXwKompmsqoInKWkrBxULF",
	"oOqrsHS1oOb6ivWWeQ7ZUsPT21Kob2Jgn9FIwDlXrpslFygffZXDWhZRlayrRC/KA+j2uq4KtyH6uoBG",
	"l+OosSr69JmOjxSGFduBbhI5Vhf9B06obv3GrTZpdqc7V90LlDECZrT/xZfTX75efnUxyhyGJWRVpEyA",
	"aeEKjAsdE32quiDu1cGLw13gHF+FXHbSMHptGX2jE8uem24SNY5VcJf8p+7h2DCnVciy7nTsY5vWpEI4",
	"p6D1K02X13aSfdmogXP9jKYTTUp1d4/6djDmVbtVgGi0SPVvfby8QVpqFOIG9mN1LKnMSGyalVm2fHAU",
	"o4+1QQVNdNSUUjf7dnuQLRsspZOAFghmYvFnpxJgVmKcGh26E+a1Ugozs7DXL0+NZtSilzdq0ucLlJy9",
	"NveK3hBCOc0nA0d4Uq9fw2Gp1DtnL/dPfGvYgkQCFzx6/fL0cUg0R+pi4+s87jcvJy8GnPcbfalt6MD/",
	"amcjIfa4S2/KMDnbwmllYoel2XtMzponZW5q/InXKT8mtQx9033qwaHkOtVtyNV7+iAhqap3x+C41zpt",
	"HbTTSviGxF+gWXHglOwGdDK83WczudDuW8Iak/mtSrp+xqRbe4gl0JdJPyRhVztJmkJPITNsZKvZjBV7",
	"iA5aV+iK07rYPCzl8hncElQUW7b1VKe8c6yQU5yjeAqlZXpIUCz/BFWtwaPTw9OjxzajUztohLZNihUx",
	"J59kdNjaBMFuUhQGk3dDJq2TqeriXdW2K31w6lZ16M7eHWTS9RUKkQp9t/ZKC5agC3BkameBLp4Fp1U5",
	"UcGklpZLVpSoBk3aMhqDo8kpV71/M0rmcabqOE2bqGbXTYAJFwiquBhD8zKDLf+i6QZFc60wK/HC1+bp",
	"1c2BN8TRW7c5Bg4/DMrEBCfsoZsqqLrtlOT+Tl7T7XH39m2LIe3TJS6T0gVgGG0eLNN/bq+BDR/xo6OJ",
	"r8D6fF1fqr8F3XzQDrvfzNNKB7UtWyTu0FIYQSP35nQ0HYOJ9xW3lKguOWXCthjTZKjfyKBADJxjqICU",
	"1vlxleOzTWuNrk436kJo9Y4KYEAV0CvdNPyWHlXBxiSFjX6sj8AjrMq9dP/MhRPT/6aCb7Z0SKGhV3gE",
	"0Ui+66SKiRsMg04pqe5v3i4oldJDlIxwt9mRCuC1eh4pI/KChtUgoPz/6kKoLirwimZvlBKC5bmBw1S1",
	"KG6f46pHlAejtsZ3iw60nkZYIfRsGPgV4YzBgc5zqs8pAtA5XJt0yxQ6+OpIhRrj+0tz3QXVQ+hvpeE+",
	"afeAc+xuU84OTChUGiC+xf5Id9miDLxW92U9HgMt4LhbFF6VSs0AJQikFHHykwDoG+adsudmrfdg47HN",
	"7fcfSGd/OSFknUhuZ7cBlGAt7wERGbmGHsvZD88MMs9D0grPbGTZiCGH6XUEdrzubTdKGY0OcYGzVLmn",
	"OhFR0oYyWHUOaP/VUXc5piP35EWX6yOJ6sbJpmbx3hGQcamrk6pLmofQDhXFVpWEGSaeA4IFljJEa3ya",
	"HGirKVQz1ecEkVTVxslFmeIlc/kqSv1aR6UJVAmtngyJ6gbuxlmndQJryzaddykwmZ5dwsc2gbtRGmv2",
	"IwwFGb12KDrs4BpCZhvqOCUEf6Ag6vcja3cWsTfB1UWk99Kh3KekHZ4erUtVw3MFqil6RZJK/G2S3rWK",
	"oFulj5WpBZXokQSCWh2EfpzA6WsoGRI/cI4TFWl5iLRixM+6VOJW6w0WQu5HAVLhiKRad8trkPvdEkyf",
	"stsTOa2WlTdKW50NMq8ohBx43llZ5JCZoSvVTe3hCKK8scFNKI3n/DrprK0JNpqTOIXyP4rqTnJ+azTn",
	"9OEMRZnctgH9BHfy4eTeaX5eV4QHRHfmLDYkt61hzgmP5OSMP1YT/IEEdNjrn2jRkOegkID7wXphT4/h",
	"Lpe/lwXh13LeV3VwXZoR67myw9Hc9fIbWokSVR2I2t7k6KBTutxYrkKrOfzgXIW//dU/QjQMSyroRX0T",
	"fNj6bv912Zk7VulnKlqz20rHyeiFcaMD1ZIpq0IbUjboqmbu3A5KW5lvXge1As5RJwnU95I4d1Hvfwmf",
	"TP3KVuPzy6hF7ozBpYry6a60phVSq3VYkanmBaZwFMtP/10itqzL+by2tpGDPFfvb8vFUpXOzSjLA3uw",
	"HelCPehCK/V7LAUW2tGvLjCz05tu0MxeB43QzDfRgDdw6p2Nd0Orrh6GFrxuHzS5mMF852YvCGtzqrrc",
	"tuq35jV7eaTqJm27TL2lxx1QqzLV2uD/dHygE4w0k9DX8YbGcPoLh6F/TY2GW6xvBjgSkW67lyNoBbrb",
	"CcMWfPm56lJHvICm5jMz+ey4Cl6bWlGCUKremCIATQOKVo13B0xMZzEPIM0NfW3I3ifbu6GC2Ar8TQY+",
	"0gUVisl+H72n/bcRm1e37IDV+wbF7nN82Mg+BzAbitmtBGbZFCZnnfL2jWp7xKvbouXLOnWisQgO4Ewg",
	"07DDE6JjcKQ3aYbxJWzl3U6q5Ao3Z3CV8H1u1vTa3LJ1vXK4vdLK+zJdhsp33LvKgmSSol4aaRO9zdK4",
	"2sQ4/ZfNKFhj8hOhPWEGYqq1wznFKXh+cvwKQCFgcsY7ZuTy25b+vdb0OiHHvyGiTs9B4/k4Av/dxemp",
	"BNAmm9azmkaWbNOJ7ffrza3YCMgR51An9zXVW4gz3WUyMLHiL+vN90K1okCp4U3Ow40m/5c7+loLkcJX",
	"O3gp85Nf4ZSWWsbZ/XVPrwXpNUog3SoBOHLBcLnaXdG2OP+iQqohD2ppYVOxu8WU1BvV9Z45UnWTYSeI",
	"FUVdE3HjGZG48y85RF16ndMUmT4v06UjsjJ8hoDO81OqFEckVZ3WVU750eHJqZtzqXCuZod8qGw6ktu5",
	"qnD6OtTb8i2+uLiIJRDikmVGLR6uwTc7xoa6411JLq5s/a7pfH9j3jhsAo9X7V8PYxw4s2RT+1fhgCvn",
	"qcT9/jXoEytn06J+f1PtofPq8kbLK2nlmd6PTkec5rX+4JFq9VlHyQhQlmiwhZUi/cer99hsnKs2/HWA",
	"8drJFBWT0ZcaK29ui6KiKgtU90MK61OXf0u0HyjRwKNK1jweKt0cg2x1v57K2+n067FNoc0W/GB0XTzg",
	"B6H1RW3S0De+grzkAizguQQFOseq8KW69UzVyNUNgqpqjC6Bd6vtWIaUUvmZUoKCBcoKewvDsvaYSOW+",
	"6t7SOLbLu93P6J5HDQJth/p8F+v3HpLr6KMZP5JcN+mxbX4bhHONceX72byoARe/C7KG0l2Lthl8q8/l",
	"3oaSm4g8hGpo2RNQfklS78JNr0x3ugSYWNwmc8Dcuzr5GFg2a4KY/uWg5krQsKg4LMUNYr1z1WkHOsRy",
	"qTbHqNa+vA1qb7m98IR2b/EOZSKFAsvy/B9AE4nou1/Mbq+j9QrW9W2xNe6XxeDy3OPATa9eZ5RhBbp4",
	"Zl70Wzjq3uQWTSJAJVZdYG6LOjmQlke/s7txt+0NElDHLbpdOTtaXWS2W2VtgtWUpWASOS3cvZQ/W+x+",
	"670jVguPY3dvjZrd8EHXh1y3O9ApnPKI72uZrr01cbMy3bK4ipFTFtdh5EgCVIaO6s6FuRJpNvLZQXC3",
	"oKK1L4y9Yn56pci5ZHmrVBWwamxv+4du1lgyWcescYjjKmaNTyU/yqy5ZZrZyKxxehkZsLQpKtB/5S6a",
	"NWXx8MyasujzoXkpzZqIVvR/aLQKa6ayVHm0OtPFswG0DPHNApUwW7fkOKdnJrNGD09J3bADc16Gmq4c",
	"6wFvsvuDO0UPeRx7WxMUoG+JapKnk2htJUoFrB9BA0Gscw/Qyxk3h3Uf88XtYTQAHjZv1NOV8sIQmJxT",
	"oTcWOp80cGnHwQwQWrV3m9J0Kbm+jZ9EOhHcC09oH3+F7VUmuUuiXbLiJnE/cNlKn5M4cIcKeIRnSmGs",
	"t79y64+v7CmuMwcP3wUSAVs7+K1KzRMPoG9d0Mr/rb7Top8cbKxw9e0awfa9oXZrjl+IZohHVdpp5F2O",
	"zgUUZfiujE862fjGGKQav8sqdzWXh9dEVLQCvuEmovKfW05DwD7VWrUXDLQtFBRAr+GgVLBhWjs2PP0x",
	"W9YVoH5bQ5BQMsMWvfSXloOo+kFsL59i5zqNV30wL5nueZhSwGkb0ZzrgCuEu36m2nHx8OpGZ+bSWpPa",
	"WfVzE9Q2dAyA2wX2HXKvKrpykOmB34zgHHebKlZZtorwdO8PrVH2uV6ri0WN8tnJpxvtchq9jAIkZTxD",
	"So+tw8CGEHXoQ025fqveqpf0TbYy6LhxOYAIH9FFI9ztGbVVOcOn4/dOL0VzNHeHxF46y7JYi9IxmNSn",
	"q4q6vHNXpQzV3fMd5/5w2/pqYCne2WyG0JSEmiA5ImnsQjBe0XXkBEmFh4Q83m5jkc62Vp/8K8q8p6ag",
	"zel5wEEDP0NRxNBV2zdNhL33e6/ntm3RY5uR3TmqDPDah9BXROJ2EPpdRJTPYE+J9tpXY1elBW2J12E8",
	"t+8xuBmkd64K77q84Lx1QbZE8w+vJtVF2OoyG3Vdw12KlMsVasvNdx+VRfogr134AAmcr7qhvaPzu0L6",
	"1RH057XuZq3qKlDuh+KmTVzXocWA3gV0Y4JznNa1iJV1Za4GVx06+xS0G46Yh65l71DQ6iaRXvg7tKEf",
	"3cWgn3yq5q9aQD/cW3OaDilX2QpEwJuiwr6ypY52tQkEm8ig3fBuNsoQXThkAoUsKG0LOSHFxuwGeGH1",
	"y7v2/qb1r+Ad+1dUufzN3kXq0qdQmUH3MaSh8boF6i6CqSLhMO0RNScCMmHLMVUQg86sR04Hraq4r3eT",
	"u08KFUHV0W8npURd922klaWRqkqmJ/t1bU+Cf7v+6A4nZtgedJJ4bI1ADXLvyv6HamzrJKVMucQ0vqlw",
	"mtz/RRXFdgHRr1VtlvixHtL3XbWrDlJDdG281bZIAHtvKqLnT3W9SR8exAhOzohuA3N7IiG8x74LVZ0V",
	"+23T0vTeWzDdFGhCglekvpre+q7i1ao4rxjfdBlwgUXdLWEj0FIzLCwQ72tEBYuC0YKpdMgUcYGJuYe4",
	"8NJQh4Xa1SbWLjzWn/1T1ddfRgNfP10WaPAnx1UDHfPJenX5zhXhf9HCRK/ftIpJ+44lg74OFQSyp84R",
	"4wZe/cFz82JHTXL4/uJQVPw3M+EVeWm4eN30QPOr150tNlxYi3pbdNa/jzo7Y2e8O34yWlUcbCcdUh78",
	"WwC0jawmfQj30AR4jUR1m/V5dfTti5iVLGDnljs1nCcLygVoRJYnRwfgRH0yikYly5yWW995OU1pDjG5",
	"HMsTHX+X+ioll2MiRxqzkmyd7yiOY1byPRTrbSBDhcpu0ZApxYps8qLODjmHDNOy1TFaB8M5eKQDMXU9",
	"hNvzNtKtLaJKn4vAh1eTx043v2aF6vcO3SBmKFOCK7jyYMdGXk8LcuU0zBERUZXuUt1z72fB1Pc6274/",
	"Vt6GVqdTjOvhw+vTSVkmoS9qyFxVC29KudxZTcpgFDxPm+bjrnzVKvyTshGpSF/AZ/IznDXZKbQjmddL",
	"U5ZuABiKAMJTL5w7zHnUpCIzn7LplBJoy9GdSQ15BToMVTLDuBs9J5KzGmnrmXB51WYBJtpYrKbxxEp7",
	"stMF4sgdFDKk0uuw5F6pjg3aDEItljNlt+guBdqPwxe0zFL5mimjT3U2u+lkcPLinbOgutL+8uvl/w8A",
	"AP//J2Dqrmj4AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
