// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(c *gin.Context)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(c *gin.Context)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(c *gin.Context)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(c *gin.Context)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(c *gin.Context)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(c *gin.Context)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(c *gin.Context)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(c *gin.Context)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(c *gin.Context)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(c *gin.Context)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(c *gin.Context)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(c *gin.Context)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(c *gin.Context)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(c *gin.Context)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(c *gin.Context)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(c *gin.Context)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(c *gin.Context)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(c *gin.Context)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(c *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(c *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(c *gin.Context, provider SignInProviderCallbackPostParamsProvider)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(c *gin.Context)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(c *gin.Context)
	// Sign out
	// (POST /signout)
	SignOut(c *gin.Context)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(c *gin.Context)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(c *gin.Context)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(c *gin.Context)
	// Refresh access token
	// (POST /token)
	RefreshToken(c *gin.Context)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(c *gin.Context)
	// Get user information
	// (GET /user)
	GetUser(c *gin.Context)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(c *gin.Context)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(c *gin.Context)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(c *gin.Context)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(c *gin.Context)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(c *gin.Context)
	// Get OAuth2 provider tokens from cookies
	// (GET /user/provider/{provider}/tokens)
	GetProviderTokens(c *gin.Context, provider GetProviderTokensParamsProvider, params GetProviderTokensParams)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(c *gin.Context)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(c *gin.Context)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(c *gin.Context, params VerifyTicketParams)
	// Get service version
	// (GET /version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetJWKs operation middleware
func (siw *ServerInterfaceWrapper) GetJWKs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKs(c)
}

// ElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) ElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ElevateWebauthn(c)
}

// VerifyElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifyElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyElevateWebauthn(c)
}

// HealthCheckGet operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckGet(c)
}

// HealthCheckHead operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckHead(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckHead(c)
}

// LinkIdToken operation middleware
func (siw *ServerInterfaceWrapper) LinkIdToken(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LinkIdToken(c)
}

// ChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserMfa(c)
}

// CreatePAT operation middleware
func (siw *ServerInterfaceWrapper) CreatePAT(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePAT(c)
}

// SignInAnonymous operation middleware
func (siw *ServerInterfaceWrapper) SignInAnonymous(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInAnonymous(c)
}

// SignInEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignInEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInEmailPassword(c)
}

// SignInIdToken operation middleware
func (siw *ServerInterfaceWrapper) SignInIdToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInIdToken(c)
}

// VerifySignInMfaTotp operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInMfaTotp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInMfaTotp(c)
}

// SignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInOTPEmail(c)
}

// VerifySignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInOTPEmail(c)
}

// SignInPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessEmail(c)
}

// SignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessSms(c)
}

// VerifySignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInPasswordlessSms(c)
}

// SignInPAT operation middleware
func (siw *ServerInterfaceWrapper) SignInPAT(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPAT(c)
}

// SignInProvider operation middleware
func (siw *ServerInterfaceWrapper) SignInProvider(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderParams

	// ------------- Optional query parameter "allowedRoles" -------------

	err = runtime.BindQueryParameter("form", false, false, "allowedRoles", c.Request.URL.Query(), &params.AllowedRoles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter allowedRoles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "defaultRole" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultRole", c.Request.URL.Query(), &params.DefaultRole)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter defaultRole: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", c.Request.URL.Query(), &params.Locale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter locale: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "metadata" -------------

	if paramValue := c.Query("metadata"); paramValue != "" {

		var value map[string]interface{}
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'metadata' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Metadata = &value

	}

	// ------------- Optional query parameter "redirectTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connect" -------------

	err = runtime.BindQueryParameter("form", true, false, "connect", c.Request.URL.Query(), &params.Connect)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connect: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProvider(c, provider, params)
}

// SignInProviderCallbackGet operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackGetParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderCallbackGetParams

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_token", c.Request.URL.Query(), &params.IdToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_token", c.Request.URL.Query(), &params.OauthToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_verifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_verifier", c.Request.URL.Query(), &params.OauthVerifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_verifier: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", c.Request.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", c.Request.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_uri", c.Request.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_uri: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackGet(c, provider, params)
}

// SignInProviderCallbackPost operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackPost(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackPostParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackPost(c, provider)
}

// SignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInWebauthn(c)
}

// VerifySignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInWebauthn(c)
}

// SignOut operation middleware
func (siw *ServerInterfaceWrapper) SignOut(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOut(c)
}

// SignUpEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignUpEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpEmailPassword(c)
}

// SignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpWebauthn(c)
}

// VerifySignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignUpWebauthn(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// VerifyToken operation middleware
func (siw *ServerInterfaceWrapper) VerifyToken(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyToken(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// DeanonymizeUser operation middleware
func (siw *ServerInterfaceWrapper) DeanonymizeUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeanonymizeUser(c)
}

// ChangeUserEmail operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserEmail(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserEmail(c)
}

// SendVerificationEmail operation middleware
func (siw *ServerInterfaceWrapper) SendVerificationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendVerificationEmail(c)
}

// VerifyChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) VerifyChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyChangeUserMfa(c)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserPassword(c)
}

// SendPasswordResetEmail operation middleware
func (siw *ServerInterfaceWrapper) SendPasswordResetEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendPasswordResetEmail(c)
}

// GetProviderTokens operation middleware
func (siw *ServerInterfaceWrapper) GetProviderTokens(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider GetProviderTokensParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProviderTokensParams

	headers := c.Request.Header

	// ------------- Required header parameter "Cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Cookie, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Cookie", valueList[0], &Cookie, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Cookie: %w", err), http.StatusBadRequest)
			return
		}

		params.Cookie = Cookie

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Cookie is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProviderTokens(c, provider, params)
}

// AddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) AddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddSecurityKey(c)
}

// VerifyAddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) VerifyAddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyAddSecurityKey(c)
}

// VerifyTicket operation middleware
func (siw *ServerInterfaceWrapper) VerifyTicket(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyTicketParams

	// ------------- Required query parameter "ticket" -------------

	if paramValue := c.Query("ticket"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticket is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticket", c.Request.URL.Query(), &params.Ticket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirectTo" -------------

	if paramValue := c.Query("redirectTo"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectTo is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyTicket(c, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKs)
	router.POST(options.BaseURL+"/elevate/webauthn", wrapper.ElevateWebauthn)
	router.POST(options.BaseURL+"/elevate/webauthn/verify", wrapper.VerifyElevateWebauthn)
	router.GET(options.BaseURL+"/healthz", wrapper.HealthCheckGet)
	router.HEAD(options.BaseURL+"/healthz", wrapper.HealthCheckHead)
	router.POST(options.BaseURL+"/link/idtoken", wrapper.LinkIdToken)
	router.GET(options.BaseURL+"/mfa/totp/generate", wrapper.ChangeUserMfa)
	router.POST(options.BaseURL+"/pat", wrapper.CreatePAT)
	router.POST(options.BaseURL+"/signin/anonymous", wrapper.SignInAnonymous)
	router.POST(options.BaseURL+"/signin/email-password", wrapper.SignInEmailPassword)
	router.POST(options.BaseURL+"/signin/idtoken", wrapper.SignInIdToken)
	router.POST(options.BaseURL+"/signin/mfa/totp", wrapper.VerifySignInMfaTotp)
	router.POST(options.BaseURL+"/signin/otp/email", wrapper.SignInOTPEmail)
	router.POST(options.BaseURL+"/signin/otp/email/verify", wrapper.VerifySignInOTPEmail)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.SignInPasswordlessEmail)
	router.POST(options.BaseURL+"/signin/passwordless/sms", wrapper.SignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/passwordless/sms/otp", wrapper.VerifySignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/pat", wrapper.SignInPAT)
	router.GET(options.BaseURL+"/signin/provider/:provider", wrapper.SignInProvider)
	router.GET(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackGet)
	router.POST(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackPost)
	router.POST(options.BaseURL+"/signin/webauthn", wrapper.SignInWebauthn)
	router.POST(options.BaseURL+"/signin/webauthn/verify", wrapper.VerifySignInWebauthn)
	router.POST(options.BaseURL+"/signout", wrapper.SignOut)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.SignUpEmailPassword)
	router.POST(options.BaseURL+"/signup/webauthn", wrapper.SignUpWebauthn)
	router.POST(options.BaseURL+"/signup/webauthn/verify", wrapper.VerifySignUpWebauthn)
	router.POST(options.BaseURL+"/token", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/token/verify", wrapper.VerifyToken)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user/deanonymize", wrapper.DeanonymizeUser)
	router.POST(options.BaseURL+"/user/email/change", wrapper.ChangeUserEmail)
	router.POST(options.BaseURL+"/user/email/send-verification-email", wrapper.SendVerificationEmail)
	router.POST(options.BaseURL+"/user/mfa", wrapper.VerifyChangeUserMfa)
	router.POST(options.BaseURL+"/user/password", wrapper.ChangeUserPassword)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.SendPasswordResetEmail)
	router.GET(options.BaseURL+"/user/provider/:provider/tokens", wrapper.GetProviderTokens)
	router.POST(options.BaseURL+"/user/webauthn/add", wrapper.AddSecurityKey)
	router.POST(options.BaseURL+"/user/webauthn/verify", wrapper.VerifyAddSecurityKey)
	router.GET(options.BaseURL+"/verify", wrapper.VerifyTicket)
	router.GET(options.BaseURL+"/version", wrapper.GetVersion)
}

type GetJWKsRequestObject struct {
}

type GetJWKsResponseObject interface {
	VisitGetJWKsResponse(w http.ResponseWriter) error
}

type GetJWKs200JSONResponse JWKSet

func (response GetJWKs200JSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJWKsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetJWKsdefaultJSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ElevateWebauthnRequestObject struct {
}

type ElevateWebauthnResponseObject interface {
	VisitElevateWebauthnResponse(w http.ResponseWriter) error
}

type ElevateWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response ElevateWebauthn200JSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ElevateWebauthndefaultJSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyElevateWebauthnRequestObject struct {
	Body *VerifyElevateWebauthnJSONRequestBody
}

type VerifyElevateWebauthnResponseObject interface {
	VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error
}

type VerifyElevateWebauthn200JSONResponse SessionPayload

func (response VerifyElevateWebauthn200JSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyElevateWebauthndefaultJSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckGetRequestObject struct {
}

type HealthCheckGetResponseObject interface {
	VisitHealthCheckGetResponse(w http.ResponseWriter) error
}

type HealthCheckGet200JSONResponse OKResponse

func (response HealthCheckGet200JSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckGetdefaultJSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckHeadRequestObject struct {
}

type HealthCheckHeadResponseObject interface {
	VisitHealthCheckHeadResponse(w http.ResponseWriter) error
}

type HealthCheckHead200Response struct {
}

func (response HealthCheckHead200Response) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthCheckHeaddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckHeaddefaultJSONResponse) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkIdTokenRequestObject struct {
	Body *LinkIdTokenJSONRequestBody
}

type LinkIdTokenResponseObject interface {
	VisitLinkIdTokenResponse(w http.ResponseWriter) error
}

type LinkIdToken200JSONResponse OKResponse

func (response LinkIdToken200JSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response LinkIdTokendefaultJSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserMfaRequestObject struct {
}

type ChangeUserMfaResponseObject interface {
	VisitChangeUserMfaResponse(w http.ResponseWriter) error
}

type ChangeUserMfa200JSONResponse TotpGenerateResponse

func (response ChangeUserMfa200JSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserMfadefaultJSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePATRequestObject struct {
	Body *CreatePATJSONRequestBody
}

type CreatePATResponseObject interface {
	VisitCreatePATResponse(w http.ResponseWriter) error
}

type CreatePAT200JSONResponse CreatePATResponse

func (response CreatePAT200JSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response CreatePATdefaultJSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInAnonymousRequestObject struct {
	Body *SignInAnonymousJSONRequestBody
}

type SignInAnonymousResponseObject interface {
	VisitSignInAnonymousResponse(w http.ResponseWriter) error
}

type SignInAnonymous200JSONResponse SessionPayload

func (response SignInAnonymous200JSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInAnonymousdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInAnonymousdefaultJSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInEmailPasswordRequestObject struct {
	Body *SignInEmailPasswordJSONRequestBody
}

type SignInEmailPasswordResponseObject interface {
	VisitSignInEmailPasswordResponse(w http.ResponseWriter) error
}

type SignInEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response SignInEmailPassword200JSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInEmailPassworddefaultJSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInIdTokenRequestObject struct {
	Body *SignInIdTokenJSONRequestBody
}

type SignInIdTokenResponseObject interface {
	VisitSignInIdTokenResponse(w http.ResponseWriter) error
}

type SignInIdToken200JSONResponse SessionPayload

func (response SignInIdToken200JSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInIdTokendefaultJSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInMfaTotpRequestObject struct {
	Body *VerifySignInMfaTotpJSONRequestBody
}

type VerifySignInMfaTotpResponseObject interface {
	VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error
}

type VerifySignInMfaTotp200JSONResponse SessionPayload

func (response VerifySignInMfaTotp200JSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInMfaTotpdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInMfaTotpdefaultJSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInOTPEmailRequestObject struct {
	Body *SignInOTPEmailJSONRequestBody
}

type SignInOTPEmailResponseObject interface {
	VisitSignInOTPEmailResponse(w http.ResponseWriter) error
}

type SignInOTPEmail200JSONResponse OKResponse

func (response SignInOTPEmail200JSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInOTPEmaildefaultJSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInOTPEmailRequestObject struct {
	Body *VerifySignInOTPEmailJSONRequestBody
}

type VerifySignInOTPEmailResponseObject interface {
	VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error
}

type VerifySignInOTPEmail200JSONResponse SignInOTPEmailVerifyResponse

func (response VerifySignInOTPEmail200JSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInOTPEmaildefaultJSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessEmailRequestObject struct {
	Body *SignInPasswordlessEmailJSONRequestBody
}

type SignInPasswordlessEmailResponseObject interface {
	VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error
}

type SignInPasswordlessEmail200JSONResponse OKResponse

func (response SignInPasswordlessEmail200JSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessEmaildefaultJSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessSmsRequestObject struct {
	Body *SignInPasswordlessSmsJSONRequestBody
}

type SignInPasswordlessSmsResponseObject interface {
	VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type SignInPasswordlessSms200JSONResponse OKResponse

func (response SignInPasswordlessSms200JSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessSmsdefaultJSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInPasswordlessSmsRequestObject struct {
	Body *VerifySignInPasswordlessSmsJSONRequestBody
}

type VerifySignInPasswordlessSmsResponseObject interface {
	VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type VerifySignInPasswordlessSms200JSONResponse SignInPasswordlessSmsOtpResponse

func (response VerifySignInPasswordlessSms200JSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInPasswordlessSmsdefaultJSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPATRequestObject struct {
	Body *SignInPATJSONRequestBody
}

type SignInPATResponseObject interface {
	VisitSignInPATResponse(w http.ResponseWriter) error
}

type SignInPAT200JSONResponse SessionPayload

func (response SignInPAT200JSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPATdefaultJSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderRequestObject struct {
	Provider SignInProviderParamsProvider `json:"provider"`
	Params   SignInProviderParams
}

type SignInProviderResponseObject interface {
	VisitSignInProviderResponse(w http.ResponseWriter) error
}

type SignInProvider302ResponseHeaders struct {
	Location string
}

type SignInProvider302Response struct {
	Headers SignInProvider302ResponseHeaders
}

func (response SignInProvider302Response) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderdefaultJSONResponse) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackGetRequestObject struct {
	Provider SignInProviderCallbackGetParamsProvider `json:"provider"`
	Params   SignInProviderCallbackGetParams
}

type SignInProviderCallbackGetResponseObject interface {
	VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackGet302ResponseHeaders struct {
	Location  string
	SetCookie string
}

type SignInProviderCallbackGet302Response struct {
	Headers SignInProviderCallbackGet302ResponseHeaders
}

func (response SignInProviderCallbackGet302Response) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackGetdefaultJSONResponse) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackPostRequestObject struct {
	Provider SignInProviderCallbackPostParamsProvider `json:"provider"`
	Body     *SignInProviderCallbackPostFormdataRequestBody
}

type SignInProviderCallbackPostResponseObject interface {
	VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackPost302ResponseHeaders struct {
	Location  string
	SetCookie string
}

type SignInProviderCallbackPost302Response struct {
	Headers SignInProviderCallbackPost302ResponseHeaders
}

func (response SignInProviderCallbackPost302Response) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackPostdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackPostdefaultJSONResponse) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInWebauthnRequestObject struct {
	Body *SignInWebauthnJSONRequestBody
}

type SignInWebauthnResponseObject interface {
	VisitSignInWebauthnResponse(w http.ResponseWriter) error
}

type SignInWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response SignInWebauthn200JSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInWebauthndefaultJSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInWebauthnRequestObject struct {
	Body *VerifySignInWebauthnJSONRequestBody
}

type VerifySignInWebauthnResponseObject interface {
	VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignInWebauthn200JSONResponse SessionPayload

func (response VerifySignInWebauthn200JSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInWebauthndefaultJSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignOutRequestObject struct {
	Body *SignOutJSONRequestBody
}

type SignOutResponseObject interface {
	VisitSignOutResponse(w http.ResponseWriter) error
}

type SignOut200JSONResponse OKResponse

func (response SignOut200JSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignOutdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignOutdefaultJSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpEmailPasswordRequestObject struct {
	Body *SignUpEmailPasswordJSONRequestBody
}

type SignUpEmailPasswordResponseObject interface {
	VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error
}

type SignUpEmailPassword200JSONResponse SessionPayload

func (response SignUpEmailPassword200JSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpEmailPassworddefaultJSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpWebauthnRequestObject struct {
	Body *SignUpWebauthnJSONRequestBody
}

type SignUpWebauthnResponseObject interface {
	VisitSignUpWebauthnResponse(w http.ResponseWriter) error
}

type SignUpWebauthn200JSONResponse PublicKeyCredentialCreationOptions

func (response SignUpWebauthn200JSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpWebauthndefaultJSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignUpWebauthnRequestObject struct {
	Body *VerifySignUpWebauthnJSONRequestBody
}

type VerifySignUpWebauthnResponseObject interface {
	VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignUpWebauthn200JSONResponse SessionPayload

func (response VerifySignUpWebauthn200JSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignUpWebauthndefaultJSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse Session

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response RefreshTokendefaultJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTokenRequestObject struct {
	Body *VerifyTokenJSONRequestBody
}

type VerifyTokenResponseObject interface {
	VisitVerifyTokenResponse(w http.ResponseWriter) error
}

type VerifyToken200JSONResponse string

func (response VerifyToken200JSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTokendefaultJSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUserdefaultJSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeanonymizeUserRequestObject struct {
	Body *DeanonymizeUserJSONRequestBody
}

type DeanonymizeUserResponseObject interface {
	VisitDeanonymizeUserResponse(w http.ResponseWriter) error
}

type DeanonymizeUser200JSONResponse OKResponse

func (response DeanonymizeUser200JSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeanonymizeUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeanonymizeUserdefaultJSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserEmailRequestObject struct {
	Body *ChangeUserEmailJSONRequestBody
}

type ChangeUserEmailResponseObject interface {
	VisitChangeUserEmailResponse(w http.ResponseWriter) error
}

type ChangeUserEmail200JSONResponse OKResponse

func (response ChangeUserEmail200JSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserEmaildefaultJSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendVerificationEmailRequestObject struct {
	Body *SendVerificationEmailJSONRequestBody
}

type SendVerificationEmailResponseObject interface {
	VisitSendVerificationEmailResponse(w http.ResponseWriter) error
}

type SendVerificationEmail200JSONResponse OKResponse

func (response SendVerificationEmail200JSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendVerificationEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendVerificationEmaildefaultJSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyChangeUserMfaRequestObject struct {
	Body *VerifyChangeUserMfaJSONRequestBody
}

type VerifyChangeUserMfaResponseObject interface {
	VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error
}

type VerifyChangeUserMfa200JSONResponse OKResponse

func (response VerifyChangeUserMfa200JSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyChangeUserMfadefaultJSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserPasswordRequestObject struct {
	Body *ChangeUserPasswordJSONRequestBody
}

type ChangeUserPasswordResponseObject interface {
	VisitChangeUserPasswordResponse(w http.ResponseWriter) error
}

type ChangeUserPassword200JSONResponse OKResponse

func (response ChangeUserPassword200JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserPassworddefaultJSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendPasswordResetEmailRequestObject struct {
	Body *SendPasswordResetEmailJSONRequestBody
}

type SendPasswordResetEmailResponseObject interface {
	VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error
}

type SendPasswordResetEmail200JSONResponse OKResponse

func (response SendPasswordResetEmail200JSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendPasswordResetEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendPasswordResetEmaildefaultJSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProviderTokensRequestObject struct {
	Provider GetProviderTokensParamsProvider `json:"provider"`
	Params   GetProviderTokensParams
}

type GetProviderTokensResponseObject interface {
	VisitGetProviderTokensResponse(w http.ResponseWriter) error
}

type GetProviderTokens200ResponseHeaders struct {
	SetCookie string
}

type GetProviderTokens200JSONResponse struct {
	Body    GetProviderTokensResponse
	Headers GetProviderTokens200ResponseHeaders
}

func (response GetProviderTokens200JSONResponse) VisitGetProviderTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProviderTokensdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetProviderTokensdefaultJSONResponse) VisitGetProviderTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddSecurityKeyRequestObject struct {
}

type AddSecurityKeyResponseObject interface {
	VisitAddSecurityKeyResponse(w http.ResponseWriter) error
}

type AddSecurityKey200JSONResponse PublicKeyCredentialCreationOptions

func (response AddSecurityKey200JSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response AddSecurityKeydefaultJSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyAddSecurityKeyRequestObject struct {
	Body *VerifyAddSecurityKeyJSONRequestBody
}

type VerifyAddSecurityKeyResponseObject interface {
	VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error
}

type VerifyAddSecurityKey200JSONResponse VerifyAddSecurityKeyResponse

func (response VerifyAddSecurityKey200JSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyAddSecurityKeydefaultJSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTicketRequestObject struct {
	Params VerifyTicketParams
}

type VerifyTicketResponseObject interface {
	VisitVerifyTicketResponse(w http.ResponseWriter) error
}

type VerifyTicket302ResponseHeaders struct {
	Location string
}

type VerifyTicket302Response struct {
	Headers VerifyTicket302ResponseHeaders
}

func (response VerifyTicket302Response) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type VerifyTicketdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTicketdefaultJSONResponse) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	// Version The version of the authentication service
	Version string `json:"version"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVersiondefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetVersiondefaultJSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(ctx context.Context, request GetJWKsRequestObject) (GetJWKsResponseObject, error)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(ctx context.Context, request ElevateWebauthnRequestObject) (ElevateWebauthnResponseObject, error)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(ctx context.Context, request VerifyElevateWebauthnRequestObject) (VerifyElevateWebauthnResponseObject, error)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(ctx context.Context, request HealthCheckGetRequestObject) (HealthCheckGetResponseObject, error)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(ctx context.Context, request HealthCheckHeadRequestObject) (HealthCheckHeadResponseObject, error)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(ctx context.Context, request LinkIdTokenRequestObject) (LinkIdTokenResponseObject, error)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(ctx context.Context, request ChangeUserMfaRequestObject) (ChangeUserMfaResponseObject, error)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(ctx context.Context, request CreatePATRequestObject) (CreatePATResponseObject, error)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(ctx context.Context, request SignInAnonymousRequestObject) (SignInAnonymousResponseObject, error)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(ctx context.Context, request SignInEmailPasswordRequestObject) (SignInEmailPasswordResponseObject, error)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(ctx context.Context, request SignInIdTokenRequestObject) (SignInIdTokenResponseObject, error)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(ctx context.Context, request VerifySignInMfaTotpRequestObject) (VerifySignInMfaTotpResponseObject, error)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(ctx context.Context, request SignInOTPEmailRequestObject) (SignInOTPEmailResponseObject, error)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(ctx context.Context, request VerifySignInOTPEmailRequestObject) (VerifySignInOTPEmailResponseObject, error)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(ctx context.Context, request SignInPasswordlessEmailRequestObject) (SignInPasswordlessEmailResponseObject, error)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(ctx context.Context, request SignInPasswordlessSmsRequestObject) (SignInPasswordlessSmsResponseObject, error)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(ctx context.Context, request VerifySignInPasswordlessSmsRequestObject) (VerifySignInPasswordlessSmsResponseObject, error)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(ctx context.Context, request SignInPATRequestObject) (SignInPATResponseObject, error)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(ctx context.Context, request SignInProviderRequestObject) (SignInProviderResponseObject, error)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(ctx context.Context, request SignInProviderCallbackGetRequestObject) (SignInProviderCallbackGetResponseObject, error)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(ctx context.Context, request SignInProviderCallbackPostRequestObject) (SignInProviderCallbackPostResponseObject, error)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(ctx context.Context, request SignInWebauthnRequestObject) (SignInWebauthnResponseObject, error)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(ctx context.Context, request VerifySignInWebauthnRequestObject) (VerifySignInWebauthnResponseObject, error)
	// Sign out
	// (POST /signout)
	SignOut(ctx context.Context, request SignOutRequestObject) (SignOutResponseObject, error)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(ctx context.Context, request SignUpEmailPasswordRequestObject) (SignUpEmailPasswordResponseObject, error)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(ctx context.Context, request SignUpWebauthnRequestObject) (SignUpWebauthnResponseObject, error)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(ctx context.Context, request VerifySignUpWebauthnRequestObject) (VerifySignUpWebauthnResponseObject, error)
	// Refresh access token
	// (POST /token)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(ctx context.Context, request VerifyTokenRequestObject) (VerifyTokenResponseObject, error)
	// Get user information
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(ctx context.Context, request DeanonymizeUserRequestObject) (DeanonymizeUserResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(ctx context.Context, request ChangeUserEmailRequestObject) (ChangeUserEmailResponseObject, error)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(ctx context.Context, request SendVerificationEmailRequestObject) (SendVerificationEmailResponseObject, error)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(ctx context.Context, request VerifyChangeUserMfaRequestObject) (VerifyChangeUserMfaResponseObject, error)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(ctx context.Context, request ChangeUserPasswordRequestObject) (ChangeUserPasswordResponseObject, error)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(ctx context.Context, request SendPasswordResetEmailRequestObject) (SendPasswordResetEmailResponseObject, error)
	// Get OAuth2 provider tokens from cookies
	// (GET /user/provider/{provider}/tokens)
	GetProviderTokens(ctx context.Context, request GetProviderTokensRequestObject) (GetProviderTokensResponseObject, error)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(ctx context.Context, request AddSecurityKeyRequestObject) (AddSecurityKeyResponseObject, error)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(ctx context.Context, request VerifyAddSecurityKeyRequestObject) (VerifyAddSecurityKeyResponseObject, error)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(ctx context.Context, request VerifyTicketRequestObject) (VerifyTicketResponseObject, error)
	// Get service version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetJWKs operation middleware
func (sh *strictHandler) GetJWKs(ctx *gin.Context) {
	var request GetJWKsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJWKs(ctx, request.(GetJWKsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJWKs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJWKsResponseObject); ok {
		if err := validResponse.VisitGetJWKsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ElevateWebauthn operation middleware
func (sh *strictHandler) ElevateWebauthn(ctx *gin.Context) {
	var request ElevateWebauthnRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ElevateWebauthn(ctx, request.(ElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyElevateWebauthn operation middleware
func (sh *strictHandler) VerifyElevateWebauthn(ctx *gin.Context) {
	var request VerifyElevateWebauthnRequestObject

	var body VerifyElevateWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyElevateWebauthn(ctx, request.(VerifyElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifyElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckGet operation middleware
func (sh *strictHandler) HealthCheckGet(ctx *gin.Context) {
	var request HealthCheckGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckGet(ctx, request.(HealthCheckGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckGetResponseObject); ok {
		if err := validResponse.VisitHealthCheckGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckHead operation middleware
func (sh *strictHandler) HealthCheckHead(ctx *gin.Context) {
	var request HealthCheckHeadRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckHead(ctx, request.(HealthCheckHeadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckHead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckHeadResponseObject); ok {
		if err := validResponse.VisitHealthCheckHeadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LinkIdToken operation middleware
func (sh *strictHandler) LinkIdToken(ctx *gin.Context) {
	var request LinkIdTokenRequestObject

	var body LinkIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkIdToken(ctx, request.(LinkIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LinkIdTokenResponseObject); ok {
		if err := validResponse.VisitLinkIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserMfa operation middleware
func (sh *strictHandler) ChangeUserMfa(ctx *gin.Context) {
	var request ChangeUserMfaRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserMfa(ctx, request.(ChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePAT operation middleware
func (sh *strictHandler) CreatePAT(ctx *gin.Context) {
	var request CreatePATRequestObject

	var body CreatePATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePAT(ctx, request.(CreatePATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePATResponseObject); ok {
		if err := validResponse.VisitCreatePATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInAnonymous operation middleware
func (sh *strictHandler) SignInAnonymous(ctx *gin.Context) {
	var request SignInAnonymousRequestObject

	var body SignInAnonymousJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInAnonymous(ctx, request.(SignInAnonymousRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInAnonymous")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInAnonymousResponseObject); ok {
		if err := validResponse.VisitSignInAnonymousResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInEmailPassword operation middleware
func (sh *strictHandler) SignInEmailPassword(ctx *gin.Context) {
	var request SignInEmailPasswordRequestObject

	var body SignInEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInEmailPassword(ctx, request.(SignInEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignInEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInIdToken operation middleware
func (sh *strictHandler) SignInIdToken(ctx *gin.Context) {
	var request SignInIdTokenRequestObject

	var body SignInIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInIdToken(ctx, request.(SignInIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInIdTokenResponseObject); ok {
		if err := validResponse.VisitSignInIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInMfaTotp operation middleware
func (sh *strictHandler) VerifySignInMfaTotp(ctx *gin.Context) {
	var request VerifySignInMfaTotpRequestObject

	var body VerifySignInMfaTotpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInMfaTotp(ctx, request.(VerifySignInMfaTotpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInMfaTotp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInMfaTotpResponseObject); ok {
		if err := validResponse.VisitVerifySignInMfaTotpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInOTPEmail operation middleware
func (sh *strictHandler) SignInOTPEmail(ctx *gin.Context) {
	var request SignInOTPEmailRequestObject

	var body SignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInOTPEmail(ctx, request.(SignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitSignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInOTPEmail operation middleware
func (sh *strictHandler) VerifySignInOTPEmail(ctx *gin.Context) {
	var request VerifySignInOTPEmailRequestObject

	var body VerifySignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInOTPEmail(ctx, request.(VerifySignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitVerifySignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessEmail operation middleware
func (sh *strictHandler) SignInPasswordlessEmail(ctx *gin.Context) {
	var request SignInPasswordlessEmailRequestObject

	var body SignInPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessEmail(ctx, request.(SignInPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessSms operation middleware
func (sh *strictHandler) SignInPasswordlessSms(ctx *gin.Context) {
	var request SignInPasswordlessSmsRequestObject

	var body SignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessSms(ctx, request.(SignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInPasswordlessSms operation middleware
func (sh *strictHandler) VerifySignInPasswordlessSms(ctx *gin.Context) {
	var request VerifySignInPasswordlessSmsRequestObject

	var body VerifySignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInPasswordlessSms(ctx, request.(VerifySignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitVerifySignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPAT operation middleware
func (sh *strictHandler) SignInPAT(ctx *gin.Context) {
	var request SignInPATRequestObject

	var body SignInPATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPAT(ctx, request.(SignInPATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPATResponseObject); ok {
		if err := validResponse.VisitSignInPATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProvider operation middleware
func (sh *strictHandler) SignInProvider(ctx *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams) {
	var request SignInProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProvider(ctx, request.(SignInProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProvider")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderResponseObject); ok {
		if err := validResponse.VisitSignInProviderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackGet operation middleware
func (sh *strictHandler) SignInProviderCallbackGet(ctx *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams) {
	var request SignInProviderCallbackGetRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackGet(ctx, request.(SignInProviderCallbackGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackGetResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackPost operation middleware
func (sh *strictHandler) SignInProviderCallbackPost(ctx *gin.Context, provider SignInProviderCallbackPostParamsProvider) {
	var request SignInProviderCallbackPostRequestObject

	request.Provider = provider

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body SignInProviderCallbackPostFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackPost(ctx, request.(SignInProviderCallbackPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackPostResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInWebauthn operation middleware
func (sh *strictHandler) SignInWebauthn(ctx *gin.Context) {
	var request SignInWebauthnRequestObject

	var body SignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInWebauthn(ctx, request.(SignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInWebauthnResponseObject); ok {
		if err := validResponse.VisitSignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInWebauthn operation middleware
func (sh *strictHandler) VerifySignInWebauthn(ctx *gin.Context) {
	var request VerifySignInWebauthnRequestObject

	var body VerifySignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInWebauthn(ctx, request.(VerifySignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignOut operation middleware
func (sh *strictHandler) SignOut(ctx *gin.Context) {
	var request SignOutRequestObject

	var body SignOutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignOut(ctx, request.(SignOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignOutResponseObject); ok {
		if err := validResponse.VisitSignOutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpEmailPassword operation middleware
func (sh *strictHandler) SignUpEmailPassword(ctx *gin.Context) {
	var request SignUpEmailPasswordRequestObject

	var body SignUpEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpEmailPassword(ctx, request.(SignUpEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignUpEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpWebauthn operation middleware
func (sh *strictHandler) SignUpWebauthn(ctx *gin.Context) {
	var request SignUpWebauthnRequestObject

	var body SignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpWebauthn(ctx, request.(SignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitSignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignUpWebauthn operation middleware
func (sh *strictHandler) VerifySignUpWebauthn(ctx *gin.Context) {
	var request VerifySignUpWebauthnRequestObject

	var body VerifySignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignUpWebauthn(ctx, request.(VerifySignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyToken operation middleware
func (sh *strictHandler) VerifyToken(ctx *gin.Context) {
	var request VerifyTokenRequestObject

	var body VerifyTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyToken(ctx, request.(VerifyTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTokenResponseObject); ok {
		if err := validResponse.VisitVerifyTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context) {
	var request GetUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeanonymizeUser operation middleware
func (sh *strictHandler) DeanonymizeUser(ctx *gin.Context) {
	var request DeanonymizeUserRequestObject

	var body DeanonymizeUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeanonymizeUser(ctx, request.(DeanonymizeUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeanonymizeUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeanonymizeUserResponseObject); ok {
		if err := validResponse.VisitDeanonymizeUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserEmail operation middleware
func (sh *strictHandler) ChangeUserEmail(ctx *gin.Context) {
	var request ChangeUserEmailRequestObject

	var body ChangeUserEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserEmail(ctx, request.(ChangeUserEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserEmailResponseObject); ok {
		if err := validResponse.VisitChangeUserEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendVerificationEmail operation middleware
func (sh *strictHandler) SendVerificationEmail(ctx *gin.Context) {
	var request SendVerificationEmailRequestObject

	var body SendVerificationEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendVerificationEmail(ctx, request.(SendVerificationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendVerificationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendVerificationEmailResponseObject); ok {
		if err := validResponse.VisitSendVerificationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyChangeUserMfa operation middleware
func (sh *strictHandler) VerifyChangeUserMfa(ctx *gin.Context) {
	var request VerifyChangeUserMfaRequestObject

	var body VerifyChangeUserMfaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyChangeUserMfa(ctx, request.(VerifyChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitVerifyChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserPassword operation middleware
func (sh *strictHandler) ChangeUserPassword(ctx *gin.Context) {
	var request ChangeUserPasswordRequestObject

	var body ChangeUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserPassword(ctx, request.(ChangeUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserPasswordResponseObject); ok {
		if err := validResponse.VisitChangeUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendPasswordResetEmail operation middleware
func (sh *strictHandler) SendPasswordResetEmail(ctx *gin.Context) {
	var request SendPasswordResetEmailRequestObject

	var body SendPasswordResetEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendPasswordResetEmail(ctx, request.(SendPasswordResetEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendPasswordResetEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendPasswordResetEmailResponseObject); ok {
		if err := validResponse.VisitSendPasswordResetEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProviderTokens operation middleware
func (sh *strictHandler) GetProviderTokens(ctx *gin.Context, provider GetProviderTokensParamsProvider, params GetProviderTokensParams) {
	var request GetProviderTokensRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProviderTokens(ctx, request.(GetProviderTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProviderTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProviderTokensResponseObject); ok {
		if err := validResponse.VisitGetProviderTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddSecurityKey operation middleware
func (sh *strictHandler) AddSecurityKey(ctx *gin.Context) {
	var request AddSecurityKeyRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddSecurityKey(ctx, request.(AddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAddSecurityKey operation middleware
func (sh *strictHandler) VerifyAddSecurityKey(ctx *gin.Context) {
	var request VerifyAddSecurityKeyRequestObject

	var body VerifyAddSecurityKeyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAddSecurityKey(ctx, request.(VerifyAddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyAddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitVerifyAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyTicket operation middleware
func (sh *strictHandler) VerifyTicket(ctx *gin.Context, params VerifyTicketParams) {
	var request VerifyTicketRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyTicket(ctx, request.(VerifyTicketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyTicket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTicketResponseObject); ok {
		if err := validResponse.VisitVerifyTicketResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *gin.Context) {
	var request GetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jquvV/8/AAD//y17AHj//gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
