// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(c *gin.Context)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(c *gin.Context)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(c *gin.Context)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(c *gin.Context)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(c *gin.Context)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(c *gin.Context)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(c *gin.Context)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(c *gin.Context)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(c *gin.Context)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(c *gin.Context)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(c *gin.Context)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(c *gin.Context)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(c *gin.Context)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(c *gin.Context)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(c *gin.Context)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(c *gin.Context)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(c *gin.Context)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(c *gin.Context)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(c *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(c *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(c *gin.Context, provider SignInProviderCallbackPostParamsProvider)
	// Retrieve OAuth2 provider tokens from callback
	// (GET /signin/provider/{provider}/callback/tokens)
	GetProviderTokens(c *gin.Context, provider GetProviderTokensParamsProvider)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(c *gin.Context)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(c *gin.Context)
	// Sign out
	// (POST /signout)
	SignOut(c *gin.Context)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(c *gin.Context)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(c *gin.Context)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(c *gin.Context)
	// Refresh access token
	// (POST /token)
	RefreshToken(c *gin.Context)
	// Refresh OAuth2 provider tokens
	// (POST /token/provider/{provider})
	RefreshProviderToken(c *gin.Context, provider RefreshProviderTokenParamsProvider)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(c *gin.Context)
	// Get user information
	// (GET /user)
	GetUser(c *gin.Context)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(c *gin.Context)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(c *gin.Context)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(c *gin.Context)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(c *gin.Context)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(c *gin.Context)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(c *gin.Context)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(c *gin.Context)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(c *gin.Context)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(c *gin.Context, params VerifyTicketParams)
	// Get service version
	// (GET /version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetJWKs operation middleware
func (siw *ServerInterfaceWrapper) GetJWKs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKs(c)
}

// ElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) ElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ElevateWebauthn(c)
}

// VerifyElevateWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifyElevateWebauthn(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyElevateWebauthn(c)
}

// HealthCheckGet operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckGet(c)
}

// HealthCheckHead operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckHead(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckHead(c)
}

// LinkIdToken operation middleware
func (siw *ServerInterfaceWrapper) LinkIdToken(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LinkIdToken(c)
}

// ChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserMfa(c)
}

// CreatePAT operation middleware
func (siw *ServerInterfaceWrapper) CreatePAT(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePAT(c)
}

// SignInAnonymous operation middleware
func (siw *ServerInterfaceWrapper) SignInAnonymous(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInAnonymous(c)
}

// SignInEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignInEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInEmailPassword(c)
}

// SignInIdToken operation middleware
func (siw *ServerInterfaceWrapper) SignInIdToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInIdToken(c)
}

// VerifySignInMfaTotp operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInMfaTotp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInMfaTotp(c)
}

// SignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInOTPEmail(c)
}

// VerifySignInOTPEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInOTPEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInOTPEmail(c)
}

// SignInPasswordlessEmail operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessEmail(c)
}

// SignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) SignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPasswordlessSms(c)
}

// VerifySignInPasswordlessSms operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInPasswordlessSms(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInPasswordlessSms(c)
}

// SignInPAT operation middleware
func (siw *ServerInterfaceWrapper) SignInPAT(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInPAT(c)
}

// SignInProvider operation middleware
func (siw *ServerInterfaceWrapper) SignInProvider(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderParams

	// ------------- Optional query parameter "allowedRoles" -------------

	err = runtime.BindQueryParameter("form", false, false, "allowedRoles", c.Request.URL.Query(), &params.AllowedRoles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter allowedRoles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "defaultRole" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultRole", c.Request.URL.Query(), &params.DefaultRole)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter defaultRole: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "locale" -------------

	err = runtime.BindQueryParameter("form", true, false, "locale", c.Request.URL.Query(), &params.Locale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter locale: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "metadata" -------------

	if paramValue := c.Query("metadata"); paramValue != "" {

		var value map[string]interface{}
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'metadata' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Metadata = &value

	}

	// ------------- Optional query parameter "redirectTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connect" -------------

	err = runtime.BindQueryParameter("form", true, false, "connect", c.Request.URL.Query(), &params.Connect)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connect: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProvider(c, provider, params)
}

// SignInProviderCallbackGet operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackGetParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SignInProviderCallbackGetParams

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_token", c.Request.URL.Query(), &params.IdToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_token", c.Request.URL.Query(), &params.OauthToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_token: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "oauth_verifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "oauth_verifier", c.Request.URL.Query(), &params.OauthVerifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter oauth_verifier: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", c.Request.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", c.Request.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_uri", c.Request.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter error_uri: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackGet(c, provider, params)
}

// SignInProviderCallbackPost operation middleware
func (siw *ServerInterfaceWrapper) SignInProviderCallbackPost(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SignInProviderCallbackPostParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInProviderCallbackPost(c, provider)
}

// GetProviderTokens operation middleware
func (siw *ServerInterfaceWrapper) GetProviderTokens(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider GetProviderTokensParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProviderTokens(c, provider)
}

// SignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignInWebauthn(c)
}

// VerifySignInWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignInWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignInWebauthn(c)
}

// SignOut operation middleware
func (siw *ServerInterfaceWrapper) SignOut(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOut(c)
}

// SignUpEmailPassword operation middleware
func (siw *ServerInterfaceWrapper) SignUpEmailPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpEmailPassword(c)
}

// SignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) SignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUpWebauthn(c)
}

// VerifySignUpWebauthn operation middleware
func (siw *ServerInterfaceWrapper) VerifySignUpWebauthn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignUpWebauthn(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// RefreshProviderToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshProviderToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider RefreshProviderTokenParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshProviderToken(c, provider)
}

// VerifyToken operation middleware
func (siw *ServerInterfaceWrapper) VerifyToken(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyToken(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c)
}

// DeanonymizeUser operation middleware
func (siw *ServerInterfaceWrapper) DeanonymizeUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeanonymizeUser(c)
}

// ChangeUserEmail operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserEmail(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserEmail(c)
}

// SendVerificationEmail operation middleware
func (siw *ServerInterfaceWrapper) SendVerificationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendVerificationEmail(c)
}

// VerifyChangeUserMfa operation middleware
func (siw *ServerInterfaceWrapper) VerifyChangeUserMfa(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyChangeUserMfa(c)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserPassword(c)
}

// SendPasswordResetEmail operation middleware
func (siw *ServerInterfaceWrapper) SendPasswordResetEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendPasswordResetEmail(c)
}

// AddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) AddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddSecurityKey(c)
}

// VerifyAddSecurityKey operation middleware
func (siw *ServerInterfaceWrapper) VerifyAddSecurityKey(c *gin.Context) {

	c.Set(BearerAuthElevatedScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyAddSecurityKey(c)
}

// VerifyTicket operation middleware
func (siw *ServerInterfaceWrapper) VerifyTicket(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyTicketParams

	// ------------- Required query parameter "ticket" -------------

	if paramValue := c.Query("ticket"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticket is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticket", c.Request.URL.Query(), &params.Ticket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirectTo" -------------

	if paramValue := c.Query("redirectTo"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectTo is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectTo", c.Request.URL.Query(), &params.RedirectTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectTo: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyTicket(c, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKs)
	router.POST(options.BaseURL+"/elevate/webauthn", wrapper.ElevateWebauthn)
	router.POST(options.BaseURL+"/elevate/webauthn/verify", wrapper.VerifyElevateWebauthn)
	router.GET(options.BaseURL+"/healthz", wrapper.HealthCheckGet)
	router.HEAD(options.BaseURL+"/healthz", wrapper.HealthCheckHead)
	router.POST(options.BaseURL+"/link/idtoken", wrapper.LinkIdToken)
	router.GET(options.BaseURL+"/mfa/totp/generate", wrapper.ChangeUserMfa)
	router.POST(options.BaseURL+"/pat", wrapper.CreatePAT)
	router.POST(options.BaseURL+"/signin/anonymous", wrapper.SignInAnonymous)
	router.POST(options.BaseURL+"/signin/email-password", wrapper.SignInEmailPassword)
	router.POST(options.BaseURL+"/signin/idtoken", wrapper.SignInIdToken)
	router.POST(options.BaseURL+"/signin/mfa/totp", wrapper.VerifySignInMfaTotp)
	router.POST(options.BaseURL+"/signin/otp/email", wrapper.SignInOTPEmail)
	router.POST(options.BaseURL+"/signin/otp/email/verify", wrapper.VerifySignInOTPEmail)
	router.POST(options.BaseURL+"/signin/passwordless/email", wrapper.SignInPasswordlessEmail)
	router.POST(options.BaseURL+"/signin/passwordless/sms", wrapper.SignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/passwordless/sms/otp", wrapper.VerifySignInPasswordlessSms)
	router.POST(options.BaseURL+"/signin/pat", wrapper.SignInPAT)
	router.GET(options.BaseURL+"/signin/provider/:provider", wrapper.SignInProvider)
	router.GET(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackGet)
	router.POST(options.BaseURL+"/signin/provider/:provider/callback", wrapper.SignInProviderCallbackPost)
	router.GET(options.BaseURL+"/signin/provider/:provider/callback/tokens", wrapper.GetProviderTokens)
	router.POST(options.BaseURL+"/signin/webauthn", wrapper.SignInWebauthn)
	router.POST(options.BaseURL+"/signin/webauthn/verify", wrapper.VerifySignInWebauthn)
	router.POST(options.BaseURL+"/signout", wrapper.SignOut)
	router.POST(options.BaseURL+"/signup/email-password", wrapper.SignUpEmailPassword)
	router.POST(options.BaseURL+"/signup/webauthn", wrapper.SignUpWebauthn)
	router.POST(options.BaseURL+"/signup/webauthn/verify", wrapper.VerifySignUpWebauthn)
	router.POST(options.BaseURL+"/token", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/token/provider/:provider", wrapper.RefreshProviderToken)
	router.POST(options.BaseURL+"/token/verify", wrapper.VerifyToken)
	router.GET(options.BaseURL+"/user", wrapper.GetUser)
	router.POST(options.BaseURL+"/user/deanonymize", wrapper.DeanonymizeUser)
	router.POST(options.BaseURL+"/user/email/change", wrapper.ChangeUserEmail)
	router.POST(options.BaseURL+"/user/email/send-verification-email", wrapper.SendVerificationEmail)
	router.POST(options.BaseURL+"/user/mfa", wrapper.VerifyChangeUserMfa)
	router.POST(options.BaseURL+"/user/password", wrapper.ChangeUserPassword)
	router.POST(options.BaseURL+"/user/password/reset", wrapper.SendPasswordResetEmail)
	router.POST(options.BaseURL+"/user/webauthn/add", wrapper.AddSecurityKey)
	router.POST(options.BaseURL+"/user/webauthn/verify", wrapper.VerifyAddSecurityKey)
	router.GET(options.BaseURL+"/verify", wrapper.VerifyTicket)
	router.GET(options.BaseURL+"/version", wrapper.GetVersion)
}

type GetJWKsRequestObject struct {
}

type GetJWKsResponseObject interface {
	VisitGetJWKsResponse(w http.ResponseWriter) error
}

type GetJWKs200JSONResponse JWKSet

func (response GetJWKs200JSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJWKsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetJWKsdefaultJSONResponse) VisitGetJWKsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ElevateWebauthnRequestObject struct {
}

type ElevateWebauthnResponseObject interface {
	VisitElevateWebauthnResponse(w http.ResponseWriter) error
}

type ElevateWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response ElevateWebauthn200JSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ElevateWebauthndefaultJSONResponse) VisitElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyElevateWebauthnRequestObject struct {
	Body *VerifyElevateWebauthnJSONRequestBody
}

type VerifyElevateWebauthnResponseObject interface {
	VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error
}

type VerifyElevateWebauthn200JSONResponse SessionPayload

func (response VerifyElevateWebauthn200JSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyElevateWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyElevateWebauthndefaultJSONResponse) VisitVerifyElevateWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckGetRequestObject struct {
}

type HealthCheckGetResponseObject interface {
	VisitHealthCheckGetResponse(w http.ResponseWriter) error
}

type HealthCheckGet200JSONResponse OKResponse

func (response HealthCheckGet200JSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckGetdefaultJSONResponse) VisitHealthCheckGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HealthCheckHeadRequestObject struct {
}

type HealthCheckHeadResponseObject interface {
	VisitHealthCheckHeadResponse(w http.ResponseWriter) error
}

type HealthCheckHead200Response struct {
}

func (response HealthCheckHead200Response) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthCheckHeaddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HealthCheckHeaddefaultJSONResponse) VisitHealthCheckHeadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LinkIdTokenRequestObject struct {
	Body *LinkIdTokenJSONRequestBody
}

type LinkIdTokenResponseObject interface {
	VisitLinkIdTokenResponse(w http.ResponseWriter) error
}

type LinkIdToken200JSONResponse OKResponse

func (response LinkIdToken200JSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response LinkIdTokendefaultJSONResponse) VisitLinkIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserMfaRequestObject struct {
}

type ChangeUserMfaResponseObject interface {
	VisitChangeUserMfaResponse(w http.ResponseWriter) error
}

type ChangeUserMfa200JSONResponse TotpGenerateResponse

func (response ChangeUserMfa200JSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserMfadefaultJSONResponse) VisitChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePATRequestObject struct {
	Body *CreatePATJSONRequestBody
}

type CreatePATResponseObject interface {
	VisitCreatePATResponse(w http.ResponseWriter) error
}

type CreatePAT200JSONResponse CreatePATResponse

func (response CreatePAT200JSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response CreatePATdefaultJSONResponse) VisitCreatePATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInAnonymousRequestObject struct {
	Body *SignInAnonymousJSONRequestBody
}

type SignInAnonymousResponseObject interface {
	VisitSignInAnonymousResponse(w http.ResponseWriter) error
}

type SignInAnonymous200JSONResponse SessionPayload

func (response SignInAnonymous200JSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInAnonymousdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInAnonymousdefaultJSONResponse) VisitSignInAnonymousResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInEmailPasswordRequestObject struct {
	Body *SignInEmailPasswordJSONRequestBody
}

type SignInEmailPasswordResponseObject interface {
	VisitSignInEmailPasswordResponse(w http.ResponseWriter) error
}

type SignInEmailPassword200JSONResponse SignInEmailPasswordResponse

func (response SignInEmailPassword200JSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInEmailPassworddefaultJSONResponse) VisitSignInEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInIdTokenRequestObject struct {
	Body *SignInIdTokenJSONRequestBody
}

type SignInIdTokenResponseObject interface {
	VisitSignInIdTokenResponse(w http.ResponseWriter) error
}

type SignInIdToken200JSONResponse SessionPayload

func (response SignInIdToken200JSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInIdTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInIdTokendefaultJSONResponse) VisitSignInIdTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInMfaTotpRequestObject struct {
	Body *VerifySignInMfaTotpJSONRequestBody
}

type VerifySignInMfaTotpResponseObject interface {
	VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error
}

type VerifySignInMfaTotp200JSONResponse SessionPayload

func (response VerifySignInMfaTotp200JSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInMfaTotpdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInMfaTotpdefaultJSONResponse) VisitVerifySignInMfaTotpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInOTPEmailRequestObject struct {
	Body *SignInOTPEmailJSONRequestBody
}

type SignInOTPEmailResponseObject interface {
	VisitSignInOTPEmailResponse(w http.ResponseWriter) error
}

type SignInOTPEmail200JSONResponse OKResponse

func (response SignInOTPEmail200JSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInOTPEmaildefaultJSONResponse) VisitSignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInOTPEmailRequestObject struct {
	Body *VerifySignInOTPEmailJSONRequestBody
}

type VerifySignInOTPEmailResponseObject interface {
	VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error
}

type VerifySignInOTPEmail200JSONResponse SignInOTPEmailVerifyResponse

func (response VerifySignInOTPEmail200JSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInOTPEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInOTPEmaildefaultJSONResponse) VisitVerifySignInOTPEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessEmailRequestObject struct {
	Body *SignInPasswordlessEmailJSONRequestBody
}

type SignInPasswordlessEmailResponseObject interface {
	VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error
}

type SignInPasswordlessEmail200JSONResponse OKResponse

func (response SignInPasswordlessEmail200JSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessEmaildefaultJSONResponse) VisitSignInPasswordlessEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPasswordlessSmsRequestObject struct {
	Body *SignInPasswordlessSmsJSONRequestBody
}

type SignInPasswordlessSmsResponseObject interface {
	VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type SignInPasswordlessSms200JSONResponse OKResponse

func (response SignInPasswordlessSms200JSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPasswordlessSmsdefaultJSONResponse) VisitSignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInPasswordlessSmsRequestObject struct {
	Body *VerifySignInPasswordlessSmsJSONRequestBody
}

type VerifySignInPasswordlessSmsResponseObject interface {
	VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error
}

type VerifySignInPasswordlessSms200JSONResponse SignInPasswordlessSmsOtpResponse

func (response VerifySignInPasswordlessSms200JSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInPasswordlessSmsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInPasswordlessSmsdefaultJSONResponse) VisitVerifySignInPasswordlessSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInPATRequestObject struct {
	Body *SignInPATJSONRequestBody
}

type SignInPATResponseObject interface {
	VisitSignInPATResponse(w http.ResponseWriter) error
}

type SignInPAT200JSONResponse SessionPayload

func (response SignInPAT200JSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInPATdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInPATdefaultJSONResponse) VisitSignInPATResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderRequestObject struct {
	Provider SignInProviderParamsProvider `json:"provider"`
	Params   SignInProviderParams
}

type SignInProviderResponseObject interface {
	VisitSignInProviderResponse(w http.ResponseWriter) error
}

type SignInProvider302ResponseHeaders struct {
	Location string
}

type SignInProvider302Response struct {
	Headers SignInProvider302ResponseHeaders
}

func (response SignInProvider302Response) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderdefaultJSONResponse) VisitSignInProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackGetRequestObject struct {
	Provider SignInProviderCallbackGetParamsProvider `json:"provider"`
	Params   SignInProviderCallbackGetParams
}

type SignInProviderCallbackGetResponseObject interface {
	VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackGet302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackGet302Response struct {
	Headers SignInProviderCallbackGet302ResponseHeaders
}

func (response SignInProviderCallbackGet302Response) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackGetdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackGetdefaultJSONResponse) VisitSignInProviderCallbackGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInProviderCallbackPostRequestObject struct {
	Provider SignInProviderCallbackPostParamsProvider `json:"provider"`
	Body     *SignInProviderCallbackPostFormdataRequestBody
}

type SignInProviderCallbackPostResponseObject interface {
	VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error
}

type SignInProviderCallbackPost302ResponseHeaders struct {
	Location string
}

type SignInProviderCallbackPost302Response struct {
	Headers SignInProviderCallbackPost302ResponseHeaders
}

func (response SignInProviderCallbackPost302Response) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type SignInProviderCallbackPostdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInProviderCallbackPostdefaultJSONResponse) VisitSignInProviderCallbackPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProviderTokensRequestObject struct {
	Provider GetProviderTokensParamsProvider `json:"provider"`
}

type GetProviderTokensResponseObject interface {
	VisitGetProviderTokensResponse(w http.ResponseWriter) error
}

type GetProviderTokens200JSONResponse ProviderSession

func (response GetProviderTokens200JSONResponse) VisitGetProviderTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProviderTokensdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetProviderTokensdefaultJSONResponse) VisitGetProviderTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignInWebauthnRequestObject struct {
	Body *SignInWebauthnJSONRequestBody
}

type SignInWebauthnResponseObject interface {
	VisitSignInWebauthnResponse(w http.ResponseWriter) error
}

type SignInWebauthn200JSONResponse PublicKeyCredentialRequestOptions

func (response SignInWebauthn200JSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignInWebauthndefaultJSONResponse) VisitSignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignInWebauthnRequestObject struct {
	Body *VerifySignInWebauthnJSONRequestBody
}

type VerifySignInWebauthnResponseObject interface {
	VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignInWebauthn200JSONResponse SessionPayload

func (response VerifySignInWebauthn200JSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignInWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignInWebauthndefaultJSONResponse) VisitVerifySignInWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignOutRequestObject struct {
	Body *SignOutJSONRequestBody
}

type SignOutResponseObject interface {
	VisitSignOutResponse(w http.ResponseWriter) error
}

type SignOut200JSONResponse OKResponse

func (response SignOut200JSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignOutdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignOutdefaultJSONResponse) VisitSignOutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpEmailPasswordRequestObject struct {
	Body *SignUpEmailPasswordJSONRequestBody
}

type SignUpEmailPasswordResponseObject interface {
	VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error
}

type SignUpEmailPassword200JSONResponse SessionPayload

func (response SignUpEmailPassword200JSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpEmailPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpEmailPassworddefaultJSONResponse) VisitSignUpEmailPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SignUpWebauthnRequestObject struct {
	Body *SignUpWebauthnJSONRequestBody
}

type SignUpWebauthnResponseObject interface {
	VisitSignUpWebauthnResponse(w http.ResponseWriter) error
}

type SignUpWebauthn200JSONResponse PublicKeyCredentialCreationOptions

func (response SignUpWebauthn200JSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SignUpWebauthndefaultJSONResponse) VisitSignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifySignUpWebauthnRequestObject struct {
	Body *VerifySignUpWebauthnJSONRequestBody
}

type VerifySignUpWebauthnResponseObject interface {
	VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error
}

type VerifySignUpWebauthn200JSONResponse SessionPayload

func (response VerifySignUpWebauthn200JSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifySignUpWebauthndefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifySignUpWebauthndefaultJSONResponse) VisitVerifySignUpWebauthnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse Session

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response RefreshTokendefaultJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshProviderTokenRequestObject struct {
	Provider RefreshProviderTokenParamsProvider `json:"provider"`
	Body     *RefreshProviderTokenJSONRequestBody
}

type RefreshProviderTokenResponseObject interface {
	VisitRefreshProviderTokenResponse(w http.ResponseWriter) error
}

type RefreshProviderToken200JSONResponse ProviderSession

func (response RefreshProviderToken200JSONResponse) VisitRefreshProviderTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshProviderTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response RefreshProviderTokendefaultJSONResponse) VisitRefreshProviderTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTokenRequestObject struct {
	Body *VerifyTokenJSONRequestBody
}

type VerifyTokenResponseObject interface {
	VisitVerifyTokenResponse(w http.ResponseWriter) error
}

type VerifyToken200JSONResponse string

func (response VerifyToken200JSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyTokendefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTokendefaultJSONResponse) VisitVerifyTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUserdefaultJSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeanonymizeUserRequestObject struct {
	Body *DeanonymizeUserJSONRequestBody
}

type DeanonymizeUserResponseObject interface {
	VisitDeanonymizeUserResponse(w http.ResponseWriter) error
}

type DeanonymizeUser200JSONResponse OKResponse

func (response DeanonymizeUser200JSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeanonymizeUserdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeanonymizeUserdefaultJSONResponse) VisitDeanonymizeUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserEmailRequestObject struct {
	Body *ChangeUserEmailJSONRequestBody
}

type ChangeUserEmailResponseObject interface {
	VisitChangeUserEmailResponse(w http.ResponseWriter) error
}

type ChangeUserEmail200JSONResponse OKResponse

func (response ChangeUserEmail200JSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserEmaildefaultJSONResponse) VisitChangeUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendVerificationEmailRequestObject struct {
	Body *SendVerificationEmailJSONRequestBody
}

type SendVerificationEmailResponseObject interface {
	VisitSendVerificationEmailResponse(w http.ResponseWriter) error
}

type SendVerificationEmail200JSONResponse OKResponse

func (response SendVerificationEmail200JSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendVerificationEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendVerificationEmaildefaultJSONResponse) VisitSendVerificationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyChangeUserMfaRequestObject struct {
	Body *VerifyChangeUserMfaJSONRequestBody
}

type VerifyChangeUserMfaResponseObject interface {
	VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error
}

type VerifyChangeUserMfa200JSONResponse OKResponse

func (response VerifyChangeUserMfa200JSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyChangeUserMfadefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyChangeUserMfadefaultJSONResponse) VisitVerifyChangeUserMfaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ChangeUserPasswordRequestObject struct {
	Body *ChangeUserPasswordJSONRequestBody
}

type ChangeUserPasswordResponseObject interface {
	VisitChangeUserPasswordResponse(w http.ResponseWriter) error
}

type ChangeUserPassword200JSONResponse OKResponse

func (response ChangeUserPassword200JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPassworddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response ChangeUserPassworddefaultJSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendPasswordResetEmailRequestObject struct {
	Body *SendPasswordResetEmailJSONRequestBody
}

type SendPasswordResetEmailResponseObject interface {
	VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error
}

type SendPasswordResetEmail200JSONResponse OKResponse

func (response SendPasswordResetEmail200JSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendPasswordResetEmaildefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response SendPasswordResetEmaildefaultJSONResponse) VisitSendPasswordResetEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddSecurityKeyRequestObject struct {
}

type AddSecurityKeyResponseObject interface {
	VisitAddSecurityKeyResponse(w http.ResponseWriter) error
}

type AddSecurityKey200JSONResponse PublicKeyCredentialCreationOptions

func (response AddSecurityKey200JSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response AddSecurityKeydefaultJSONResponse) VisitAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyAddSecurityKeyRequestObject struct {
	Body *VerifyAddSecurityKeyJSONRequestBody
}

type VerifyAddSecurityKeyResponseObject interface {
	VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error
}

type VerifyAddSecurityKey200JSONResponse VerifyAddSecurityKeyResponse

func (response VerifyAddSecurityKey200JSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAddSecurityKeydefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyAddSecurityKeydefaultJSONResponse) VisitVerifyAddSecurityKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyTicketRequestObject struct {
	Params VerifyTicketParams
}

type VerifyTicketResponseObject interface {
	VisitVerifyTicketResponse(w http.ResponseWriter) error
}

type VerifyTicket302ResponseHeaders struct {
	Location string
}

type VerifyTicket302Response struct {
	Headers VerifyTicket302ResponseHeaders
}

func (response VerifyTicket302Response) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type VerifyTicketdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response VerifyTicketdefaultJSONResponse) VisitVerifyTicketResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(w http.ResponseWriter) error
}

type GetVersion200JSONResponse struct {
	// Version The version of the authentication service
	Version string `json:"version"`
}

func (response GetVersion200JSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVersiondefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetVersiondefaultJSONResponse) VisitGetVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get public keys for JWT verification in JWK Set format
	// (GET /.well-known/jwks.json)
	GetJWKs(ctx context.Context, request GetJWKsRequestObject) (GetJWKsResponseObject, error)
	// Elevate access for an already signed in user using FIDO2 Webauthn
	// (POST /elevate/webauthn)
	ElevateWebauthn(ctx context.Context, request ElevateWebauthnRequestObject) (ElevateWebauthnResponseObject, error)
	// Verify FIDO2 Webauthn authentication using public-key cryptography for elevation
	// (POST /elevate/webauthn/verify)
	VerifyElevateWebauthn(ctx context.Context, request VerifyElevateWebauthnRequestObject) (VerifyElevateWebauthnResponseObject, error)
	// Health check (GET)
	// (GET /healthz)
	HealthCheckGet(ctx context.Context, request HealthCheckGetRequestObject) (HealthCheckGetResponseObject, error)
	// Health check (HEAD)
	// (HEAD /healthz)
	HealthCheckHead(ctx context.Context, request HealthCheckHeadRequestObject) (HealthCheckHeadResponseObject, error)
	// Link a user account with the provider's account using an id token
	// (POST /link/idtoken)
	LinkIdToken(ctx context.Context, request LinkIdTokenRequestObject) (LinkIdTokenResponseObject, error)
	// Generate TOTP secret
	// (GET /mfa/totp/generate)
	ChangeUserMfa(ctx context.Context, request ChangeUserMfaRequestObject) (ChangeUserMfaResponseObject, error)
	// Create a Personal Access Token (PAT)
	// (POST /pat)
	CreatePAT(ctx context.Context, request CreatePATRequestObject) (CreatePATResponseObject, error)
	// Sign in anonymously
	// (POST /signin/anonymous)
	SignInAnonymous(ctx context.Context, request SignInAnonymousRequestObject) (SignInAnonymousResponseObject, error)
	// Sign in with email and password
	// (POST /signin/email-password)
	SignInEmailPassword(ctx context.Context, request SignInEmailPasswordRequestObject) (SignInEmailPasswordResponseObject, error)
	// Sign in with an ID token
	// (POST /signin/idtoken)
	SignInIdToken(ctx context.Context, request SignInIdTokenRequestObject) (SignInIdTokenResponseObject, error)
	// Verify TOTP for MFA
	// (POST /signin/mfa/totp)
	VerifySignInMfaTotp(ctx context.Context, request VerifySignInMfaTotpRequestObject) (VerifySignInMfaTotpResponseObject, error)
	// Sign in with email OTP
	// (POST /signin/otp/email)
	SignInOTPEmail(ctx context.Context, request SignInOTPEmailRequestObject) (SignInOTPEmailResponseObject, error)
	// Verify email OTP
	// (POST /signin/otp/email/verify)
	VerifySignInOTPEmail(ctx context.Context, request VerifySignInOTPEmailRequestObject) (VerifySignInOTPEmailResponseObject, error)
	// Sign in with magic link email
	// (POST /signin/passwordless/email)
	SignInPasswordlessEmail(ctx context.Context, request SignInPasswordlessEmailRequestObject) (SignInPasswordlessEmailResponseObject, error)
	// Sign in with SMS OTP
	// (POST /signin/passwordless/sms)
	SignInPasswordlessSms(ctx context.Context, request SignInPasswordlessSmsRequestObject) (SignInPasswordlessSmsResponseObject, error)
	// Verify SMS OTP
	// (POST /signin/passwordless/sms/otp)
	VerifySignInPasswordlessSms(ctx context.Context, request VerifySignInPasswordlessSmsRequestObject) (VerifySignInPasswordlessSmsResponseObject, error)
	// Sign in with Personal Access Token (PAT)
	// (POST /signin/pat)
	SignInPAT(ctx context.Context, request SignInPATRequestObject) (SignInPATResponseObject, error)
	// Sign in with an OAuth2 provider
	// (GET /signin/provider/{provider})
	SignInProvider(ctx context.Context, request SignInProviderRequestObject) (SignInProviderResponseObject, error)
	// OAuth2 provider callback endpoint
	// (GET /signin/provider/{provider}/callback)
	SignInProviderCallbackGet(ctx context.Context, request SignInProviderCallbackGetRequestObject) (SignInProviderCallbackGetResponseObject, error)
	// OAuth2 provider callback endpoint (form_post)
	// (POST /signin/provider/{provider}/callback)
	SignInProviderCallbackPost(ctx context.Context, request SignInProviderCallbackPostRequestObject) (SignInProviderCallbackPostResponseObject, error)
	// Retrieve OAuth2 provider tokens from callback
	// (GET /signin/provider/{provider}/callback/tokens)
	GetProviderTokens(ctx context.Context, request GetProviderTokensRequestObject) (GetProviderTokensResponseObject, error)
	// Sign in with Webauthn
	// (POST /signin/webauthn)
	SignInWebauthn(ctx context.Context, request SignInWebauthnRequestObject) (SignInWebauthnResponseObject, error)
	// Verify Webauthn sign-in
	// (POST /signin/webauthn/verify)
	VerifySignInWebauthn(ctx context.Context, request VerifySignInWebauthnRequestObject) (VerifySignInWebauthnResponseObject, error)
	// Sign out
	// (POST /signout)
	SignOut(ctx context.Context, request SignOutRequestObject) (SignOutResponseObject, error)
	// Sign up with email and password
	// (POST /signup/email-password)
	SignUpEmailPassword(ctx context.Context, request SignUpEmailPasswordRequestObject) (SignUpEmailPasswordResponseObject, error)
	// Sign up with Webauthn
	// (POST /signup/webauthn)
	SignUpWebauthn(ctx context.Context, request SignUpWebauthnRequestObject) (SignUpWebauthnResponseObject, error)
	// Verify Webauthn sign-up
	// (POST /signup/webauthn/verify)
	VerifySignUpWebauthn(ctx context.Context, request VerifySignUpWebauthnRequestObject) (VerifySignUpWebauthnResponseObject, error)
	// Refresh access token
	// (POST /token)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)
	// Refresh OAuth2 provider tokens
	// (POST /token/provider/{provider})
	RefreshProviderToken(ctx context.Context, request RefreshProviderTokenRequestObject) (RefreshProviderTokenResponseObject, error)
	// Verify JWT token
	// (POST /token/verify)
	VerifyToken(ctx context.Context, request VerifyTokenRequestObject) (VerifyTokenResponseObject, error)
	// Get user information
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Deanonymize an anonymous user
	// (POST /user/deanonymize)
	DeanonymizeUser(ctx context.Context, request DeanonymizeUserRequestObject) (DeanonymizeUserResponseObject, error)
	// Change user email
	// (POST /user/email/change)
	ChangeUserEmail(ctx context.Context, request ChangeUserEmailRequestObject) (ChangeUserEmailResponseObject, error)
	// Send verification email
	// (POST /user/email/send-verification-email)
	SendVerificationEmail(ctx context.Context, request SendVerificationEmailRequestObject) (SendVerificationEmailResponseObject, error)
	// Manage multi-factor authentication
	// (POST /user/mfa)
	VerifyChangeUserMfa(ctx context.Context, request VerifyChangeUserMfaRequestObject) (VerifyChangeUserMfaResponseObject, error)
	// Change user password
	// (POST /user/password)
	ChangeUserPassword(ctx context.Context, request ChangeUserPasswordRequestObject) (ChangeUserPasswordResponseObject, error)
	// Request password reset
	// (POST /user/password/reset)
	SendPasswordResetEmail(ctx context.Context, request SendPasswordResetEmailRequestObject) (SendPasswordResetEmailResponseObject, error)
	// Initialize adding of a new webauthn security key
	// (POST /user/webauthn/add)
	AddSecurityKey(ctx context.Context, request AddSecurityKeyRequestObject) (AddSecurityKeyResponseObject, error)
	// Verify adding of a new webauthn security key
	// (POST /user/webauthn/verify)
	VerifyAddSecurityKey(ctx context.Context, request VerifyAddSecurityKeyRequestObject) (VerifyAddSecurityKeyResponseObject, error)
	// Verify email and authentication tickets
	// (GET /verify)
	VerifyTicket(ctx context.Context, request VerifyTicketRequestObject) (VerifyTicketResponseObject, error)
	// Get service version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetJWKs operation middleware
func (sh *strictHandler) GetJWKs(ctx *gin.Context) {
	var request GetJWKsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJWKs(ctx, request.(GetJWKsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJWKs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJWKsResponseObject); ok {
		if err := validResponse.VisitGetJWKsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ElevateWebauthn operation middleware
func (sh *strictHandler) ElevateWebauthn(ctx *gin.Context) {
	var request ElevateWebauthnRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ElevateWebauthn(ctx, request.(ElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyElevateWebauthn operation middleware
func (sh *strictHandler) VerifyElevateWebauthn(ctx *gin.Context) {
	var request VerifyElevateWebauthnRequestObject

	var body VerifyElevateWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyElevateWebauthn(ctx, request.(VerifyElevateWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyElevateWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyElevateWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifyElevateWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckGet operation middleware
func (sh *strictHandler) HealthCheckGet(ctx *gin.Context) {
	var request HealthCheckGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckGet(ctx, request.(HealthCheckGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckGetResponseObject); ok {
		if err := validResponse.VisitHealthCheckGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheckHead operation middleware
func (sh *strictHandler) HealthCheckHead(ctx *gin.Context) {
	var request HealthCheckHeadRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckHead(ctx, request.(HealthCheckHeadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckHead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthCheckHeadResponseObject); ok {
		if err := validResponse.VisitHealthCheckHeadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LinkIdToken operation middleware
func (sh *strictHandler) LinkIdToken(ctx *gin.Context) {
	var request LinkIdTokenRequestObject

	var body LinkIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LinkIdToken(ctx, request.(LinkIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LinkIdTokenResponseObject); ok {
		if err := validResponse.VisitLinkIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserMfa operation middleware
func (sh *strictHandler) ChangeUserMfa(ctx *gin.Context) {
	var request ChangeUserMfaRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserMfa(ctx, request.(ChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePAT operation middleware
func (sh *strictHandler) CreatePAT(ctx *gin.Context) {
	var request CreatePATRequestObject

	var body CreatePATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePAT(ctx, request.(CreatePATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePATResponseObject); ok {
		if err := validResponse.VisitCreatePATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInAnonymous operation middleware
func (sh *strictHandler) SignInAnonymous(ctx *gin.Context) {
	var request SignInAnonymousRequestObject

	var body SignInAnonymousJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInAnonymous(ctx, request.(SignInAnonymousRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInAnonymous")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInAnonymousResponseObject); ok {
		if err := validResponse.VisitSignInAnonymousResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInEmailPassword operation middleware
func (sh *strictHandler) SignInEmailPassword(ctx *gin.Context) {
	var request SignInEmailPasswordRequestObject

	var body SignInEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInEmailPassword(ctx, request.(SignInEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignInEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInIdToken operation middleware
func (sh *strictHandler) SignInIdToken(ctx *gin.Context) {
	var request SignInIdTokenRequestObject

	var body SignInIdTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInIdToken(ctx, request.(SignInIdTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInIdToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInIdTokenResponseObject); ok {
		if err := validResponse.VisitSignInIdTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInMfaTotp operation middleware
func (sh *strictHandler) VerifySignInMfaTotp(ctx *gin.Context) {
	var request VerifySignInMfaTotpRequestObject

	var body VerifySignInMfaTotpJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInMfaTotp(ctx, request.(VerifySignInMfaTotpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInMfaTotp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInMfaTotpResponseObject); ok {
		if err := validResponse.VisitVerifySignInMfaTotpResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInOTPEmail operation middleware
func (sh *strictHandler) SignInOTPEmail(ctx *gin.Context) {
	var request SignInOTPEmailRequestObject

	var body SignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInOTPEmail(ctx, request.(SignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitSignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInOTPEmail operation middleware
func (sh *strictHandler) VerifySignInOTPEmail(ctx *gin.Context) {
	var request VerifySignInOTPEmailRequestObject

	var body VerifySignInOTPEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInOTPEmail(ctx, request.(VerifySignInOTPEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInOTPEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInOTPEmailResponseObject); ok {
		if err := validResponse.VisitVerifySignInOTPEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessEmail operation middleware
func (sh *strictHandler) SignInPasswordlessEmail(ctx *gin.Context) {
	var request SignInPasswordlessEmailRequestObject

	var body SignInPasswordlessEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessEmail(ctx, request.(SignInPasswordlessEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessEmailResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPasswordlessSms operation middleware
func (sh *strictHandler) SignInPasswordlessSms(ctx *gin.Context) {
	var request SignInPasswordlessSmsRequestObject

	var body SignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPasswordlessSms(ctx, request.(SignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitSignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInPasswordlessSms operation middleware
func (sh *strictHandler) VerifySignInPasswordlessSms(ctx *gin.Context) {
	var request VerifySignInPasswordlessSmsRequestObject

	var body VerifySignInPasswordlessSmsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInPasswordlessSms(ctx, request.(VerifySignInPasswordlessSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInPasswordlessSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInPasswordlessSmsResponseObject); ok {
		if err := validResponse.VisitVerifySignInPasswordlessSmsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInPAT operation middleware
func (sh *strictHandler) SignInPAT(ctx *gin.Context) {
	var request SignInPATRequestObject

	var body SignInPATJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInPAT(ctx, request.(SignInPATRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInPAT")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInPATResponseObject); ok {
		if err := validResponse.VisitSignInPATResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProvider operation middleware
func (sh *strictHandler) SignInProvider(ctx *gin.Context, provider SignInProviderParamsProvider, params SignInProviderParams) {
	var request SignInProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProvider(ctx, request.(SignInProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProvider")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderResponseObject); ok {
		if err := validResponse.VisitSignInProviderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackGet operation middleware
func (sh *strictHandler) SignInProviderCallbackGet(ctx *gin.Context, provider SignInProviderCallbackGetParamsProvider, params SignInProviderCallbackGetParams) {
	var request SignInProviderCallbackGetRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackGet(ctx, request.(SignInProviderCallbackGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackGetResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInProviderCallbackPost operation middleware
func (sh *strictHandler) SignInProviderCallbackPost(ctx *gin.Context, provider SignInProviderCallbackPostParamsProvider) {
	var request SignInProviderCallbackPostRequestObject

	request.Provider = provider

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body SignInProviderCallbackPostFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInProviderCallbackPost(ctx, request.(SignInProviderCallbackPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInProviderCallbackPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInProviderCallbackPostResponseObject); ok {
		if err := validResponse.VisitSignInProviderCallbackPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProviderTokens operation middleware
func (sh *strictHandler) GetProviderTokens(ctx *gin.Context, provider GetProviderTokensParamsProvider) {
	var request GetProviderTokensRequestObject

	request.Provider = provider

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProviderTokens(ctx, request.(GetProviderTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProviderTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProviderTokensResponseObject); ok {
		if err := validResponse.VisitGetProviderTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignInWebauthn operation middleware
func (sh *strictHandler) SignInWebauthn(ctx *gin.Context) {
	var request SignInWebauthnRequestObject

	var body SignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignInWebauthn(ctx, request.(SignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignInWebauthnResponseObject); ok {
		if err := validResponse.VisitSignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignInWebauthn operation middleware
func (sh *strictHandler) VerifySignInWebauthn(ctx *gin.Context) {
	var request VerifySignInWebauthnRequestObject

	var body VerifySignInWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignInWebauthn(ctx, request.(VerifySignInWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignInWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignInWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignInWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignOut operation middleware
func (sh *strictHandler) SignOut(ctx *gin.Context) {
	var request SignOutRequestObject

	var body SignOutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignOut(ctx, request.(SignOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignOutResponseObject); ok {
		if err := validResponse.VisitSignOutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpEmailPassword operation middleware
func (sh *strictHandler) SignUpEmailPassword(ctx *gin.Context) {
	var request SignUpEmailPasswordRequestObject

	var body SignUpEmailPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpEmailPassword(ctx, request.(SignUpEmailPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpEmailPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpEmailPasswordResponseObject); ok {
		if err := validResponse.VisitSignUpEmailPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignUpWebauthn operation middleware
func (sh *strictHandler) SignUpWebauthn(ctx *gin.Context) {
	var request SignUpWebauthnRequestObject

	var body SignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SignUpWebauthn(ctx, request.(SignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitSignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignUpWebauthn operation middleware
func (sh *strictHandler) VerifySignUpWebauthn(ctx *gin.Context) {
	var request VerifySignUpWebauthnRequestObject

	var body VerifySignUpWebauthnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignUpWebauthn(ctx, request.(VerifySignUpWebauthnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignUpWebauthn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignUpWebauthnResponseObject); ok {
		if err := validResponse.VisitVerifySignUpWebauthnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(ctx *gin.Context) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshProviderToken operation middleware
func (sh *strictHandler) RefreshProviderToken(ctx *gin.Context, provider RefreshProviderTokenParamsProvider) {
	var request RefreshProviderTokenRequestObject

	request.Provider = provider

	var body RefreshProviderTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshProviderToken(ctx, request.(RefreshProviderTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshProviderToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RefreshProviderTokenResponseObject); ok {
		if err := validResponse.VisitRefreshProviderTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyToken operation middleware
func (sh *strictHandler) VerifyToken(ctx *gin.Context) {
	var request VerifyTokenRequestObject

	var body VerifyTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyToken(ctx, request.(VerifyTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTokenResponseObject); ok {
		if err := validResponse.VisitVerifyTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context) {
	var request GetUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeanonymizeUser operation middleware
func (sh *strictHandler) DeanonymizeUser(ctx *gin.Context) {
	var request DeanonymizeUserRequestObject

	var body DeanonymizeUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeanonymizeUser(ctx, request.(DeanonymizeUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeanonymizeUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeanonymizeUserResponseObject); ok {
		if err := validResponse.VisitDeanonymizeUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserEmail operation middleware
func (sh *strictHandler) ChangeUserEmail(ctx *gin.Context) {
	var request ChangeUserEmailRequestObject

	var body ChangeUserEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserEmail(ctx, request.(ChangeUserEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserEmailResponseObject); ok {
		if err := validResponse.VisitChangeUserEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendVerificationEmail operation middleware
func (sh *strictHandler) SendVerificationEmail(ctx *gin.Context) {
	var request SendVerificationEmailRequestObject

	var body SendVerificationEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendVerificationEmail(ctx, request.(SendVerificationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendVerificationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendVerificationEmailResponseObject); ok {
		if err := validResponse.VisitSendVerificationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyChangeUserMfa operation middleware
func (sh *strictHandler) VerifyChangeUserMfa(ctx *gin.Context) {
	var request VerifyChangeUserMfaRequestObject

	var body VerifyChangeUserMfaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyChangeUserMfa(ctx, request.(VerifyChangeUserMfaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyChangeUserMfa")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyChangeUserMfaResponseObject); ok {
		if err := validResponse.VisitVerifyChangeUserMfaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserPassword operation middleware
func (sh *strictHandler) ChangeUserPassword(ctx *gin.Context) {
	var request ChangeUserPasswordRequestObject

	var body ChangeUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserPassword(ctx, request.(ChangeUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserPasswordResponseObject); ok {
		if err := validResponse.VisitChangeUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendPasswordResetEmail operation middleware
func (sh *strictHandler) SendPasswordResetEmail(ctx *gin.Context) {
	var request SendPasswordResetEmailRequestObject

	var body SendPasswordResetEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendPasswordResetEmail(ctx, request.(SendPasswordResetEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendPasswordResetEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendPasswordResetEmailResponseObject); ok {
		if err := validResponse.VisitSendPasswordResetEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddSecurityKey operation middleware
func (sh *strictHandler) AddSecurityKey(ctx *gin.Context) {
	var request AddSecurityKeyRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddSecurityKey(ctx, request.(AddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAddSecurityKey operation middleware
func (sh *strictHandler) VerifyAddSecurityKey(ctx *gin.Context) {
	var request VerifyAddSecurityKeyRequestObject

	var body VerifyAddSecurityKeyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAddSecurityKey(ctx, request.(VerifyAddSecurityKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAddSecurityKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyAddSecurityKeyResponseObject); ok {
		if err := validResponse.VisitVerifyAddSecurityKeyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyTicket operation middleware
func (sh *strictHandler) VerifyTicket(ctx *gin.Context, params VerifyTicketParams) {
	var request VerifyTicketRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyTicket(ctx, request.(VerifyTicketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyTicket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyTicketResponseObject); ok {
		if err := validResponse.VisitVerifyTicketResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *gin.Context) {
	var request GetVersionRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx, request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"X6/+fwAAAP///0m6KEwFAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
