// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AuthorizationScopes         = "Authorization.Scopes"
	X_Hasura_Admin_SecretScopes = "X_Hasura_Admin_Secret.Scopes"
)

// Defines values for OutputImageFormat.
const (
	Auto OutputImageFormat = "auto"
	Avif OutputImageFormat = "avif"
	Jpeg OutputImageFormat = "jpeg"
	Png  OutputImageFormat = "png"
	Same OutputImageFormat = "same"
	Webp OutputImageFormat = "webp"
)

// ErrorResponse Error information returned by the API.
type ErrorResponse struct {
	// Error Error details.
	Error *struct {
		// Data Additional data related to the error, if any.
		Data *map[string]interface{} `json:"data,omitempty"`

		// Message Human-readable error message.
		Message string `json:"message"`
	} `json:"error,omitempty"`
}

// ErrorResponseWithProcessedFiles Error information returned by the API.
type ErrorResponseWithProcessedFiles struct {
	// Error Error details.
	Error *struct {
		// Data Additional data related to the error, if any.
		Data *map[string]interface{} `json:"data,omitempty"`

		// Message Human-readable error message.
		Message string `json:"message"`
	} `json:"error,omitempty"`

	// ProcessedFiles List of files that were successfully processed before the error occurred.
	ProcessedFiles *[]FileMetadata `json:"processedFiles,omitempty"`
}

// FileMetadata Comprehensive metadata information about a file in storage.
type FileMetadata struct {
	// BucketId ID of the bucket containing the file.
	BucketId string `json:"bucketId"`

	// CreatedAt Timestamp when the file was created.
	CreatedAt time.Time `json:"createdAt"`

	// Etag Entity tag for cache validation.
	Etag string `json:"etag"`

	// Id Unique identifier for the file.
	Id string `json:"id"`

	// IsUploaded Whether the file has been successfully uploaded.
	IsUploaded bool `json:"isUploaded"`

	// Metadata Custom metadata associated with the file.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// MimeType MIME type of the file.
	MimeType string `json:"mimeType"`

	// Name Name of the file including extension.
	Name string `json:"name"`

	// Size Size of the file in bytes.
	Size int64 `json:"size"`

	// UpdatedAt Timestamp when the file was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UploadedByUserId ID of the user who uploaded the file.
	UploadedByUserId *string `json:"uploadedByUserId,omitempty"`
}

// FileSummary Basic information about a file in storage.
type FileSummary struct {
	// BucketId ID of the bucket containing the file.
	BucketId string `json:"bucketId"`

	// Id Unique identifier for the file.
	Id string `json:"id"`

	// IsUploaded Whether the file has been successfully uploaded.
	IsUploaded bool `json:"isUploaded"`

	// Name Name of the file including extension.
	Name string `json:"name"`
}

// OutputImageFormat Output format for image files. Use 'auto' for content negotiation based on Accept header
type OutputImageFormat string

// PresignedURLResponse Contains a presigned URL for direct file operations.
type PresignedURLResponse struct {
	// Expiration The time in seconds until the URL expires.
	Expiration int `json:"expiration"`

	// Url The presigned URL for file operations.
	Url string `json:"url"`
}

// RFC2822Date Date in RFC 2822 format
type RFC2822Date = Time

// UpdateFileMetadata Metadata that can be updated for an existing file.
type UpdateFileMetadata struct {
	// Metadata Updated custom metadata to associate with the file.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Name New name to assign to the file.
	Name *string `json:"name,omitempty"`
}

// UploadFileMetadata Metadata provided when uploading a new file.
type UploadFileMetadata struct {
	// Id Optional custom ID for the file. If not provided, a UUID will be generated.
	Id *string `json:"id,omitempty"`

	// Metadata Custom metadata to associate with the file.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Name Name to assign to the file. If not provided, the original filename will be used.
	Name *string `json:"name,omitempty"`
}

// VersionInformation Contains version information about the storage service.
type VersionInformation struct {
	// BuildVersion The version number of the storage service build.
	BuildVersion string `json:"buildVersion"`
}

// UploadFilesMultipartBody defines parameters for UploadFiles.
type UploadFilesMultipartBody struct {
	// BucketId Target bucket identifier where files will be stored.
	BucketId *string `json:"bucket-id,omitempty"`

	// File Array of files to upload.
	File []openapi_types.File `json:"file[]"`

	// Metadata Optional custom metadata for each uploaded file. Must match the order of the file[] array.
	Metadata *[]UploadFileMetadata `json:"metadata[],omitempty"`
}

// GetFileParams defines parameters for GetFile.
type GetFileParams struct {
	// Q Image quality (1-100). Only applies to JPEG, WebP and PNG files
	Q *int `form:"q,omitempty" json:"q,omitempty"`

	// H Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
	H *int `form:"h,omitempty" json:"h,omitempty"`

	// W Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
	W *int `form:"w,omitempty" json:"w,omitempty"`

	// B Blur the image using this sigma value. Only applies to image files
	B *float32 `form:"b,omitempty" json:"b,omitempty"`

	// F Output format for image files. Use 'auto' for content negotiation based on Accept header
	F *OutputImageFormat `form:"f,omitempty" json:"f,omitempty"`

	// IfMatch Only return the file if the current ETag matches one of the values provided
	IfMatch *string `json:"if-match,omitempty"`

	// IfNoneMatch Only return the file if the current ETag does not match any of the values provided
	IfNoneMatch *string `json:"if-none-match,omitempty"`

	// IfModifiedSince Only return the file if it has been modified after the given date
	IfModifiedSince *RFC2822Date `json:"if-modified-since,omitempty"`

	// IfUnmodifiedSince Only return the file if it has not been modified after the given date
	IfUnmodifiedSince *RFC2822Date `json:"if-unmodified-since,omitempty"`

	// Range Range of bytes to retrieve from the file. Format: bytes=start-end
	Range *string `json:"Range,omitempty"`
}

// GetFileMetadataHeadersParams defines parameters for GetFileMetadataHeaders.
type GetFileMetadataHeadersParams struct {
	// Q Image quality (1-100). Only applies to JPEG, WebP and PNG files
	Q *int `form:"q,omitempty" json:"q,omitempty"`

	// H Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
	H *int `form:"h,omitempty" json:"h,omitempty"`

	// W Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
	W *int `form:"w,omitempty" json:"w,omitempty"`

	// B Blur the image using this sigma value. Only applies to image files
	B *float32 `form:"b,omitempty" json:"b,omitempty"`

	// F Output format for image files. Use 'auto' for content negotiation based on Accept header
	F *OutputImageFormat `form:"f,omitempty" json:"f,omitempty"`

	// IfMatch Only return the file if the current ETag matches one of the values provided
	IfMatch *string `json:"if-match,omitempty"`

	// IfNoneMatch Only return the file if the current ETag does not match any of the values provided
	IfNoneMatch *string `json:"if-none-match,omitempty"`

	// IfModifiedSince Only return the file if it has been modified after the given date
	IfModifiedSince *RFC2822Date `json:"if-modified-since,omitempty"`

	// IfUnmodifiedSince Only return the file if it has not been modified after the given date
	IfUnmodifiedSince *RFC2822Date `json:"if-unmodified-since,omitempty"`
}

// ReplaceFileMultipartBody defines parameters for ReplaceFile.
type ReplaceFileMultipartBody struct {
	// File New file content to replace the existing file
	File *openapi_types.File `json:"file,omitempty"`

	// Metadata Metadata that can be updated for an existing file.
	Metadata *UpdateFileMetadata `json:"metadata,omitempty"`
}

// GetFileWithPresignedURLParams defines parameters for GetFileWithPresignedURL.
type GetFileWithPresignedURLParams struct {
	// XAmzAlgorithm Use presignedurl endpoint to generate this automatically
	XAmzAlgorithm string `form:"X-Amz-Algorithm" json:"X-Amz-Algorithm"`

	// XAmzCredential Use presignedurl endpoint to generate this automatically
	XAmzCredential string `form:"X-Amz-Credential" json:"X-Amz-Credential"`

	// XAmzDate Use presignedurl endpoint to generate this automatically
	XAmzDate string `form:"X-Amz-Date" json:"X-Amz-Date"`

	// XAmzExpires Use presignedurl endpoint to generate this automatically
	XAmzExpires string `form:"X-Amz-Expires" json:"X-Amz-Expires"`

	// XAmzSignature Use presignedurl endpoint to generate this automatically
	XAmzSignature string `form:"X-Amz-Signature" json:"X-Amz-Signature"`

	// XAmzSignedHeaders Use presignedurl endpoint to generate this automatically
	XAmzSignedHeaders string `form:"X-Amz-SignedHeaders" json:"X-Amz-SignedHeaders"`

	// XAmzChecksumMode Use presignedurl endpoint to generate this automatically
	XAmzChecksumMode string `form:"X-Amz-Checksum-Mode" json:"X-Amz-Checksum-Mode"`

	// XAmzSecurityToken Use presignedurl endpoint to generate this automatically
	XAmzSecurityToken *string `form:"X-Amz-Security-Token,omitempty" json:"X-Amz-Security-Token,omitempty"`

	// XId Use presignedurl endpoint to generate this automatically
	XId string `form:"x-id" json:"x-id"`

	// Q Image quality (1-100). Only applies to JPEG, WebP and PNG files
	Q *int `form:"q,omitempty" json:"q,omitempty"`

	// H Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
	H *int `form:"h,omitempty" json:"h,omitempty"`

	// W Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
	W *int `form:"w,omitempty" json:"w,omitempty"`

	// B Blur the image using this sigma value. Only applies to image files
	B *float32 `form:"b,omitempty" json:"b,omitempty"`

	// F Output format for image files. Use 'auto' for content negotiation based on Accept header
	F *OutputImageFormat `form:"f,omitempty" json:"f,omitempty"`

	// IfMatch Only return the file if the current ETag matches one of the values provided
	IfMatch *string `json:"if-match,omitempty"`

	// IfNoneMatch Only return the file if the current ETag does not match any of the values provided
	IfNoneMatch *string `json:"if-none-match,omitempty"`

	// IfModifiedSince Only return the file if it has been modified after the given date
	IfModifiedSince *RFC2822Date `json:"if-modified-since,omitempty"`

	// IfUnmodifiedSince Only return the file if it has not been modified after the given date
	IfUnmodifiedSince *RFC2822Date `json:"if-unmodified-since,omitempty"`

	// Range Range of bytes to retrieve from the file. Format: bytes=start-end
	Range *string `json:"Range,omitempty"`
}

// UploadFilesMultipartRequestBody defines body for UploadFiles for multipart/form-data ContentType.
type UploadFilesMultipartRequestBody UploadFilesMultipartBody

// ReplaceFileMultipartRequestBody defines body for ReplaceFile for multipart/form-data ContentType.
type ReplaceFileMultipartRequestBody ReplaceFileMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// UploadFilesWithBody request with any body
	UploadFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFile request
	DeleteFile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFile request
	GetFile(ctx context.Context, id string, params *GetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFileMetadataHeaders request
	GetFileMetadataHeaders(ctx context.Context, id string, params *GetFileMetadataHeadersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceFileWithBody request with any body
	ReplaceFileWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilePresignedURL request
	GetFilePresignedURL(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFileWithPresignedURL request
	GetFileWithPresignedURL(ctx context.Context, id string, params *GetFileWithPresignedURLParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenAPISpec request
	GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBrokenMetadata request
	DeleteBrokenMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrphanedFiles request
	DeleteOrphanedFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBrokenMetadata request
	ListBrokenMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFilesNotUploaded request
	ListFilesNotUploaded(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrphanedFiles request
	ListOrphanedFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) UploadFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFile(ctx context.Context, id string, params *GetFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFileMetadataHeaders(ctx context.Context, id string, params *GetFileMetadataHeadersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFileMetadataHeadersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceFileWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceFileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilePresignedURL(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilePresignedURLRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFileWithPresignedURL(ctx context.Context, id string, params *GetFileWithPresignedURLParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFileWithPresignedURLRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenAPISpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenAPISpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBrokenMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBrokenMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrphanedFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrphanedFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBrokenMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBrokenMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFilesNotUploaded(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFilesNotUploadedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrphanedFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrphanedFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewUploadFilesRequestWithBody generates requests for UploadFiles with any type of body
func NewUploadFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFileRequest generates requests for DeleteFile
func NewDeleteFileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFileRequest generates requests for GetFile
func NewGetFileRequest(server string, id string, params *GetFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.B != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "b", runtime.ParamLocationQuery, *params.B); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "if-match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-match", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "if-none-match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-none-match", headerParam1)
		}

		if params.IfModifiedSince != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "if-modified-since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-modified-since", headerParam2)
		}

		if params.IfUnmodifiedSince != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "if-unmodified-since", runtime.ParamLocationHeader, *params.IfUnmodifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-unmodified-since", headerParam3)
		}

		if params.Range != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam4)
		}

	}

	return req, nil
}

// NewGetFileMetadataHeadersRequest generates requests for GetFileMetadataHeaders
func NewGetFileMetadataHeadersRequest(server string, id string, params *GetFileMetadataHeadersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.B != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "b", runtime.ParamLocationQuery, *params.B); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "if-match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-match", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "if-none-match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-none-match", headerParam1)
		}

		if params.IfModifiedSince != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "if-modified-since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-modified-since", headerParam2)
		}

		if params.IfUnmodifiedSince != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "if-unmodified-since", runtime.ParamLocationHeader, *params.IfUnmodifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-unmodified-since", headerParam3)
		}

	}

	return req, nil
}

// NewReplaceFileRequestWithBody generates requests for ReplaceFile with any type of body
func NewReplaceFileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFilePresignedURLRequest generates requests for GetFilePresignedURL
func NewGetFilePresignedURLRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s/presignedurl", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFileWithPresignedURLRequest generates requests for GetFileWithPresignedURL
func NewGetFileWithPresignedURLRequest(server string, id string, params *GetFileWithPresignedURLParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s/presignedurl/contents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-Algorithm", runtime.ParamLocationQuery, params.XAmzAlgorithm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-Credential", runtime.ParamLocationQuery, params.XAmzCredential); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-Date", runtime.ParamLocationQuery, params.XAmzDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-Expires", runtime.ParamLocationQuery, params.XAmzExpires); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-Signature", runtime.ParamLocationQuery, params.XAmzSignature); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-SignedHeaders", runtime.ParamLocationQuery, params.XAmzSignedHeaders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-Checksum-Mode", runtime.ParamLocationQuery, params.XAmzChecksumMode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.XAmzSecurityToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "X-Amz-Security-Token", runtime.ParamLocationQuery, *params.XAmzSecurityToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x-id", runtime.ParamLocationQuery, params.XId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.H != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "h", runtime.ParamLocationQuery, *params.H); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.W != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "w", runtime.ParamLocationQuery, *params.W); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.B != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "b", runtime.ParamLocationQuery, *params.B); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.F != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "f", runtime.ParamLocationQuery, *params.F); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "if-match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-match", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "if-none-match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-none-match", headerParam1)
		}

		if params.IfModifiedSince != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "if-modified-since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-modified-since", headerParam2)
		}

		if params.IfUnmodifiedSince != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "if-unmodified-since", runtime.ParamLocationHeader, *params.IfUnmodifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-unmodified-since", headerParam3)
		}

		if params.Range != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam4)
		}

	}

	return req, nil
}

// NewGetOpenAPISpecRequest generates requests for GetOpenAPISpec
func NewGetOpenAPISpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBrokenMetadataRequest generates requests for DeleteBrokenMetadata
func NewDeleteBrokenMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ops/delete-broken-metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrphanedFilesRequest generates requests for DeleteOrphanedFiles
func NewDeleteOrphanedFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ops/delete-orphans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBrokenMetadataRequest generates requests for ListBrokenMetadata
func NewListBrokenMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ops/list-broken-metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFilesNotUploadedRequest generates requests for ListFilesNotUploaded
func NewListFilesNotUploadedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ops/list-not-uploaded")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrphanedFilesRequest generates requests for ListOrphanedFiles
func NewListOrphanedFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ops/list-orphans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// UploadFilesWithBodyWithResponse request with any body
	UploadFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFilesR, error)

	// DeleteFileWithResponse request
	DeleteFileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFileR, error)

	// GetFileWithResponse request
	GetFileWithResponse(ctx context.Context, id string, params *GetFileParams, reqEditors ...RequestEditorFn) (*GetFileR, error)

	// GetFileMetadataHeadersWithResponse request
	GetFileMetadataHeadersWithResponse(ctx context.Context, id string, params *GetFileMetadataHeadersParams, reqEditors ...RequestEditorFn) (*GetFileMetadataHeadersR, error)

	// ReplaceFileWithBodyWithResponse request with any body
	ReplaceFileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFileR, error)

	// GetFilePresignedURLWithResponse request
	GetFilePresignedURLWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFilePresignedURLR, error)

	// GetFileWithPresignedURLWithResponse request
	GetFileWithPresignedURLWithResponse(ctx context.Context, id string, params *GetFileWithPresignedURLParams, reqEditors ...RequestEditorFn) (*GetFileWithPresignedURLR, error)

	// GetOpenAPISpecWithResponse request
	GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecR, error)

	// DeleteBrokenMetadataWithResponse request
	DeleteBrokenMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteBrokenMetadataR, error)

	// DeleteOrphanedFilesWithResponse request
	DeleteOrphanedFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteOrphanedFilesR, error)

	// ListBrokenMetadataWithResponse request
	ListBrokenMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBrokenMetadataR, error)

	// ListFilesNotUploadedWithResponse request
	ListFilesNotUploadedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFilesNotUploadedR, error)

	// ListOrphanedFilesWithResponse request
	ListOrphanedFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrphanedFilesR, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionR, error)
}

type UploadFilesR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ProcessedFiles List of successfully processed files with their metadata.
		ProcessedFiles []FileMetadata `json:"processedFiles"`
	}
	JSONDefault *ErrorResponseWithProcessedFiles
}

// Status returns HTTPResponse.Status
func (r UploadFilesR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFilesR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFileR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteFileR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFileR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileR struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFileR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileMetadataHeadersR struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFileMetadataHeadersR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileMetadataHeadersR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceFileR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileMetadata
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ReplaceFileR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceFileR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilePresignedURLR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PresignedURLResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFilePresignedURLR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilePresignedURLR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileWithPresignedURLR struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFileWithPresignedURLR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileWithPresignedURLR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenAPISpecR struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOpenAPISpecR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenAPISpecR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBrokenMetadataR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Metadata *[]FileSummary `json:"metadata,omitempty"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteBrokenMetadataR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBrokenMetadataR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrphanedFilesR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Files *[]string `json:"files,omitempty"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrphanedFilesR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrphanedFilesR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBrokenMetadataR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Metadata *[]FileSummary `json:"metadata,omitempty"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListBrokenMetadataR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBrokenMetadataR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFilesNotUploadedR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Metadata *[]FileSummary `json:"metadata,omitempty"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListFilesNotUploadedR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFilesNotUploadedR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrphanedFilesR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Files *[]string `json:"files,omitempty"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListOrphanedFilesR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrphanedFilesR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionR struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionInformation
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVersionR) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionR) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// UploadFilesWithBodyWithResponse request with arbitrary body returning *UploadFilesR
func (c *ClientWithResponses) UploadFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFilesR, error) {
	rsp, err := c.UploadFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFilesR(rsp)
}

// DeleteFileWithResponse request returning *DeleteFileR
func (c *ClientWithResponses) DeleteFileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFileR, error) {
	rsp, err := c.DeleteFile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileR(rsp)
}

// GetFileWithResponse request returning *GetFileR
func (c *ClientWithResponses) GetFileWithResponse(ctx context.Context, id string, params *GetFileParams, reqEditors ...RequestEditorFn) (*GetFileR, error) {
	rsp, err := c.GetFile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFileR(rsp)
}

// GetFileMetadataHeadersWithResponse request returning *GetFileMetadataHeadersR
func (c *ClientWithResponses) GetFileMetadataHeadersWithResponse(ctx context.Context, id string, params *GetFileMetadataHeadersParams, reqEditors ...RequestEditorFn) (*GetFileMetadataHeadersR, error) {
	rsp, err := c.GetFileMetadataHeaders(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFileMetadataHeadersR(rsp)
}

// ReplaceFileWithBodyWithResponse request with arbitrary body returning *ReplaceFileR
func (c *ClientWithResponses) ReplaceFileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceFileR, error) {
	rsp, err := c.ReplaceFileWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceFileR(rsp)
}

// GetFilePresignedURLWithResponse request returning *GetFilePresignedURLR
func (c *ClientWithResponses) GetFilePresignedURLWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFilePresignedURLR, error) {
	rsp, err := c.GetFilePresignedURL(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilePresignedURLR(rsp)
}

// GetFileWithPresignedURLWithResponse request returning *GetFileWithPresignedURLR
func (c *ClientWithResponses) GetFileWithPresignedURLWithResponse(ctx context.Context, id string, params *GetFileWithPresignedURLParams, reqEditors ...RequestEditorFn) (*GetFileWithPresignedURLR, error) {
	rsp, err := c.GetFileWithPresignedURL(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFileWithPresignedURLR(rsp)
}

// GetOpenAPISpecWithResponse request returning *GetOpenAPISpecR
func (c *ClientWithResponses) GetOpenAPISpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenAPISpecR, error) {
	rsp, err := c.GetOpenAPISpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenAPISpecR(rsp)
}

// DeleteBrokenMetadataWithResponse request returning *DeleteBrokenMetadataR
func (c *ClientWithResponses) DeleteBrokenMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteBrokenMetadataR, error) {
	rsp, err := c.DeleteBrokenMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBrokenMetadataR(rsp)
}

// DeleteOrphanedFilesWithResponse request returning *DeleteOrphanedFilesR
func (c *ClientWithResponses) DeleteOrphanedFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteOrphanedFilesR, error) {
	rsp, err := c.DeleteOrphanedFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrphanedFilesR(rsp)
}

// ListBrokenMetadataWithResponse request returning *ListBrokenMetadataR
func (c *ClientWithResponses) ListBrokenMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBrokenMetadataR, error) {
	rsp, err := c.ListBrokenMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBrokenMetadataR(rsp)
}

// ListFilesNotUploadedWithResponse request returning *ListFilesNotUploadedR
func (c *ClientWithResponses) ListFilesNotUploadedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFilesNotUploadedR, error) {
	rsp, err := c.ListFilesNotUploaded(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFilesNotUploadedR(rsp)
}

// ListOrphanedFilesWithResponse request returning *ListOrphanedFilesR
func (c *ClientWithResponses) ListOrphanedFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrphanedFilesR, error) {
	rsp, err := c.ListOrphanedFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrphanedFilesR(rsp)
}

// GetVersionWithResponse request returning *GetVersionR
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionR, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionR(rsp)
}

// ParseUploadFilesR parses an HTTP response from a UploadFilesWithResponse call
func ParseUploadFilesR(rsp *http.Response) (*UploadFilesR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFilesR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ProcessedFiles List of successfully processed files with their metadata.
			ProcessedFiles []FileMetadata `json:"processedFiles"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponseWithProcessedFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFileR parses an HTTP response from a DeleteFileWithResponse call
func ParseDeleteFileR(rsp *http.Response) (*DeleteFileR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFileR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFileR parses an HTTP response from a GetFileWithResponse call
func ParseGetFileR(rsp *http.Response) (*GetFileR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFileR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFileMetadataHeadersR parses an HTTP response from a GetFileMetadataHeadersWithResponse call
func ParseGetFileMetadataHeadersR(rsp *http.Response) (*GetFileMetadataHeadersR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFileMetadataHeadersR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReplaceFileR parses an HTTP response from a ReplaceFileWithResponse call
func ParseReplaceFileR(rsp *http.Response) (*ReplaceFileR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceFileR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFilePresignedURLR parses an HTTP response from a GetFilePresignedURLWithResponse call
func ParseGetFilePresignedURLR(rsp *http.Response) (*GetFilePresignedURLR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilePresignedURLR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PresignedURLResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFileWithPresignedURLR parses an HTTP response from a GetFileWithPresignedURLWithResponse call
func ParseGetFileWithPresignedURLR(rsp *http.Response) (*GetFileWithPresignedURLR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFileWithPresignedURLR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenAPISpecR parses an HTTP response from a GetOpenAPISpecWithResponse call
func ParseGetOpenAPISpecR(rsp *http.Response) (*GetOpenAPISpecR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenAPISpecR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseDeleteBrokenMetadataR parses an HTTP response from a DeleteBrokenMetadataWithResponse call
func ParseDeleteBrokenMetadataR(rsp *http.Response) (*DeleteBrokenMetadataR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBrokenMetadataR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Metadata *[]FileSummary `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteOrphanedFilesR parses an HTTP response from a DeleteOrphanedFilesWithResponse call
func ParseDeleteOrphanedFilesR(rsp *http.Response) (*DeleteOrphanedFilesR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrphanedFilesR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Files *[]string `json:"files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListBrokenMetadataR parses an HTTP response from a ListBrokenMetadataWithResponse call
func ParseListBrokenMetadataR(rsp *http.Response) (*ListBrokenMetadataR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBrokenMetadataR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Metadata *[]FileSummary `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListFilesNotUploadedR parses an HTTP response from a ListFilesNotUploadedWithResponse call
func ParseListFilesNotUploadedR(rsp *http.Response) (*ListFilesNotUploadedR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFilesNotUploadedR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Metadata *[]FileSummary `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListOrphanedFilesR parses an HTTP response from a ListOrphanedFilesWithResponse call
func ParseListOrphanedFilesR(rsp *http.Response) (*ListOrphanedFilesR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrphanedFilesR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Files *[]string `json:"files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVersionR parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionR(rsp *http.Response) (*GetVersionR, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionR{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
