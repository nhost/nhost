// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AuthorizationScopes         = "Authorization.Scopes"
	X_Hasura_Admin_SecretScopes = "X_Hasura_Admin_Secret.Scopes"
)

// Defines values for OutputImageFormat.
const (
	Auto OutputImageFormat = "auto"
	Avif OutputImageFormat = "avif"
	Jpeg OutputImageFormat = "jpeg"
	Png  OutputImageFormat = "png"
	Same OutputImageFormat = "same"
	Webp OutputImageFormat = "webp"
)

// ErrorResponse Error information returned by the API.
type ErrorResponse struct {
	// Error Error details.
	Error *struct {
		// Data Additional data related to the error, if any.
		Data *map[string]interface{} `json:"data,omitempty"`

		// Message Human-readable error message.
		Message string `json:"message"`
	} `json:"error,omitempty"`
}

// ErrorResponseWithProcessedFiles Error information returned by the API.
type ErrorResponseWithProcessedFiles struct {
	// Error Error details.
	Error *struct {
		// Data Additional data related to the error, if any.
		Data *map[string]interface{} `json:"data,omitempty"`

		// Message Human-readable error message.
		Message string `json:"message"`
	} `json:"error,omitempty"`

	// ProcessedFiles List of files that were successfully processed before the error occurred.
	ProcessedFiles *[]FileMetadata `json:"processedFiles,omitempty"`
}

// FileMetadata Comprehensive metadata information about a file in storage.
type FileMetadata struct {
	// BucketId ID of the bucket containing the file.
	BucketId string `json:"bucketId"`

	// CreatedAt Timestamp when the file was created.
	CreatedAt time.Time `json:"createdAt"`

	// Etag Entity tag for cache validation.
	Etag string `json:"etag"`

	// Id Unique identifier for the file.
	Id string `json:"id"`

	// IsUploaded Whether the file has been successfully uploaded.
	IsUploaded bool `json:"isUploaded"`

	// Metadata Custom metadata associated with the file.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// MimeType MIME type of the file.
	MimeType string `json:"mimeType"`

	// Name Name of the file including extension.
	Name string `json:"name"`

	// Size Size of the file in bytes.
	Size int64 `json:"size"`

	// UpdatedAt Timestamp when the file was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UploadedByUserId ID of the user who uploaded the file.
	UploadedByUserId *string `json:"uploadedByUserId,omitempty"`
}

// FileSummary Basic information about a file in storage.
type FileSummary struct {
	// BucketId ID of the bucket containing the file.
	BucketId string `json:"bucketId"`

	// Id Unique identifier for the file.
	Id string `json:"id"`

	// IsUploaded Whether the file has been successfully uploaded.
	IsUploaded bool `json:"isUploaded"`

	// Name Name of the file including extension.
	Name string `json:"name"`
}

// OutputImageFormat Output format for image files. Use 'auto' for content negotiation based on Accept header
type OutputImageFormat string

// PresignedURLResponse Contains a presigned URL for direct file operations.
type PresignedURLResponse struct {
	// Expiration The time in seconds until the URL expires.
	Expiration int `json:"expiration"`

	// Url The presigned URL for file operations.
	Url string `json:"url"`
}

// RFC2822Date Date in RFC 2822 format
type RFC2822Date = Time

// UpdateFileMetadata Metadata that can be updated for an existing file.
type UpdateFileMetadata struct {
	// Metadata Updated custom metadata to associate with the file.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Name New name to assign to the file.
	Name *string `json:"name,omitempty"`
}

// UploadFileMetadata Metadata provided when uploading a new file.
type UploadFileMetadata struct {
	// Id Optional custom ID for the file. If not provided, a UUID will be generated.
	Id *string `json:"id,omitempty"`

	// Metadata Custom metadata to associate with the file.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Name Name to assign to the file. If not provided, the original filename will be used.
	Name *string `json:"name,omitempty"`
}

// VersionInformation Contains version information about the storage service.
type VersionInformation struct {
	// BuildVersion The version number of the storage service build.
	BuildVersion string `json:"buildVersion"`
}

// UploadFilesMultipartBody defines parameters for UploadFiles.
type UploadFilesMultipartBody struct {
	// BucketId Target bucket identifier where files will be stored.
	BucketId *string `json:"bucket-id,omitempty"`

	// File Array of files to upload.
	File []openapi_types.File `json:"file[]"`

	// Metadata Optional custom metadata for each uploaded file. Must match the order of the file[] array.
	Metadata *[]UploadFileMetadata `json:"metadata[],omitempty"`
}

// GetFileParams defines parameters for GetFile.
type GetFileParams struct {
	// Q Image quality (1-100). Only applies to JPEG, WebP and PNG files
	Q *int `form:"q,omitempty" json:"q,omitempty"`

	// H Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
	H *int `form:"h,omitempty" json:"h,omitempty"`

	// W Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
	W *int `form:"w,omitempty" json:"w,omitempty"`

	// B Blur the image using this sigma value. Only applies to image files
	B *float32 `form:"b,omitempty" json:"b,omitempty"`

	// F Output format for image files. Use 'auto' for content negotiation based on Accept header
	F *OutputImageFormat `form:"f,omitempty" json:"f,omitempty"`

	// IfMatch Only return the file if the current ETag matches one of the values provided
	IfMatch *string `json:"if-match,omitempty"`

	// IfNoneMatch Only return the file if the current ETag does not match any of the values provided
	IfNoneMatch *string `json:"if-none-match,omitempty"`

	// IfModifiedSince Only return the file if it has been modified after the given date
	IfModifiedSince *RFC2822Date `json:"if-modified-since,omitempty"`

	// IfUnmodifiedSince Only return the file if it has not been modified after the given date
	IfUnmodifiedSince *RFC2822Date `json:"if-unmodified-since,omitempty"`

	// Range Range of bytes to retrieve from the file. Format: bytes=start-end
	Range *string `json:"Range,omitempty"`
}

// GetFileMetadataHeadersParams defines parameters for GetFileMetadataHeaders.
type GetFileMetadataHeadersParams struct {
	// Q Image quality (1-100). Only applies to JPEG, WebP and PNG files
	Q *int `form:"q,omitempty" json:"q,omitempty"`

	// H Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
	H *int `form:"h,omitempty" json:"h,omitempty"`

	// W Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
	W *int `form:"w,omitempty" json:"w,omitempty"`

	// B Blur the image using this sigma value. Only applies to image files
	B *float32 `form:"b,omitempty" json:"b,omitempty"`

	// F Output format for image files. Use 'auto' for content negotiation based on Accept header
	F *OutputImageFormat `form:"f,omitempty" json:"f,omitempty"`

	// IfMatch Only return the file if the current ETag matches one of the values provided
	IfMatch *string `json:"if-match,omitempty"`

	// IfNoneMatch Only return the file if the current ETag does not match any of the values provided
	IfNoneMatch *string `json:"if-none-match,omitempty"`

	// IfModifiedSince Only return the file if it has been modified after the given date
	IfModifiedSince *RFC2822Date `json:"if-modified-since,omitempty"`

	// IfUnmodifiedSince Only return the file if it has not been modified after the given date
	IfUnmodifiedSince *RFC2822Date `json:"if-unmodified-since,omitempty"`
}

// ReplaceFileMultipartBody defines parameters for ReplaceFile.
type ReplaceFileMultipartBody struct {
	// File New file content to replace the existing file
	File *openapi_types.File `json:"file,omitempty"`

	// Metadata Metadata that can be updated for an existing file.
	Metadata *UpdateFileMetadata `json:"metadata,omitempty"`
}

// GetFileWithPresignedURLParams defines parameters for GetFileWithPresignedURL.
type GetFileWithPresignedURLParams struct {
	// XAmzAlgorithm Use presignedurl endpoint to generate this automatically
	XAmzAlgorithm string `form:"X-Amz-Algorithm" json:"X-Amz-Algorithm"`

	// XAmzCredential Use presignedurl endpoint to generate this automatically
	XAmzCredential string `form:"X-Amz-Credential" json:"X-Amz-Credential"`

	// XAmzDate Use presignedurl endpoint to generate this automatically
	XAmzDate string `form:"X-Amz-Date" json:"X-Amz-Date"`

	// XAmzExpires Use presignedurl endpoint to generate this automatically
	XAmzExpires string `form:"X-Amz-Expires" json:"X-Amz-Expires"`

	// XAmzSignature Use presignedurl endpoint to generate this automatically
	XAmzSignature string `form:"X-Amz-Signature" json:"X-Amz-Signature"`

	// XAmzSignedHeaders Use presignedurl endpoint to generate this automatically
	XAmzSignedHeaders string `form:"X-Amz-SignedHeaders" json:"X-Amz-SignedHeaders"`

	// XAmzChecksumMode Use presignedurl endpoint to generate this automatically
	XAmzChecksumMode string `form:"X-Amz-Checksum-Mode" json:"X-Amz-Checksum-Mode"`

	// XAmzSecurityToken Use presignedurl endpoint to generate this automatically
	XAmzSecurityToken *string `form:"X-Amz-Security-Token,omitempty" json:"X-Amz-Security-Token,omitempty"`

	// XId Use presignedurl endpoint to generate this automatically
	XId string `form:"x-id" json:"x-id"`

	// Q Image quality (1-100). Only applies to JPEG, WebP and PNG files
	Q *int `form:"q,omitempty" json:"q,omitempty"`

	// H Maximum height to resize image to while maintaining aspect ratio. Only applies to image files
	H *int `form:"h,omitempty" json:"h,omitempty"`

	// W Maximum width to resize image to while maintaining aspect ratio. Only applies to image files
	W *int `form:"w,omitempty" json:"w,omitempty"`

	// B Blur the image using this sigma value. Only applies to image files
	B *float32 `form:"b,omitempty" json:"b,omitempty"`

	// F Output format for image files. Use 'auto' for content negotiation based on Accept header
	F *OutputImageFormat `form:"f,omitempty" json:"f,omitempty"`

	// IfMatch Only return the file if the current ETag matches one of the values provided
	IfMatch *string `json:"if-match,omitempty"`

	// IfNoneMatch Only return the file if the current ETag does not match any of the values provided
	IfNoneMatch *string `json:"if-none-match,omitempty"`

	// IfModifiedSince Only return the file if it has been modified after the given date
	IfModifiedSince *RFC2822Date `json:"if-modified-since,omitempty"`

	// IfUnmodifiedSince Only return the file if it has not been modified after the given date
	IfUnmodifiedSince *RFC2822Date `json:"if-unmodified-since,omitempty"`

	// Range Range of bytes to retrieve from the file. Format: bytes=start-end
	Range *string `json:"Range,omitempty"`
}

// UploadFilesMultipartRequestBody defines body for UploadFiles for multipart/form-data ContentType.
type UploadFilesMultipartRequestBody UploadFilesMultipartBody

// ReplaceFileMultipartRequestBody defines body for ReplaceFile for multipart/form-data ContentType.
type ReplaceFileMultipartRequestBody ReplaceFileMultipartBody
