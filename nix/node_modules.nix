{ pkgs, nix-filter }:
let
  node_modules = pkgs.stdenv.mkDerivation {
    version = "0.0.0-dev";

    pname = "node_modules";

    nativeBuildInputs = with pkgs; [
      pnpm_10
      cacert
      nodejs
    ];

    src = nix-filter.lib.filter {
      root = ./../.;
      include = [
        ./../.npmrc
        ./../pnpm-workspace.yaml
        # find . -name package.json | grep -v node_modules | grep -v deprecated
        ./../package.json
        ./../docs/package.json
        ./../dashboard/package.json
        # find . -name pnpm-lock.yaml | grep -v node_modules | grep -v deprecated
        ./../pnpm-lock.yaml
      ];
    };

    buildPhase = ''
      pnpm --version
      pnpm install --frozen-lockfile
    '';

    installPhase = ''
      mkdir -p $out/{docs,dashboard}
      cp -r node_modules $out/node_modules
      cp -r docs/node_modules $out/docs/node_modules
      cp -r dashboard/node_modules $out/dashboard/node_modules
    '';
  };

  mkNodeDevShell = args:
    let
      defaultArgs = {
        buildInputs = with pkgs; [
          nodejs
          pnpm_10
        ];

        shellHook = ''
          CUR_DIR=$(pwd)
          PRJ_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
          cd "$PRJ_ROOT"

          for dir in . dashboard docs; do
            rm -rf $dir/node_modules
            cp -r ${node_modules}/$dir/node_modules $dir/node_modules
          done

          cd "$CUR_DIR"
        '';
      };
      mergedArgs = defaultArgs // args // {
        shellHook = defaultArgs.shellHook + (args.shellHook or "");
      };
    in
    pkgs.mkShell mergedArgs;
in
{
  inherit node_modules mkNodeDevShell;
}

