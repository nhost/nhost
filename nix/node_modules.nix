{ pkgs, nix-filter }:
let
  node_modules = pkgs.stdenv.mkDerivation {
    version = "0.0.0-dev";

    pname = "node_modules";

    nativeBuildInputs = with pkgs; [
      pnpm_10
      cacert
      nodejs
    ];

    src = nix-filter.lib.filter {
      root = ./../.;
      include = [
        ./../.npmrc
        ./../pnpm-workspace.yaml
        # find . -name package.json | grep -v node_modules | grep -v deprecated
        ./../package.json
        ./../docs/package.json
        ./../dashboard/package.json
        # find . -name pnpm-lock.yaml | grep -v node_modules | grep -v deprecated
        ./../pnpm-lock.yaml
      ];
    };

    buildPhase = ''
      pnpm --version
      pnpm install --frozen-lockfile
    '';

    installPhase = ''
      mkdir -p $out
      cp package.json $out/package.json
      cp pnpm-lock.yaml $out/pnpm-lock.yaml
      cp -r node_modules $out/node_modules

      for dir in dashboard docs; do
        mkdir -p $out/$dir
        cp -r $dir/node_modules $out/$dir/node_modules
        cp $dir/package.json $out/$dir/package.json
      done
    '';
  };

  playwright-browsers = pkgs.stdenv.mkDerivation {
    version = "0.0.0-dev";

    src = nix-filter.lib.filter {
      root = ./../.;
      include = [
        ./../package.json
      ];
    };

    pname = "playwright-browsers";

    nativeBuildInputs = with pkgs; [
      pnpm_10
      cacert
      nodejs
      node_modules
    ];

    configPhase = ''
    '';

    buildPhase = ''
      export PLAYWRIGHT_BROWSERS_PATH=$TMPDIR/playwright-browsers
      cd ${node_modules}/dashboard
      pnpm playwright install chrome --with-deps
    '';

    installPhase = ''
      mkdir -p $out
      cp -r $PLAYWRIGHT_BROWSERS_PATH $out/playwright-browsers
    '';
  };

  mkNodeDevShell = args:
    let
      defaultArgs = {
        buildInputs = with pkgs; [
          nodejs
          pnpm_10
        ];

        env = {
          PLAYWRIGHT_BROWSERS_PATH = "${playwright-browsers}/playwright-browsers";
        };

        shellHook = ''
          CUR_DIR=$(pwd)
          PRJ_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
          cd "$PRJ_ROOT"

          for dir in . dashboard docs; do
            rm -rf $dir/node_modules
            cp -r ${node_modules}/$dir/node_modules $dir/node_modules
          done

          cd "$CUR_DIR"
        '';
      };
      mergedArgs = defaultArgs // args // {
        shellHook = defaultArgs.shellHook + (args.shellHook or "");
      };
    in
    pkgs.mkShell mergedArgs;
in
{
  inherit node_modules mkNodeDevShell;
}

